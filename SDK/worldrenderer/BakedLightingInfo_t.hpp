// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif





namespace CS2 {
	namespace worldrenderer {
		class BakedShadowAssignment_t;
	}
}


using namespace GlobalTypes;
namespace CS2 {
	namespace worldrenderer {
		class BakedLightingInfo_t  {
		public:
			uint32_t m_nLightmapVersionNumber; // 0x0 | Schema_Builtin | Size: 0x4
			uint32_t m_nLightmapGameVersionNumber; // 0x4 | Schema_Builtin | Size: 0x4
			GlobalTypes::Vector2D m_vLightmapUvScale; // 0x8 | Schema_Atomic | Size: 0x8
			bool m_bHasLightmaps; // 0x10 | Schema_Builtin | Size: 0x1
			bool m_bBakedShadowsGamma20; // 0x11 | Schema_Builtin | Size: 0x1
			bool m_bCompressionEnabled; // 0x12 | Schema_Builtin | Size: 0x1
			bool m_bSHLightmaps; // 0x13 | Schema_Builtin | Size: 0x1
			uint8_t m_nChartPackIterations; // 0x14 | Schema_Builtin | Size: 0x1
			uint8_t m_nVradQuality; // 0x15 | Schema_Builtin | Size: 0x1
			S2_PAD(0x2);
			GlobalTypes::CUtlVector<GlobalTypes::CStrongHandle<resourcesystem::InfoForResourceTypeCTextureBase>> m_lightMaps; // 0x18 | Schema_Atomic | Size: 0x18
			// char  m_lightMaps[0x18]; // 0x18 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector<worldrenderer::BakedLightingInfo_t::BakedShadowAssignment_t> m_bakedShadows; // 0x30 | Schema_Atomic | Size: 0x18
			// char  m_bakedShadows[0x18]; // 0x30 | Schema_Atomic | Size: 0x18
		};
		static_assert(offsetof(CS2::worldrenderer::BakedLightingInfo_t, m_nLightmapVersionNumber) == 0x0, "m_nLightmapVersionNumber in BakedLightingInfo_t should be at offset 0x0");
		static_assert(offsetof(CS2::worldrenderer::BakedLightingInfo_t, m_nLightmapGameVersionNumber) == 0x4, "m_nLightmapGameVersionNumber in BakedLightingInfo_t should be at offset 0x4");
		static_assert(offsetof(CS2::worldrenderer::BakedLightingInfo_t, m_vLightmapUvScale) == 0x8, "m_vLightmapUvScale in BakedLightingInfo_t should be at offset 0x8");
		static_assert(offsetof(CS2::worldrenderer::BakedLightingInfo_t, m_bHasLightmaps) == 0x10, "m_bHasLightmaps in BakedLightingInfo_t should be at offset 0x10");
		static_assert(offsetof(CS2::worldrenderer::BakedLightingInfo_t, m_bBakedShadowsGamma20) == 0x11, "m_bBakedShadowsGamma20 in BakedLightingInfo_t should be at offset 0x11");
		static_assert(offsetof(CS2::worldrenderer::BakedLightingInfo_t, m_bCompressionEnabled) == 0x12, "m_bCompressionEnabled in BakedLightingInfo_t should be at offset 0x12");
		static_assert(offsetof(CS2::worldrenderer::BakedLightingInfo_t, m_bSHLightmaps) == 0x13, "m_bSHLightmaps in BakedLightingInfo_t should be at offset 0x13");
		static_assert(offsetof(CS2::worldrenderer::BakedLightingInfo_t, m_nChartPackIterations) == 0x14, "m_nChartPackIterations in BakedLightingInfo_t should be at offset 0x14");
		static_assert(offsetof(CS2::worldrenderer::BakedLightingInfo_t, m_nVradQuality) == 0x15, "m_nVradQuality in BakedLightingInfo_t should be at offset 0x15");
		static_assert(offsetof(CS2::worldrenderer::BakedLightingInfo_t, m_lightMaps) == 0x18, "m_lightMaps in BakedLightingInfo_t should be at offset 0x18");
		static_assert(offsetof(CS2::worldrenderer::BakedLightingInfo_t, m_bakedShadows) == 0x30, "m_bakedShadows in BakedLightingInfo_t should be at offset 0x30");
		static_assert(sizeof(CS2::worldrenderer::BakedLightingInfo_t) == 0x48, "BakedLightingInfo_t size should be 0x48");
	}
}
