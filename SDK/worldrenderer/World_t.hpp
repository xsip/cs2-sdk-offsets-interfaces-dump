// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/worldrenderer/WorldBuilderParams_t.hpp>
#include <SDK/worldrenderer/BakedLightingInfo_t.hpp>



namespace CS2 {
	namespace worldrenderer {
		class NodeData_t;
	}
}


using namespace GlobalTypes;
namespace CS2 {
	namespace worldrenderer {
		class World_t  {
		public:
			worldrenderer::WorldBuilderParams_t m_builderParams; // 0x0 | Schema_DeclaredClass | Size: 0x60
			GlobalTypes::CUtlVector< worldrenderer::NodeData_t > m_worldNodes; // 0x60 | Schema_Atomic | Size: 0x18
			// char  m_worldNodes[0x18]; // 0x60 | Schema_Atomic | Size: 0x18
			worldrenderer::BakedLightingInfo_t m_worldLightingInfo; // 0x78 | Schema_DeclaredClass | Size: 0x48
			GlobalTypes::CUtlVector< GlobalTypes::CStrongHandleCopyable< InfoForResourceTypeCEntityLump > > m_entityLumps; // 0xc0 | Schema_Atomic | Size: 0x18
			// char  m_entityLumps[0x18]; // 0xc0 | Schema_Atomic | Size: 0x18
		};
		static_assert(offsetof(CS2::worldrenderer::World_t, m_builderParams) == 0x0, "m_builderParams in World_t should be at offset 0x0");
		static_assert(offsetof(CS2::worldrenderer::World_t, m_worldNodes) == 0x60, "m_worldNodes in World_t should be at offset 0x60");
		static_assert(offsetof(CS2::worldrenderer::World_t, m_worldLightingInfo) == 0x78, "m_worldLightingInfo in World_t should be at offset 0x78");
		static_assert(offsetof(CS2::worldrenderer::World_t, m_entityLumps) == 0xC0, "m_entityLumps in World_t should be at offset 0xC0");
		static_assert(sizeof(CS2::worldrenderer::World_t) == 0xD8, "World_t size should be 0xD8");
	}
}
