// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/worldrenderer/ObjectTypeFlags_t.hpp>



namespace CS2 {
	namespace worldrenderer {
		class AggregateMeshInfo_t;
		class AggregateLODSetup_t;
	}
}


using namespace GlobalTypes;
namespace CS2 {
	namespace worldrenderer {
		class AggregateSceneObject_t  {
		public:
			worldrenderer::ObjectTypeFlags_t m_allFlags; // 0x0 | Schema_DeclaredEnum | Size: 0x4
			worldrenderer::ObjectTypeFlags_t m_anyFlags; // 0x4 | Schema_DeclaredEnum | Size: 0x4
			int16_t m_nLayer; // 0x8 | Schema_Builtin | Size: 0x2
			int16_t m_instanceStream; // 0xa | Schema_Builtin | Size: 0x2
			int16_t m_vertexAlbedoStream; // 0xc | Schema_Builtin | Size: 0x2
			S2_PAD(0x2);
			GlobalTypes::CUtlVector<worldrenderer::AggregateMeshInfo_t> m_aggregateMeshes; // 0x10 | Schema_Atomic | Size: 0x18
			// char  m_aggregateMeshes[0x18]; // 0x10 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector<worldrenderer::AggregateLODSetup_t> m_lodSetups; // 0x28 | Schema_Atomic | Size: 0x18
			// char  m_lodSetups[0x18]; // 0x28 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector< uint16 > m_visClusterMembership; // 0x40 | Schema_Atomic | Size: 0x18
			// char  m_visClusterMembership[0x18]; // 0x40 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector<GlobalTypes::matrix3x4_t> m_fragmentTransforms; // 0x58 | Schema_Atomic | Size: 0x18
			// char  m_fragmentTransforms[0x18]; // 0x58 | Schema_Atomic | Size: 0x18
			// GlobalTypes::CStrongHandle<resourcesystem::InfoForResourceTypeCModel> m_renderableModel; // 0x70 | Schema_Atomic | Size: 0x8
			char  m_renderableModel[0x8]; // 0x70 | Schema_Atomic | Size: 0x8
		};
		static_assert(offsetof(CS2::worldrenderer::AggregateSceneObject_t, m_allFlags) == 0x0, "m_allFlags in AggregateSceneObject_t should be at offset 0x0");
		static_assert(offsetof(CS2::worldrenderer::AggregateSceneObject_t, m_anyFlags) == 0x4, "m_anyFlags in AggregateSceneObject_t should be at offset 0x4");
		static_assert(offsetof(CS2::worldrenderer::AggregateSceneObject_t, m_nLayer) == 0x8, "m_nLayer in AggregateSceneObject_t should be at offset 0x8");
		static_assert(offsetof(CS2::worldrenderer::AggregateSceneObject_t, m_instanceStream) == 0xA, "m_instanceStream in AggregateSceneObject_t should be at offset 0xA");
		static_assert(offsetof(CS2::worldrenderer::AggregateSceneObject_t, m_vertexAlbedoStream) == 0xC, "m_vertexAlbedoStream in AggregateSceneObject_t should be at offset 0xC");
		static_assert(offsetof(CS2::worldrenderer::AggregateSceneObject_t, m_aggregateMeshes) == 0x10, "m_aggregateMeshes in AggregateSceneObject_t should be at offset 0x10");
		static_assert(offsetof(CS2::worldrenderer::AggregateSceneObject_t, m_lodSetups) == 0x28, "m_lodSetups in AggregateSceneObject_t should be at offset 0x28");
		static_assert(offsetof(CS2::worldrenderer::AggregateSceneObject_t, m_visClusterMembership) == 0x40, "m_visClusterMembership in AggregateSceneObject_t should be at offset 0x40");
		static_assert(offsetof(CS2::worldrenderer::AggregateSceneObject_t, m_fragmentTransforms) == 0x58, "m_fragmentTransforms in AggregateSceneObject_t should be at offset 0x58");
		static_assert(offsetof(CS2::worldrenderer::AggregateSceneObject_t, m_renderableModel) == 0x70, "m_renderableModel in AggregateSceneObject_t should be at offset 0x70");
		static_assert(sizeof(CS2::worldrenderer::AggregateSceneObject_t) == 0x78, "AggregateSceneObject_t size should be 0x78");
	}
}
