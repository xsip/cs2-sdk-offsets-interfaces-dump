// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/mathlib_extended/AABB_t.hpp>
#include <SDK/worldrenderer/ObjectTypeFlags_t.hpp>



namespace CS2 {
	namespace worldrenderer {
		class ClutterTile_t;
	}
}


using namespace GlobalTypes;
namespace CS2 {
	namespace worldrenderer {
		class ClutterSceneObject_t  {
		public:
			mathlib_extended::AABB_t m_Bounds; // 0x0 | Schema_DeclaredClass | Size: 0x18
			worldrenderer::ObjectTypeFlags_t m_flags; // 0x18 | Schema_DeclaredEnum | Size: 0x4
			int16_t m_nLayer; // 0x1c | Schema_Builtin | Size: 0x2
			S2_PAD(0x2);
			GlobalTypes::CUtlVector<GlobalTypes::Vector> m_instancePositions; // 0x20 | Schema_Atomic | Size: 0x18
			// char  m_instancePositions[0x18]; // 0x20 | Schema_Atomic | Size: 0x18
			S2_PAD(0x18);
			GlobalTypes::CUtlVector< float32 > m_instanceScales; // 0x50 | Schema_Atomic | Size: 0x18
			// char  m_instanceScales[0x18]; // 0x50 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector<GlobalTypes::Color> m_instanceTintSrgb; // 0x68 | Schema_Atomic | Size: 0x18
			// char  m_instanceTintSrgb[0x18]; // 0x68 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector<worldrenderer::ClutterTile_t> m_tiles; // 0x80 | Schema_Atomic | Size: 0x18
			// char  m_tiles[0x18]; // 0x80 | Schema_Atomic | Size: 0x18
			// GlobalTypes::CStrongHandle<resourcesystem::InfoForResourceTypeCModel> m_renderableModel; // 0x98 | Schema_Atomic | Size: 0x8
			char  m_renderableModel[0x8]; // 0x98 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlStringToken m_materialGroup; // 0xa0 | Schema_Atomic | Size: 0x4
			float32 m_flBeginCullSize; // 0xa4 | Schema_Builtin | Size: 0x4
			float32 m_flEndCullSize; // 0xa8 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4); // End padding
		};
		static_assert(offsetof(CS2::worldrenderer::ClutterSceneObject_t, m_Bounds) == 0x0, "m_Bounds in ClutterSceneObject_t should be at offset 0x0");
		static_assert(offsetof(CS2::worldrenderer::ClutterSceneObject_t, m_flags) == 0x18, "m_flags in ClutterSceneObject_t should be at offset 0x18");
		static_assert(offsetof(CS2::worldrenderer::ClutterSceneObject_t, m_nLayer) == 0x1C, "m_nLayer in ClutterSceneObject_t should be at offset 0x1C");
		static_assert(offsetof(CS2::worldrenderer::ClutterSceneObject_t, m_instancePositions) == 0x20, "m_instancePositions in ClutterSceneObject_t should be at offset 0x20");
		static_assert(offsetof(CS2::worldrenderer::ClutterSceneObject_t, m_instanceScales) == 0x50, "m_instanceScales in ClutterSceneObject_t should be at offset 0x50");
		static_assert(offsetof(CS2::worldrenderer::ClutterSceneObject_t, m_instanceTintSrgb) == 0x68, "m_instanceTintSrgb in ClutterSceneObject_t should be at offset 0x68");
		static_assert(offsetof(CS2::worldrenderer::ClutterSceneObject_t, m_tiles) == 0x80, "m_tiles in ClutterSceneObject_t should be at offset 0x80");
		static_assert(offsetof(CS2::worldrenderer::ClutterSceneObject_t, m_renderableModel) == 0x98, "m_renderableModel in ClutterSceneObject_t should be at offset 0x98");
		static_assert(offsetof(CS2::worldrenderer::ClutterSceneObject_t, m_materialGroup) == 0xA0, "m_materialGroup in ClutterSceneObject_t should be at offset 0xA0");
		static_assert(offsetof(CS2::worldrenderer::ClutterSceneObject_t, m_flBeginCullSize) == 0xA4, "m_flBeginCullSize in ClutterSceneObject_t should be at offset 0xA4");
		static_assert(offsetof(CS2::worldrenderer::ClutterSceneObject_t, m_flEndCullSize) == 0xA8, "m_flEndCullSize in ClutterSceneObject_t should be at offset 0xA8");
		static_assert(sizeof(CS2::worldrenderer::ClutterSceneObject_t) == 0xB0, "ClutterSceneObject_t size should be 0xB0");
	}
}
