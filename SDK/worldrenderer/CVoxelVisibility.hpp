// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/worldrenderer/VoxelVisBlockOffset_t.hpp>





using namespace GlobalTypes;
namespace CS2 {
	namespace worldrenderer {
		class CVoxelVisibility  {
		public:
			S2_PAD(0x40);
			uint32_t m_nBaseClusterCount; // 0x40 | Schema_Builtin | Size: 0x4
			uint32_t m_nPVSBytesPerCluster; // 0x44 | Schema_Builtin | Size: 0x4
			GlobalTypes::Vector m_vMinBounds; // 0x48 | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vMaxBounds; // 0x54 | Schema_Atomic | Size: 0xc
			float32 m_flGridSize; // 0x60 | Schema_Builtin | Size: 0x4
			uint32_t m_nSkyVisibilityCluster; // 0x64 | Schema_Builtin | Size: 0x4
			uint32_t m_nSunVisibilityCluster; // 0x68 | Schema_Builtin | Size: 0x4
			worldrenderer::VoxelVisBlockOffset_t m_NodeBlock; // 0x6c | Schema_DeclaredClass | Size: 0x8
			worldrenderer::VoxelVisBlockOffset_t m_RegionBlock; // 0x74 | Schema_DeclaredClass | Size: 0x8
			worldrenderer::VoxelVisBlockOffset_t m_EnclosedClusterListBlock; // 0x7c | Schema_DeclaredClass | Size: 0x8
			worldrenderer::VoxelVisBlockOffset_t m_EnclosedClustersBlock; // 0x84 | Schema_DeclaredClass | Size: 0x8
			worldrenderer::VoxelVisBlockOffset_t m_MasksBlock; // 0x8c | Schema_DeclaredClass | Size: 0x8
			worldrenderer::VoxelVisBlockOffset_t m_nVisBlocks; // 0x94 | Schema_DeclaredClass | Size: 0x8
			S2_PAD(0x4); // End padding
		};
		static_assert(offsetof(CS2::worldrenderer::CVoxelVisibility, m_nBaseClusterCount) == 0x40, "m_nBaseClusterCount in CVoxelVisibility should be at offset 0x40");
		static_assert(offsetof(CS2::worldrenderer::CVoxelVisibility, m_nPVSBytesPerCluster) == 0x44, "m_nPVSBytesPerCluster in CVoxelVisibility should be at offset 0x44");
		static_assert(offsetof(CS2::worldrenderer::CVoxelVisibility, m_vMinBounds) == 0x48, "m_vMinBounds in CVoxelVisibility should be at offset 0x48");
		static_assert(offsetof(CS2::worldrenderer::CVoxelVisibility, m_vMaxBounds) == 0x54, "m_vMaxBounds in CVoxelVisibility should be at offset 0x54");
		static_assert(offsetof(CS2::worldrenderer::CVoxelVisibility, m_flGridSize) == 0x60, "m_flGridSize in CVoxelVisibility should be at offset 0x60");
		static_assert(offsetof(CS2::worldrenderer::CVoxelVisibility, m_nSkyVisibilityCluster) == 0x64, "m_nSkyVisibilityCluster in CVoxelVisibility should be at offset 0x64");
		static_assert(offsetof(CS2::worldrenderer::CVoxelVisibility, m_nSunVisibilityCluster) == 0x68, "m_nSunVisibilityCluster in CVoxelVisibility should be at offset 0x68");
		static_assert(offsetof(CS2::worldrenderer::CVoxelVisibility, m_NodeBlock) == 0x6C, "m_NodeBlock in CVoxelVisibility should be at offset 0x6C");
		static_assert(offsetof(CS2::worldrenderer::CVoxelVisibility, m_RegionBlock) == 0x74, "m_RegionBlock in CVoxelVisibility should be at offset 0x74");
		static_assert(offsetof(CS2::worldrenderer::CVoxelVisibility, m_EnclosedClusterListBlock) == 0x7C, "m_EnclosedClusterListBlock in CVoxelVisibility should be at offset 0x7C");
		static_assert(offsetof(CS2::worldrenderer::CVoxelVisibility, m_EnclosedClustersBlock) == 0x84, "m_EnclosedClustersBlock in CVoxelVisibility should be at offset 0x84");
		static_assert(offsetof(CS2::worldrenderer::CVoxelVisibility, m_MasksBlock) == 0x8C, "m_MasksBlock in CVoxelVisibility should be at offset 0x8C");
		static_assert(offsetof(CS2::worldrenderer::CVoxelVisibility, m_nVisBlocks) == 0x94, "m_nVisBlocks in CVoxelVisibility should be at offset 0x94");
		static_assert(sizeof(CS2::worldrenderer::CVoxelVisibility) == 0xA0, "CVoxelVisibility size should be 0xA0");
	}
}
