// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif





namespace CS2 {
	namespace modellib {
		class RenderInputLayoutField_t;
	}
}


using namespace GlobalTypes;
namespace CS2 {
	namespace worldrenderer {
		class WorldNodeOnDiskBufferData_t  {
		public:
			int32_t m_nElementCount; // 0x0 | Schema_Builtin | Size: 0x4
			int32_t m_nElementSizeInBytes; // 0x4 | Schema_Builtin | Size: 0x4
			GlobalTypes::CUtlVector< modellib::RenderInputLayoutField_t > m_inputLayoutFields; // 0x8 | Schema_Atomic | Size: 0x18
			// char  m_inputLayoutFields[0x18]; // 0x8 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector< uint8 > m_pData; // 0x20 | Schema_Atomic | Size: 0x18
			// char  m_pData[0x18]; // 0x20 | Schema_Atomic | Size: 0x18
		};
		static_assert(offsetof(CS2::worldrenderer::WorldNodeOnDiskBufferData_t, m_nElementCount) == 0x0, "m_nElementCount in WorldNodeOnDiskBufferData_t should be at offset 0x0");
		static_assert(offsetof(CS2::worldrenderer::WorldNodeOnDiskBufferData_t, m_nElementSizeInBytes) == 0x4, "m_nElementSizeInBytes in WorldNodeOnDiskBufferData_t should be at offset 0x4");
		static_assert(offsetof(CS2::worldrenderer::WorldNodeOnDiskBufferData_t, m_inputLayoutFields) == 0x8, "m_inputLayoutFields in WorldNodeOnDiskBufferData_t should be at offset 0x8");
		static_assert(offsetof(CS2::worldrenderer::WorldNodeOnDiskBufferData_t, m_pData) == 0x20, "m_pData in WorldNodeOnDiskBufferData_t should be at offset 0x20");
		static_assert(sizeof(CS2::worldrenderer::WorldNodeOnDiskBufferData_t) == 0x38, "WorldNodeOnDiskBufferData_t size should be 0x38");
	}
}
