// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>




namespace CS2 {
	namespace worldrenderer {
		class NodeData_t  {
		public:
			int32_t m_nParent; // 0x0 | Schema_Builtin | Size: 0x4
			GlobalTypes::Vector m_vOrigin; // 0x4 | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vMinBounds; // 0x10 | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vMaxBounds; // 0x1c | Schema_Atomic | Size: 0xc
			float32 m_flMinimumDistance; // 0x28 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4);
			// GlobalTypes::CUtlVector< int32 > m_ChildNodeIndices; // 0x30 | Schema_Atomic | Size: 0x18
			char  m_ChildNodeIndices[0x18]; // 0x30 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlString m_worldNodePrefix; // 0x48 | Schema_Atomic | Size: 0x8
		};
		static_assert(offsetof(CS2::worldrenderer::NodeData_t, m_nParent) == 0x0, "m_nParent in NodeData_t should be at offset 0x0");
		static_assert(offsetof(CS2::worldrenderer::NodeData_t, m_vOrigin) == 0x4, "m_vOrigin in NodeData_t should be at offset 0x4");
		static_assert(offsetof(CS2::worldrenderer::NodeData_t, m_vMinBounds) == 0x10, "m_vMinBounds in NodeData_t should be at offset 0x10");
		static_assert(offsetof(CS2::worldrenderer::NodeData_t, m_vMaxBounds) == 0x1C, "m_vMaxBounds in NodeData_t should be at offset 0x1C");
		static_assert(offsetof(CS2::worldrenderer::NodeData_t, m_flMinimumDistance) == 0x28, "m_flMinimumDistance in NodeData_t should be at offset 0x28");
		static_assert(offsetof(CS2::worldrenderer::NodeData_t, m_ChildNodeIndices) == 0x30, "m_ChildNodeIndices in NodeData_t should be at offset 0x30");
		static_assert(offsetof(CS2::worldrenderer::NodeData_t, m_worldNodePrefix) == 0x48, "m_worldNodePrefix in NodeData_t should be at offset 0x48");
		static_assert(sizeof(CS2::worldrenderer::NodeData_t) == 0x50, "NodeData_t size should be 0x50");
	}
}
