// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>

#include <SDK/worldrenderer/ObjectTypeFlags_t.hpp>
#include <SDK/worldrenderer/AggregateInstanceStream_t.hpp>



namespace CS2 {
	namespace worldrenderer {
		class AggregateMeshInfo_t  {
		public:
			uint32_t m_nVisClusterMemberOffset; // 0x0 | Schema_Builtin | Size: 0x4
			uint8_t m_nVisClusterMemberCount; // 0x4 | Schema_Builtin | Size: 0x1
			bool m_bHasTransform; // 0x5 | Schema_Builtin | Size: 0x1
			uint8_t m_nLODGroupMask; // 0x6 | Schema_Builtin | Size: 0x1
			S2_PAD(0x1);
			int16_t m_nDrawCallIndex; // 0x8 | Schema_Builtin | Size: 0x2
			int16_t m_nLODSetupIndex; // 0xa | Schema_Builtin | Size: 0x2
			GlobalTypes::Color m_vTintColor; // 0xc | Schema_Atomic | Size: 0x4
			worldrenderer::ObjectTypeFlags_t m_objectFlags; // 0x10 | Schema_DeclaredEnum | Size: 0x4
			int32_t m_nLightProbeVolumePrecomputedHandshake; // 0x14 | Schema_Builtin | Size: 0x4
			uint32_t m_nInstanceStreamOffset; // 0x18 | Schema_Builtin | Size: 0x4
			uint32_t m_nVertexAlbedoStreamOffset; // 0x1c | Schema_Builtin | Size: 0x4
			worldrenderer::AggregateInstanceStream_t m_instanceStreams; // 0x20 | Schema_DeclaredEnum | Size: 0x1
			S2_PAD(0x3); // End padding
		};
		static_assert(offsetof(CS2::worldrenderer::AggregateMeshInfo_t, m_nVisClusterMemberOffset) == 0x0, "m_nVisClusterMemberOffset in AggregateMeshInfo_t should be at offset 0x0");
		static_assert(offsetof(CS2::worldrenderer::AggregateMeshInfo_t, m_nVisClusterMemberCount) == 0x4, "m_nVisClusterMemberCount in AggregateMeshInfo_t should be at offset 0x4");
		static_assert(offsetof(CS2::worldrenderer::AggregateMeshInfo_t, m_bHasTransform) == 0x5, "m_bHasTransform in AggregateMeshInfo_t should be at offset 0x5");
		static_assert(offsetof(CS2::worldrenderer::AggregateMeshInfo_t, m_nLODGroupMask) == 0x6, "m_nLODGroupMask in AggregateMeshInfo_t should be at offset 0x6");
		static_assert(offsetof(CS2::worldrenderer::AggregateMeshInfo_t, m_nDrawCallIndex) == 0x8, "m_nDrawCallIndex in AggregateMeshInfo_t should be at offset 0x8");
		static_assert(offsetof(CS2::worldrenderer::AggregateMeshInfo_t, m_nLODSetupIndex) == 0xA, "m_nLODSetupIndex in AggregateMeshInfo_t should be at offset 0xA");
		static_assert(offsetof(CS2::worldrenderer::AggregateMeshInfo_t, m_vTintColor) == 0xC, "m_vTintColor in AggregateMeshInfo_t should be at offset 0xC");
		static_assert(offsetof(CS2::worldrenderer::AggregateMeshInfo_t, m_objectFlags) == 0x10, "m_objectFlags in AggregateMeshInfo_t should be at offset 0x10");
		static_assert(offsetof(CS2::worldrenderer::AggregateMeshInfo_t, m_nLightProbeVolumePrecomputedHandshake) == 0x14, "m_nLightProbeVolumePrecomputedHandshake in AggregateMeshInfo_t should be at offset 0x14");
		static_assert(offsetof(CS2::worldrenderer::AggregateMeshInfo_t, m_nInstanceStreamOffset) == 0x18, "m_nInstanceStreamOffset in AggregateMeshInfo_t should be at offset 0x18");
		static_assert(offsetof(CS2::worldrenderer::AggregateMeshInfo_t, m_nVertexAlbedoStreamOffset) == 0x1C, "m_nVertexAlbedoStreamOffset in AggregateMeshInfo_t should be at offset 0x1C");
		static_assert(offsetof(CS2::worldrenderer::AggregateMeshInfo_t, m_instanceStreams) == 0x20, "m_instanceStreams in AggregateMeshInfo_t should be at offset 0x20");
		static_assert(sizeof(CS2::worldrenderer::AggregateMeshInfo_t) == 0x24, "AggregateMeshInfo_t size should be 0x24");
	}
}
