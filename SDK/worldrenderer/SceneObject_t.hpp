// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/worldrenderer/ObjectTypeFlags_t.hpp>



namespace CS2 {
	namespace worldrenderer {
		class SceneObject_t  {
		public:
			uint32_t m_nObjectID; // 0x0 | Schema_Builtin | Size: 0x4
			GlobalTypes::Vector4D m_vTransform[3]; // 0x4 | Schema_FixedArray | Size: 0x30
			float32 m_flFadeStartDistance; // 0x34 | Schema_Builtin | Size: 0x4
			float32 m_flFadeEndDistance; // 0x38 | Schema_Builtin | Size: 0x4
			GlobalTypes::Vector4D m_vTintColor; // 0x3c | Schema_Atomic | Size: 0x10
			S2_PAD(0x4);
			GlobalTypes::CUtlString m_skin; // 0x50 | Schema_Atomic | Size: 0x8
			worldrenderer::ObjectTypeFlags_t m_nObjectTypeFlags; // 0x58 | Schema_DeclaredEnum | Size: 0x4
			GlobalTypes::Vector m_vLightingOrigin; // 0x5c | Schema_Atomic | Size: 0xc
			int16_t m_nOverlayRenderOrder; // 0x68 | Schema_Builtin | Size: 0x2
			int16_t m_nLODOverride; // 0x6a | Schema_Builtin | Size: 0x2
			int32_t m_nCubeMapPrecomputedHandshake; // 0x6c | Schema_Builtin | Size: 0x4
			int32_t m_nLightProbeVolumePrecomputedHandshake; // 0x70 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4);
			// GlobalTypes::CStrongHandle< resourcesystem::InfoForResourceTypeCModel > m_renderableModel; // 0x78 | Schema_Atomic | Size: 0x8
			char  m_renderableModel[0x8]; // 0x78 | Schema_Atomic | Size: 0x8
			// GlobalTypes::CStrongHandle< resourcesystem::InfoForResourceTypeCRenderMesh > m_renderable; // 0x80 | Schema_Atomic | Size: 0x8
			char  m_renderable[0x8]; // 0x80 | Schema_Atomic | Size: 0x8
		};
		static_assert(offsetof(CS2::worldrenderer::SceneObject_t, m_nObjectID) == 0x0, "m_nObjectID in SceneObject_t should be at offset 0x0");
		static_assert(offsetof(CS2::worldrenderer::SceneObject_t, m_vTransform) == 0x4, "m_vTransform in SceneObject_t should be at offset 0x4");
		static_assert(offsetof(CS2::worldrenderer::SceneObject_t, m_flFadeStartDistance) == 0x34, "m_flFadeStartDistance in SceneObject_t should be at offset 0x34");
		static_assert(offsetof(CS2::worldrenderer::SceneObject_t, m_flFadeEndDistance) == 0x38, "m_flFadeEndDistance in SceneObject_t should be at offset 0x38");
		static_assert(offsetof(CS2::worldrenderer::SceneObject_t, m_vTintColor) == 0x3C, "m_vTintColor in SceneObject_t should be at offset 0x3C");
		static_assert(offsetof(CS2::worldrenderer::SceneObject_t, m_skin) == 0x50, "m_skin in SceneObject_t should be at offset 0x50");
		static_assert(offsetof(CS2::worldrenderer::SceneObject_t, m_nObjectTypeFlags) == 0x58, "m_nObjectTypeFlags in SceneObject_t should be at offset 0x58");
		static_assert(offsetof(CS2::worldrenderer::SceneObject_t, m_vLightingOrigin) == 0x5C, "m_vLightingOrigin in SceneObject_t should be at offset 0x5C");
		static_assert(offsetof(CS2::worldrenderer::SceneObject_t, m_nOverlayRenderOrder) == 0x68, "m_nOverlayRenderOrder in SceneObject_t should be at offset 0x68");
		static_assert(offsetof(CS2::worldrenderer::SceneObject_t, m_nLODOverride) == 0x6A, "m_nLODOverride in SceneObject_t should be at offset 0x6A");
		static_assert(offsetof(CS2::worldrenderer::SceneObject_t, m_nCubeMapPrecomputedHandshake) == 0x6C, "m_nCubeMapPrecomputedHandshake in SceneObject_t should be at offset 0x6C");
		static_assert(offsetof(CS2::worldrenderer::SceneObject_t, m_nLightProbeVolumePrecomputedHandshake) == 0x70, "m_nLightProbeVolumePrecomputedHandshake in SceneObject_t should be at offset 0x70");
		static_assert(offsetof(CS2::worldrenderer::SceneObject_t, m_renderableModel) == 0x78, "m_renderableModel in SceneObject_t should be at offset 0x78");
		static_assert(offsetof(CS2::worldrenderer::SceneObject_t, m_renderable) == 0x80, "m_renderable in SceneObject_t should be at offset 0x80");
		static_assert(sizeof(CS2::worldrenderer::SceneObject_t) == 0x88, "SceneObject_t size should be 0x88");
	}
}
