// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/worldrenderer/BaseSceneObjectOverride_t.hpp>



namespace CS2 {
	namespace worldrenderer {
		class MaterialOverride_t : public CS2::worldrenderer::BaseSceneObjectOverride_t {
		public:
			uint32_t m_nSubSceneObject; // 0x4 | Schema_Builtin | Size: 0x4
			uint32_t m_nDrawCallIndex; // 0x8 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4);
			// GlobalTypes::CStrongHandle< resourcesystem::InfoForResourceTypeIMaterial2 > m_pMaterial; // 0x10 | Schema_Atomic | Size: 0x8
			char  m_pMaterial[0x8]; // 0x10 | Schema_Atomic | Size: 0x8
			GlobalTypes::Vector m_vLinearTintColor; // 0x18 | Schema_Atomic | Size: 0xc
			S2_PAD(0x4); // End padding
		};
		static_assert(offsetof(CS2::worldrenderer::MaterialOverride_t, m_nSubSceneObject) == 0x4, "m_nSubSceneObject in MaterialOverride_t should be at offset 0x4");
		static_assert(offsetof(CS2::worldrenderer::MaterialOverride_t, m_nDrawCallIndex) == 0x8, "m_nDrawCallIndex in MaterialOverride_t should be at offset 0x8");
		static_assert(offsetof(CS2::worldrenderer::MaterialOverride_t, m_pMaterial) == 0x10, "m_pMaterial in MaterialOverride_t should be at offset 0x10");
		static_assert(offsetof(CS2::worldrenderer::MaterialOverride_t, m_vLinearTintColor) == 0x18, "m_vLinearTintColor in MaterialOverride_t should be at offset 0x18");
		static_assert(sizeof(CS2::worldrenderer::MaterialOverride_t) == 0x28, "MaterialOverride_t size should be 0x28");
	}
}
