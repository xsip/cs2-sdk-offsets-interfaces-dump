// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif







using namespace GlobalTypes;
namespace CS2 {
	namespace soundsystem_lowlevel {
		class VMixDynamicsCompressorDesc_t  {
		public:
			float32 m_fldbOutputGain; // 0x0 | Schema_Builtin | Size: 0x4
			float32 m_fldbCompressionThreshold; // 0x4 | Schema_Builtin | Size: 0x4
			float32 m_fldbKneeWidth; // 0x8 | Schema_Builtin | Size: 0x4
			float32 m_flCompressionRatio; // 0xc | Schema_Builtin | Size: 0x4
			float32 m_flAttackTimeMS; // 0x10 | Schema_Builtin | Size: 0x4
			float32 m_flReleaseTimeMS; // 0x14 | Schema_Builtin | Size: 0x4
			float32 m_flRMSTimeMS; // 0x18 | Schema_Builtin | Size: 0x4
			float32 m_flWetMix; // 0x1c | Schema_Builtin | Size: 0x4
			bool m_bPeakMode; // 0x20 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3); // End padding
		};
		static_assert(offsetof(CS2::soundsystem_lowlevel::VMixDynamicsCompressorDesc_t, m_fldbOutputGain) == 0x0, "m_fldbOutputGain in VMixDynamicsCompressorDesc_t should be at offset 0x0");
		static_assert(offsetof(CS2::soundsystem_lowlevel::VMixDynamicsCompressorDesc_t, m_fldbCompressionThreshold) == 0x4, "m_fldbCompressionThreshold in VMixDynamicsCompressorDesc_t should be at offset 0x4");
		static_assert(offsetof(CS2::soundsystem_lowlevel::VMixDynamicsCompressorDesc_t, m_fldbKneeWidth) == 0x8, "m_fldbKneeWidth in VMixDynamicsCompressorDesc_t should be at offset 0x8");
		static_assert(offsetof(CS2::soundsystem_lowlevel::VMixDynamicsCompressorDesc_t, m_flCompressionRatio) == 0xC, "m_flCompressionRatio in VMixDynamicsCompressorDesc_t should be at offset 0xC");
		static_assert(offsetof(CS2::soundsystem_lowlevel::VMixDynamicsCompressorDesc_t, m_flAttackTimeMS) == 0x10, "m_flAttackTimeMS in VMixDynamicsCompressorDesc_t should be at offset 0x10");
		static_assert(offsetof(CS2::soundsystem_lowlevel::VMixDynamicsCompressorDesc_t, m_flReleaseTimeMS) == 0x14, "m_flReleaseTimeMS in VMixDynamicsCompressorDesc_t should be at offset 0x14");
		static_assert(offsetof(CS2::soundsystem_lowlevel::VMixDynamicsCompressorDesc_t, m_flRMSTimeMS) == 0x18, "m_flRMSTimeMS in VMixDynamicsCompressorDesc_t should be at offset 0x18");
		static_assert(offsetof(CS2::soundsystem_lowlevel::VMixDynamicsCompressorDesc_t, m_flWetMix) == 0x1C, "m_flWetMix in VMixDynamicsCompressorDesc_t should be at offset 0x1C");
		static_assert(offsetof(CS2::soundsystem_lowlevel::VMixDynamicsCompressorDesc_t, m_bPeakMode) == 0x20, "m_bPeakMode in VMixDynamicsCompressorDesc_t should be at offset 0x20");
		static_assert(sizeof(CS2::soundsystem_lowlevel::VMixDynamicsCompressorDesc_t) == 0x24, "VMixDynamicsCompressorDesc_t size should be 0x24");
	}
}
