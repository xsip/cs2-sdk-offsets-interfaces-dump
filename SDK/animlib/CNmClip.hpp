// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/animlib/CNmSyncTrack.hpp>
#include <SDK/animlib/CNmRootMotionData.hpp>



namespace CS2 {
	namespace animlib {
		class NmCompressionSettings_t;
		class NmFloatCurveCompressionSettings_t;
		class ModelSpaceSamplingChainLink_t;
	}
}


using namespace GlobalTypes;
namespace CS2 {
	namespace animlib {
		class CNmClip  {
		public:
			// GlobalTypes::CStrongHandle<resourcesystem::InfoForResourceTypeCNmSkeleton> m_skeleton; // 0x0 | Schema_Atomic | Size: 0x8
			char  m_skeleton[0x8]; // 0x0 | Schema_Atomic | Size: 0x8
			uint32_t m_nNumFrames; // 0x8 | Schema_Builtin | Size: 0x4
			float32 m_flDuration; // 0xc | Schema_Builtin | Size: 0x4
			GlobalTypes::CUtlBinaryBlock m_compressedPoseData; // 0x10 | Schema_Atomic | Size: 0x10
			GlobalTypes::CUtlVector<animlib::NmCompressionSettings_t> m_trackCompressionSettings; // 0x20 | Schema_Atomic | Size: 0x18
			// char  m_trackCompressionSettings[0x18]; // 0x20 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector< uint32 > m_compressedPoseOffsets; // 0x38 | Schema_Atomic | Size: 0x18
			// char  m_compressedPoseOffsets[0x18]; // 0x38 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector<GlobalTypes::CGlobalSymbol> m_floatCurveIDs; // 0x50 | Schema_Atomic | Size: 0x18
			// char  m_floatCurveIDs[0x18]; // 0x50 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector<animlib::NmFloatCurveCompressionSettings_t> m_floatCurveDefs; // 0x68 | Schema_Atomic | Size: 0x18
			// char  m_floatCurveDefs[0x18]; // 0x68 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector< uint16 > m_compressedFloatCurveData; // 0x80 | Schema_Atomic | Size: 0x18
			// char  m_compressedFloatCurveData[0x18]; // 0x80 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector< uint32 > m_compressedFloatCurveOffsets; // 0x98 | Schema_Atomic | Size: 0x18
			// char  m_compressedFloatCurveOffsets[0x18]; // 0x98 | Schema_Atomic | Size: 0x18
			S2_PAD(0x28);
			GlobalTypes::CUtlVectorFixedGrowable<animlib::CNmClip*> m_secondaryAnimations; // 0xd8 | Schema_Atomic | Size: 0x20
			// char  m_secondaryAnimations[0x20]; // 0xd8 | Schema_Atomic | Size: 0x20
			animlib::CNmSyncTrack m_syncTrack; // 0xf8 | Schema_DeclaredClass | Size: 0xb0
			S2_PAD(0x8);
			animlib::CNmRootMotionData m_rootMotion; // 0x1b0 | Schema_DeclaredClass | Size: 0x50
			bool m_bIsAdditive; // 0x200 | Schema_Builtin | Size: 0x1
			S2_PAD(0x7);
			GlobalTypes::CUtlVector<animlib::CNmClip::ModelSpaceSamplingChainLink_t> m_modelSpaceSamplingChain; // 0x208 | Schema_Atomic | Size: 0x18
			// char  m_modelSpaceSamplingChain[0x18]; // 0x208 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector< int32 > m_modelSpaceBoneSamplingIndices; // 0x220 | Schema_Atomic | Size: 0x18
			// char  m_modelSpaceBoneSamplingIndices[0x18]; // 0x220 | Schema_Atomic | Size: 0x18
			S2_PAD(0x8); // End padding
		};
		static_assert(offsetof(CS2::animlib::CNmClip, m_skeleton) == 0x0, "m_skeleton in CNmClip should be at offset 0x0");
		static_assert(offsetof(CS2::animlib::CNmClip, m_nNumFrames) == 0x8, "m_nNumFrames in CNmClip should be at offset 0x8");
		static_assert(offsetof(CS2::animlib::CNmClip, m_flDuration) == 0xC, "m_flDuration in CNmClip should be at offset 0xC");
		static_assert(offsetof(CS2::animlib::CNmClip, m_compressedPoseData) == 0x10, "m_compressedPoseData in CNmClip should be at offset 0x10");
		static_assert(offsetof(CS2::animlib::CNmClip, m_trackCompressionSettings) == 0x20, "m_trackCompressionSettings in CNmClip should be at offset 0x20");
		static_assert(offsetof(CS2::animlib::CNmClip, m_compressedPoseOffsets) == 0x38, "m_compressedPoseOffsets in CNmClip should be at offset 0x38");
		static_assert(offsetof(CS2::animlib::CNmClip, m_floatCurveIDs) == 0x50, "m_floatCurveIDs in CNmClip should be at offset 0x50");
		static_assert(offsetof(CS2::animlib::CNmClip, m_floatCurveDefs) == 0x68, "m_floatCurveDefs in CNmClip should be at offset 0x68");
		static_assert(offsetof(CS2::animlib::CNmClip, m_compressedFloatCurveData) == 0x80, "m_compressedFloatCurveData in CNmClip should be at offset 0x80");
		static_assert(offsetof(CS2::animlib::CNmClip, m_compressedFloatCurveOffsets) == 0x98, "m_compressedFloatCurveOffsets in CNmClip should be at offset 0x98");
		static_assert(offsetof(CS2::animlib::CNmClip, m_secondaryAnimations) == 0xD8, "m_secondaryAnimations in CNmClip should be at offset 0xD8");
		static_assert(offsetof(CS2::animlib::CNmClip, m_syncTrack) == 0xF8, "m_syncTrack in CNmClip should be at offset 0xF8");
		static_assert(offsetof(CS2::animlib::CNmClip, m_rootMotion) == 0x1B0, "m_rootMotion in CNmClip should be at offset 0x1B0");
		static_assert(offsetof(CS2::animlib::CNmClip, m_bIsAdditive) == 0x200, "m_bIsAdditive in CNmClip should be at offset 0x200");
		static_assert(offsetof(CS2::animlib::CNmClip, m_modelSpaceSamplingChain) == 0x208, "m_modelSpaceSamplingChain in CNmClip should be at offset 0x208");
		static_assert(offsetof(CS2::animlib::CNmClip, m_modelSpaceBoneSamplingIndices) == 0x220, "m_modelSpaceBoneSamplingIndices in CNmClip should be at offset 0x220");
		static_assert(sizeof(CS2::animlib::CNmClip) == 0x240, "CNmClip size should be 0x240");
	}
}
