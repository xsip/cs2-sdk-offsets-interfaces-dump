// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/animlib/CNmPoseTask.hpp>
#include <SDK/animlib/CNmTarget.hpp>
#include <SDK/animlib/NmIKBlendMode_t.hpp>





using namespace GlobalTypes;
namespace CS2 {
	namespace animlib {
		class CNmChainSolverTask : public CS2::animlib::CNmPoseTask {
		public:
			int32_t m_nEffectorBoneIdx; // 0x58 | Schema_Builtin | Size: 0x4
			int32_t m_nEffectorTargetBoneIdx; // 0x5c | Schema_Builtin | Size: 0x4
			GlobalTypes::CTransform m_targetTransform; // 0x60 | Schema_Atomic | Size: 0x20
			int32_t m_nNumBonesInChain; // 0x80 | Schema_Builtin | Size: 0x4
			S2_PAD(0xc);
			animlib::CNmTarget m_effectorTarget; // 0x90 | Schema_DeclaredClass | Size: 0x30
			animlib::NmIKBlendMode_t m_blendMode; // 0xc0 | Schema_DeclaredEnum | Size: 0x1
			S2_PAD(0x3);
			float32 m_flBlendWeight; // 0xc4 | Schema_Builtin | Size: 0x4
			bool m_bIsTargetInWorldSpace; // 0xc8 | Schema_Builtin | Size: 0x1
			bool m_bIsRunningFromDeserializedData; // 0xc9 | Schema_Builtin | Size: 0x1
			S2_PAD(0x6);
			GlobalTypes::CGlobalSymbol m_debugEffectorBoneID; // 0xd0 | Schema_Atomic | Size: 0x8
			S2_PAD(0x8);
			GlobalTypes::CTransform m_chainStartTransformMS; // 0xe0 | Schema_Atomic | Size: 0x20
			GlobalTypes::CTransform m_debugRequestedTargetTransformMS; // 0x100 | Schema_Atomic | Size: 0x20
			float32 m_debugTotalChainLength; // 0x120 | Schema_Builtin | Size: 0x4
			S2_PAD(0xc); // End padding
		};
		static_assert(offsetof(CS2::animlib::CNmChainSolverTask, m_nEffectorBoneIdx) == 0x58, "m_nEffectorBoneIdx in CNmChainSolverTask should be at offset 0x58");
		static_assert(offsetof(CS2::animlib::CNmChainSolverTask, m_nEffectorTargetBoneIdx) == 0x5C, "m_nEffectorTargetBoneIdx in CNmChainSolverTask should be at offset 0x5C");
		static_assert(offsetof(CS2::animlib::CNmChainSolverTask, m_targetTransform) == 0x60, "m_targetTransform in CNmChainSolverTask should be at offset 0x60");
		static_assert(offsetof(CS2::animlib::CNmChainSolverTask, m_nNumBonesInChain) == 0x80, "m_nNumBonesInChain in CNmChainSolverTask should be at offset 0x80");
		static_assert(offsetof(CS2::animlib::CNmChainSolverTask, m_effectorTarget) == 0x90, "m_effectorTarget in CNmChainSolverTask should be at offset 0x90");
		static_assert(offsetof(CS2::animlib::CNmChainSolverTask, m_blendMode) == 0xC0, "m_blendMode in CNmChainSolverTask should be at offset 0xC0");
		static_assert(offsetof(CS2::animlib::CNmChainSolverTask, m_flBlendWeight) == 0xC4, "m_flBlendWeight in CNmChainSolverTask should be at offset 0xC4");
		static_assert(offsetof(CS2::animlib::CNmChainSolverTask, m_bIsTargetInWorldSpace) == 0xC8, "m_bIsTargetInWorldSpace in CNmChainSolverTask should be at offset 0xC8");
		static_assert(offsetof(CS2::animlib::CNmChainSolverTask, m_bIsRunningFromDeserializedData) == 0xC9, "m_bIsRunningFromDeserializedData in CNmChainSolverTask should be at offset 0xC9");
		static_assert(offsetof(CS2::animlib::CNmChainSolverTask, m_debugEffectorBoneID) == 0xD0, "m_debugEffectorBoneID in CNmChainSolverTask should be at offset 0xD0");
		static_assert(offsetof(CS2::animlib::CNmChainSolverTask, m_chainStartTransformMS) == 0xE0, "m_chainStartTransformMS in CNmChainSolverTask should be at offset 0xE0");
		static_assert(offsetof(CS2::animlib::CNmChainSolverTask, m_debugRequestedTargetTransformMS) == 0x100, "m_debugRequestedTargetTransformMS in CNmChainSolverTask should be at offset 0x100");
		static_assert(offsetof(CS2::animlib::CNmChainSolverTask, m_debugTotalChainLength) == 0x120, "m_debugTotalChainLength in CNmChainSolverTask should be at offset 0x120");
		static_assert(sizeof(CS2::animlib::CNmChainSolverTask) == 0x130, "CNmChainSolverTask size should be 0x130");
	}
}
