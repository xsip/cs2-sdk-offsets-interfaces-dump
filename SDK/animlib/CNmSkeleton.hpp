// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>




namespace CS2 {
	namespace animlib {
		class CNmSkeleton  {
		public:
			GlobalTypes::CGlobalSymbol m_ID; // 0x0 | Schema_Atomic | Size: 0x8
			// GlobalTypes::CUtlLeanVector< GlobalTypes::CGlobalSymbol > m_boneIDs; // 0x8 | Schema_Atomic | Size: 0x10
			char  m_boneIDs[0x10]; // 0x8 | Schema_Atomic | Size: 0x10
			// GlobalTypes::CUtlVector< int32 > m_parentIndices; // 0x18 | Schema_Atomic | Size: 0x18
			char  m_parentIndices[0x18]; // 0x18 | Schema_Atomic | Size: 0x18
			// GlobalTypes::CUtlVector< GlobalTypes::CTransform > m_parentSpaceReferencePose; // 0x30 | Schema_Atomic | Size: 0x18
			char  m_parentSpaceReferencePose[0x18]; // 0x30 | Schema_Atomic | Size: 0x18
			// GlobalTypes::CUtlVector< GlobalTypes::CTransform > m_modelSpaceReferencePose; // 0x48 | Schema_Atomic | Size: 0x18
			char  m_modelSpaceReferencePose[0x18]; // 0x48 | Schema_Atomic | Size: 0x18
			int32_t m_numBonesToSampleAtLowLOD; // 0x60 | Schema_Builtin | Size: 0x4
			S2_PAD(0x24);
			// GlobalTypes::CUtlLeanVector< animlib::NmBoneMaskSetDefinition_t > m_maskDefinitions; // 0x88 | Schema_Atomic | Size: 0x10
			char  m_maskDefinitions[0x10]; // 0x88 | Schema_Atomic | Size: 0x10
			S2_PAD(0x10);
			// GlobalTypes::SecondarySkeleton_t > m_secondarySkeletons; // 0xa8 | Schema_Atomic | Size: 0x10
			char  m_secondarySkeletons[0x10]; // 0xa8 | Schema_Atomic | Size: 0x10
			bool m_bIsPropSkeleton; // 0xb8 | Schema_Builtin | Size: 0x1
			S2_PAD(0x7); // End padding
		};
		static_assert(offsetof(CS2::animlib::CNmSkeleton, m_ID) == 0x0, "m_ID in CNmSkeleton should be at offset 0x0");
		static_assert(offsetof(CS2::animlib::CNmSkeleton, m_boneIDs) == 0x8, "m_boneIDs in CNmSkeleton should be at offset 0x8");
		static_assert(offsetof(CS2::animlib::CNmSkeleton, m_parentIndices) == 0x18, "m_parentIndices in CNmSkeleton should be at offset 0x18");
		static_assert(offsetof(CS2::animlib::CNmSkeleton, m_parentSpaceReferencePose) == 0x30, "m_parentSpaceReferencePose in CNmSkeleton should be at offset 0x30");
		static_assert(offsetof(CS2::animlib::CNmSkeleton, m_modelSpaceReferencePose) == 0x48, "m_modelSpaceReferencePose in CNmSkeleton should be at offset 0x48");
		static_assert(offsetof(CS2::animlib::CNmSkeleton, m_numBonesToSampleAtLowLOD) == 0x60, "m_numBonesToSampleAtLowLOD in CNmSkeleton should be at offset 0x60");
		static_assert(offsetof(CS2::animlib::CNmSkeleton, m_maskDefinitions) == 0x88, "m_maskDefinitions in CNmSkeleton should be at offset 0x88");
		static_assert(offsetof(CS2::animlib::CNmSkeleton, m_secondarySkeletons) == 0xA8, "m_secondarySkeletons in CNmSkeleton should be at offset 0xA8");
		static_assert(offsetof(CS2::animlib::CNmSkeleton, m_bIsPropSkeleton) == 0xB8, "m_bIsPropSkeleton in CNmSkeleton should be at offset 0xB8");
		static_assert(sizeof(CS2::animlib::CNmSkeleton) == 0xC0, "CNmSkeleton size should be 0xC0");
	}
}
