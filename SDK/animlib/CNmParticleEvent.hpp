// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/animlib/CNmEvent.hpp>
#include <SDK/animlib/CNmEventRelevance_t.hpp>
#include <SDK/animlib/Type_t.hpp>
#include <SDK/animationsystem/ParticleAttachment_t.hpp>





using namespace GlobalTypes;
namespace CS2 {
	namespace animlib {
		class CNmParticleEvent : public CS2::animlib::CNmEvent {
		public:
			animlib::CNmEventRelevance_t m_relevance; // 0x20 | Schema_DeclaredEnum | Size: 0x4
			animlib::Type_t m_type; // 0x24 | Schema_DeclaredEnum | Size: 0x4
			// GlobalTypes::CStrongHandle<resourcesystem::InfoForResourceTypeIParticleSystemDefinition> m_hParticleSystem; // 0x28 | Schema_Atomic | Size: 0x8
			char  m_hParticleSystem[0x8]; // 0x28 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlString m_tags; // 0x30 | Schema_Atomic | Size: 0x8
			bool m_bStopImmediately; // 0x38 | Schema_Builtin | Size: 0x1
			bool m_bDetachFromOwner; // 0x39 | Schema_Builtin | Size: 0x1
			bool m_bPlayEndCap; // 0x3a | Schema_Builtin | Size: 0x1
			S2_PAD(0x5);
			GlobalTypes::CUtlString m_attachmentPoint0; // 0x40 | Schema_Atomic | Size: 0x8
			animationsystem::ParticleAttachment_t m_attachmentType0; // 0x48 | Schema_DeclaredEnum | Size: 0x4
			S2_PAD(0x4);
			GlobalTypes::CUtlString m_attachmentPoint1; // 0x50 | Schema_Atomic | Size: 0x8
			animationsystem::ParticleAttachment_t m_attachmentType1; // 0x58 | Schema_DeclaredEnum | Size: 0x4
			S2_PAD(0x4);
			GlobalTypes::CUtlString m_config; // 0x60 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlString m_effectForConfig; // 0x68 | Schema_Atomic | Size: 0x8
		};
		static_assert(offsetof(CS2::animlib::CNmParticleEvent, m_relevance) == 0x20, "m_relevance in CNmParticleEvent should be at offset 0x20");
		static_assert(offsetof(CS2::animlib::CNmParticleEvent, m_type) == 0x24, "m_type in CNmParticleEvent should be at offset 0x24");
		static_assert(offsetof(CS2::animlib::CNmParticleEvent, m_hParticleSystem) == 0x28, "m_hParticleSystem in CNmParticleEvent should be at offset 0x28");
		static_assert(offsetof(CS2::animlib::CNmParticleEvent, m_tags) == 0x30, "m_tags in CNmParticleEvent should be at offset 0x30");
		static_assert(offsetof(CS2::animlib::CNmParticleEvent, m_bStopImmediately) == 0x38, "m_bStopImmediately in CNmParticleEvent should be at offset 0x38");
		static_assert(offsetof(CS2::animlib::CNmParticleEvent, m_bDetachFromOwner) == 0x39, "m_bDetachFromOwner in CNmParticleEvent should be at offset 0x39");
		static_assert(offsetof(CS2::animlib::CNmParticleEvent, m_bPlayEndCap) == 0x3A, "m_bPlayEndCap in CNmParticleEvent should be at offset 0x3A");
		static_assert(offsetof(CS2::animlib::CNmParticleEvent, m_attachmentPoint0) == 0x40, "m_attachmentPoint0 in CNmParticleEvent should be at offset 0x40");
		static_assert(offsetof(CS2::animlib::CNmParticleEvent, m_attachmentType0) == 0x48, "m_attachmentType0 in CNmParticleEvent should be at offset 0x48");
		static_assert(offsetof(CS2::animlib::CNmParticleEvent, m_attachmentPoint1) == 0x50, "m_attachmentPoint1 in CNmParticleEvent should be at offset 0x50");
		static_assert(offsetof(CS2::animlib::CNmParticleEvent, m_attachmentType1) == 0x58, "m_attachmentType1 in CNmParticleEvent should be at offset 0x58");
		static_assert(offsetof(CS2::animlib::CNmParticleEvent, m_config) == 0x60, "m_config in CNmParticleEvent should be at offset 0x60");
		static_assert(offsetof(CS2::animlib::CNmParticleEvent, m_effectForConfig) == 0x68, "m_effectForConfig in CNmParticleEvent should be at offset 0x68");
		static_assert(sizeof(CS2::animlib::CNmParticleEvent) == 0x70, "CNmParticleEvent size should be 0x70");
	}
}
