// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif





namespace CS2 {
	namespace mathlib_extended {
		class ConstantInfo_t;
		class VariableInfo_t;
		class FunctionInfo_t;
	}
}


using namespace GlobalTypes;
namespace CS2 {
	namespace mathlib_extended {
		class CFuseSymbolTable  {
		public:
			GlobalTypes::CUtlVector<mathlib_extended::ConstantInfo_t> m_constants; // 0x0 | Schema_Atomic | Size: 0x18
			// char  m_constants[0x18]; // 0x0 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector<mathlib_extended::VariableInfo_t> m_variables; // 0x18 | Schema_Atomic | Size: 0x18
			// char  m_variables[0x18]; // 0x18 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector<mathlib_extended::FunctionInfo_t> m_functions; // 0x30 | Schema_Atomic | Size: 0x18
			// char  m_functions[0x18]; // 0x30 | Schema_Atomic | Size: 0x18
			// GlobalTypes::CUtlHashtable< CUtlStringToken, int32 > m_constantMap; // 0x48 | Schema_Atomic | Size: 0x20
			char  m_constantMap[0x20]; // 0x48 | Schema_Atomic | Size: 0x20
			// GlobalTypes::CUtlHashtable< CUtlStringToken, int32 > m_variableMap; // 0x68 | Schema_Atomic | Size: 0x20
			char  m_variableMap[0x20]; // 0x68 | Schema_Atomic | Size: 0x20
			// GlobalTypes::CUtlHashtable< CUtlStringToken, int32 > m_functionMap; // 0x88 | Schema_Atomic | Size: 0x20
			char  m_functionMap[0x20]; // 0x88 | Schema_Atomic | Size: 0x20
			S2_PAD(0x8); // End padding
		};
		static_assert(offsetof(CS2::mathlib_extended::CFuseSymbolTable, m_constants) == 0x0, "m_constants in CFuseSymbolTable should be at offset 0x0");
		static_assert(offsetof(CS2::mathlib_extended::CFuseSymbolTable, m_variables) == 0x18, "m_variables in CFuseSymbolTable should be at offset 0x18");
		static_assert(offsetof(CS2::mathlib_extended::CFuseSymbolTable, m_functions) == 0x30, "m_functions in CFuseSymbolTable should be at offset 0x30");
		static_assert(offsetof(CS2::mathlib_extended::CFuseSymbolTable, m_constantMap) == 0x48, "m_constantMap in CFuseSymbolTable should be at offset 0x48");
		static_assert(offsetof(CS2::mathlib_extended::CFuseSymbolTable, m_variableMap) == 0x68, "m_variableMap in CFuseSymbolTable should be at offset 0x68");
		static_assert(offsetof(CS2::mathlib_extended::CFuseSymbolTable, m_functionMap) == 0x88, "m_functionMap in CFuseSymbolTable should be at offset 0x88");
		static_assert(sizeof(CS2::mathlib_extended::CFuseSymbolTable) == 0xB0, "CFuseSymbolTable size should be 0xB0");
	}
}
