// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif





namespace CS2 {
	namespace pulse_runtime_lib {
		class CPulse_Variable;
		class CPulse_PublicOutput;
		class CPulse_Constant;
		class CPulse_DomainValue;
	}
}
namespace CS2 {
	namespace pulse_runtime_lib {
		class CPulseGraphDef  {
		public:
			S2_PAD(0x8);
			GlobalTypes::PulseSymbol_t m_DomainIdentifier; // 0x8 | Schema_Atomic | Size: 0x10
			GlobalTypes::CPulseValueFullType m_DomainSubType; // 0x18 | Schema_Atomic | Size: 0x18
			GlobalTypes::PulseSymbol_t m_ParentMapName; // 0x30 | Schema_Atomic | Size: 0x10
			GlobalTypes::PulseSymbol_t m_ParentXmlName; // 0x40 | Schema_Atomic | Size: 0x10
			// GlobalTypes::CUtlVector< CPulse_Chunk >* m_Chunks; // 0x50 | Schema_Atomic | Size: 0x18
			char  m_Chunks[0x18]; // 0x50 | Schema_Atomic | Size: 0x18
			// assetpreview::CUtlVector< CPulseCell_Base >* m_Cells; // 0x68 | Schema_Atomic | Size: 0x18
			char  m_Cells[0x18]; // 0x68 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector< pulse_runtime_lib::CPulse_Variable > m_Vars; // 0x80 | Schema_Atomic | Size: 0x18
			// char  m_Vars[0x18]; // 0x80 | Schema_Atomic | Size: 0x18
			// GlobalTypes::CUtlVector< pulse_runtime_lib::CPulse_Variable > m_Vars; // 0x80 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector< pulse_runtime_lib::CPulse_PublicOutput > m_PublicOutputs; // 0x98 | Schema_Atomic | Size: 0x18
			// char  m_PublicOutputs[0x18]; // 0x98 | Schema_Atomic | Size: 0x18
			// GlobalTypes::CUtlVector< pulse_runtime_lib::CPulse_PublicOutput > m_PublicOutputs; // 0x98 | Schema_Atomic | Size: 0x18
			// assetpreview::CUtlVector< CPulse_InvokeBinding >* m_InvokeBindings; // 0xb0 | Schema_Atomic | Size: 0x18
			char  m_InvokeBindings[0x18]; // 0xb0 | Schema_Atomic | Size: 0x18
			// assetpreview::CUtlVector< CPulse_CallInfo >* m_CallInfos; // 0xc8 | Schema_Atomic | Size: 0x18
			char  m_CallInfos[0x18]; // 0xc8 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector< pulse_runtime_lib::CPulse_Constant > m_Constants; // 0xe0 | Schema_Atomic | Size: 0x18
			// char  m_Constants[0x18]; // 0xe0 | Schema_Atomic | Size: 0x18
			// GlobalTypes::CUtlVector< pulse_runtime_lib::CPulse_Constant > m_Constants; // 0xe0 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector< pulse_runtime_lib::CPulse_DomainValue > m_DomainValues; // 0xf8 | Schema_Atomic | Size: 0x18
			// char  m_DomainValues[0x18]; // 0xf8 | Schema_Atomic | Size: 0x18
			// GlobalTypes::CUtlVector< pulse_runtime_lib::CPulse_DomainValue > m_DomainValues; // 0xf8 | Schema_Atomic | Size: 0x18
			// assetpreview::CUtlVector< pulse_runtime_lib::CPulse_BlackboardReference > m_BlackboardReferences; // 0x110 | Schema_Atomic | Size: 0x18
			char  m_BlackboardReferences[0x18]; // 0x110 | Schema_Atomic | Size: 0x18
			// GlobalTypes::CUtlVector< CPulse_OutputConnection >* m_OutputConnections; // 0x128 | Schema_Atomic | Size: 0x18
			char  m_OutputConnections[0x18]; // 0x128 | Schema_Atomic | Size: 0x18
			S2_PAD(0x58); // End padding
		};
		static_assert(offsetof(CS2::pulse_runtime_lib::CPulseGraphDef, m_DomainIdentifier) == 0x8, "m_DomainIdentifier in CPulseGraphDef should be at offset 0x8");
		static_assert(offsetof(CS2::pulse_runtime_lib::CPulseGraphDef, m_DomainSubType) == 0x18, "m_DomainSubType in CPulseGraphDef should be at offset 0x18");
		static_assert(offsetof(CS2::pulse_runtime_lib::CPulseGraphDef, m_ParentMapName) == 0x30, "m_ParentMapName in CPulseGraphDef should be at offset 0x30");
		static_assert(offsetof(CS2::pulse_runtime_lib::CPulseGraphDef, m_ParentXmlName) == 0x40, "m_ParentXmlName in CPulseGraphDef should be at offset 0x40");
		static_assert(offsetof(CS2::pulse_runtime_lib::CPulseGraphDef, m_Chunks) == 0x50, "m_Chunks in CPulseGraphDef should be at offset 0x50");
		static_assert(offsetof(CS2::pulse_runtime_lib::CPulseGraphDef, m_Cells) == 0x68, "m_Cells in CPulseGraphDef should be at offset 0x68");
		static_assert(offsetof(CS2::pulse_runtime_lib::CPulseGraphDef, m_Vars) == 0x80, "m_Vars in CPulseGraphDef should be at offset 0x80");
		static_assert(offsetof(CS2::pulse_runtime_lib::CPulseGraphDef, m_PublicOutputs) == 0x98, "m_PublicOutputs in CPulseGraphDef should be at offset 0x98");
		static_assert(offsetof(CS2::pulse_runtime_lib::CPulseGraphDef, m_InvokeBindings) == 0xB0, "m_InvokeBindings in CPulseGraphDef should be at offset 0xB0");
		static_assert(offsetof(CS2::pulse_runtime_lib::CPulseGraphDef, m_CallInfos) == 0xC8, "m_CallInfos in CPulseGraphDef should be at offset 0xC8");
		static_assert(offsetof(CS2::pulse_runtime_lib::CPulseGraphDef, m_Constants) == 0xE0, "m_Constants in CPulseGraphDef should be at offset 0xE0");
		static_assert(offsetof(CS2::pulse_runtime_lib::CPulseGraphDef, m_DomainValues) == 0xF8, "m_DomainValues in CPulseGraphDef should be at offset 0xF8");
		static_assert(offsetof(CS2::pulse_runtime_lib::CPulseGraphDef, m_BlackboardReferences) == 0x110, "m_BlackboardReferences in CPulseGraphDef should be at offset 0x110");
		static_assert(offsetof(CS2::pulse_runtime_lib::CPulseGraphDef, m_OutputConnections) == 0x128, "m_OutputConnections in CPulseGraphDef should be at offset 0x128");
		static_assert(sizeof(CS2::pulse_runtime_lib::CPulseGraphDef) == 0x198, "CPulseGraphDef size should be 0x198");
	}
}
