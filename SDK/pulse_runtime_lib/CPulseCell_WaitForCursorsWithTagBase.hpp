// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/pulse_runtime_lib/CPulseCell_BaseYieldingInflow.hpp>
#include <SDK/pulse_runtime_lib/CPulse_ResumePoint.hpp>



namespace CS2 {
	namespace pulse_runtime_lib {
		class CPulseCell_WaitForCursorsWithTagBase : public CS2::pulse_runtime_lib::CPulseCell_BaseYieldingInflow {
		public:
			int32_t m_nCursorsAllowedToWait; // 0x48 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4);
			pulse_runtime_lib::CPulse_ResumePoint m_WaitComplete; // 0x50 | Schema_DeclaredClass | Size: 0x48
		};
		static_assert(offsetof(CS2::pulse_runtime_lib::CPulseCell_WaitForCursorsWithTagBase, m_nCursorsAllowedToWait) == 0x48, "m_nCursorsAllowedToWait in CPulseCell_WaitForCursorsWithTagBase should be at offset 0x48");
		static_assert(offsetof(CS2::pulse_runtime_lib::CPulseCell_WaitForCursorsWithTagBase, m_WaitComplete) == 0x50, "m_WaitComplete in CPulseCell_WaitForCursorsWithTagBase should be at offset 0x50");
		static_assert(sizeof(CS2::pulse_runtime_lib::CPulseCell_WaitForCursorsWithTagBase) == 0x98, "CPulseCell_WaitForCursorsWithTagBase size should be 0x98");
	}
}
