// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>

#include <SDK/pulse_runtime_lib/PulseInstructionCode_t.hpp>
#include <SDK/pulse_runtime_lib/PulseRuntimeVarIndex_t.hpp>
#include <SDK/pulse_runtime_lib/PulseRuntimeRegisterIndex_t.hpp>
#include <SDK/pulse_runtime_lib/PulseRuntimeInvokeIndex_t.hpp>
#include <SDK/pulse_runtime_lib/PulseRuntimeChunkIndex_t.hpp>
#include <SDK/pulse_runtime_lib/PulseRuntimeCallInfoIndex_t.hpp>
#include <SDK/pulse_runtime_lib/PulseRuntimeConstantIndex_t.hpp>
#include <SDK/pulse_runtime_lib/PulseRuntimeDomainValueIndex_t.hpp>
#include <SDK/pulse_runtime_lib/PulseRuntimeBlackboardReferenceIndex_t.hpp>



namespace CS2 {
	namespace pulse_runtime_lib {
		class PGDInstruction_t  {
		public:
			pulse_runtime_lib::PulseInstructionCode_t m_nCode; // 0x0 | Schema_DeclaredEnum | Size: 0x2
			S2_PAD(0x2);
			pulse_runtime_lib::PulseRuntimeVarIndex_t m_nVar; // 0x4 | Schema_DeclaredClass | Size: 0x4
			pulse_runtime_lib::PulseRuntimeRegisterIndex_t m_nReg0; // 0x8 | Schema_DeclaredClass | Size: 0x2
			pulse_runtime_lib::PulseRuntimeRegisterIndex_t m_nReg1; // 0xa | Schema_DeclaredClass | Size: 0x2
			pulse_runtime_lib::PulseRuntimeRegisterIndex_t m_nReg2; // 0xc | Schema_DeclaredClass | Size: 0x2
			S2_PAD(0x2);
			pulse_runtime_lib::PulseRuntimeInvokeIndex_t m_nInvokeBindingIndex; // 0x10 | Schema_DeclaredClass | Size: 0x4
			pulse_runtime_lib::PulseRuntimeChunkIndex_t m_nChunk; // 0x14 | Schema_DeclaredClass | Size: 0x4
			int32_t m_nDestInstruction; // 0x18 | Schema_Builtin | Size: 0x4
			pulse_runtime_lib::PulseRuntimeCallInfoIndex_t m_nCallInfoIndex; // 0x1c | Schema_DeclaredClass | Size: 0x4
			pulse_runtime_lib::PulseRuntimeConstantIndex_t m_nConstIdx; // 0x20 | Schema_DeclaredClass | Size: 0x2
			pulse_runtime_lib::PulseRuntimeDomainValueIndex_t m_nDomainValueIdx; // 0x22 | Schema_DeclaredClass | Size: 0x2
			pulse_runtime_lib::PulseRuntimeBlackboardReferenceIndex_t m_nBlackboardReferenceIdx; // 0x24 | Schema_DeclaredClass | Size: 0x2
			S2_PAD(0x12); // End padding
		};
		static_assert(offsetof(CS2::pulse_runtime_lib::PGDInstruction_t, m_nCode) == 0x0, "m_nCode in PGDInstruction_t should be at offset 0x0");
		static_assert(offsetof(CS2::pulse_runtime_lib::PGDInstruction_t, m_nVar) == 0x4, "m_nVar in PGDInstruction_t should be at offset 0x4");
		static_assert(offsetof(CS2::pulse_runtime_lib::PGDInstruction_t, m_nReg0) == 0x8, "m_nReg0 in PGDInstruction_t should be at offset 0x8");
		static_assert(offsetof(CS2::pulse_runtime_lib::PGDInstruction_t, m_nReg1) == 0xA, "m_nReg1 in PGDInstruction_t should be at offset 0xA");
		static_assert(offsetof(CS2::pulse_runtime_lib::PGDInstruction_t, m_nReg2) == 0xC, "m_nReg2 in PGDInstruction_t should be at offset 0xC");
		static_assert(offsetof(CS2::pulse_runtime_lib::PGDInstruction_t, m_nInvokeBindingIndex) == 0x10, "m_nInvokeBindingIndex in PGDInstruction_t should be at offset 0x10");
		static_assert(offsetof(CS2::pulse_runtime_lib::PGDInstruction_t, m_nChunk) == 0x14, "m_nChunk in PGDInstruction_t should be at offset 0x14");
		static_assert(offsetof(CS2::pulse_runtime_lib::PGDInstruction_t, m_nDestInstruction) == 0x18, "m_nDestInstruction in PGDInstruction_t should be at offset 0x18");
		static_assert(offsetof(CS2::pulse_runtime_lib::PGDInstruction_t, m_nCallInfoIndex) == 0x1C, "m_nCallInfoIndex in PGDInstruction_t should be at offset 0x1C");
		static_assert(offsetof(CS2::pulse_runtime_lib::PGDInstruction_t, m_nConstIdx) == 0x20, "m_nConstIdx in PGDInstruction_t should be at offset 0x20");
		static_assert(offsetof(CS2::pulse_runtime_lib::PGDInstruction_t, m_nDomainValueIdx) == 0x22, "m_nDomainValueIdx in PGDInstruction_t should be at offset 0x22");
		static_assert(offsetof(CS2::pulse_runtime_lib::PGDInstruction_t, m_nBlackboardReferenceIdx) == 0x24, "m_nBlackboardReferenceIdx in PGDInstruction_t should be at offset 0x24");
		static_assert(sizeof(CS2::pulse_runtime_lib::PGDInstruction_t) == 0x38, "PGDInstruction_t size should be 0x38");
	}
}
