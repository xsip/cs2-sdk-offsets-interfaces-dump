// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif







using namespace GlobalTypes;
namespace CS2 {
	namespace pulse_runtime_lib {
		class CPulse_Chunk  {
		public:
			// GlobalTypes::CUtlLeanVector<pulse_runtime_lib::PGDInstruction_t> m_Instructions; // 0x0 | Schema_Atomic | Size: 0x10
			char  m_Instructions[0x10]; // 0x0 | Schema_Atomic | Size: 0x10
			// GlobalTypes::CUtlLeanVector<pulse_runtime_lib::CPulse_RegisterInfo> m_Registers; // 0x10 | Schema_Atomic | Size: 0x10
			char  m_Registers[0x10]; // 0x10 | Schema_Atomic | Size: 0x10
			// GlobalTypes::CUtlLeanVector<pulse_runtime_lib::PulseDocNodeID_t> m_InstructionEditorIDs; // 0x20 | Schema_Atomic | Size: 0x10
			char  m_InstructionEditorIDs[0x10]; // 0x20 | Schema_Atomic | Size: 0x10
			S2_PAD(0x28); // End padding
		};
		static_assert(offsetof(CS2::pulse_runtime_lib::CPulse_Chunk, m_Instructions) == 0x0, "m_Instructions in CPulse_Chunk should be at offset 0x0");
		static_assert(offsetof(CS2::pulse_runtime_lib::CPulse_Chunk, m_Registers) == 0x10, "m_Registers in CPulse_Chunk should be at offset 0x10");
		static_assert(offsetof(CS2::pulse_runtime_lib::CPulse_Chunk, m_InstructionEditorIDs) == 0x20, "m_InstructionEditorIDs in CPulse_Chunk should be at offset 0x20");
		static_assert(sizeof(CS2::pulse_runtime_lib::CPulse_Chunk) == 0x58, "CPulse_Chunk size should be 0x58");
	}
}
