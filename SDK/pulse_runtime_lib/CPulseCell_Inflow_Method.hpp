// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>

#include <SDK/pulse_runtime_lib/CPulseCell_Inflow_BaseEntrypoint.hpp>



namespace CS2 {
	namespace pulse_runtime_lib {
		class CPulseCell_Inflow_Method : public CS2::pulse_runtime_lib::CPulseCell_Inflow_BaseEntrypoint {
		public:
			GlobalTypes::PulseSymbol_t m_MethodName; // 0x80 | Schema_Atomic | Size: 0x10
			GlobalTypes::CUtlString m_Description; // 0x90 | Schema_Atomic | Size: 0x8
			bool m_bIsPublic; // 0x98 | Schema_Builtin | Size: 0x1
			S2_PAD(0x7);
			GlobalTypes::CPulseValueFullType m_ReturnType; // 0xa0 | Schema_Atomic | Size: 0x18
			// GlobalTypes::CUtlLeanVector< pulse_runtime_lib::CPulseRuntimeMethodArg > m_Args; // 0xb8 | Schema_Atomic | Size: 0x10
			char  m_Args[0x10]; // 0xb8 | Schema_Atomic | Size: 0x10
		};
		static_assert(offsetof(CS2::pulse_runtime_lib::CPulseCell_Inflow_Method, m_MethodName) == 0x80, "m_MethodName in CPulseCell_Inflow_Method should be at offset 0x80");
		static_assert(offsetof(CS2::pulse_runtime_lib::CPulseCell_Inflow_Method, m_Description) == 0x90, "m_Description in CPulseCell_Inflow_Method should be at offset 0x90");
		static_assert(offsetof(CS2::pulse_runtime_lib::CPulseCell_Inflow_Method, m_bIsPublic) == 0x98, "m_bIsPublic in CPulseCell_Inflow_Method should be at offset 0x98");
		static_assert(offsetof(CS2::pulse_runtime_lib::CPulseCell_Inflow_Method, m_ReturnType) == 0xA0, "m_ReturnType in CPulseCell_Inflow_Method should be at offset 0xA0");
		static_assert(offsetof(CS2::pulse_runtime_lib::CPulseCell_Inflow_Method, m_Args) == 0xB8, "m_Args in CPulseCell_Inflow_Method should be at offset 0xB8");
		static_assert(sizeof(CS2::pulse_runtime_lib::CPulseCell_Inflow_Method) == 0xC8, "CPulseCell_Inflow_Method size should be 0xC8");
	}
}
