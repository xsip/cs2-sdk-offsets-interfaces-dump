// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>

#include <SDK/animgraphlib/CAnimUpdateNodeBase.hpp>
#include <SDK/animgraphlib/AnimValueSource.hpp>
#include <SDK/animgraphlib/LinearRootMotionBlendMode_t.hpp>
#include <SDK/animgraphlib/CAnimParamHandle.hpp>
#include <SDK/animgraphlib/CAnimInputDamping.hpp>
#include <SDK/animgraphlib/BlendKeyType.hpp>



namespace CS2 {
	namespace animgraphlib {
		class CBlendUpdateNode : public CS2::animgraphlib::CAnimUpdateNodeBase {
		public:
			S2_PAD(0x8);
			// GlobalTypes::CUtlVector< animgraphlib::CAnimUpdateNodeRef > m_children; // 0x60 | Schema_Atomic | Size: 0x18
			char  m_children[0x18]; // 0x60 | Schema_Atomic | Size: 0x18
			// GlobalTypes::CUtlVector< uint8 > m_sortedOrder; // 0x78 | Schema_Atomic | Size: 0x18
			char  m_sortedOrder[0x18]; // 0x78 | Schema_Atomic | Size: 0x18
			// GlobalTypes::CUtlVector< float32 > m_targetValues; // 0x90 | Schema_Atomic | Size: 0x18
			char  m_targetValues[0x18]; // 0x90 | Schema_Atomic | Size: 0x18
			S2_PAD(0x4);
			animgraphlib::AnimValueSource m_blendValueSource; // 0xac | Schema_DeclaredEnum | Size: 0x4
			animgraphlib::LinearRootMotionBlendMode_t m_eLinearRootMotionBlendMode; // 0xb0 | Schema_DeclaredEnum | Size: 0x4
			animgraphlib::CAnimParamHandle m_paramIndex; // 0xb4 | Schema_DeclaredClass | Size: 0x2
			S2_PAD(0x2);
			animgraphlib::CAnimInputDamping m_damping; // 0xb8 | Schema_DeclaredClass | Size: 0x18
			animgraphlib::BlendKeyType m_blendKeyType; // 0xd0 | Schema_DeclaredEnum | Size: 0x4
			bool m_bLockBlendOnReset; // 0xd4 | Schema_Builtin | Size: 0x1
			bool m_bSyncCycles; // 0xd5 | Schema_Builtin | Size: 0x1
			bool m_bLoop; // 0xd6 | Schema_Builtin | Size: 0x1
			bool m_bLockWhenWaning; // 0xd7 | Schema_Builtin | Size: 0x1
			bool m_bIsAngle; // 0xd8 | Schema_Builtin | Size: 0x1
			S2_PAD(0x7); // End padding
		};
		static_assert(offsetof(CS2::animgraphlib::CBlendUpdateNode, m_children) == 0x60, "m_children in CBlendUpdateNode should be at offset 0x60");
		static_assert(offsetof(CS2::animgraphlib::CBlendUpdateNode, m_sortedOrder) == 0x78, "m_sortedOrder in CBlendUpdateNode should be at offset 0x78");
		static_assert(offsetof(CS2::animgraphlib::CBlendUpdateNode, m_targetValues) == 0x90, "m_targetValues in CBlendUpdateNode should be at offset 0x90");
		static_assert(offsetof(CS2::animgraphlib::CBlendUpdateNode, m_blendValueSource) == 0xAC, "m_blendValueSource in CBlendUpdateNode should be at offset 0xAC");
		static_assert(offsetof(CS2::animgraphlib::CBlendUpdateNode, m_eLinearRootMotionBlendMode) == 0xB0, "m_eLinearRootMotionBlendMode in CBlendUpdateNode should be at offset 0xB0");
		static_assert(offsetof(CS2::animgraphlib::CBlendUpdateNode, m_paramIndex) == 0xB4, "m_paramIndex in CBlendUpdateNode should be at offset 0xB4");
		static_assert(offsetof(CS2::animgraphlib::CBlendUpdateNode, m_damping) == 0xB8, "m_damping in CBlendUpdateNode should be at offset 0xB8");
		static_assert(offsetof(CS2::animgraphlib::CBlendUpdateNode, m_blendKeyType) == 0xD0, "m_blendKeyType in CBlendUpdateNode should be at offset 0xD0");
		static_assert(offsetof(CS2::animgraphlib::CBlendUpdateNode, m_bLockBlendOnReset) == 0xD4, "m_bLockBlendOnReset in CBlendUpdateNode should be at offset 0xD4");
		static_assert(offsetof(CS2::animgraphlib::CBlendUpdateNode, m_bSyncCycles) == 0xD5, "m_bSyncCycles in CBlendUpdateNode should be at offset 0xD5");
		static_assert(offsetof(CS2::animgraphlib::CBlendUpdateNode, m_bLoop) == 0xD6, "m_bLoop in CBlendUpdateNode should be at offset 0xD6");
		static_assert(offsetof(CS2::animgraphlib::CBlendUpdateNode, m_bLockWhenWaning) == 0xD7, "m_bLockWhenWaning in CBlendUpdateNode should be at offset 0xD7");
		static_assert(offsetof(CS2::animgraphlib::CBlendUpdateNode, m_bIsAngle) == 0xD8, "m_bIsAngle in CBlendUpdateNode should be at offset 0xD8");
		static_assert(sizeof(CS2::animgraphlib::CBlendUpdateNode) == 0xE0, "CBlendUpdateNode size should be 0xE0");
	}
}
