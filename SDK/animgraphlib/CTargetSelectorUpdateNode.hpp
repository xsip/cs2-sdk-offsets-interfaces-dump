// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/animgraphlib/CAnimUpdateNodeBase.hpp>
#include <SDK/animgraphlib/TargetSelectorAngleMode_t.hpp>
#include <SDK/animgraphlib/CAnimParamHandle.hpp>



namespace CS2 {
	namespace animgraphlib {
		class CAnimUpdateNodeRef;
	}
}


using namespace GlobalTypes;
namespace CS2 {
	namespace animgraphlib {
		class CTargetSelectorUpdateNode : public CS2::animgraphlib::CAnimUpdateNodeBase {
		public:
			S2_PAD(0x8);
			animgraphlib::TargetSelectorAngleMode_t m_eAngleMode; // 0x60 | Schema_DeclaredEnum | Size: 0x4
			S2_PAD(0x4);
			GlobalTypes::CUtlVector< animgraphlib::CAnimUpdateNodeRef > m_children; // 0x68 | Schema_Atomic | Size: 0x18
			// char  m_children[0x18]; // 0x68 | Schema_Atomic | Size: 0x18
			S2_PAD(0x4);
			animgraphlib::CAnimParamHandle m_hTargetPosition; // 0x84 | Schema_DeclaredClass | Size: 0x2
			animgraphlib::CAnimParamHandle m_hTargetFacePositionParameter; // 0x86 | Schema_DeclaredClass | Size: 0x2
			animgraphlib::CAnimParamHandle m_hMoveHeadingParameter; // 0x88 | Schema_DeclaredClass | Size: 0x2
			animgraphlib::CAnimParamHandle m_hDesiredMoveHeadingParameter; // 0x8a | Schema_DeclaredClass | Size: 0x2
			bool m_bTargetPositionIsWorldSpace; // 0x8c | Schema_Builtin | Size: 0x1
			bool m_bTargetFacePositionIsWorldSpace; // 0x8d | Schema_Builtin | Size: 0x1
			bool m_bEnablePhaseMatching; // 0x8e | Schema_Builtin | Size: 0x1
			S2_PAD(0x1);
			float32 m_flPhaseMatchingMaxRootMotionSkip; // 0x90 | Schema_Builtin | Size: 0x4
			S2_PAD(0xc); // End padding
		};
		static_assert(offsetof(CS2::animgraphlib::CTargetSelectorUpdateNode, m_eAngleMode) == 0x60, "m_eAngleMode in CTargetSelectorUpdateNode should be at offset 0x60");
		static_assert(offsetof(CS2::animgraphlib::CTargetSelectorUpdateNode, m_children) == 0x68, "m_children in CTargetSelectorUpdateNode should be at offset 0x68");
		static_assert(offsetof(CS2::animgraphlib::CTargetSelectorUpdateNode, m_hTargetPosition) == 0x84, "m_hTargetPosition in CTargetSelectorUpdateNode should be at offset 0x84");
		static_assert(offsetof(CS2::animgraphlib::CTargetSelectorUpdateNode, m_hTargetFacePositionParameter) == 0x86, "m_hTargetFacePositionParameter in CTargetSelectorUpdateNode should be at offset 0x86");
		static_assert(offsetof(CS2::animgraphlib::CTargetSelectorUpdateNode, m_hMoveHeadingParameter) == 0x88, "m_hMoveHeadingParameter in CTargetSelectorUpdateNode should be at offset 0x88");
		static_assert(offsetof(CS2::animgraphlib::CTargetSelectorUpdateNode, m_hDesiredMoveHeadingParameter) == 0x8A, "m_hDesiredMoveHeadingParameter in CTargetSelectorUpdateNode should be at offset 0x8A");
		static_assert(offsetof(CS2::animgraphlib::CTargetSelectorUpdateNode, m_bTargetPositionIsWorldSpace) == 0x8C, "m_bTargetPositionIsWorldSpace in CTargetSelectorUpdateNode should be at offset 0x8C");
		static_assert(offsetof(CS2::animgraphlib::CTargetSelectorUpdateNode, m_bTargetFacePositionIsWorldSpace) == 0x8D, "m_bTargetFacePositionIsWorldSpace in CTargetSelectorUpdateNode should be at offset 0x8D");
		static_assert(offsetof(CS2::animgraphlib::CTargetSelectorUpdateNode, m_bEnablePhaseMatching) == 0x8E, "m_bEnablePhaseMatching in CTargetSelectorUpdateNode should be at offset 0x8E");
		static_assert(offsetof(CS2::animgraphlib::CTargetSelectorUpdateNode, m_flPhaseMatchingMaxRootMotionSkip) == 0x90, "m_flPhaseMatchingMaxRootMotionSkip in CTargetSelectorUpdateNode should be at offset 0x90");
		static_assert(sizeof(CS2::animgraphlib::CTargetSelectorUpdateNode) == 0xA0, "CTargetSelectorUpdateNode size should be 0xA0");
	}
}
