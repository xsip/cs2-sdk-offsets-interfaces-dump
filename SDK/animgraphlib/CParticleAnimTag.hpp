// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/animgraphlib/CAnimTagBase.hpp>
#include <SDK/animationsystem/ParticleAttachment_t.hpp>





using namespace GlobalTypes;
namespace CS2 {
	namespace animgraphlib {
		class CParticleAnimTag : public CS2::animgraphlib::CAnimTagBase {
		public:
			S2_PAD(0x8);
			// GlobalTypes::CStrongHandle<resourcesystem::InfoForResourceTypeIParticleSystemDefinition> m_hParticleSystem; // 0x58 | Schema_Atomic | Size: 0x8
			char  m_hParticleSystem[0x8]; // 0x58 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlString m_particleSystemName; // 0x60 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlString m_configName; // 0x68 | Schema_Atomic | Size: 0x8
			bool m_bDetachFromOwner; // 0x70 | Schema_Builtin | Size: 0x1
			bool m_bAggregate; // 0x71 | Schema_Builtin | Size: 0x1
			bool m_bStopWhenTagEnds; // 0x72 | Schema_Builtin | Size: 0x1
			bool m_bTagEndStopIsInstant; // 0x73 | Schema_Builtin | Size: 0x1
			S2_PAD(0x4);
			GlobalTypes::CUtlString m_attachmentName; // 0x78 | Schema_Atomic | Size: 0x8
			animationsystem::ParticleAttachment_t m_attachmentType; // 0x80 | Schema_DeclaredEnum | Size: 0x4
			S2_PAD(0x4);
			GlobalTypes::CUtlString m_attachmentCP1Name; // 0x88 | Schema_Atomic | Size: 0x8
			animationsystem::ParticleAttachment_t m_attachmentCP1Type; // 0x90 | Schema_DeclaredEnum | Size: 0x4
			S2_PAD(0x4); // End padding
		};
		static_assert(offsetof(CS2::animgraphlib::CParticleAnimTag, m_hParticleSystem) == 0x58, "m_hParticleSystem in CParticleAnimTag should be at offset 0x58");
		static_assert(offsetof(CS2::animgraphlib::CParticleAnimTag, m_particleSystemName) == 0x60, "m_particleSystemName in CParticleAnimTag should be at offset 0x60");
		static_assert(offsetof(CS2::animgraphlib::CParticleAnimTag, m_configName) == 0x68, "m_configName in CParticleAnimTag should be at offset 0x68");
		static_assert(offsetof(CS2::animgraphlib::CParticleAnimTag, m_bDetachFromOwner) == 0x70, "m_bDetachFromOwner in CParticleAnimTag should be at offset 0x70");
		static_assert(offsetof(CS2::animgraphlib::CParticleAnimTag, m_bAggregate) == 0x71, "m_bAggregate in CParticleAnimTag should be at offset 0x71");
		static_assert(offsetof(CS2::animgraphlib::CParticleAnimTag, m_bStopWhenTagEnds) == 0x72, "m_bStopWhenTagEnds in CParticleAnimTag should be at offset 0x72");
		static_assert(offsetof(CS2::animgraphlib::CParticleAnimTag, m_bTagEndStopIsInstant) == 0x73, "m_bTagEndStopIsInstant in CParticleAnimTag should be at offset 0x73");
		static_assert(offsetof(CS2::animgraphlib::CParticleAnimTag, m_attachmentName) == 0x78, "m_attachmentName in CParticleAnimTag should be at offset 0x78");
		static_assert(offsetof(CS2::animgraphlib::CParticleAnimTag, m_attachmentType) == 0x80, "m_attachmentType in CParticleAnimTag should be at offset 0x80");
		static_assert(offsetof(CS2::animgraphlib::CParticleAnimTag, m_attachmentCP1Name) == 0x88, "m_attachmentCP1Name in CParticleAnimTag should be at offset 0x88");
		static_assert(offsetof(CS2::animgraphlib::CParticleAnimTag, m_attachmentCP1Type) == 0x90, "m_attachmentCP1Type in CParticleAnimTag should be at offset 0x90");
		static_assert(sizeof(CS2::animgraphlib::CParticleAnimTag) == 0x98, "CParticleAnimTag size should be 0x98");
	}
}
