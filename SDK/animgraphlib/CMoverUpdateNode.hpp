// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/animgraphlib/CUnaryUpdateNode.hpp>
#include <SDK/animgraphlib/CAnimInputDamping.hpp>
#include <SDK/animgraphlib/AnimValueSource.hpp>
#include <SDK/animgraphlib/CAnimParamHandle.hpp>



namespace CS2 {
	namespace animgraphlib {
		class CMoverUpdateNode : public CS2::animgraphlib::CUnaryUpdateNode {
		public:
			S2_PAD(0x8);
			animgraphlib::CAnimInputDamping m_damping; // 0x78 | Schema_DeclaredClass | Size: 0x18
			animgraphlib::AnimValueSource m_facingTarget; // 0x90 | Schema_DeclaredEnum | Size: 0x4
			animgraphlib::CAnimParamHandle m_hMoveVecParam; // 0x94 | Schema_DeclaredClass | Size: 0x2
			animgraphlib::CAnimParamHandle m_hMoveHeadingParam; // 0x96 | Schema_DeclaredClass | Size: 0x2
			animgraphlib::CAnimParamHandle m_hTurnToFaceParam; // 0x98 | Schema_DeclaredClass | Size: 0x2
			S2_PAD(0x2);
			float32 m_flTurnToFaceOffset; // 0x9c | Schema_Builtin | Size: 0x4
			float32 m_flTurnToFaceLimit; // 0xa0 | Schema_Builtin | Size: 0x4
			bool m_bAdditive; // 0xa4 | Schema_Builtin | Size: 0x1
			bool m_bApplyMovement; // 0xa5 | Schema_Builtin | Size: 0x1
			bool m_bOrientMovement; // 0xa6 | Schema_Builtin | Size: 0x1
			bool m_bApplyRotation; // 0xa7 | Schema_Builtin | Size: 0x1
			bool m_bLimitOnly; // 0xa8 | Schema_Builtin | Size: 0x1
			S2_PAD(0x7); // End padding
		};
		static_assert(offsetof(CS2::animgraphlib::CMoverUpdateNode, m_damping) == 0x78, "m_damping in CMoverUpdateNode should be at offset 0x78");
		static_assert(offsetof(CS2::animgraphlib::CMoverUpdateNode, m_facingTarget) == 0x90, "m_facingTarget in CMoverUpdateNode should be at offset 0x90");
		static_assert(offsetof(CS2::animgraphlib::CMoverUpdateNode, m_hMoveVecParam) == 0x94, "m_hMoveVecParam in CMoverUpdateNode should be at offset 0x94");
		static_assert(offsetof(CS2::animgraphlib::CMoverUpdateNode, m_hMoveHeadingParam) == 0x96, "m_hMoveHeadingParam in CMoverUpdateNode should be at offset 0x96");
		static_assert(offsetof(CS2::animgraphlib::CMoverUpdateNode, m_hTurnToFaceParam) == 0x98, "m_hTurnToFaceParam in CMoverUpdateNode should be at offset 0x98");
		static_assert(offsetof(CS2::animgraphlib::CMoverUpdateNode, m_flTurnToFaceOffset) == 0x9C, "m_flTurnToFaceOffset in CMoverUpdateNode should be at offset 0x9C");
		static_assert(offsetof(CS2::animgraphlib::CMoverUpdateNode, m_flTurnToFaceLimit) == 0xA0, "m_flTurnToFaceLimit in CMoverUpdateNode should be at offset 0xA0");
		static_assert(offsetof(CS2::animgraphlib::CMoverUpdateNode, m_bAdditive) == 0xA4, "m_bAdditive in CMoverUpdateNode should be at offset 0xA4");
		static_assert(offsetof(CS2::animgraphlib::CMoverUpdateNode, m_bApplyMovement) == 0xA5, "m_bApplyMovement in CMoverUpdateNode should be at offset 0xA5");
		static_assert(offsetof(CS2::animgraphlib::CMoverUpdateNode, m_bOrientMovement) == 0xA6, "m_bOrientMovement in CMoverUpdateNode should be at offset 0xA6");
		static_assert(offsetof(CS2::animgraphlib::CMoverUpdateNode, m_bApplyRotation) == 0xA7, "m_bApplyRotation in CMoverUpdateNode should be at offset 0xA7");
		static_assert(offsetof(CS2::animgraphlib::CMoverUpdateNode, m_bLimitOnly) == 0xA8, "m_bLimitOnly in CMoverUpdateNode should be at offset 0xA8");
		static_assert(sizeof(CS2::animgraphlib::CMoverUpdateNode) == 0xB0, "CMoverUpdateNode size should be 0xB0");
	}
}
