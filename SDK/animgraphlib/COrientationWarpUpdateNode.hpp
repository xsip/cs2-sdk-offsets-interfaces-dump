// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/animgraphlib/CUnaryUpdateNode.hpp>
#include <SDK/animgraphlib/OrientationWarpMode_t.hpp>
#include <SDK/animgraphlib/CAnimParamHandle.hpp>
#include <SDK/animgraphlib/OrientationWarpTargetOffsetMode_t.hpp>
#include <SDK/animgraphlib/CAnimInputDamping.hpp>
#include <SDK/animgraphlib/OrientationWarpRootMotionSource_t.hpp>
#include <SDK/animgraphlib/AnimValueSource.hpp>





using namespace GlobalTypes;
namespace CS2 {
	namespace animgraphlib {
		class COrientationWarpUpdateNode : public CS2::animgraphlib::CUnaryUpdateNode {
		public:
			S2_PAD(0x4);
			animgraphlib::OrientationWarpMode_t m_eMode; // 0x74 | Schema_DeclaredEnum | Size: 0x4
			animgraphlib::CAnimParamHandle m_hTargetParam; // 0x78 | Schema_DeclaredClass | Size: 0x2
			animgraphlib::CAnimParamHandle m_hTargetPositionParam; // 0x7a | Schema_DeclaredClass | Size: 0x2
			animgraphlib::CAnimParamHandle m_hFallbackTargetPositionParam; // 0x7c | Schema_DeclaredClass | Size: 0x2
			S2_PAD(0x2);
			animgraphlib::OrientationWarpTargetOffsetMode_t m_eTargetOffsetMode; // 0x80 | Schema_DeclaredEnum | Size: 0x4
			float32 m_flTargetOffset; // 0x84 | Schema_Builtin | Size: 0x4
			animgraphlib::CAnimParamHandle m_hTargetOffsetParam; // 0x88 | Schema_DeclaredClass | Size: 0x2
			S2_PAD(0x6);
			animgraphlib::CAnimInputDamping m_damping; // 0x90 | Schema_DeclaredClass | Size: 0x18
			animgraphlib::OrientationWarpRootMotionSource_t m_eRootMotionSource; // 0xa8 | Schema_DeclaredEnum | Size: 0x4
			float32 m_flMaxRootMotionScale; // 0xac | Schema_Builtin | Size: 0x4
			bool m_bEnablePreferredRotationDirection; // 0xb0 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			animgraphlib::AnimValueSource m_ePreferredRotationDirection; // 0xb4 | Schema_DeclaredEnum | Size: 0x4
			float32 m_flPreferredRotationThreshold; // 0xb8 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4); // End padding
		};
		static_assert(offsetof(CS2::animgraphlib::COrientationWarpUpdateNode, m_eMode) == 0x74, "m_eMode in COrientationWarpUpdateNode should be at offset 0x74");
		static_assert(offsetof(CS2::animgraphlib::COrientationWarpUpdateNode, m_hTargetParam) == 0x78, "m_hTargetParam in COrientationWarpUpdateNode should be at offset 0x78");
		static_assert(offsetof(CS2::animgraphlib::COrientationWarpUpdateNode, m_hTargetPositionParam) == 0x7A, "m_hTargetPositionParam in COrientationWarpUpdateNode should be at offset 0x7A");
		static_assert(offsetof(CS2::animgraphlib::COrientationWarpUpdateNode, m_hFallbackTargetPositionParam) == 0x7C, "m_hFallbackTargetPositionParam in COrientationWarpUpdateNode should be at offset 0x7C");
		static_assert(offsetof(CS2::animgraphlib::COrientationWarpUpdateNode, m_eTargetOffsetMode) == 0x80, "m_eTargetOffsetMode in COrientationWarpUpdateNode should be at offset 0x80");
		static_assert(offsetof(CS2::animgraphlib::COrientationWarpUpdateNode, m_flTargetOffset) == 0x84, "m_flTargetOffset in COrientationWarpUpdateNode should be at offset 0x84");
		static_assert(offsetof(CS2::animgraphlib::COrientationWarpUpdateNode, m_hTargetOffsetParam) == 0x88, "m_hTargetOffsetParam in COrientationWarpUpdateNode should be at offset 0x88");
		static_assert(offsetof(CS2::animgraphlib::COrientationWarpUpdateNode, m_damping) == 0x90, "m_damping in COrientationWarpUpdateNode should be at offset 0x90");
		static_assert(offsetof(CS2::animgraphlib::COrientationWarpUpdateNode, m_eRootMotionSource) == 0xA8, "m_eRootMotionSource in COrientationWarpUpdateNode should be at offset 0xA8");
		static_assert(offsetof(CS2::animgraphlib::COrientationWarpUpdateNode, m_flMaxRootMotionScale) == 0xAC, "m_flMaxRootMotionScale in COrientationWarpUpdateNode should be at offset 0xAC");
		static_assert(offsetof(CS2::animgraphlib::COrientationWarpUpdateNode, m_bEnablePreferredRotationDirection) == 0xB0, "m_bEnablePreferredRotationDirection in COrientationWarpUpdateNode should be at offset 0xB0");
		static_assert(offsetof(CS2::animgraphlib::COrientationWarpUpdateNode, m_ePreferredRotationDirection) == 0xB4, "m_ePreferredRotationDirection in COrientationWarpUpdateNode should be at offset 0xB4");
		static_assert(offsetof(CS2::animgraphlib::COrientationWarpUpdateNode, m_flPreferredRotationThreshold) == 0xB8, "m_flPreferredRotationThreshold in COrientationWarpUpdateNode should be at offset 0xB8");
		static_assert(sizeof(CS2::animgraphlib::COrientationWarpUpdateNode) == 0xC0, "COrientationWarpUpdateNode size should be 0xC0");
	}
}
