// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/animgraphlib/CAnimUpdateNodeBase.hpp>
#include <SDK/animgraphlib/CParamSpanUpdater.hpp>
#include <SDK/animgraphlib/CAnimInputDamping.hpp>
#include <SDK/animgraphlib/AnimValueSource.hpp>
#include <SDK/animgraphlib/CAnimParamHandle.hpp>
#include <SDK/animgraphlib/Blend2DMode.hpp>



namespace CS2 {
	namespace animgraphlib {
		class BlendItem_t;
		class TagSpan_t;
	}
}
namespace CS2 {
	namespace animgraphlib {
		class CBlend2DUpdateNode : public CS2::animgraphlib::CAnimUpdateNodeBase {
		public:
			S2_PAD(0x8);
			GlobalTypes::CUtlVector< animgraphlib::BlendItem_t > m_items; // 0x60 | Schema_Atomic | Size: 0x18
			// char  m_items[0x18]; // 0x60 | Schema_Atomic | Size: 0x18
			// GlobalTypes::CUtlVector< animgraphlib::BlendItem_t > m_items; // 0x60 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector< animgraphlib::TagSpan_t > m_tags; // 0x78 | Schema_Atomic | Size: 0x18
			// char  m_tags[0x18]; // 0x78 | Schema_Atomic | Size: 0x18
			// GlobalTypes::CUtlVector< animgraphlib::TagSpan_t > m_tags; // 0x78 | Schema_Atomic | Size: 0x18
			animgraphlib::CParamSpanUpdater m_paramSpans; // 0x90 | Schema_DeclaredClass | Size: 0x18
			// GlobalTypes::CUtlVector< int32 > m_nodeItemIndices; // 0xa8 | Schema_Atomic | Size: 0x18
			char  m_nodeItemIndices[0x18]; // 0xa8 | Schema_Atomic | Size: 0x18
			animgraphlib::CAnimInputDamping m_damping; // 0xc0 | Schema_DeclaredClass | Size: 0x18
			animgraphlib::AnimValueSource m_blendSourceX; // 0xd8 | Schema_DeclaredEnum | Size: 0x4
			animgraphlib::CAnimParamHandle m_paramX; // 0xdc | Schema_DeclaredClass | Size: 0x2
			S2_PAD(0x2);
			animgraphlib::AnimValueSource m_blendSourceY; // 0xe0 | Schema_DeclaredEnum | Size: 0x4
			animgraphlib::CAnimParamHandle m_paramY; // 0xe4 | Schema_DeclaredClass | Size: 0x2
			S2_PAD(0x2);
			animgraphlib::Blend2DMode m_eBlendMode; // 0xe8 | Schema_DeclaredEnum | Size: 0x4
			float32 m_playbackSpeed; // 0xec | Schema_Builtin | Size: 0x4
			bool m_bLoop; // 0xf0 | Schema_Builtin | Size: 0x1
			bool m_bLockBlendOnReset; // 0xf1 | Schema_Builtin | Size: 0x1
			bool m_bLockWhenWaning; // 0xf2 | Schema_Builtin | Size: 0x1
			bool m_bAnimEventsAndTagsOnMostWeightedOnly; // 0xf3 | Schema_Builtin | Size: 0x1
			S2_PAD(0x4); // End padding
		};
		static_assert(offsetof(CS2::animgraphlib::CBlend2DUpdateNode, m_items) == 0x60, "m_items in CBlend2DUpdateNode should be at offset 0x60");
		static_assert(offsetof(CS2::animgraphlib::CBlend2DUpdateNode, m_tags) == 0x78, "m_tags in CBlend2DUpdateNode should be at offset 0x78");
		static_assert(offsetof(CS2::animgraphlib::CBlend2DUpdateNode, m_paramSpans) == 0x90, "m_paramSpans in CBlend2DUpdateNode should be at offset 0x90");
		static_assert(offsetof(CS2::animgraphlib::CBlend2DUpdateNode, m_nodeItemIndices) == 0xA8, "m_nodeItemIndices in CBlend2DUpdateNode should be at offset 0xA8");
		static_assert(offsetof(CS2::animgraphlib::CBlend2DUpdateNode, m_damping) == 0xC0, "m_damping in CBlend2DUpdateNode should be at offset 0xC0");
		static_assert(offsetof(CS2::animgraphlib::CBlend2DUpdateNode, m_blendSourceX) == 0xD8, "m_blendSourceX in CBlend2DUpdateNode should be at offset 0xD8");
		static_assert(offsetof(CS2::animgraphlib::CBlend2DUpdateNode, m_paramX) == 0xDC, "m_paramX in CBlend2DUpdateNode should be at offset 0xDC");
		static_assert(offsetof(CS2::animgraphlib::CBlend2DUpdateNode, m_blendSourceY) == 0xE0, "m_blendSourceY in CBlend2DUpdateNode should be at offset 0xE0");
		static_assert(offsetof(CS2::animgraphlib::CBlend2DUpdateNode, m_paramY) == 0xE4, "m_paramY in CBlend2DUpdateNode should be at offset 0xE4");
		static_assert(offsetof(CS2::animgraphlib::CBlend2DUpdateNode, m_eBlendMode) == 0xE8, "m_eBlendMode in CBlend2DUpdateNode should be at offset 0xE8");
		static_assert(offsetof(CS2::animgraphlib::CBlend2DUpdateNode, m_playbackSpeed) == 0xEC, "m_playbackSpeed in CBlend2DUpdateNode should be at offset 0xEC");
		static_assert(offsetof(CS2::animgraphlib::CBlend2DUpdateNode, m_bLoop) == 0xF0, "m_bLoop in CBlend2DUpdateNode should be at offset 0xF0");
		static_assert(offsetof(CS2::animgraphlib::CBlend2DUpdateNode, m_bLockBlendOnReset) == 0xF1, "m_bLockBlendOnReset in CBlend2DUpdateNode should be at offset 0xF1");
		static_assert(offsetof(CS2::animgraphlib::CBlend2DUpdateNode, m_bLockWhenWaning) == 0xF2, "m_bLockWhenWaning in CBlend2DUpdateNode should be at offset 0xF2");
		static_assert(offsetof(CS2::animgraphlib::CBlend2DUpdateNode, m_bAnimEventsAndTagsOnMostWeightedOnly) == 0xF3, "m_bAnimEventsAndTagsOnMostWeightedOnly in CBlend2DUpdateNode should be at offset 0xF3");
		static_assert(sizeof(CS2::animgraphlib::CBlend2DUpdateNode) == 0xF8, "CBlend2DUpdateNode size should be 0xF8");
	}
}
