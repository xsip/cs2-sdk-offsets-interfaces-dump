// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/animgraphlib/CAnimUpdateNodeBase.hpp>
#include <SDK/animgraphlib/CBlendCurve.hpp>
#include <SDK/animgraphlib/CAnimParamHandle.hpp>
#include <SDK/animgraphlib/SelectorTagBehavior_t.hpp>



namespace CS2 {
	namespace animgraphlib {
		class CSelectorUpdateNode : public CS2::animgraphlib::CAnimUpdateNodeBase {
		public:
			S2_PAD(0x8);
			// GlobalTypes::CUtlVector< animgraphlib::CAnimUpdateNodeRef > m_children; // 0x60 | Schema_Atomic | Size: 0x18
			char  m_children[0x18]; // 0x60 | Schema_Atomic | Size: 0x18
			// GlobalTypes::CUtlVector< int8 > m_tags; // 0x78 | Schema_Atomic | Size: 0x18
			char  m_tags[0x18]; // 0x78 | Schema_Atomic | Size: 0x18
			S2_PAD(0x4);
			animgraphlib::CBlendCurve m_blendCurve; // 0x94 | Schema_DeclaredClass | Size: 0x8
			// GlobalTypes::CAnimValue< float32 > m_flBlendTime; // 0x9c | Schema_Atomic | Size: 0x8
			char  m_flBlendTime[0x8]; // 0x9c | Schema_Atomic | Size: 0x8
			animgraphlib::CAnimParamHandle m_hParameter; // 0xa4 | Schema_DeclaredClass | Size: 0x2
			S2_PAD(0x2);
			int32_t m_nTagIndex; // 0xa8 | Schema_Builtin | Size: 0x4
			animgraphlib::SelectorTagBehavior_t m_eTagBehavior; // 0xac | Schema_DeclaredEnum | Size: 0x4
			bool m_bResetOnChange; // 0xb0 | Schema_Builtin | Size: 0x1
			bool m_bLockWhenWaning; // 0xb1 | Schema_Builtin | Size: 0x1
			bool m_bSyncCyclesOnChange; // 0xb2 | Schema_Builtin | Size: 0x1
			S2_PAD(0x5); // End padding
		};
		static_assert(offsetof(CS2::animgraphlib::CSelectorUpdateNode, m_children) == 0x60, "m_children in CSelectorUpdateNode should be at offset 0x60");
		static_assert(offsetof(CS2::animgraphlib::CSelectorUpdateNode, m_tags) == 0x78, "m_tags in CSelectorUpdateNode should be at offset 0x78");
		static_assert(offsetof(CS2::animgraphlib::CSelectorUpdateNode, m_blendCurve) == 0x94, "m_blendCurve in CSelectorUpdateNode should be at offset 0x94");
		static_assert(offsetof(CS2::animgraphlib::CSelectorUpdateNode, m_flBlendTime) == 0x9C, "m_flBlendTime in CSelectorUpdateNode should be at offset 0x9C");
		static_assert(offsetof(CS2::animgraphlib::CSelectorUpdateNode, m_hParameter) == 0xA4, "m_hParameter in CSelectorUpdateNode should be at offset 0xA4");
		static_assert(offsetof(CS2::animgraphlib::CSelectorUpdateNode, m_nTagIndex) == 0xA8, "m_nTagIndex in CSelectorUpdateNode should be at offset 0xA8");
		static_assert(offsetof(CS2::animgraphlib::CSelectorUpdateNode, m_eTagBehavior) == 0xAC, "m_eTagBehavior in CSelectorUpdateNode should be at offset 0xAC");
		static_assert(offsetof(CS2::animgraphlib::CSelectorUpdateNode, m_bResetOnChange) == 0xB0, "m_bResetOnChange in CSelectorUpdateNode should be at offset 0xB0");
		static_assert(offsetof(CS2::animgraphlib::CSelectorUpdateNode, m_bLockWhenWaning) == 0xB1, "m_bLockWhenWaning in CSelectorUpdateNode should be at offset 0xB1");
		static_assert(offsetof(CS2::animgraphlib::CSelectorUpdateNode, m_bSyncCyclesOnChange) == 0xB2, "m_bSyncCyclesOnChange in CSelectorUpdateNode should be at offset 0xB2");
		static_assert(sizeof(CS2::animgraphlib::CSelectorUpdateNode) == 0xB8, "CSelectorUpdateNode size should be 0xB8");
	}
}
