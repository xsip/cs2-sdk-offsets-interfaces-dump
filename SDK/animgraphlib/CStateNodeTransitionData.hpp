// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/animgraphlib/CBlendCurve.hpp>





using namespace GlobalTypes;
namespace CS2 {
	namespace animgraphlib {
		class CStateNodeTransitionData  {
		public:
			animgraphlib::CBlendCurve m_curve; // 0x0 | Schema_DeclaredClass | Size: 0x8
			S2_PAD(0x14); // End padding
			S2_PAD(0x8);
			// GlobalTypes::CAnimValue< float32 > m_blendDuration; // 0x8 | Schema_Atomic | Size: 0x8
			char  m_blendDuration[0x8]; // 0x8 | Schema_Atomic | Size: 0x8
			// GlobalTypes::CAnimValue< float32 > m_resetCycleValue; // 0x10 | Schema_Atomic | Size: 0x8
			char  m_resetCycleValue[0x8]; // 0x10 | Schema_Atomic | Size: 0x8
			S2_PAD(0x4); // End padding
		};
		static_assert(offsetof(CS2::animgraphlib::CStateNodeTransitionData, m_curve) == 0x0, "m_curve in CStateNodeTransitionData should be at offset 0x0");
		static_assert(offsetof(CS2::animgraphlib::CStateNodeTransitionData, m_blendDuration) == 0x8, "m_blendDuration in CStateNodeTransitionData should be at offset 0x8");
		static_assert(offsetof(CS2::animgraphlib::CStateNodeTransitionData, m_resetCycleValue) == 0x10, "m_resetCycleValue in CStateNodeTransitionData should be at offset 0x10");
		static_assert(sizeof(CS2::animgraphlib::CStateNodeTransitionData) == 0x1C, "CStateNodeTransitionData size should be 0x1C");
	}
}
