// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/modellib/CAnimAttachment.hpp>
#include <SDK/animgraphlib/CAnimInputDamping.hpp>
#include <SDK/animgraphlib/CPoseHandle.hpp>
#include <SDK/animgraphlib/AimMatrixBlendMode.hpp>
#include <SDK/animgraphlib/CBlendCurve.hpp>



namespace CS2 {
	namespace animgraphlib {
		class AimMatrixOpFixedSettings_t  {
		public:
			modellib::CAnimAttachment m_attachment; // 0x0 | Schema_DeclaredClass | Size: 0x80
			animgraphlib::CAnimInputDamping m_damping; // 0x80 | Schema_DeclaredClass | Size: 0x18
			animgraphlib::CPoseHandle m_poseCacheHandles[10]; // 0x98 | Schema_FixedArray | Size: 0x190
			animgraphlib::AimMatrixBlendMode m_eBlendMode; // 0xc0 | Schema_DeclaredEnum | Size: 0x4
			float32 m_flMaxYawAngle; // 0xc4 | Schema_Builtin | Size: 0x4
			float32 m_flMaxPitchAngle; // 0xc8 | Schema_Builtin | Size: 0x4
			int32_t m_nSequenceMaxFrame; // 0xcc | Schema_Builtin | Size: 0x4
			int32_t m_nBoneMaskIndex; // 0xd0 | Schema_Builtin | Size: 0x4
			bool m_bTargetIsPosition; // 0xd4 | Schema_Builtin | Size: 0x1
			bool m_bUseBiasAndClamp; // 0xd5 | Schema_Builtin | Size: 0x1
			S2_PAD(0x2);
			float32 m_flBiasAndClampYawOffset; // 0xd8 | Schema_Builtin | Size: 0x4
			float32 m_flBiasAndClampPitchOffset; // 0xdc | Schema_Builtin | Size: 0x4
			animgraphlib::CBlendCurve m_biasAndClampBlendCurve; // 0xe0 | Schema_DeclaredClass | Size: 0x8
			S2_PAD(0x8); // End padding
		};
		static_assert(offsetof(CS2::animgraphlib::AimMatrixOpFixedSettings_t, m_attachment) == 0x0, "m_attachment in AimMatrixOpFixedSettings_t should be at offset 0x0");
		static_assert(offsetof(CS2::animgraphlib::AimMatrixOpFixedSettings_t, m_damping) == 0x80, "m_damping in AimMatrixOpFixedSettings_t should be at offset 0x80");
		static_assert(offsetof(CS2::animgraphlib::AimMatrixOpFixedSettings_t, m_poseCacheHandles) == 0x98, "m_poseCacheHandles in AimMatrixOpFixedSettings_t should be at offset 0x98");
		static_assert(offsetof(CS2::animgraphlib::AimMatrixOpFixedSettings_t, m_eBlendMode) == 0xC0, "m_eBlendMode in AimMatrixOpFixedSettings_t should be at offset 0xC0");
		static_assert(offsetof(CS2::animgraphlib::AimMatrixOpFixedSettings_t, m_flMaxYawAngle) == 0xC4, "m_flMaxYawAngle in AimMatrixOpFixedSettings_t should be at offset 0xC4");
		static_assert(offsetof(CS2::animgraphlib::AimMatrixOpFixedSettings_t, m_flMaxPitchAngle) == 0xC8, "m_flMaxPitchAngle in AimMatrixOpFixedSettings_t should be at offset 0xC8");
		static_assert(offsetof(CS2::animgraphlib::AimMatrixOpFixedSettings_t, m_nSequenceMaxFrame) == 0xCC, "m_nSequenceMaxFrame in AimMatrixOpFixedSettings_t should be at offset 0xCC");
		static_assert(offsetof(CS2::animgraphlib::AimMatrixOpFixedSettings_t, m_nBoneMaskIndex) == 0xD0, "m_nBoneMaskIndex in AimMatrixOpFixedSettings_t should be at offset 0xD0");
		static_assert(offsetof(CS2::animgraphlib::AimMatrixOpFixedSettings_t, m_bTargetIsPosition) == 0xD4, "m_bTargetIsPosition in AimMatrixOpFixedSettings_t should be at offset 0xD4");
		static_assert(offsetof(CS2::animgraphlib::AimMatrixOpFixedSettings_t, m_bUseBiasAndClamp) == 0xD5, "m_bUseBiasAndClamp in AimMatrixOpFixedSettings_t should be at offset 0xD5");
		static_assert(offsetof(CS2::animgraphlib::AimMatrixOpFixedSettings_t, m_flBiasAndClampYawOffset) == 0xD8, "m_flBiasAndClampYawOffset in AimMatrixOpFixedSettings_t should be at offset 0xD8");
		static_assert(offsetof(CS2::animgraphlib::AimMatrixOpFixedSettings_t, m_flBiasAndClampPitchOffset) == 0xDC, "m_flBiasAndClampPitchOffset in AimMatrixOpFixedSettings_t should be at offset 0xDC");
		static_assert(offsetof(CS2::animgraphlib::AimMatrixOpFixedSettings_t, m_biasAndClampBlendCurve) == 0xE0, "m_biasAndClampBlendCurve in AimMatrixOpFixedSettings_t should be at offset 0xE0");
		static_assert(sizeof(CS2::animgraphlib::AimMatrixOpFixedSettings_t) == 0xF0, "AimMatrixOpFixedSettings_t size should be 0xF0");
	}
}
