// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/tier2/CRangeFloat.hpp>



namespace CS2 {
	namespace animationsystem {
		class MoodAnimation_t;
	}
}
namespace CS2 {
	namespace animationsystem {
		class MoodAnimationLayer_t  {
		public:
			GlobalTypes::CUtlString m_sName; // 0x0 | Schema_Atomic | Size: 0x8
			bool m_bActiveListening; // 0x8 | Schema_Builtin | Size: 0x1
			bool m_bActiveTalking; // 0x9 | Schema_Builtin | Size: 0x1
			S2_PAD(0x6);
			GlobalTypes::CUtlVector< animationsystem::MoodAnimation_t > m_layerAnimations; // 0x10 | Schema_Atomic | Size: 0x18
			// char  m_layerAnimations[0x18]; // 0x10 | Schema_Atomic | Size: 0x18
			// GlobalTypes::CUtlVector< animationsystem::MoodAnimation_t > m_layerAnimations; // 0x10 | Schema_Atomic | Size: 0x18
			tier2::CRangeFloat m_flIntensity; // 0x28 | Schema_DeclaredClass | Size: 0x8
			tier2::CRangeFloat m_flDurationScale; // 0x30 | Schema_DeclaredClass | Size: 0x8
			bool m_bScaleWithInts; // 0x38 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			tier2::CRangeFloat m_flNextStart; // 0x3c | Schema_DeclaredClass | Size: 0x8
			tier2::CRangeFloat m_flStartOffset; // 0x44 | Schema_DeclaredClass | Size: 0x8
			tier2::CRangeFloat m_flEndOffset; // 0x4c | Schema_DeclaredClass | Size: 0x8
			float32 m_flFadeIn; // 0x54 | Schema_Builtin | Size: 0x4
			float32 m_flFadeOut; // 0x58 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4); // End padding
		};
		static_assert(offsetof(CS2::animationsystem::MoodAnimationLayer_t, m_sName) == 0x0, "m_sName in MoodAnimationLayer_t should be at offset 0x0");
		static_assert(offsetof(CS2::animationsystem::MoodAnimationLayer_t, m_bActiveListening) == 0x8, "m_bActiveListening in MoodAnimationLayer_t should be at offset 0x8");
		static_assert(offsetof(CS2::animationsystem::MoodAnimationLayer_t, m_bActiveTalking) == 0x9, "m_bActiveTalking in MoodAnimationLayer_t should be at offset 0x9");
		static_assert(offsetof(CS2::animationsystem::MoodAnimationLayer_t, m_layerAnimations) == 0x10, "m_layerAnimations in MoodAnimationLayer_t should be at offset 0x10");
		static_assert(offsetof(CS2::animationsystem::MoodAnimationLayer_t, m_flIntensity) == 0x28, "m_flIntensity in MoodAnimationLayer_t should be at offset 0x28");
		static_assert(offsetof(CS2::animationsystem::MoodAnimationLayer_t, m_flDurationScale) == 0x30, "m_flDurationScale in MoodAnimationLayer_t should be at offset 0x30");
		static_assert(offsetof(CS2::animationsystem::MoodAnimationLayer_t, m_bScaleWithInts) == 0x38, "m_bScaleWithInts in MoodAnimationLayer_t should be at offset 0x38");
		static_assert(offsetof(CS2::animationsystem::MoodAnimationLayer_t, m_flNextStart) == 0x3C, "m_flNextStart in MoodAnimationLayer_t should be at offset 0x3C");
		static_assert(offsetof(CS2::animationsystem::MoodAnimationLayer_t, m_flStartOffset) == 0x44, "m_flStartOffset in MoodAnimationLayer_t should be at offset 0x44");
		static_assert(offsetof(CS2::animationsystem::MoodAnimationLayer_t, m_flEndOffset) == 0x4C, "m_flEndOffset in MoodAnimationLayer_t should be at offset 0x4C");
		static_assert(offsetof(CS2::animationsystem::MoodAnimationLayer_t, m_flFadeIn) == 0x54, "m_flFadeIn in MoodAnimationLayer_t should be at offset 0x54");
		static_assert(offsetof(CS2::animationsystem::MoodAnimationLayer_t, m_flFadeOut) == 0x58, "m_flFadeOut in MoodAnimationLayer_t should be at offset 0x58");
		static_assert(sizeof(CS2::animationsystem::MoodAnimationLayer_t) == 0x60, "MoodAnimationLayer_t size should be 0x60");
	}
}
