// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif







using namespace GlobalTypes;
namespace CS2 {
	namespace animationsystem {
		class CCompressorGroup  {
		public:
			int32_t m_nTotalElementCount; // 0x0 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4);
			GlobalTypes::CUtlVector< �p��::char* > m_szChannelClass; // 0x8 | Schema_Atomic | Size: 0x18
			// char  m_szChannelClass[0x18]; // 0x8 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector< �p��::char* > m_szVariableName; // 0x20 | Schema_Atomic | Size: 0x18
			// char  m_szVariableName[0x18]; // 0x20 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector< fieldtype_t > m_nType; // 0x38 | Schema_Atomic | Size: 0x18
			// char  m_nType[0x18]; // 0x38 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector< int32 > m_nFlags; // 0x50 | Schema_Atomic | Size: 0x18
			// char  m_nFlags[0x18]; // 0x50 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector< GlobalTypes::CUtlString > m_szGrouping; // 0x68 | Schema_Atomic | Size: 0x18
			// char  m_szGrouping[0x18]; // 0x68 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector< int32 > m_nCompressorIndex; // 0x80 | Schema_Atomic | Size: 0x18
			// char  m_nCompressorIndex[0x18]; // 0x80 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector< GlobalTypes::CUtlVector< char* > > m_szElementNames; // 0x98 | Schema_Atomic | Size: 0x18
			// char  m_szElementNames[0x18]; // 0x98 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector< GlobalTypes::CUtlVector< int32 > > m_nElementUniqueID; // 0xb0 | Schema_Atomic | Size: 0x18
			// char  m_nElementUniqueID[0x18]; // 0xb0 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector< uint32 > m_nElementMask; // 0xc8 | Schema_Atomic | Size: 0x18
			// char  m_nElementMask[0x18]; // 0xc8 | Schema_Atomic | Size: 0x18
			S2_PAD(0x18);
			GlobalTypes::CUtlVector< �p��::CCompressor< Vector >* > m_vectorCompressor; // 0xf8 | Schema_Atomic | Size: 0x18
			// char  m_vectorCompressor[0x18]; // 0xf8 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector< �p��::CCompressor< QuaternionStorage >* > m_quaternionCompressor; // 0x110 | Schema_Atomic | Size: 0x18
			// char  m_quaternionCompressor[0x18]; // 0x110 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector< �p��::CCompressor< int32 >* > m_intCompressor; // 0x128 | Schema_Atomic | Size: 0x18
			// char  m_intCompressor[0x18]; // 0x128 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector< �p��::CCompressor< bool >* > m_boolCompressor; // 0x140 | Schema_Atomic | Size: 0x18
			// char  m_boolCompressor[0x18]; // 0x140 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector< �p��::CCompressor< Color >* > m_colorCompressor; // 0x158 | Schema_Atomic | Size: 0x18
			// char  m_colorCompressor[0x18]; // 0x158 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector< �p��::CCompressor< Vector2D >* > m_vector2DCompressor; // 0x170 | Schema_Atomic | Size: 0x18
			// char  m_vector2DCompressor[0x18]; // 0x170 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector< �p��::CCompressor< Vector4D >* > m_vector4DCompressor; // 0x188 | Schema_Atomic | Size: 0x18
			// char  m_vector4DCompressor[0x18]; // 0x188 | Schema_Atomic | Size: 0x18
		};
		static_assert(offsetof(CS2::animationsystem::CCompressorGroup, m_nTotalElementCount) == 0x0, "m_nTotalElementCount in CCompressorGroup should be at offset 0x0");
		static_assert(offsetof(CS2::animationsystem::CCompressorGroup, m_szChannelClass) == 0x8, "m_szChannelClass in CCompressorGroup should be at offset 0x8");
		static_assert(offsetof(CS2::animationsystem::CCompressorGroup, m_szVariableName) == 0x20, "m_szVariableName in CCompressorGroup should be at offset 0x20");
		static_assert(offsetof(CS2::animationsystem::CCompressorGroup, m_nType) == 0x38, "m_nType in CCompressorGroup should be at offset 0x38");
		static_assert(offsetof(CS2::animationsystem::CCompressorGroup, m_nFlags) == 0x50, "m_nFlags in CCompressorGroup should be at offset 0x50");
		static_assert(offsetof(CS2::animationsystem::CCompressorGroup, m_szGrouping) == 0x68, "m_szGrouping in CCompressorGroup should be at offset 0x68");
		static_assert(offsetof(CS2::animationsystem::CCompressorGroup, m_nCompressorIndex) == 0x80, "m_nCompressorIndex in CCompressorGroup should be at offset 0x80");
		static_assert(offsetof(CS2::animationsystem::CCompressorGroup, m_szElementNames) == 0x98, "m_szElementNames in CCompressorGroup should be at offset 0x98");
		static_assert(offsetof(CS2::animationsystem::CCompressorGroup, m_nElementUniqueID) == 0xB0, "m_nElementUniqueID in CCompressorGroup should be at offset 0xB0");
		static_assert(offsetof(CS2::animationsystem::CCompressorGroup, m_nElementMask) == 0xC8, "m_nElementMask in CCompressorGroup should be at offset 0xC8");
		static_assert(offsetof(CS2::animationsystem::CCompressorGroup, m_vectorCompressor) == 0xF8, "m_vectorCompressor in CCompressorGroup should be at offset 0xF8");
		static_assert(offsetof(CS2::animationsystem::CCompressorGroup, m_quaternionCompressor) == 0x110, "m_quaternionCompressor in CCompressorGroup should be at offset 0x110");
		static_assert(offsetof(CS2::animationsystem::CCompressorGroup, m_intCompressor) == 0x128, "m_intCompressor in CCompressorGroup should be at offset 0x128");
		static_assert(offsetof(CS2::animationsystem::CCompressorGroup, m_boolCompressor) == 0x140, "m_boolCompressor in CCompressorGroup should be at offset 0x140");
		static_assert(offsetof(CS2::animationsystem::CCompressorGroup, m_colorCompressor) == 0x158, "m_colorCompressor in CCompressorGroup should be at offset 0x158");
		static_assert(offsetof(CS2::animationsystem::CCompressorGroup, m_vector2DCompressor) == 0x170, "m_vector2DCompressor in CCompressorGroup should be at offset 0x170");
		static_assert(offsetof(CS2::animationsystem::CCompressorGroup, m_vector4DCompressor) == 0x188, "m_vector4DCompressor in CCompressorGroup should be at offset 0x188");
		static_assert(sizeof(CS2::animationsystem::CCompressorGroup) == 0x1A0, "CCompressorGroup size should be 0x1A0");
	}
}
