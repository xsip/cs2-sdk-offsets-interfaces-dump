// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif





namespace CS2 {
	namespace animationsystem {
		class CSeqS1SeqDesc;
		class CSeqSynthAnimDesc;
		class CSeqCmdSeqDesc;
		class CSeqBoneMaskList;
		class CSeqScaleSet;
		class CSeqPoseParamDesc;
		class CSeqIKLock;
	}
}


using namespace GlobalTypes;
namespace CS2 {
	namespace animationsystem {
		class CSequenceGroupData  {
		public:
			S2_PAD(0x10);
			GlobalTypes::CBufferString m_sName; // 0x10 | Schema_Atomic | Size: 0x10
			uint32_t m_nFlags; // 0x20 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4);
			GlobalTypes::CUtlVector< GlobalTypes::CBufferString > m_localSequenceNameArray; // 0x28 | Schema_Atomic | Size: 0x18
			// char  m_localSequenceNameArray[0x18]; // 0x28 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector< animationsystem::CSeqS1SeqDesc > m_localS1SeqDescArray; // 0x40 | Schema_Atomic | Size: 0x18
			// char  m_localS1SeqDescArray[0x18]; // 0x40 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector< animationsystem::CSeqS1SeqDesc > m_localMultiSeqDescArray; // 0x58 | Schema_Atomic | Size: 0x18
			// char  m_localMultiSeqDescArray[0x18]; // 0x58 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector< animationsystem::CSeqSynthAnimDesc > m_localSynthAnimDescArray; // 0x70 | Schema_Atomic | Size: 0x18
			// char  m_localSynthAnimDescArray[0x18]; // 0x70 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector< animationsystem::CSeqCmdSeqDesc > m_localCmdSeqDescArray; // 0x88 | Schema_Atomic | Size: 0x18
			// char  m_localCmdSeqDescArray[0x18]; // 0x88 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector< animationsystem::CSeqBoneMaskList > m_localBoneMaskArray; // 0xa0 | Schema_Atomic | Size: 0x18
			// char  m_localBoneMaskArray[0x18]; // 0xa0 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector< animationsystem::CSeqScaleSet > m_localScaleSetArray; // 0xb8 | Schema_Atomic | Size: 0x18
			// char  m_localScaleSetArray[0x18]; // 0xb8 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector< GlobalTypes::CBufferString > m_localBoneNameArray; // 0xd0 | Schema_Atomic | Size: 0x18
			// char  m_localBoneNameArray[0x18]; // 0xd0 | Schema_Atomic | Size: 0x18
			GlobalTypes::CBufferString m_localNodeName; // 0xe8 | Schema_Atomic | Size: 0x10
			GlobalTypes::CUtlVector< animationsystem::CSeqPoseParamDesc > m_localPoseParamArray; // 0xf8 | Schema_Atomic | Size: 0x18
			// char  m_localPoseParamArray[0x18]; // 0xf8 | Schema_Atomic | Size: 0x18
			GlobalTypes::KeyValues3 m_keyValues; // 0x110 | Schema_Atomic | Size: 0x10
			GlobalTypes::CUtlVector< animationsystem::CSeqIKLock > m_localIKAutoplayLockArray; // 0x120 | Schema_Atomic | Size: 0x18
			// char  m_localIKAutoplayLockArray[0x18]; // 0x120 | Schema_Atomic | Size: 0x18
		};
		static_assert(offsetof(CS2::animationsystem::CSequenceGroupData, m_sName) == 0x10, "m_sName in CSequenceGroupData should be at offset 0x10");
		static_assert(offsetof(CS2::animationsystem::CSequenceGroupData, m_nFlags) == 0x20, "m_nFlags in CSequenceGroupData should be at offset 0x20");
		static_assert(offsetof(CS2::animationsystem::CSequenceGroupData, m_localSequenceNameArray) == 0x28, "m_localSequenceNameArray in CSequenceGroupData should be at offset 0x28");
		static_assert(offsetof(CS2::animationsystem::CSequenceGroupData, m_localS1SeqDescArray) == 0x40, "m_localS1SeqDescArray in CSequenceGroupData should be at offset 0x40");
		static_assert(offsetof(CS2::animationsystem::CSequenceGroupData, m_localMultiSeqDescArray) == 0x58, "m_localMultiSeqDescArray in CSequenceGroupData should be at offset 0x58");
		static_assert(offsetof(CS2::animationsystem::CSequenceGroupData, m_localSynthAnimDescArray) == 0x70, "m_localSynthAnimDescArray in CSequenceGroupData should be at offset 0x70");
		static_assert(offsetof(CS2::animationsystem::CSequenceGroupData, m_localCmdSeqDescArray) == 0x88, "m_localCmdSeqDescArray in CSequenceGroupData should be at offset 0x88");
		static_assert(offsetof(CS2::animationsystem::CSequenceGroupData, m_localBoneMaskArray) == 0xA0, "m_localBoneMaskArray in CSequenceGroupData should be at offset 0xA0");
		static_assert(offsetof(CS2::animationsystem::CSequenceGroupData, m_localScaleSetArray) == 0xB8, "m_localScaleSetArray in CSequenceGroupData should be at offset 0xB8");
		static_assert(offsetof(CS2::animationsystem::CSequenceGroupData, m_localBoneNameArray) == 0xD0, "m_localBoneNameArray in CSequenceGroupData should be at offset 0xD0");
		static_assert(offsetof(CS2::animationsystem::CSequenceGroupData, m_localNodeName) == 0xE8, "m_localNodeName in CSequenceGroupData should be at offset 0xE8");
		static_assert(offsetof(CS2::animationsystem::CSequenceGroupData, m_localPoseParamArray) == 0xF8, "m_localPoseParamArray in CSequenceGroupData should be at offset 0xF8");
		static_assert(offsetof(CS2::animationsystem::CSequenceGroupData, m_keyValues) == 0x110, "m_keyValues in CSequenceGroupData should be at offset 0x110");
		static_assert(offsetof(CS2::animationsystem::CSequenceGroupData, m_localIKAutoplayLockArray) == 0x120, "m_localIKAutoplayLockArray in CSequenceGroupData should be at offset 0x120");
		static_assert(sizeof(CS2::animationsystem::CSequenceGroupData) == 0x138, "CSequenceGroupData size should be 0x138");
	}
}
