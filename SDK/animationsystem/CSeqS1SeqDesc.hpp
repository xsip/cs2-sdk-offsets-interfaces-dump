// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/animationsystem/CSeqSeqDescFlag.hpp>
#include <SDK/animationsystem/CSeqMultiFetch.hpp>
#include <SDK/animationsystem/CSeqTransition.hpp>



namespace CS2 {
	namespace animationsystem {
		class CSeqAutoLayer;
		class CSeqIKLock;
		class CAnimActivity;
	}
	namespace modellib {
		class CFootMotion;
	}
}


using namespace GlobalTypes;
namespace CS2 {
	namespace animationsystem {
		class CSeqS1SeqDesc  {
		public:
			GlobalTypes::CBufferString m_sName; // 0x0 | Schema_Atomic | Size: 0x10
			animationsystem::CSeqSeqDescFlag m_flags; // 0x10 | Schema_DeclaredClass | Size: 0xb
			S2_PAD(0x5);
			animationsystem::CSeqMultiFetch m_fetch; // 0x20 | Schema_DeclaredClass | Size: 0x70
			int32_t m_nLocalWeightlist; // 0x90 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4);
			GlobalTypes::CUtlVector<animationsystem::CSeqAutoLayer> m_autoLayerArray; // 0x98 | Schema_Atomic | Size: 0x18
			// char  m_autoLayerArray[0x18]; // 0x98 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector<animationsystem::CSeqIKLock> m_IKLockArray; // 0xb0 | Schema_Atomic | Size: 0x18
			// char  m_IKLockArray[0x18]; // 0xb0 | Schema_Atomic | Size: 0x18
			animationsystem::CSeqTransition m_transition; // 0xc8 | Schema_DeclaredClass | Size: 0x8
			GlobalTypes::KeyValues3 m_SequenceKeys; // 0xd0 | Schema_Atomic | Size: 0x10
			GlobalTypes::CBufferString m_LegacyKeyValueText; // 0xe0 | Schema_Atomic | Size: 0x10
			GlobalTypes::CUtlVector<animationsystem::CAnimActivity> m_activityArray; // 0xf0 | Schema_Atomic | Size: 0x18
			// char  m_activityArray[0x18]; // 0xf0 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector<modellib::CFootMotion> m_footMotion; // 0x108 | Schema_Atomic | Size: 0x18
			// char  m_footMotion[0x18]; // 0x108 | Schema_Atomic | Size: 0x18
		};
		static_assert(offsetof(CS2::animationsystem::CSeqS1SeqDesc, m_sName) == 0x0, "m_sName in CSeqS1SeqDesc should be at offset 0x0");
		static_assert(offsetof(CS2::animationsystem::CSeqS1SeqDesc, m_flags) == 0x10, "m_flags in CSeqS1SeqDesc should be at offset 0x10");
		static_assert(offsetof(CS2::animationsystem::CSeqS1SeqDesc, m_fetch) == 0x20, "m_fetch in CSeqS1SeqDesc should be at offset 0x20");
		static_assert(offsetof(CS2::animationsystem::CSeqS1SeqDesc, m_nLocalWeightlist) == 0x90, "m_nLocalWeightlist in CSeqS1SeqDesc should be at offset 0x90");
		static_assert(offsetof(CS2::animationsystem::CSeqS1SeqDesc, m_autoLayerArray) == 0x98, "m_autoLayerArray in CSeqS1SeqDesc should be at offset 0x98");
		static_assert(offsetof(CS2::animationsystem::CSeqS1SeqDesc, m_IKLockArray) == 0xB0, "m_IKLockArray in CSeqS1SeqDesc should be at offset 0xB0");
		static_assert(offsetof(CS2::animationsystem::CSeqS1SeqDesc, m_transition) == 0xC8, "m_transition in CSeqS1SeqDesc should be at offset 0xC8");
		static_assert(offsetof(CS2::animationsystem::CSeqS1SeqDesc, m_SequenceKeys) == 0xD0, "m_SequenceKeys in CSeqS1SeqDesc should be at offset 0xD0");
		static_assert(offsetof(CS2::animationsystem::CSeqS1SeqDesc, m_LegacyKeyValueText) == 0xE0, "m_LegacyKeyValueText in CSeqS1SeqDesc should be at offset 0xE0");
		static_assert(offsetof(CS2::animationsystem::CSeqS1SeqDesc, m_activityArray) == 0xF0, "m_activityArray in CSeqS1SeqDesc should be at offset 0xF0");
		static_assert(offsetof(CS2::animationsystem::CSeqS1SeqDesc, m_footMotion) == 0x108, "m_footMotion in CSeqS1SeqDesc should be at offset 0x108");
		static_assert(sizeof(CS2::animationsystem::CSeqS1SeqDesc) == 0x120, "CSeqS1SeqDesc size should be 0x120");
	}
}
