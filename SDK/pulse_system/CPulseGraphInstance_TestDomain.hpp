// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/pulse_runtime_lib/CBasePulseGraphInstance.hpp>





using namespace GlobalTypes;
namespace CS2 {
	namespace pulse_system {
		class CPulseGraphInstance_TestDomain : public CS2::pulse_runtime_lib::CBasePulseGraphInstance {
		public:
			S2_PAD(0x18);
			bool m_bIsRunningUnitTests; // 0x130 | Schema_Builtin | Size: 0x1
			bool m_bExplicitTimeStepping; // 0x131 | Schema_Builtin | Size: 0x1
			bool m_bExpectingToDestroyWithYieldedCursors; // 0x132 | Schema_Builtin | Size: 0x1
			bool m_bQuietTracepoints; // 0x133 | Schema_Builtin | Size: 0x1
			bool m_bExpectingCursorTerminatedDueToMaxInstructions; // 0x134 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			int32_t m_nCursorsTerminatedDueToMaxInstructions; // 0x138 | Schema_Builtin | Size: 0x4
			int32_t m_nNextValidateIndex; // 0x13c | Schema_Builtin | Size: 0x4
			GlobalTypes::CUtlVector<GlobalTypes::CUtlString> m_Tracepoints; // 0x140 | Schema_Atomic | Size: 0x18
			// char  m_Tracepoints[0x18]; // 0x140 | Schema_Atomic | Size: 0x18
			bool m_bTestYesOrNoPath; // 0x158 | Schema_Builtin | Size: 0x1
			S2_PAD(0x7); // End padding
		};
		static_assert(offsetof(CS2::pulse_system::CPulseGraphInstance_TestDomain, m_bIsRunningUnitTests) == 0x130, "m_bIsRunningUnitTests in CPulseGraphInstance_TestDomain should be at offset 0x130");
		static_assert(offsetof(CS2::pulse_system::CPulseGraphInstance_TestDomain, m_bExplicitTimeStepping) == 0x131, "m_bExplicitTimeStepping in CPulseGraphInstance_TestDomain should be at offset 0x131");
		static_assert(offsetof(CS2::pulse_system::CPulseGraphInstance_TestDomain, m_bExpectingToDestroyWithYieldedCursors) == 0x132, "m_bExpectingToDestroyWithYieldedCursors in CPulseGraphInstance_TestDomain should be at offset 0x132");
		static_assert(offsetof(CS2::pulse_system::CPulseGraphInstance_TestDomain, m_bQuietTracepoints) == 0x133, "m_bQuietTracepoints in CPulseGraphInstance_TestDomain should be at offset 0x133");
		static_assert(offsetof(CS2::pulse_system::CPulseGraphInstance_TestDomain, m_bExpectingCursorTerminatedDueToMaxInstructions) == 0x134, "m_bExpectingCursorTerminatedDueToMaxInstructions in CPulseGraphInstance_TestDomain should be at offset 0x134");
		static_assert(offsetof(CS2::pulse_system::CPulseGraphInstance_TestDomain, m_nCursorsTerminatedDueToMaxInstructions) == 0x138, "m_nCursorsTerminatedDueToMaxInstructions in CPulseGraphInstance_TestDomain should be at offset 0x138");
		static_assert(offsetof(CS2::pulse_system::CPulseGraphInstance_TestDomain, m_nNextValidateIndex) == 0x13C, "m_nNextValidateIndex in CPulseGraphInstance_TestDomain should be at offset 0x13C");
		static_assert(offsetof(CS2::pulse_system::CPulseGraphInstance_TestDomain, m_Tracepoints) == 0x140, "m_Tracepoints in CPulseGraphInstance_TestDomain should be at offset 0x140");
		static_assert(offsetof(CS2::pulse_system::CPulseGraphInstance_TestDomain, m_bTestYesOrNoPath) == 0x158, "m_bTestYesOrNoPath in CPulseGraphInstance_TestDomain should be at offset 0x158");
		static_assert(sizeof(CS2::pulse_system::CPulseGraphInstance_TestDomain) == 0x160, "CPulseGraphInstance_TestDomain size should be 0x160");
	}
}
