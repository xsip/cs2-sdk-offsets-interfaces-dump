// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif





namespace CS2 {
	namespace schemasystem {
		class CSchemaSystemInternalRegistration  {
		public:
			GlobalTypes::Vector2D m_Vector2D; // 0x0 | Schema_Atomic | Size: 0x8
			GlobalTypes::Vector m_Vector; // 0x8 | Schema_Atomic | Size: 0xc
			GlobalTypes::VectorWS m_VectorWS; // 0x14 | Schema_Atomic | Size: 0xc
			GlobalTypes::VectorAligned m_VectorAligned; // 0x20 | Schema_Atomic | Size: 0x10
			GlobalTypes::Quaternion m_Quaternion; // 0x30 | Schema_Atomic | Size: 0x10
			GlobalTypes::QAngle m_QAngle; // 0x40 | Schema_Atomic | Size: 0xc
			GlobalTypes::RotationVector m_RotationVector; // 0x4c | Schema_Atomic | Size: 0xc
			GlobalTypes::RadianEuler m_RadianEuler; // 0x58 | Schema_Atomic | Size: 0xc
			GlobalTypes::DegreeEuler m_DegreeEuler; // 0x64 | Schema_Atomic | Size: 0xc
			GlobalTypes::QuaternionStorage m_QuaternionStorage; // 0x70 | Schema_Atomic | Size: 0x10
			GlobalTypes::matrix3x4_t m_matrix3x4_t; // 0x80 | Schema_Atomic | Size: 0x30
			GlobalTypes::matrix3x4a_t m_matrix3x4a_t; // 0xb0 | Schema_Atomic | Size: 0x30
			GlobalTypes::Color m_Color; // 0xe0 | Schema_Atomic | Size: 0x4
			GlobalTypes::Vector4D m_Vector4D; // 0xe4 | Schema_Atomic | Size: 0x10
			S2_PAD(0xc);
			GlobalTypes::CTransform m_CTransform; // 0x100 | Schema_Atomic | Size: 0x20
			GlobalTypes::KeyValues* m_pKeyValues; // 0x120 | Schema_Ptr | Size: 0x8
			GlobalTypes::CUtlBinaryBlock m_CUtlBinaryBlock; // 0x128 | Schema_Atomic | Size: 0x10
			GlobalTypes::CUtlString m_CUtlString; // 0x138 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlSymbol m_CUtlSymbol; // 0x140 | Schema_Atomic | Size: 0x2
			S2_PAD(0x2);
			GlobalTypes::CUtlStringToken m_stringToken; // 0x144 | Schema_Atomic | Size: 0x4
			GlobalTypes::CUtlStringTokenWithStorage m_stringTokenWithStorage; // 0x148 | Schema_Atomic | Size: 0x18
			// GlobalTypes::CResourceArray< GlobalTypes::CResourcePointer< CResourceString > > m_ResourceTypes; // 0x160 | Schema_Atomic | Size: 0x8
			char  m_ResourceTypes[0x8]; // 0x160 | Schema_Atomic | Size: 0x8
			GlobalTypes::KeyValues3 m_KV3; // 0x168 | Schema_Atomic | Size: 0x10
			S2_PAD(0x8); // End padding
		};
		static_assert(offsetof(CS2::schemasystem::CSchemaSystemInternalRegistration, m_Vector2D) == 0x0, "m_Vector2D in CSchemaSystemInternalRegistration should be at offset 0x0");
		static_assert(offsetof(CS2::schemasystem::CSchemaSystemInternalRegistration, m_Vector) == 0x8, "m_Vector in CSchemaSystemInternalRegistration should be at offset 0x8");
		static_assert(offsetof(CS2::schemasystem::CSchemaSystemInternalRegistration, m_VectorWS) == 0x14, "m_VectorWS in CSchemaSystemInternalRegistration should be at offset 0x14");
		static_assert(offsetof(CS2::schemasystem::CSchemaSystemInternalRegistration, m_VectorAligned) == 0x20, "m_VectorAligned in CSchemaSystemInternalRegistration should be at offset 0x20");
		static_assert(offsetof(CS2::schemasystem::CSchemaSystemInternalRegistration, m_Quaternion) == 0x30, "m_Quaternion in CSchemaSystemInternalRegistration should be at offset 0x30");
		static_assert(offsetof(CS2::schemasystem::CSchemaSystemInternalRegistration, m_QAngle) == 0x40, "m_QAngle in CSchemaSystemInternalRegistration should be at offset 0x40");
		static_assert(offsetof(CS2::schemasystem::CSchemaSystemInternalRegistration, m_RotationVector) == 0x4C, "m_RotationVector in CSchemaSystemInternalRegistration should be at offset 0x4C");
		static_assert(offsetof(CS2::schemasystem::CSchemaSystemInternalRegistration, m_RadianEuler) == 0x58, "m_RadianEuler in CSchemaSystemInternalRegistration should be at offset 0x58");
		static_assert(offsetof(CS2::schemasystem::CSchemaSystemInternalRegistration, m_DegreeEuler) == 0x64, "m_DegreeEuler in CSchemaSystemInternalRegistration should be at offset 0x64");
		static_assert(offsetof(CS2::schemasystem::CSchemaSystemInternalRegistration, m_QuaternionStorage) == 0x70, "m_QuaternionStorage in CSchemaSystemInternalRegistration should be at offset 0x70");
		static_assert(offsetof(CS2::schemasystem::CSchemaSystemInternalRegistration, m_matrix3x4_t) == 0x80, "m_matrix3x4_t in CSchemaSystemInternalRegistration should be at offset 0x80");
		static_assert(offsetof(CS2::schemasystem::CSchemaSystemInternalRegistration, m_matrix3x4a_t) == 0xB0, "m_matrix3x4a_t in CSchemaSystemInternalRegistration should be at offset 0xB0");
		static_assert(offsetof(CS2::schemasystem::CSchemaSystemInternalRegistration, m_Color) == 0xE0, "m_Color in CSchemaSystemInternalRegistration should be at offset 0xE0");
		static_assert(offsetof(CS2::schemasystem::CSchemaSystemInternalRegistration, m_Vector4D) == 0xE4, "m_Vector4D in CSchemaSystemInternalRegistration should be at offset 0xE4");
		static_assert(offsetof(CS2::schemasystem::CSchemaSystemInternalRegistration, m_CTransform) == 0x100, "m_CTransform in CSchemaSystemInternalRegistration should be at offset 0x100");
		static_assert(offsetof(CS2::schemasystem::CSchemaSystemInternalRegistration, m_pKeyValues) == 0x120, "m_pKeyValues in CSchemaSystemInternalRegistration should be at offset 0x120");
		static_assert(offsetof(CS2::schemasystem::CSchemaSystemInternalRegistration, m_CUtlBinaryBlock) == 0x128, "m_CUtlBinaryBlock in CSchemaSystemInternalRegistration should be at offset 0x128");
		static_assert(offsetof(CS2::schemasystem::CSchemaSystemInternalRegistration, m_CUtlString) == 0x138, "m_CUtlString in CSchemaSystemInternalRegistration should be at offset 0x138");
		static_assert(offsetof(CS2::schemasystem::CSchemaSystemInternalRegistration, m_CUtlSymbol) == 0x140, "m_CUtlSymbol in CSchemaSystemInternalRegistration should be at offset 0x140");
		static_assert(offsetof(CS2::schemasystem::CSchemaSystemInternalRegistration, m_stringToken) == 0x144, "m_stringToken in CSchemaSystemInternalRegistration should be at offset 0x144");
		static_assert(offsetof(CS2::schemasystem::CSchemaSystemInternalRegistration, m_stringTokenWithStorage) == 0x148, "m_stringTokenWithStorage in CSchemaSystemInternalRegistration should be at offset 0x148");
		static_assert(offsetof(CS2::schemasystem::CSchemaSystemInternalRegistration, m_ResourceTypes) == 0x160, "m_ResourceTypes in CSchemaSystemInternalRegistration should be at offset 0x160");
		static_assert(offsetof(CS2::schemasystem::CSchemaSystemInternalRegistration, m_KV3) == 0x168, "m_KV3 in CSchemaSystemInternalRegistration should be at offset 0x168");
		static_assert(sizeof(CS2::schemasystem::CSchemaSystemInternalRegistration) == 0x180, "CSchemaSystemInternalRegistration size should be 0x180");
	}
}
