// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/client/C_BaseEntity.hpp>



namespace CS2 {
	namespace client {
		class C_PathParticleRope : public CS2::client::C_BaseEntity {
		public:
			S2_PAD(0x8);
			bool m_bStartActive; // 0x600 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			float32 m_flMaxSimulationTime; // 0x604 | Schema_Builtin | Size: 0x4
			GlobalTypes::CUtlSymbolLarge m_iszEffectName; // 0x608 | Schema_Atomic | Size: 0x8
			// GlobalTypes::CUtlVector< GlobalTypes::CUtlSymbolLarge > m_PathNodes_Name; // 0x610 | Schema_Atomic | Size: 0x18
			char  m_PathNodes_Name[0x18]; // 0x610 | Schema_Atomic | Size: 0x18
			float32 m_flParticleSpacing; // 0x628 | Schema_Builtin | Size: 0x4
			float32 m_flSlack; // 0x62c | Schema_Builtin | Size: 0x4
			float32 m_flRadius; // 0x630 | Schema_Builtin | Size: 0x4
			GlobalTypes::Color m_ColorTint; // 0x634 | Schema_Atomic | Size: 0x4
			int32_t m_nEffectState; // 0x638 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4);
			// GlobalTypes::CStrongHandle< resourcesystem::InfoForResourceTypeIParticleSystemDefinition > m_iEffectIndex; // 0x640 | Schema_Atomic | Size: 0x8
			char  m_iEffectIndex[0x8]; // 0x640 | Schema_Atomic | Size: 0x8
			// GlobalTypes::C_NetworkUtlGlobalTypes::VectorBase< Vector > m_PathNodes_Position; // 0x648 | Schema_Atomic | Size: 0x18
			char  m_PathNodes_Position[0x18]; // 0x648 | Schema_Atomic | Size: 0x18
			// GlobalTypes::C_NetworkUtlGlobalTypes::VectorBase< Vector > m_PathNodes_TangentIn; // 0x660 | Schema_Atomic | Size: 0x18
			char  m_PathNodes_TangentIn[0x18]; // 0x660 | Schema_Atomic | Size: 0x18
			// GlobalTypes::C_NetworkUtlGlobalTypes::VectorBase< Vector > m_PathNodes_TangentOut; // 0x678 | Schema_Atomic | Size: 0x18
			char  m_PathNodes_TangentOut[0x18]; // 0x678 | Schema_Atomic | Size: 0x18
			// GlobalTypes::C_NetworkUtlGlobalTypes::VectorBase< Vector > m_PathNodes_Color; // 0x690 | Schema_Atomic | Size: 0x18
			char  m_PathNodes_Color[0x18]; // 0x690 | Schema_Atomic | Size: 0x18
			// GlobalTypes::C_NetworkUtlVectorBase< bool > m_PathNodes_PinEnabled; // 0x6a8 | Schema_Atomic | Size: 0x18
			char  m_PathNodes_PinEnabled[0x18]; // 0x6a8 | Schema_Atomic | Size: 0x18
			// GlobalTypes::C_NetworkUtlVectorBase< float32 > m_PathNodes_RadiusScale; // 0x6c0 | Schema_Atomic | Size: 0x18
			char  m_PathNodes_RadiusScale[0x18]; // 0x6c0 | Schema_Atomic | Size: 0x18
			S2_PAD(0x30); // End padding
		};
		static_assert(offsetof(CS2::client::C_PathParticleRope, m_bStartActive) == 0x600, "m_bStartActive in C_PathParticleRope should be at offset 0x600");
		static_assert(offsetof(CS2::client::C_PathParticleRope, m_flMaxSimulationTime) == 0x604, "m_flMaxSimulationTime in C_PathParticleRope should be at offset 0x604");
		static_assert(offsetof(CS2::client::C_PathParticleRope, m_iszEffectName) == 0x608, "m_iszEffectName in C_PathParticleRope should be at offset 0x608");
		static_assert(offsetof(CS2::client::C_PathParticleRope, m_PathNodes_Name) == 0x610, "m_PathNodes_Name in C_PathParticleRope should be at offset 0x610");
		static_assert(offsetof(CS2::client::C_PathParticleRope, m_flParticleSpacing) == 0x628, "m_flParticleSpacing in C_PathParticleRope should be at offset 0x628");
		static_assert(offsetof(CS2::client::C_PathParticleRope, m_flSlack) == 0x62C, "m_flSlack in C_PathParticleRope should be at offset 0x62C");
		static_assert(offsetof(CS2::client::C_PathParticleRope, m_flRadius) == 0x630, "m_flRadius in C_PathParticleRope should be at offset 0x630");
		static_assert(offsetof(CS2::client::C_PathParticleRope, m_ColorTint) == 0x634, "m_ColorTint in C_PathParticleRope should be at offset 0x634");
		static_assert(offsetof(CS2::client::C_PathParticleRope, m_nEffectState) == 0x638, "m_nEffectState in C_PathParticleRope should be at offset 0x638");
		static_assert(offsetof(CS2::client::C_PathParticleRope, m_iEffectIndex) == 0x640, "m_iEffectIndex in C_PathParticleRope should be at offset 0x640");
		static_assert(offsetof(CS2::client::C_PathParticleRope, m_PathNodes_Position) == 0x648, "m_PathNodes_Position in C_PathParticleRope should be at offset 0x648");
		static_assert(offsetof(CS2::client::C_PathParticleRope, m_PathNodes_TangentIn) == 0x660, "m_PathNodes_TangentIn in C_PathParticleRope should be at offset 0x660");
		static_assert(offsetof(CS2::client::C_PathParticleRope, m_PathNodes_TangentOut) == 0x678, "m_PathNodes_TangentOut in C_PathParticleRope should be at offset 0x678");
		static_assert(offsetof(CS2::client::C_PathParticleRope, m_PathNodes_Color) == 0x690, "m_PathNodes_Color in C_PathParticleRope should be at offset 0x690");
		static_assert(offsetof(CS2::client::C_PathParticleRope, m_PathNodes_PinEnabled) == 0x6A8, "m_PathNodes_PinEnabled in C_PathParticleRope should be at offset 0x6A8");
		static_assert(offsetof(CS2::client::C_PathParticleRope, m_PathNodes_RadiusScale) == 0x6C0, "m_PathNodes_RadiusScale in C_PathParticleRope should be at offset 0x6C0");
		static_assert(sizeof(CS2::client::C_PathParticleRope) == 0x708, "C_PathParticleRope size should be 0x708");
	}
}
