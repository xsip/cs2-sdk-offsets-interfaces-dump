// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>

#include <SDK/client/C_TeamplayRules.hpp>
#include <SDK/entity2/GameTime_t.hpp>
#include <SDK/client/C_RetakeGameRules.hpp>



namespace CS2 {
	namespace client {
		class CCSGameModeRules;
	}
}
namespace CS2 {
	namespace client {
		class C_CSGameRules : public CS2::client::C_TeamplayRules {
		public:
			bool m_bFreezePeriod; // 0x40 | Schema_Builtin | Size: 0x1
			bool m_bWarmupPeriod; // 0x41 | Schema_Builtin | Size: 0x1
			S2_PAD(0x2);
			entity2::GameTime_t m_fWarmupPeriodEnd; // 0x44 | Schema_DeclaredClass | Size: 0x4
			entity2::GameTime_t m_fWarmupPeriodStart; // 0x48 | Schema_DeclaredClass | Size: 0x4
			bool m_bTerroristTimeOutActive; // 0x4c | Schema_Builtin | Size: 0x1
			bool m_bCTTimeOutActive; // 0x4d | Schema_Builtin | Size: 0x1
			S2_PAD(0x2);
			float32 m_flTerroristTimeOutRemaining; // 0x50 | Schema_Builtin | Size: 0x4
			float32 m_flCTTimeOutRemaining; // 0x54 | Schema_Builtin | Size: 0x4
			int32_t m_nTerroristTimeOuts; // 0x58 | Schema_Builtin | Size: 0x4
			int32_t m_nCTTimeOuts; // 0x5c | Schema_Builtin | Size: 0x4
			bool m_bTechnicalTimeOut; // 0x60 | Schema_Builtin | Size: 0x1
			bool m_bMatchWaitingForResume; // 0x61 | Schema_Builtin | Size: 0x1
			S2_PAD(0x2);
			int32_t m_iRoundTime; // 0x64 | Schema_Builtin | Size: 0x4
			float32 m_fMatchStartTime; // 0x68 | Schema_Builtin | Size: 0x4
			entity2::GameTime_t m_fRoundStartTime; // 0x6c | Schema_DeclaredClass | Size: 0x4
			entity2::GameTime_t m_flRestartRoundTime; // 0x70 | Schema_DeclaredClass | Size: 0x4
			bool m_bGameRestart; // 0x74 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			float32 m_flGameStartTime; // 0x78 | Schema_Builtin | Size: 0x4
			float32 m_timeUntilNextPhaseStarts; // 0x7c | Schema_Builtin | Size: 0x4
			int32_t m_gamePhase; // 0x80 | Schema_Builtin | Size: 0x4
			int32_t m_totalRoundsPlayed; // 0x84 | Schema_Builtin | Size: 0x4
			int32_t m_nRoundsPlayedThisPhase; // 0x88 | Schema_Builtin | Size: 0x4
			int32_t m_nOvertimePlaying; // 0x8c | Schema_Builtin | Size: 0x4
			int32_t m_iHostagesRemaining; // 0x90 | Schema_Builtin | Size: 0x4
			bool m_bAnyHostageReached; // 0x94 | Schema_Builtin | Size: 0x1
			bool m_bMapHasBombTarget; // 0x95 | Schema_Builtin | Size: 0x1
			bool m_bMapHasRescueZone; // 0x96 | Schema_Builtin | Size: 0x1
			bool m_bMapHasBuyZone; // 0x97 | Schema_Builtin | Size: 0x1
			bool m_bIsQueuedMatchmaking; // 0x98 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			int32_t m_nQueuedMatchmakingMode; // 0x9c | Schema_Builtin | Size: 0x4
			bool m_bIsValveDS; // 0xa0 | Schema_Builtin | Size: 0x1
			bool m_bLogoMap; // 0xa1 | Schema_Builtin | Size: 0x1
			bool m_bPlayAllStepSoundsOnServer; // 0xa2 | Schema_Builtin | Size: 0x1
			S2_PAD(0x1);
			int32_t m_iSpectatorSlotCount; // 0xa4 | Schema_Builtin | Size: 0x4
			int32_t m_MatchDevice; // 0xa8 | Schema_Builtin | Size: 0x4
			bool m_bHasMatchStarted; // 0xac | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			int32_t m_nNextMapInMapgroup; // 0xb0 | Schema_Builtin | Size: 0x4
			char m_szTournamentEventName[512]; // 0xb4 | Schema_FixedArray | Size: 0x200
			char m_szTournamentEventStage[512]; // 0x2b4 | Schema_FixedArray | Size: 0x200
			char m_szMatchStatTxt[512]; // 0x4b4 | Schema_FixedArray | Size: 0x200
			char m_szTournamentPredictionsTxt[512]; // 0x6b4 | Schema_FixedArray | Size: 0x200
			int32_t m_nTournamentPredictionsPct; // 0x8b4 | Schema_Builtin | Size: 0x4
			entity2::GameTime_t m_flCMMItemDropRevealStartTime; // 0x8b8 | Schema_DeclaredClass | Size: 0x4
			entity2::GameTime_t m_flCMMItemDropRevealEndTime; // 0x8bc | Schema_DeclaredClass | Size: 0x4
			bool m_bIsDroppingItems; // 0x8c0 | Schema_Builtin | Size: 0x1
			bool m_bIsQuestEligible; // 0x8c1 | Schema_Builtin | Size: 0x1
			bool m_bIsHltvActive; // 0x8c2 | Schema_Builtin | Size: 0x1
			S2_PAD(0x1);
			uint16_t m_arrProhibitedItemIndices[100]; // 0x8c4 | Schema_FixedArray | Size: 0xc8
			uint32_t m_arrTournamentActiveCasterAccounts[4]; // 0x98c | Schema_FixedArray | Size: 0x10
			int32_t m_numBestOfMaps; // 0x99c | Schema_Builtin | Size: 0x4
			int32_t m_nHalloweenMaskListSeed; // 0x9a0 | Schema_Builtin | Size: 0x4
			bool m_bBombDropped; // 0x9a4 | Schema_Builtin | Size: 0x1
			bool m_bBombPlanted; // 0x9a5 | Schema_Builtin | Size: 0x1
			S2_PAD(0x2);
			int32_t m_iRoundWinStatus; // 0x9a8 | Schema_Builtin | Size: 0x4
			int32_t m_eRoundWinReason; // 0x9ac | Schema_Builtin | Size: 0x4
			bool m_bTCantBuy; // 0x9b0 | Schema_Builtin | Size: 0x1
			bool m_bCTCantBuy; // 0x9b1 | Schema_Builtin | Size: 0x1
			S2_PAD(0x2);
			int32_t m_iMatchStats_RoundResults[30]; // 0x9b4 | Schema_FixedArray | Size: 0x78
			int32_t m_iMatchStats_PlayersAlive_CT[30]; // 0xa2c | Schema_FixedArray | Size: 0x78
			int32_t m_iMatchStats_PlayersAlive_T[30]; // 0xaa4 | Schema_FixedArray | Size: 0x78
			float32 m_TeamRespawnWaveTimes[32]; // 0xb1c | Schema_FixedArray | Size: 0x80
			entity2::GameTime_t m_flNextRespawnWave[32]; // 0xb9c | Schema_FixedArray | Size: 0x1000
			GlobalTypes::Vector m_vMinimapMins; // 0xc1c | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vMinimapMaxs; // 0xc28 | Schema_Atomic | Size: 0xc
			float32 m_MinimapVerticalSectionHeights[8]; // 0xc34 | Schema_FixedArray | Size: 0x20
			S2_PAD(0x4);
			uint64_t m_ullLocalMatchID; // 0xc58 | Schema_Builtin | Size: 0x8
			int32_t m_nEndMatchMapGroupVoteTypes[10]; // 0xc60 | Schema_FixedArray | Size: 0x28
			int32_t m_nEndMatchMapGroupVoteOptions[10]; // 0xc88 | Schema_FixedArray | Size: 0x28
			int32_t m_nEndMatchMapVoteWinner; // 0xcb0 | Schema_Builtin | Size: 0x4
			int32_t m_iNumConsecutiveCTLoses; // 0xcb4 | Schema_Builtin | Size: 0x4
			int32_t m_iNumConsecutiveTerroristLoses; // 0xcb8 | Schema_Builtin | Size: 0x4
			S2_PAD(0xbc);
			int32_t m_nMatchAbortedEarlyReason; // 0xd78 | Schema_Builtin | Size: 0x4
			bool m_bHasTriggeredRoundStartMusic; // 0xd7c | Schema_Builtin | Size: 0x1
			bool m_bSwitchingTeamsAtRoundReset; // 0xd7d | Schema_Builtin | Size: 0x1
			S2_PAD(0x1a);
			client::CCSGameModeRules* m_pGameModeRules; // 0xd98 | Schema_Ptr | Size: 0x8
			client::C_RetakeGameRules m_RetakeRules; // 0xda0 | Schema_DeclaredClass | Size: 0x118
			uint8_t m_nMatchEndCount; // 0xeb8 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			int32_t m_nTTeamIntroVariant; // 0xebc | Schema_Builtin | Size: 0x4
			int32_t m_nCTTeamIntroVariant; // 0xec0 | Schema_Builtin | Size: 0x4
			bool m_bTeamIntroPeriod; // 0xec4 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			int32_t m_iRoundEndWinnerTeam; // 0xec8 | Schema_Builtin | Size: 0x4
			int32_t m_eRoundEndReason; // 0xecc | Schema_Builtin | Size: 0x4
			bool m_bRoundEndShowTimerDefend; // 0xed0 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			int32_t m_iRoundEndTimerTime; // 0xed4 | Schema_Builtin | Size: 0x4
			GlobalTypes::CUtlString m_sRoundEndFunFactToken; // 0xed8 | Schema_Atomic | Size: 0x8
			GlobalTypes::CPlayerSlot m_iRoundEndFunFactPlayerSlot; // 0xee0 | Schema_Atomic | Size: 0x4
			int32_t m_iRoundEndFunFactData1; // 0xee4 | Schema_Builtin | Size: 0x4
			int32_t m_iRoundEndFunFactData2; // 0xee8 | Schema_Builtin | Size: 0x4
			int32_t m_iRoundEndFunFactData3; // 0xeec | Schema_Builtin | Size: 0x4
			GlobalTypes::CUtlString m_sRoundEndMessage; // 0xef0 | Schema_Atomic | Size: 0x8
			int32_t m_iRoundEndPlayerCount; // 0xef8 | Schema_Builtin | Size: 0x4
			bool m_bRoundEndNoMusic; // 0xefc | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			int32_t m_iRoundEndLegacy; // 0xf00 | Schema_Builtin | Size: 0x4
			uint8_t m_nRoundEndCount; // 0xf04 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			int32_t m_iRoundStartRoundNumber; // 0xf08 | Schema_Builtin | Size: 0x4
			uint8_t m_nRoundStartCount; // 0xf0c | Schema_Builtin | Size: 0x1
			S2_PAD(0x400b);
			float64 m_flLastPerfSampleTime; // 0x4f18 | Schema_Builtin | Size: 0x8
		};
		static_assert(offsetof(CS2::client::C_CSGameRules, m_bFreezePeriod) == 0x40, "m_bFreezePeriod in C_CSGameRules should be at offset 0x40");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_bWarmupPeriod) == 0x41, "m_bWarmupPeriod in C_CSGameRules should be at offset 0x41");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_fWarmupPeriodEnd) == 0x44, "m_fWarmupPeriodEnd in C_CSGameRules should be at offset 0x44");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_fWarmupPeriodStart) == 0x48, "m_fWarmupPeriodStart in C_CSGameRules should be at offset 0x48");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_bTerroristTimeOutActive) == 0x4C, "m_bTerroristTimeOutActive in C_CSGameRules should be at offset 0x4C");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_bCTTimeOutActive) == 0x4D, "m_bCTTimeOutActive in C_CSGameRules should be at offset 0x4D");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_flTerroristTimeOutRemaining) == 0x50, "m_flTerroristTimeOutRemaining in C_CSGameRules should be at offset 0x50");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_flCTTimeOutRemaining) == 0x54, "m_flCTTimeOutRemaining in C_CSGameRules should be at offset 0x54");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_nTerroristTimeOuts) == 0x58, "m_nTerroristTimeOuts in C_CSGameRules should be at offset 0x58");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_nCTTimeOuts) == 0x5C, "m_nCTTimeOuts in C_CSGameRules should be at offset 0x5C");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_bTechnicalTimeOut) == 0x60, "m_bTechnicalTimeOut in C_CSGameRules should be at offset 0x60");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_bMatchWaitingForResume) == 0x61, "m_bMatchWaitingForResume in C_CSGameRules should be at offset 0x61");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_iRoundTime) == 0x64, "m_iRoundTime in C_CSGameRules should be at offset 0x64");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_fMatchStartTime) == 0x68, "m_fMatchStartTime in C_CSGameRules should be at offset 0x68");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_fRoundStartTime) == 0x6C, "m_fRoundStartTime in C_CSGameRules should be at offset 0x6C");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_flRestartRoundTime) == 0x70, "m_flRestartRoundTime in C_CSGameRules should be at offset 0x70");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_bGameRestart) == 0x74, "m_bGameRestart in C_CSGameRules should be at offset 0x74");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_flGameStartTime) == 0x78, "m_flGameStartTime in C_CSGameRules should be at offset 0x78");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_timeUntilNextPhaseStarts) == 0x7C, "m_timeUntilNextPhaseStarts in C_CSGameRules should be at offset 0x7C");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_gamePhase) == 0x80, "m_gamePhase in C_CSGameRules should be at offset 0x80");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_totalRoundsPlayed) == 0x84, "m_totalRoundsPlayed in C_CSGameRules should be at offset 0x84");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_nRoundsPlayedThisPhase) == 0x88, "m_nRoundsPlayedThisPhase in C_CSGameRules should be at offset 0x88");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_nOvertimePlaying) == 0x8C, "m_nOvertimePlaying in C_CSGameRules should be at offset 0x8C");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_iHostagesRemaining) == 0x90, "m_iHostagesRemaining in C_CSGameRules should be at offset 0x90");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_bAnyHostageReached) == 0x94, "m_bAnyHostageReached in C_CSGameRules should be at offset 0x94");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_bMapHasBombTarget) == 0x95, "m_bMapHasBombTarget in C_CSGameRules should be at offset 0x95");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_bMapHasRescueZone) == 0x96, "m_bMapHasRescueZone in C_CSGameRules should be at offset 0x96");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_bMapHasBuyZone) == 0x97, "m_bMapHasBuyZone in C_CSGameRules should be at offset 0x97");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_bIsQueuedMatchmaking) == 0x98, "m_bIsQueuedMatchmaking in C_CSGameRules should be at offset 0x98");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_nQueuedMatchmakingMode) == 0x9C, "m_nQueuedMatchmakingMode in C_CSGameRules should be at offset 0x9C");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_bIsValveDS) == 0xA0, "m_bIsValveDS in C_CSGameRules should be at offset 0xA0");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_bLogoMap) == 0xA1, "m_bLogoMap in C_CSGameRules should be at offset 0xA1");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_bPlayAllStepSoundsOnServer) == 0xA2, "m_bPlayAllStepSoundsOnServer in C_CSGameRules should be at offset 0xA2");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_iSpectatorSlotCount) == 0xA4, "m_iSpectatorSlotCount in C_CSGameRules should be at offset 0xA4");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_MatchDevice) == 0xA8, "m_MatchDevice in C_CSGameRules should be at offset 0xA8");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_bHasMatchStarted) == 0xAC, "m_bHasMatchStarted in C_CSGameRules should be at offset 0xAC");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_nNextMapInMapgroup) == 0xB0, "m_nNextMapInMapgroup in C_CSGameRules should be at offset 0xB0");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_szTournamentEventName) == 0xB4, "m_szTournamentEventName in C_CSGameRules should be at offset 0xB4");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_szTournamentEventStage) == 0x2B4, "m_szTournamentEventStage in C_CSGameRules should be at offset 0x2B4");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_szMatchStatTxt) == 0x4B4, "m_szMatchStatTxt in C_CSGameRules should be at offset 0x4B4");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_szTournamentPredictionsTxt) == 0x6B4, "m_szTournamentPredictionsTxt in C_CSGameRules should be at offset 0x6B4");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_nTournamentPredictionsPct) == 0x8B4, "m_nTournamentPredictionsPct in C_CSGameRules should be at offset 0x8B4");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_flCMMItemDropRevealStartTime) == 0x8B8, "m_flCMMItemDropRevealStartTime in C_CSGameRules should be at offset 0x8B8");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_flCMMItemDropRevealEndTime) == 0x8BC, "m_flCMMItemDropRevealEndTime in C_CSGameRules should be at offset 0x8BC");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_bIsDroppingItems) == 0x8C0, "m_bIsDroppingItems in C_CSGameRules should be at offset 0x8C0");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_bIsQuestEligible) == 0x8C1, "m_bIsQuestEligible in C_CSGameRules should be at offset 0x8C1");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_bIsHltvActive) == 0x8C2, "m_bIsHltvActive in C_CSGameRules should be at offset 0x8C2");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_arrProhibitedItemIndices) == 0x8C4, "m_arrProhibitedItemIndices in C_CSGameRules should be at offset 0x8C4");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_arrTournamentActiveCasterAccounts) == 0x98C, "m_arrTournamentActiveCasterAccounts in C_CSGameRules should be at offset 0x98C");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_numBestOfMaps) == 0x99C, "m_numBestOfMaps in C_CSGameRules should be at offset 0x99C");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_nHalloweenMaskListSeed) == 0x9A0, "m_nHalloweenMaskListSeed in C_CSGameRules should be at offset 0x9A0");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_bBombDropped) == 0x9A4, "m_bBombDropped in C_CSGameRules should be at offset 0x9A4");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_bBombPlanted) == 0x9A5, "m_bBombPlanted in C_CSGameRules should be at offset 0x9A5");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_iRoundWinStatus) == 0x9A8, "m_iRoundWinStatus in C_CSGameRules should be at offset 0x9A8");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_eRoundWinReason) == 0x9AC, "m_eRoundWinReason in C_CSGameRules should be at offset 0x9AC");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_bTCantBuy) == 0x9B0, "m_bTCantBuy in C_CSGameRules should be at offset 0x9B0");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_bCTCantBuy) == 0x9B1, "m_bCTCantBuy in C_CSGameRules should be at offset 0x9B1");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_iMatchStats_RoundResults) == 0x9B4, "m_iMatchStats_RoundResults in C_CSGameRules should be at offset 0x9B4");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_iMatchStats_PlayersAlive_CT) == 0xA2C, "m_iMatchStats_PlayersAlive_CT in C_CSGameRules should be at offset 0xA2C");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_iMatchStats_PlayersAlive_T) == 0xAA4, "m_iMatchStats_PlayersAlive_T in C_CSGameRules should be at offset 0xAA4");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_TeamRespawnWaveTimes) == 0xB1C, "m_TeamRespawnWaveTimes in C_CSGameRules should be at offset 0xB1C");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_flNextRespawnWave) == 0xB9C, "m_flNextRespawnWave in C_CSGameRules should be at offset 0xB9C");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_vMinimapMins) == 0xC1C, "m_vMinimapMins in C_CSGameRules should be at offset 0xC1C");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_vMinimapMaxs) == 0xC28, "m_vMinimapMaxs in C_CSGameRules should be at offset 0xC28");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_MinimapVerticalSectionHeights) == 0xC34, "m_MinimapVerticalSectionHeights in C_CSGameRules should be at offset 0xC34");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_ullLocalMatchID) == 0xC58, "m_ullLocalMatchID in C_CSGameRules should be at offset 0xC58");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_nEndMatchMapGroupVoteTypes) == 0xC60, "m_nEndMatchMapGroupVoteTypes in C_CSGameRules should be at offset 0xC60");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_nEndMatchMapGroupVoteOptions) == 0xC88, "m_nEndMatchMapGroupVoteOptions in C_CSGameRules should be at offset 0xC88");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_nEndMatchMapVoteWinner) == 0xCB0, "m_nEndMatchMapVoteWinner in C_CSGameRules should be at offset 0xCB0");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_iNumConsecutiveCTLoses) == 0xCB4, "m_iNumConsecutiveCTLoses in C_CSGameRules should be at offset 0xCB4");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_iNumConsecutiveTerroristLoses) == 0xCB8, "m_iNumConsecutiveTerroristLoses in C_CSGameRules should be at offset 0xCB8");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_nMatchAbortedEarlyReason) == 0xD78, "m_nMatchAbortedEarlyReason in C_CSGameRules should be at offset 0xD78");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_bHasTriggeredRoundStartMusic) == 0xD7C, "m_bHasTriggeredRoundStartMusic in C_CSGameRules should be at offset 0xD7C");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_bSwitchingTeamsAtRoundReset) == 0xD7D, "m_bSwitchingTeamsAtRoundReset in C_CSGameRules should be at offset 0xD7D");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_pGameModeRules) == 0xD98, "m_pGameModeRules in C_CSGameRules should be at offset 0xD98");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_RetakeRules) == 0xDA0, "m_RetakeRules in C_CSGameRules should be at offset 0xDA0");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_nMatchEndCount) == 0xEB8, "m_nMatchEndCount in C_CSGameRules should be at offset 0xEB8");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_nTTeamIntroVariant) == 0xEBC, "m_nTTeamIntroVariant in C_CSGameRules should be at offset 0xEBC");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_nCTTeamIntroVariant) == 0xEC0, "m_nCTTeamIntroVariant in C_CSGameRules should be at offset 0xEC0");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_bTeamIntroPeriod) == 0xEC4, "m_bTeamIntroPeriod in C_CSGameRules should be at offset 0xEC4");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_iRoundEndWinnerTeam) == 0xEC8, "m_iRoundEndWinnerTeam in C_CSGameRules should be at offset 0xEC8");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_eRoundEndReason) == 0xECC, "m_eRoundEndReason in C_CSGameRules should be at offset 0xECC");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_bRoundEndShowTimerDefend) == 0xED0, "m_bRoundEndShowTimerDefend in C_CSGameRules should be at offset 0xED0");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_iRoundEndTimerTime) == 0xED4, "m_iRoundEndTimerTime in C_CSGameRules should be at offset 0xED4");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_sRoundEndFunFactToken) == 0xED8, "m_sRoundEndFunFactToken in C_CSGameRules should be at offset 0xED8");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_iRoundEndFunFactPlayerSlot) == 0xEE0, "m_iRoundEndFunFactPlayerSlot in C_CSGameRules should be at offset 0xEE0");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_iRoundEndFunFactData1) == 0xEE4, "m_iRoundEndFunFactData1 in C_CSGameRules should be at offset 0xEE4");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_iRoundEndFunFactData2) == 0xEE8, "m_iRoundEndFunFactData2 in C_CSGameRules should be at offset 0xEE8");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_iRoundEndFunFactData3) == 0xEEC, "m_iRoundEndFunFactData3 in C_CSGameRules should be at offset 0xEEC");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_sRoundEndMessage) == 0xEF0, "m_sRoundEndMessage in C_CSGameRules should be at offset 0xEF0");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_iRoundEndPlayerCount) == 0xEF8, "m_iRoundEndPlayerCount in C_CSGameRules should be at offset 0xEF8");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_bRoundEndNoMusic) == 0xEFC, "m_bRoundEndNoMusic in C_CSGameRules should be at offset 0xEFC");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_iRoundEndLegacy) == 0xF00, "m_iRoundEndLegacy in C_CSGameRules should be at offset 0xF00");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_nRoundEndCount) == 0xF04, "m_nRoundEndCount in C_CSGameRules should be at offset 0xF04");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_iRoundStartRoundNumber) == 0xF08, "m_iRoundStartRoundNumber in C_CSGameRules should be at offset 0xF08");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_nRoundStartCount) == 0xF0C, "m_nRoundStartCount in C_CSGameRules should be at offset 0xF0C");
		static_assert(offsetof(CS2::client::C_CSGameRules, m_flLastPerfSampleTime) == 0x4F18, "m_flLastPerfSampleTime in C_CSGameRules should be at offset 0x4F18");
		static_assert(sizeof(CS2::client::C_CSGameRules) == 0x4F20, "C_CSGameRules size should be 0x4F20");
	}
}
