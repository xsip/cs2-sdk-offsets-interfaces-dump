// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/client/C_PointEntity.hpp>



namespace CS2 {
	namespace client {
		class CMapInfo : public CS2::client::C_PointEntity {
		public:
			int32_t m_iBuyingStatus; // 0x5f8 | Schema_Builtin | Size: 0x4
			float32 m_flBombRadius; // 0x5fc | Schema_Builtin | Size: 0x4
			int32_t m_iPetPopulation; // 0x600 | Schema_Builtin | Size: 0x4
			bool m_bUseNormalSpawnsForDM; // 0x604 | Schema_Builtin | Size: 0x1
			bool m_bDisableAutoGeneratedDMSpawns; // 0x605 | Schema_Builtin | Size: 0x1
			S2_PAD(0x2);
			float32 m_flBotMaxVisionDistance; // 0x608 | Schema_Builtin | Size: 0x4
			int32_t m_iHostageCount; // 0x60c | Schema_Builtin | Size: 0x4
			bool m_bFadePlayerVisibilityFarZ; // 0x610 | Schema_Builtin | Size: 0x1
			bool m_bRainTraceToSkyEnabled; // 0x611 | Schema_Builtin | Size: 0x1
			S2_PAD(0x2);
			float32 m_flEnvRainStrength; // 0x614 | Schema_Builtin | Size: 0x4
			float32 m_flEnvPuddleRippleStrength; // 0x618 | Schema_Builtin | Size: 0x4
			float32 m_flEnvPuddleRippleDirection; // 0x61c | Schema_Builtin | Size: 0x4
			float32 m_flEnvWetnessCoverage; // 0x620 | Schema_Builtin | Size: 0x4
			float32 m_flEnvWetnessDryingAmount; // 0x624 | Schema_Builtin | Size: 0x4
		};
		static_assert(offsetof(CS2::client::CMapInfo, m_iBuyingStatus) == 0x5F8, "m_iBuyingStatus in CMapInfo should be at offset 0x5F8");
		static_assert(offsetof(CS2::client::CMapInfo, m_flBombRadius) == 0x5FC, "m_flBombRadius in CMapInfo should be at offset 0x5FC");
		static_assert(offsetof(CS2::client::CMapInfo, m_iPetPopulation) == 0x600, "m_iPetPopulation in CMapInfo should be at offset 0x600");
		static_assert(offsetof(CS2::client::CMapInfo, m_bUseNormalSpawnsForDM) == 0x604, "m_bUseNormalSpawnsForDM in CMapInfo should be at offset 0x604");
		static_assert(offsetof(CS2::client::CMapInfo, m_bDisableAutoGeneratedDMSpawns) == 0x605, "m_bDisableAutoGeneratedDMSpawns in CMapInfo should be at offset 0x605");
		static_assert(offsetof(CS2::client::CMapInfo, m_flBotMaxVisionDistance) == 0x608, "m_flBotMaxVisionDistance in CMapInfo should be at offset 0x608");
		static_assert(offsetof(CS2::client::CMapInfo, m_iHostageCount) == 0x60C, "m_iHostageCount in CMapInfo should be at offset 0x60C");
		static_assert(offsetof(CS2::client::CMapInfo, m_bFadePlayerVisibilityFarZ) == 0x610, "m_bFadePlayerVisibilityFarZ in CMapInfo should be at offset 0x610");
		static_assert(offsetof(CS2::client::CMapInfo, m_bRainTraceToSkyEnabled) == 0x611, "m_bRainTraceToSkyEnabled in CMapInfo should be at offset 0x611");
		static_assert(offsetof(CS2::client::CMapInfo, m_flEnvRainStrength) == 0x614, "m_flEnvRainStrength in CMapInfo should be at offset 0x614");
		static_assert(offsetof(CS2::client::CMapInfo, m_flEnvPuddleRippleStrength) == 0x618, "m_flEnvPuddleRippleStrength in CMapInfo should be at offset 0x618");
		static_assert(offsetof(CS2::client::CMapInfo, m_flEnvPuddleRippleDirection) == 0x61C, "m_flEnvPuddleRippleDirection in CMapInfo should be at offset 0x61C");
		static_assert(offsetof(CS2::client::CMapInfo, m_flEnvWetnessCoverage) == 0x620, "m_flEnvWetnessCoverage in CMapInfo should be at offset 0x620");
		static_assert(offsetof(CS2::client::CMapInfo, m_flEnvWetnessDryingAmount) == 0x624, "m_flEnvWetnessDryingAmount in CMapInfo should be at offset 0x624");
		static_assert(sizeof(CS2::client::CMapInfo) == 0x628, "CMapInfo size should be 0x628");
	}
}
