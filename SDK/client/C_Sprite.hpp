// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>

#include <SDK/client/C_BaseModelEntity.hpp>
#include <SDK/modellib/AttachmentHandle_t.hpp>
#include <SDK/entity2/GameTime_t.hpp>



namespace CS2 {
	namespace client {
		class C_Sprite : public CS2::client::C_BaseModelEntity {
		public:
			// GlobalTypes::CStrongHandle< resourcesystem::InfoForResourceTypeIMaterial2 > m_hSpriteMaterial; // 0xec8 | Schema_Atomic | Size: 0x8
			char  m_hSpriteMaterial[0x8]; // 0xec8 | Schema_Atomic | Size: 0x8
			// client::CHandle< client::C_BaseEntity > m_hAttachedToEntity; // 0xed0 | Schema_Atomic | Size: 0x4
			char  m_hAttachedToEntity[0x4]; // 0xed0 | Schema_Atomic | Size: 0x4
			modellib::AttachmentHandle_t m_nAttachment; // 0xed4 | Schema_DeclaredClass | Size: 0x1
			S2_PAD(0x3);
			float32 m_flSpriteFramerate; // 0xed8 | Schema_Builtin | Size: 0x4
			float32 m_flFrame; // 0xedc | Schema_Builtin | Size: 0x4
			entity2::GameTime_t m_flDieTime; // 0xee0 | Schema_DeclaredClass | Size: 0x4
			S2_PAD(0xc);
			uint32_t m_nBrightness; // 0xef0 | Schema_Builtin | Size: 0x4
			float32 m_flBrightnessDuration; // 0xef4 | Schema_Builtin | Size: 0x4
			float32 m_flSpriteScale; // 0xef8 | Schema_Builtin | Size: 0x4
			float32 m_flScaleDuration; // 0xefc | Schema_Builtin | Size: 0x4
			bool m_bWorldSpaceScale; // 0xf00 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			float32 m_flGlowProxySize; // 0xf04 | Schema_Builtin | Size: 0x4
			float32 m_flHDRColorScale; // 0xf08 | Schema_Builtin | Size: 0x4
			entity2::GameTime_t m_flLastTime; // 0xf0c | Schema_DeclaredClass | Size: 0x4
			float32 m_flMaxFrame; // 0xf10 | Schema_Builtin | Size: 0x4
			float32 m_flStartScale; // 0xf14 | Schema_Builtin | Size: 0x4
			float32 m_flDestScale; // 0xf18 | Schema_Builtin | Size: 0x4
			entity2::GameTime_t m_flScaleTimeStart; // 0xf1c | Schema_DeclaredClass | Size: 0x4
			int32_t m_nStartBrightness; // 0xf20 | Schema_Builtin | Size: 0x4
			int32_t m_nDestBrightness; // 0xf24 | Schema_Builtin | Size: 0x4
			entity2::GameTime_t m_flBrightnessTimeStart; // 0xf28 | Schema_DeclaredClass | Size: 0x4
			S2_PAD(0xc);
			int32_t m_nSpriteWidth; // 0xf38 | Schema_Builtin | Size: 0x4
			int32_t m_nSpriteHeight; // 0xf3c | Schema_Builtin | Size: 0x4
		};
		static_assert(offsetof(CS2::client::C_Sprite, m_hSpriteMaterial) == 0xEC8, "m_hSpriteMaterial in C_Sprite should be at offset 0xEC8");
		static_assert(offsetof(CS2::client::C_Sprite, m_hAttachedToEntity) == 0xED0, "m_hAttachedToEntity in C_Sprite should be at offset 0xED0");
		static_assert(offsetof(CS2::client::C_Sprite, m_nAttachment) == 0xED4, "m_nAttachment in C_Sprite should be at offset 0xED4");
		static_assert(offsetof(CS2::client::C_Sprite, m_flSpriteFramerate) == 0xED8, "m_flSpriteFramerate in C_Sprite should be at offset 0xED8");
		static_assert(offsetof(CS2::client::C_Sprite, m_flFrame) == 0xEDC, "m_flFrame in C_Sprite should be at offset 0xEDC");
		static_assert(offsetof(CS2::client::C_Sprite, m_flDieTime) == 0xEE0, "m_flDieTime in C_Sprite should be at offset 0xEE0");
		static_assert(offsetof(CS2::client::C_Sprite, m_nBrightness) == 0xEF0, "m_nBrightness in C_Sprite should be at offset 0xEF0");
		static_assert(offsetof(CS2::client::C_Sprite, m_flBrightnessDuration) == 0xEF4, "m_flBrightnessDuration in C_Sprite should be at offset 0xEF4");
		static_assert(offsetof(CS2::client::C_Sprite, m_flSpriteScale) == 0xEF8, "m_flSpriteScale in C_Sprite should be at offset 0xEF8");
		static_assert(offsetof(CS2::client::C_Sprite, m_flScaleDuration) == 0xEFC, "m_flScaleDuration in C_Sprite should be at offset 0xEFC");
		static_assert(offsetof(CS2::client::C_Sprite, m_bWorldSpaceScale) == 0xF00, "m_bWorldSpaceScale in C_Sprite should be at offset 0xF00");
		static_assert(offsetof(CS2::client::C_Sprite, m_flGlowProxySize) == 0xF04, "m_flGlowProxySize in C_Sprite should be at offset 0xF04");
		static_assert(offsetof(CS2::client::C_Sprite, m_flHDRColorScale) == 0xF08, "m_flHDRColorScale in C_Sprite should be at offset 0xF08");
		static_assert(offsetof(CS2::client::C_Sprite, m_flLastTime) == 0xF0C, "m_flLastTime in C_Sprite should be at offset 0xF0C");
		static_assert(offsetof(CS2::client::C_Sprite, m_flMaxFrame) == 0xF10, "m_flMaxFrame in C_Sprite should be at offset 0xF10");
		static_assert(offsetof(CS2::client::C_Sprite, m_flStartScale) == 0xF14, "m_flStartScale in C_Sprite should be at offset 0xF14");
		static_assert(offsetof(CS2::client::C_Sprite, m_flDestScale) == 0xF18, "m_flDestScale in C_Sprite should be at offset 0xF18");
		static_assert(offsetof(CS2::client::C_Sprite, m_flScaleTimeStart) == 0xF1C, "m_flScaleTimeStart in C_Sprite should be at offset 0xF1C");
		static_assert(offsetof(CS2::client::C_Sprite, m_nStartBrightness) == 0xF20, "m_nStartBrightness in C_Sprite should be at offset 0xF20");
		static_assert(offsetof(CS2::client::C_Sprite, m_nDestBrightness) == 0xF24, "m_nDestBrightness in C_Sprite should be at offset 0xF24");
		static_assert(offsetof(CS2::client::C_Sprite, m_flBrightnessTimeStart) == 0xF28, "m_flBrightnessTimeStart in C_Sprite should be at offset 0xF28");
		static_assert(offsetof(CS2::client::C_Sprite, m_nSpriteWidth) == 0xF38, "m_nSpriteWidth in C_Sprite should be at offset 0xF38");
		static_assert(offsetof(CS2::client::C_Sprite, m_nSpriteHeight) == 0xF3C, "m_nSpriteHeight in C_Sprite should be at offset 0xF3C");
		static_assert(sizeof(CS2::client::C_Sprite) == 0xF40, "C_Sprite size should be 0xF40");
	}
}
