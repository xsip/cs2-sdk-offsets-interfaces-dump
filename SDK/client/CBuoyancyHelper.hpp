// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>




namespace CS2 {
	namespace client {
		class CBuoyancyHelper  {
		public:
			S2_PAD(0x18);
			GlobalTypes::CUtlStringToken m_nFluidType; // 0x18 | Schema_Atomic | Size: 0x4
			float32 m_flFluidDensity; // 0x1c | Schema_Builtin | Size: 0x4
			float32 m_flNeutrallyBuoyantGravity; // 0x20 | Schema_Builtin | Size: 0x4
			float32 m_flNeutrallyBuoyantLinearDamping; // 0x24 | Schema_Builtin | Size: 0x4
			float32 m_flNeutrallyBuoyantAngularDamping; // 0x28 | Schema_Builtin | Size: 0x4
			bool m_bNeutrallyBuoyant; // 0x2c | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			// GlobalTypes::CUtlVector< float32 > m_vecFractionOfWheelSubmergedForWheelFriction; // 0x30 | Schema_Atomic | Size: 0x18
			char  m_vecFractionOfWheelSubmergedForWheelFriction[0x18]; // 0x30 | Schema_Atomic | Size: 0x18
			// GlobalTypes::CUtlVector< float32 > m_vecWheelFrictionScales; // 0x48 | Schema_Atomic | Size: 0x18
			char  m_vecWheelFrictionScales[0x18]; // 0x48 | Schema_Atomic | Size: 0x18
			// GlobalTypes::CUtlVector< float32 > m_vecFractionOfWheelSubmergedForWheelDrag; // 0x60 | Schema_Atomic | Size: 0x18
			char  m_vecFractionOfWheelSubmergedForWheelDrag[0x18]; // 0x60 | Schema_Atomic | Size: 0x18
			// GlobalTypes::CUtlVector< float32 > m_vecWheelDrag; // 0x78 | Schema_Atomic | Size: 0x18
			char  m_vecWheelDrag[0x18]; // 0x78 | Schema_Atomic | Size: 0x18
			S2_PAD(0x88); // End padding
		};
		static_assert(offsetof(CS2::client::CBuoyancyHelper, m_nFluidType) == 0x18, "m_nFluidType in CBuoyancyHelper should be at offset 0x18");
		static_assert(offsetof(CS2::client::CBuoyancyHelper, m_flFluidDensity) == 0x1C, "m_flFluidDensity in CBuoyancyHelper should be at offset 0x1C");
		static_assert(offsetof(CS2::client::CBuoyancyHelper, m_flNeutrallyBuoyantGravity) == 0x20, "m_flNeutrallyBuoyantGravity in CBuoyancyHelper should be at offset 0x20");
		static_assert(offsetof(CS2::client::CBuoyancyHelper, m_flNeutrallyBuoyantLinearDamping) == 0x24, "m_flNeutrallyBuoyantLinearDamping in CBuoyancyHelper should be at offset 0x24");
		static_assert(offsetof(CS2::client::CBuoyancyHelper, m_flNeutrallyBuoyantAngularDamping) == 0x28, "m_flNeutrallyBuoyantAngularDamping in CBuoyancyHelper should be at offset 0x28");
		static_assert(offsetof(CS2::client::CBuoyancyHelper, m_bNeutrallyBuoyant) == 0x2C, "m_bNeutrallyBuoyant in CBuoyancyHelper should be at offset 0x2C");
		static_assert(offsetof(CS2::client::CBuoyancyHelper, m_vecFractionOfWheelSubmergedForWheelFriction) == 0x30, "m_vecFractionOfWheelSubmergedForWheelFriction in CBuoyancyHelper should be at offset 0x30");
		static_assert(offsetof(CS2::client::CBuoyancyHelper, m_vecWheelFrictionScales) == 0x48, "m_vecWheelFrictionScales in CBuoyancyHelper should be at offset 0x48");
		static_assert(offsetof(CS2::client::CBuoyancyHelper, m_vecFractionOfWheelSubmergedForWheelDrag) == 0x60, "m_vecFractionOfWheelSubmergedForWheelDrag in CBuoyancyHelper should be at offset 0x60");
		static_assert(offsetof(CS2::client::CBuoyancyHelper, m_vecWheelDrag) == 0x78, "m_vecWheelDrag in CBuoyancyHelper should be at offset 0x78");
		static_assert(sizeof(CS2::client::CBuoyancyHelper) == 0x118, "CBuoyancyHelper size should be 0x118");
	}
}
