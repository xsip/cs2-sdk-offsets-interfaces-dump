// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>

#include <SDK/client/CBaseProp.hpp>
#include <SDK/client/CPropDataComponent.hpp>
#include <SDK/entity2/CEntityIOOutput.hpp>
#include <SDK/client/PerformanceMode_t.hpp>
#include <SDK/entity2/GameTime_t.hpp>
#include <SDK/client/BreakableContentsType_t.hpp>



namespace CS2 {
	namespace client {
		class C_BaseEntity;
		class C_BasePlayerPawn;
	}
}
namespace CS2 {
	namespace client {
		class C_BreakableProp : public CS2::client::CBaseProp {
		public:
			client::CPropDataComponent m_CPropDataComponent; // 0x1190 | Schema_DeclaredClass | Size: 0x40
			entity2::CEntityIOOutput m_OnStartDeath; // 0x11d0 | Schema_DeclaredClass | Size: 0x28
			entity2::CEntityIOOutput m_OnBreak; // 0x11f8 | Schema_DeclaredClass | Size: 0x28
			// GlobalTypes::CEntityOutputTemplate< float32 > m_OnHealthChanged; // 0x1220 | Schema_Atomic | Size: 0x28
			char  m_OnHealthChanged[0x28]; // 0x1220 | Schema_Atomic | Size: 0x28
			entity2::CEntityIOOutput m_OnTakeDamage; // 0x1248 | Schema_DeclaredClass | Size: 0x28
			float32 m_impactEnergyScale; // 0x1270 | Schema_Builtin | Size: 0x4
			int32_t m_iMinHealthDmg; // 0x1274 | Schema_Builtin | Size: 0x4
			float32 m_flPressureDelay; // 0x1278 | Schema_Builtin | Size: 0x4
			float32 m_flDefBurstScale; // 0x127c | Schema_Builtin | Size: 0x4
			GlobalTypes::Vector m_vDefBurstOffset; // 0x1280 | Schema_Atomic | Size: 0xc
			GlobalTypes::CHandle< client::C_BaseEntity > m_hBreaker; // 0x128c | Schema_Atomic | Size: 0x4
			// char  m_hBreaker[0x4]; // 0x128c | Schema_Atomic | Size: 0x4
			client::PerformanceMode_t m_PerformanceMode; // 0x1290 | Schema_DeclaredEnum | Size: 0x4
			entity2::GameTime_t m_flPreventDamageBeforeTime; // 0x1294 | Schema_DeclaredClass | Size: 0x4
			client::BreakableContentsType_t m_BreakableContentsType; // 0x1298 | Schema_DeclaredEnum | Size: 0x4
			S2_PAD(0x4);
			GlobalTypes::CUtlString m_strBreakableContentsPropGroupOverride; // 0x12a0 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlString m_strBreakableContentsParticleOverride; // 0x12a8 | Schema_Atomic | Size: 0x8
			bool m_bHasBreakPiecesOrCommands; // 0x12b0 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			float32 m_explodeDamage; // 0x12b4 | Schema_Builtin | Size: 0x4
			float32 m_explodeRadius; // 0x12b8 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4);
			float32 m_explosionDelay; // 0x12c0 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4);
			GlobalTypes::CUtlSymbolLarge m_explosionBuildupSound; // 0x12c8 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlSymbolLarge m_explosionCustomEffect; // 0x12d0 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlSymbolLarge m_explosionCustomSound; // 0x12d8 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlSymbolLarge m_explosionModifier; // 0x12e0 | Schema_Atomic | Size: 0x8
			GlobalTypes::CHandle< client::C_BasePlayerPawn > m_hPhysicsAttacker; // 0x12e8 | Schema_Atomic | Size: 0x4
			// char  m_hPhysicsAttacker[0x4]; // 0x12e8 | Schema_Atomic | Size: 0x4
			entity2::GameTime_t m_flLastPhysicsInfluenceTime; // 0x12ec | Schema_DeclaredClass | Size: 0x4
			float32 m_flDefaultFadeScale; // 0x12f0 | Schema_Builtin | Size: 0x4
			GlobalTypes::CHandle< client::C_BaseEntity > m_hLastAttacker; // 0x12f4 | Schema_Atomic | Size: 0x4
			// char  m_hLastAttacker[0x4]; // 0x12f4 | Schema_Atomic | Size: 0x4
			S2_PAD(0x8); // End padding
		};
		static_assert(offsetof(CS2::client::C_BreakableProp, m_CPropDataComponent) == 0x1190, "m_CPropDataComponent in C_BreakableProp should be at offset 0x1190");
		static_assert(offsetof(CS2::client::C_BreakableProp, m_OnStartDeath) == 0x11D0, "m_OnStartDeath in C_BreakableProp should be at offset 0x11D0");
		static_assert(offsetof(CS2::client::C_BreakableProp, m_OnBreak) == 0x11F8, "m_OnBreak in C_BreakableProp should be at offset 0x11F8");
		static_assert(offsetof(CS2::client::C_BreakableProp, m_OnHealthChanged) == 0x1220, "m_OnHealthChanged in C_BreakableProp should be at offset 0x1220");
		static_assert(offsetof(CS2::client::C_BreakableProp, m_OnTakeDamage) == 0x1248, "m_OnTakeDamage in C_BreakableProp should be at offset 0x1248");
		static_assert(offsetof(CS2::client::C_BreakableProp, m_impactEnergyScale) == 0x1270, "m_impactEnergyScale in C_BreakableProp should be at offset 0x1270");
		static_assert(offsetof(CS2::client::C_BreakableProp, m_iMinHealthDmg) == 0x1274, "m_iMinHealthDmg in C_BreakableProp should be at offset 0x1274");
		static_assert(offsetof(CS2::client::C_BreakableProp, m_flPressureDelay) == 0x1278, "m_flPressureDelay in C_BreakableProp should be at offset 0x1278");
		static_assert(offsetof(CS2::client::C_BreakableProp, m_flDefBurstScale) == 0x127C, "m_flDefBurstScale in C_BreakableProp should be at offset 0x127C");
		static_assert(offsetof(CS2::client::C_BreakableProp, m_vDefBurstOffset) == 0x1280, "m_vDefBurstOffset in C_BreakableProp should be at offset 0x1280");
		static_assert(offsetof(CS2::client::C_BreakableProp, m_hBreaker) == 0x128C, "m_hBreaker in C_BreakableProp should be at offset 0x128C");
		static_assert(offsetof(CS2::client::C_BreakableProp, m_PerformanceMode) == 0x1290, "m_PerformanceMode in C_BreakableProp should be at offset 0x1290");
		static_assert(offsetof(CS2::client::C_BreakableProp, m_flPreventDamageBeforeTime) == 0x1294, "m_flPreventDamageBeforeTime in C_BreakableProp should be at offset 0x1294");
		static_assert(offsetof(CS2::client::C_BreakableProp, m_BreakableContentsType) == 0x1298, "m_BreakableContentsType in C_BreakableProp should be at offset 0x1298");
		static_assert(offsetof(CS2::client::C_BreakableProp, m_strBreakableContentsPropGroupOverride) == 0x12A0, "m_strBreakableContentsPropGroupOverride in C_BreakableProp should be at offset 0x12A0");
		static_assert(offsetof(CS2::client::C_BreakableProp, m_strBreakableContentsParticleOverride) == 0x12A8, "m_strBreakableContentsParticleOverride in C_BreakableProp should be at offset 0x12A8");
		static_assert(offsetof(CS2::client::C_BreakableProp, m_bHasBreakPiecesOrCommands) == 0x12B0, "m_bHasBreakPiecesOrCommands in C_BreakableProp should be at offset 0x12B0");
		static_assert(offsetof(CS2::client::C_BreakableProp, m_explodeDamage) == 0x12B4, "m_explodeDamage in C_BreakableProp should be at offset 0x12B4");
		static_assert(offsetof(CS2::client::C_BreakableProp, m_explodeRadius) == 0x12B8, "m_explodeRadius in C_BreakableProp should be at offset 0x12B8");
		static_assert(offsetof(CS2::client::C_BreakableProp, m_explosionDelay) == 0x12C0, "m_explosionDelay in C_BreakableProp should be at offset 0x12C0");
		static_assert(offsetof(CS2::client::C_BreakableProp, m_explosionBuildupSound) == 0x12C8, "m_explosionBuildupSound in C_BreakableProp should be at offset 0x12C8");
		static_assert(offsetof(CS2::client::C_BreakableProp, m_explosionCustomEffect) == 0x12D0, "m_explosionCustomEffect in C_BreakableProp should be at offset 0x12D0");
		static_assert(offsetof(CS2::client::C_BreakableProp, m_explosionCustomSound) == 0x12D8, "m_explosionCustomSound in C_BreakableProp should be at offset 0x12D8");
		static_assert(offsetof(CS2::client::C_BreakableProp, m_explosionModifier) == 0x12E0, "m_explosionModifier in C_BreakableProp should be at offset 0x12E0");
		static_assert(offsetof(CS2::client::C_BreakableProp, m_hPhysicsAttacker) == 0x12E8, "m_hPhysicsAttacker in C_BreakableProp should be at offset 0x12E8");
		static_assert(offsetof(CS2::client::C_BreakableProp, m_flLastPhysicsInfluenceTime) == 0x12EC, "m_flLastPhysicsInfluenceTime in C_BreakableProp should be at offset 0x12EC");
		static_assert(offsetof(CS2::client::C_BreakableProp, m_flDefaultFadeScale) == 0x12F0, "m_flDefaultFadeScale in C_BreakableProp should be at offset 0x12F0");
		static_assert(offsetof(CS2::client::C_BreakableProp, m_hLastAttacker) == 0x12F4, "m_hLastAttacker in C_BreakableProp should be at offset 0x12F4");
		static_assert(sizeof(CS2::client::C_BreakableProp) == 0x1300, "C_BreakableProp size should be 0x1300");
	}
}
