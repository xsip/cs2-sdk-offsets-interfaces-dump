// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>

#include <SDK/client/C_BaseModelEntity.hpp>
#include <SDK/entity2/GameTime_t.hpp>
#include <SDK/client/BeamType_t.hpp>
#include <SDK/client/CHandle< C_BaseEntity >.hpp>
#include <SDK/modellib/AttachmentHandle_t.hpp>
#include <SDK/client/BeamClipStyle_t.hpp>



namespace CS2 {
	namespace client {
		class C_Beam : public CS2::client::C_BaseModelEntity {
		public:
			float32 m_flFrameRate; // 0xec8 | Schema_Builtin | Size: 0x4
			float32 m_flHDRColorScale; // 0xecc | Schema_Builtin | Size: 0x4
			entity2::GameTime_t m_flFireTime; // 0xed0 | Schema_DeclaredClass | Size: 0x4
			float32 m_flDamage; // 0xed4 | Schema_Builtin | Size: 0x4
			uint8_t m_nNumBeamEnts; // 0xed8 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			int32_t m_queryHandleHalo; // 0xedc | Schema_Builtin | Size: 0x4
			S2_PAD(0x20);
			// GlobalTypes::CStrongHandle< resourcesystem::InfoForResourceTypeIMaterial2 > m_hBaseMaterial; // 0xf00 | Schema_Atomic | Size: 0x8
			char  m_hBaseMaterial[0x8]; // 0xf00 | Schema_Atomic | Size: 0x8
			// GlobalTypes::CStrongHandle< resourcesystem::InfoForResourceTypeIMaterial2 > m_nHaloIndex; // 0xf08 | Schema_Atomic | Size: 0x8
			char  m_nHaloIndex[0x8]; // 0xf08 | Schema_Atomic | Size: 0x8
			client::BeamType_t m_nBeamType; // 0xf10 | Schema_DeclaredEnum | Size: 0x4
			uint32_t m_nBeamFlags; // 0xf14 | Schema_Builtin | Size: 0x4
			// client::CHandle< C_BaseEntity > m_hAttachEntity[10]; // 0xf18 | Schema_FixedArray | Size: 0x28
			char  m_hAttachEntity[0x4]; // 0xf18 | Schema_FixedArray | Size: 0x4
			modellib::AttachmentHandle_t m_nAttachIndex[10]; // 0xf40 | Schema_FixedArray | Size: 0x64
			float32 m_fWidth; // 0xf4c | Schema_Builtin | Size: 0x4
			float32 m_fEndWidth; // 0xf50 | Schema_Builtin | Size: 0x4
			float32 m_fFadeLength; // 0xf54 | Schema_Builtin | Size: 0x4
			float32 m_fHaloScale; // 0xf58 | Schema_Builtin | Size: 0x4
			float32 m_fAmplitude; // 0xf5c | Schema_Builtin | Size: 0x4
			float32 m_fStartFrame; // 0xf60 | Schema_Builtin | Size: 0x4
			float32 m_fSpeed; // 0xf64 | Schema_Builtin | Size: 0x4
			float32 m_flFrame; // 0xf68 | Schema_Builtin | Size: 0x4
			client::BeamClipStyle_t m_nClipStyle; // 0xf6c | Schema_DeclaredEnum | Size: 0x4
			bool m_bTurnedOff; // 0xf70 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			GlobalTypes::VectorWS m_vecEndPos; // 0xf74 | Schema_Atomic | Size: 0xc
			// client::CHandle< client::C_BaseEntity > m_hEndEntity; // 0xf80 | Schema_Atomic | Size: 0x4
			char  m_hEndEntity[0x4]; // 0xf80 | Schema_Atomic | Size: 0x4
			S2_PAD(0x4); // End padding
		};
		static_assert(offsetof(CS2::client::C_Beam, m_flFrameRate) == 0xEC8, "m_flFrameRate in C_Beam should be at offset 0xEC8");
		static_assert(offsetof(CS2::client::C_Beam, m_flHDRColorScale) == 0xECC, "m_flHDRColorScale in C_Beam should be at offset 0xECC");
		static_assert(offsetof(CS2::client::C_Beam, m_flFireTime) == 0xED0, "m_flFireTime in C_Beam should be at offset 0xED0");
		static_assert(offsetof(CS2::client::C_Beam, m_flDamage) == 0xED4, "m_flDamage in C_Beam should be at offset 0xED4");
		static_assert(offsetof(CS2::client::C_Beam, m_nNumBeamEnts) == 0xED8, "m_nNumBeamEnts in C_Beam should be at offset 0xED8");
		static_assert(offsetof(CS2::client::C_Beam, m_queryHandleHalo) == 0xEDC, "m_queryHandleHalo in C_Beam should be at offset 0xEDC");
		static_assert(offsetof(CS2::client::C_Beam, m_hBaseMaterial) == 0xF00, "m_hBaseMaterial in C_Beam should be at offset 0xF00");
		static_assert(offsetof(CS2::client::C_Beam, m_nHaloIndex) == 0xF08, "m_nHaloIndex in C_Beam should be at offset 0xF08");
		static_assert(offsetof(CS2::client::C_Beam, m_nBeamType) == 0xF10, "m_nBeamType in C_Beam should be at offset 0xF10");
		static_assert(offsetof(CS2::client::C_Beam, m_nBeamFlags) == 0xF14, "m_nBeamFlags in C_Beam should be at offset 0xF14");
		static_assert(offsetof(CS2::client::C_Beam, m_hAttachEntity) == 0xF18, "m_hAttachEntity in C_Beam should be at offset 0xF18");
		static_assert(offsetof(CS2::client::C_Beam, m_nAttachIndex) == 0xF40, "m_nAttachIndex in C_Beam should be at offset 0xF40");
		static_assert(offsetof(CS2::client::C_Beam, m_fWidth) == 0xF4C, "m_fWidth in C_Beam should be at offset 0xF4C");
		static_assert(offsetof(CS2::client::C_Beam, m_fEndWidth) == 0xF50, "m_fEndWidth in C_Beam should be at offset 0xF50");
		static_assert(offsetof(CS2::client::C_Beam, m_fFadeLength) == 0xF54, "m_fFadeLength in C_Beam should be at offset 0xF54");
		static_assert(offsetof(CS2::client::C_Beam, m_fHaloScale) == 0xF58, "m_fHaloScale in C_Beam should be at offset 0xF58");
		static_assert(offsetof(CS2::client::C_Beam, m_fAmplitude) == 0xF5C, "m_fAmplitude in C_Beam should be at offset 0xF5C");
		static_assert(offsetof(CS2::client::C_Beam, m_fStartFrame) == 0xF60, "m_fStartFrame in C_Beam should be at offset 0xF60");
		static_assert(offsetof(CS2::client::C_Beam, m_fSpeed) == 0xF64, "m_fSpeed in C_Beam should be at offset 0xF64");
		static_assert(offsetof(CS2::client::C_Beam, m_flFrame) == 0xF68, "m_flFrame in C_Beam should be at offset 0xF68");
		static_assert(offsetof(CS2::client::C_Beam, m_nClipStyle) == 0xF6C, "m_nClipStyle in C_Beam should be at offset 0xF6C");
		static_assert(offsetof(CS2::client::C_Beam, m_bTurnedOff) == 0xF70, "m_bTurnedOff in C_Beam should be at offset 0xF70");
		static_assert(offsetof(CS2::client::C_Beam, m_vecEndPos) == 0xF74, "m_vecEndPos in C_Beam should be at offset 0xF74");
		static_assert(offsetof(CS2::client::C_Beam, m_hEndEntity) == 0xF80, "m_hEndEntity in C_Beam should be at offset 0xF80");
		static_assert(sizeof(CS2::client::C_Beam) == 0xF88, "C_Beam size should be 0xF88");
	}
}
