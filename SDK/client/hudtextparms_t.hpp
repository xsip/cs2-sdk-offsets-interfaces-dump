// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>




namespace CS2 {
	namespace client {
		class hudtextparms_t  {
		public:
			GlobalTypes::Color color1; // 0x0 | Schema_Atomic | Size: 0x4
			GlobalTypes::Color color2; // 0x4 | Schema_Atomic | Size: 0x4
			uint8_t effect; // 0x8 | Schema_Builtin | Size: 0x1
			uint8_t channel; // 0x9 | Schema_Builtin | Size: 0x1
			S2_PAD(0x2);
			float32 x; // 0xc | Schema_Builtin | Size: 0x4
			float32 y; // 0x10 | Schema_Builtin | Size: 0x4
		};
		static_assert(offsetof(CS2::client::hudtextparms_t, color1) == 0x0, "color1 in hudtextparms_t should be at offset 0x0");
		static_assert(offsetof(CS2::client::hudtextparms_t, color2) == 0x4, "color2 in hudtextparms_t should be at offset 0x4");
		static_assert(offsetof(CS2::client::hudtextparms_t, effect) == 0x8, "effect in hudtextparms_t should be at offset 0x8");
		static_assert(offsetof(CS2::client::hudtextparms_t, channel) == 0x9, "channel in hudtextparms_t should be at offset 0x9");
		static_assert(offsetof(CS2::client::hudtextparms_t, x) == 0xC, "x in hudtextparms_t should be at offset 0xC");
		static_assert(offsetof(CS2::client::hudtextparms_t, y) == 0x10, "y in hudtextparms_t should be at offset 0x10");
		static_assert(sizeof(CS2::client::hudtextparms_t) == 0x14, "hudtextparms_t size should be 0x14");
	}
}
