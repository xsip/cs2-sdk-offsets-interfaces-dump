// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/client/C_PointEntity.hpp>



namespace CS2 {
	namespace client {
		class C_BaseFlex;
		class QueuedEvents_t;
	}
}


using namespace GlobalTypes;
namespace CS2 {
	namespace client {
		class C_SceneEntity : public CS2::client::C_PointEntity {
		public:
			S2_PAD(0x8);
			bool m_bIsPlayingBack; // 0x600 | Schema_Builtin | Size: 0x1
			bool m_bPaused; // 0x601 | Schema_Builtin | Size: 0x1
			bool m_bMultiplayer; // 0x602 | Schema_Builtin | Size: 0x1
			bool m_bAutogenerated; // 0x603 | Schema_Builtin | Size: 0x1
			float32 m_flForceClientTime; // 0x604 | Schema_Builtin | Size: 0x4
			uint16_t m_nSceneStringIndex; // 0x608 | Schema_Builtin | Size: 0x2
			bool m_bClientOnly; // 0x60a | Schema_Builtin | Size: 0x1
			S2_PAD(0x1);
			GlobalTypes::CHandle< client::C_BaseFlex > m_hOwner; // 0x60c | Schema_Atomic | Size: 0x4
			// char  m_hOwner[0x4]; // 0x60c | Schema_Atomic | Size: 0x4
			// client::C_NetworkUtlVectorBase< client.dll::CHandle< C_BaseFlex > > m_hActorList; // 0x610 | Schema_Atomic | Size: 0x18
			char  m_hActorList[0x18]; // 0x610 | Schema_Atomic | Size: 0x18
			bool m_bWasPlaying; // 0x628 | Schema_Builtin | Size: 0x1
			S2_PAD(0xf);
			GlobalTypes::CUtlVector< client::QueuedEvents_t > m_QueuedEvents; // 0x638 | Schema_Atomic | Size: 0x18
			// char  m_QueuedEvents[0x18]; // 0x638 | Schema_Atomic | Size: 0x18
			float32 m_flCurrentTime; // 0x650 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4); // End padding
		};
		static_assert(offsetof(CS2::client::C_SceneEntity, m_bIsPlayingBack) == 0x600, "m_bIsPlayingBack in C_SceneEntity should be at offset 0x600");
		static_assert(offsetof(CS2::client::C_SceneEntity, m_bPaused) == 0x601, "m_bPaused in C_SceneEntity should be at offset 0x601");
		static_assert(offsetof(CS2::client::C_SceneEntity, m_bMultiplayer) == 0x602, "m_bMultiplayer in C_SceneEntity should be at offset 0x602");
		static_assert(offsetof(CS2::client::C_SceneEntity, m_bAutogenerated) == 0x603, "m_bAutogenerated in C_SceneEntity should be at offset 0x603");
		static_assert(offsetof(CS2::client::C_SceneEntity, m_flForceClientTime) == 0x604, "m_flForceClientTime in C_SceneEntity should be at offset 0x604");
		static_assert(offsetof(CS2::client::C_SceneEntity, m_nSceneStringIndex) == 0x608, "m_nSceneStringIndex in C_SceneEntity should be at offset 0x608");
		static_assert(offsetof(CS2::client::C_SceneEntity, m_bClientOnly) == 0x60A, "m_bClientOnly in C_SceneEntity should be at offset 0x60A");
		static_assert(offsetof(CS2::client::C_SceneEntity, m_hOwner) == 0x60C, "m_hOwner in C_SceneEntity should be at offset 0x60C");
		static_assert(offsetof(CS2::client::C_SceneEntity, m_hActorList) == 0x610, "m_hActorList in C_SceneEntity should be at offset 0x610");
		static_assert(offsetof(CS2::client::C_SceneEntity, m_bWasPlaying) == 0x628, "m_bWasPlaying in C_SceneEntity should be at offset 0x628");
		static_assert(offsetof(CS2::client::C_SceneEntity, m_QueuedEvents) == 0x638, "m_QueuedEvents in C_SceneEntity should be at offset 0x638");
		static_assert(offsetof(CS2::client::C_SceneEntity, m_flCurrentTime) == 0x650, "m_flCurrentTime in C_SceneEntity should be at offset 0x650");
		static_assert(sizeof(CS2::client::C_SceneEntity) == 0x658, "C_SceneEntity size should be 0x658");
	}
}
