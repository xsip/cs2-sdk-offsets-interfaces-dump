// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif







using namespace GlobalTypes;
namespace CS2 {
	namespace client {
		class C_IronSightController  {
		public:
			S2_PAD(0x10);
			bool m_bIronSightAvailable; // 0x10 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			float32 m_flIronSightAmount; // 0x14 | Schema_Builtin | Size: 0x4
			float32 m_flIronSightAmountGained; // 0x18 | Schema_Builtin | Size: 0x4
			float32 m_flIronSightAmountBiased; // 0x1c | Schema_Builtin | Size: 0x4
			float32 m_flIronSightAmount_Interpolated; // 0x20 | Schema_Builtin | Size: 0x4
			float32 m_flIronSightAmountGained_Interpolated; // 0x24 | Schema_Builtin | Size: 0x4
			float32 m_flIronSightAmountBiased_Interpolated; // 0x28 | Schema_Builtin | Size: 0x4
			float32 m_flInterpolationLastUpdated; // 0x2c | Schema_Builtin | Size: 0x4
			GlobalTypes::QAngle m_angDeltaAverage[8]; // 0x30 | Schema_FixedArray | Size: 0x60
			GlobalTypes::QAngle m_angViewLast; // 0x90 | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector2D m_vecDotCoords; // 0x9c | Schema_Atomic | Size: 0x8
			float32 m_flFiringInaccuracyExtraWidthMultiplier; // 0xa4 | Schema_Builtin | Size: 0x4
			float32 m_flSpeedRatio; // 0xa8 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4); // End padding
		};
		static_assert(offsetof(CS2::client::C_IronSightController, m_bIronSightAvailable) == 0x10, "m_bIronSightAvailable in C_IronSightController should be at offset 0x10");
		static_assert(offsetof(CS2::client::C_IronSightController, m_flIronSightAmount) == 0x14, "m_flIronSightAmount in C_IronSightController should be at offset 0x14");
		static_assert(offsetof(CS2::client::C_IronSightController, m_flIronSightAmountGained) == 0x18, "m_flIronSightAmountGained in C_IronSightController should be at offset 0x18");
		static_assert(offsetof(CS2::client::C_IronSightController, m_flIronSightAmountBiased) == 0x1C, "m_flIronSightAmountBiased in C_IronSightController should be at offset 0x1C");
		static_assert(offsetof(CS2::client::C_IronSightController, m_flIronSightAmount_Interpolated) == 0x20, "m_flIronSightAmount_Interpolated in C_IronSightController should be at offset 0x20");
		static_assert(offsetof(CS2::client::C_IronSightController, m_flIronSightAmountGained_Interpolated) == 0x24, "m_flIronSightAmountGained_Interpolated in C_IronSightController should be at offset 0x24");
		static_assert(offsetof(CS2::client::C_IronSightController, m_flIronSightAmountBiased_Interpolated) == 0x28, "m_flIronSightAmountBiased_Interpolated in C_IronSightController should be at offset 0x28");
		static_assert(offsetof(CS2::client::C_IronSightController, m_flInterpolationLastUpdated) == 0x2C, "m_flInterpolationLastUpdated in C_IronSightController should be at offset 0x2C");
		static_assert(offsetof(CS2::client::C_IronSightController, m_angDeltaAverage) == 0x30, "m_angDeltaAverage in C_IronSightController should be at offset 0x30");
		static_assert(offsetof(CS2::client::C_IronSightController, m_angViewLast) == 0x90, "m_angViewLast in C_IronSightController should be at offset 0x90");
		static_assert(offsetof(CS2::client::C_IronSightController, m_vecDotCoords) == 0x9C, "m_vecDotCoords in C_IronSightController should be at offset 0x9C");
		static_assert(offsetof(CS2::client::C_IronSightController, m_flFiringInaccuracyExtraWidthMultiplier) == 0xA4, "m_flFiringInaccuracyExtraWidthMultiplier in C_IronSightController should be at offset 0xA4");
		static_assert(offsetof(CS2::client::C_IronSightController, m_flSpeedRatio) == 0xA8, "m_flSpeedRatio in C_IronSightController should be at offset 0xA8");
		static_assert(sizeof(CS2::client::C_IronSightController) == 0xB0, "C_IronSightController size should be 0xB0");
	}
}
