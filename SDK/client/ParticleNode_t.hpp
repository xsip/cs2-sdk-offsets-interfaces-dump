// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/client/ParticleIndex_t.hpp>
#include <SDK/entity2/GameTime_t.hpp>



namespace CS2 {
	namespace client {
		class C_BaseEntity;
	}
}
namespace CS2 {
	namespace client {
		class ParticleNode_t  {
		public:
			GlobalTypes::CHandle< client::C_BaseEntity > m_hEntity; // 0x0 | Schema_Atomic | Size: 0x4
			// char  m_hEntity[0x4]; // 0x0 | Schema_Atomic | Size: 0x4
			// client::CHandle< client::C_BaseEntity > m_hEntity; // 0x0 | Schema_Atomic | Size: 0x4
			client::ParticleIndex_t m_iIndex; // 0x4 | Schema_DeclaredClass | Size: 0x4
			entity2::GameTime_t m_flStartTime; // 0x8 | Schema_DeclaredClass | Size: 0x4
			float32 m_flGrowthDuration; // 0xc | Schema_Builtin | Size: 0x4
			GlobalTypes::Vector m_vecGrowthOrigin; // 0x10 | Schema_Atomic | Size: 0xc
			float32 m_flEndcapTime; // 0x1c | Schema_Builtin | Size: 0x4
			bool m_bMarkedForDelete; // 0x20 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3); // End padding
		};
		static_assert(offsetof(CS2::client::ParticleNode_t, m_hEntity) == 0x0, "m_hEntity in ParticleNode_t should be at offset 0x0");
		static_assert(offsetof(CS2::client::ParticleNode_t, m_iIndex) == 0x4, "m_iIndex in ParticleNode_t should be at offset 0x4");
		static_assert(offsetof(CS2::client::ParticleNode_t, m_flStartTime) == 0x8, "m_flStartTime in ParticleNode_t should be at offset 0x8");
		static_assert(offsetof(CS2::client::ParticleNode_t, m_flGrowthDuration) == 0xC, "m_flGrowthDuration in ParticleNode_t should be at offset 0xC");
		static_assert(offsetof(CS2::client::ParticleNode_t, m_vecGrowthOrigin) == 0x10, "m_vecGrowthOrigin in ParticleNode_t should be at offset 0x10");
		static_assert(offsetof(CS2::client::ParticleNode_t, m_flEndcapTime) == 0x1C, "m_flEndcapTime in ParticleNode_t should be at offset 0x1C");
		static_assert(offsetof(CS2::client::ParticleNode_t, m_bMarkedForDelete) == 0x20, "m_bMarkedForDelete in ParticleNode_t should be at offset 0x20");
		static_assert(sizeof(CS2::client::ParticleNode_t) == 0x24, "ParticleNode_t size should be 0x24");
	}
}
