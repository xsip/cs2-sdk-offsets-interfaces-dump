// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/client/C_BaseEntity.hpp>





using namespace GlobalTypes;
namespace CS2 {
	namespace client {
		class C_EnvCubemapFog : public CS2::client::C_BaseEntity {
		public:
			float32 m_flEndDistance; // 0x5f8 | Schema_Builtin | Size: 0x4
			float32 m_flStartDistance; // 0x5fc | Schema_Builtin | Size: 0x4
			float32 m_flFogFalloffExponent; // 0x600 | Schema_Builtin | Size: 0x4
			bool m_bHeightFogEnabled; // 0x604 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			float32 m_flFogHeightWidth; // 0x608 | Schema_Builtin | Size: 0x4
			float32 m_flFogHeightEnd; // 0x60c | Schema_Builtin | Size: 0x4
			float32 m_flFogHeightStart; // 0x610 | Schema_Builtin | Size: 0x4
			float32 m_flFogHeightExponent; // 0x614 | Schema_Builtin | Size: 0x4
			float32 m_flLODBias; // 0x618 | Schema_Builtin | Size: 0x4
			bool m_bActive; // 0x61c | Schema_Builtin | Size: 0x1
			bool m_bStartDisabled; // 0x61d | Schema_Builtin | Size: 0x1
			S2_PAD(0x2);
			float32 m_flFogMaxOpacity; // 0x620 | Schema_Builtin | Size: 0x4
			int32_t m_nCubemapSourceType; // 0x624 | Schema_Builtin | Size: 0x4
			// GlobalTypes::CStrongHandle< resourcesystem::InfoForResourceTypeIMaterial2 > m_hSkyMaterial; // 0x628 | Schema_Atomic | Size: 0x8
			char  m_hSkyMaterial[0x8]; // 0x628 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlSymbolLarge m_iszSkyEntity; // 0x630 | Schema_Atomic | Size: 0x8
			// GlobalTypes::CStrongHandle< resourcesystem::InfoForResourceTypeCTextureBase > m_hFogCubemapTexture; // 0x638 | Schema_Atomic | Size: 0x8
			char  m_hFogCubemapTexture[0x8]; // 0x638 | Schema_Atomic | Size: 0x8
			bool m_bHasHeightFogEnd; // 0x640 | Schema_Builtin | Size: 0x1
			bool m_bFirstTime; // 0x641 | Schema_Builtin | Size: 0x1
			S2_PAD(0x6); // End padding
		};
		static_assert(offsetof(CS2::client::C_EnvCubemapFog, m_flEndDistance) == 0x5F8, "m_flEndDistance in C_EnvCubemapFog should be at offset 0x5F8");
		static_assert(offsetof(CS2::client::C_EnvCubemapFog, m_flStartDistance) == 0x5FC, "m_flStartDistance in C_EnvCubemapFog should be at offset 0x5FC");
		static_assert(offsetof(CS2::client::C_EnvCubemapFog, m_flFogFalloffExponent) == 0x600, "m_flFogFalloffExponent in C_EnvCubemapFog should be at offset 0x600");
		static_assert(offsetof(CS2::client::C_EnvCubemapFog, m_bHeightFogEnabled) == 0x604, "m_bHeightFogEnabled in C_EnvCubemapFog should be at offset 0x604");
		static_assert(offsetof(CS2::client::C_EnvCubemapFog, m_flFogHeightWidth) == 0x608, "m_flFogHeightWidth in C_EnvCubemapFog should be at offset 0x608");
		static_assert(offsetof(CS2::client::C_EnvCubemapFog, m_flFogHeightEnd) == 0x60C, "m_flFogHeightEnd in C_EnvCubemapFog should be at offset 0x60C");
		static_assert(offsetof(CS2::client::C_EnvCubemapFog, m_flFogHeightStart) == 0x610, "m_flFogHeightStart in C_EnvCubemapFog should be at offset 0x610");
		static_assert(offsetof(CS2::client::C_EnvCubemapFog, m_flFogHeightExponent) == 0x614, "m_flFogHeightExponent in C_EnvCubemapFog should be at offset 0x614");
		static_assert(offsetof(CS2::client::C_EnvCubemapFog, m_flLODBias) == 0x618, "m_flLODBias in C_EnvCubemapFog should be at offset 0x618");
		static_assert(offsetof(CS2::client::C_EnvCubemapFog, m_bActive) == 0x61C, "m_bActive in C_EnvCubemapFog should be at offset 0x61C");
		static_assert(offsetof(CS2::client::C_EnvCubemapFog, m_bStartDisabled) == 0x61D, "m_bStartDisabled in C_EnvCubemapFog should be at offset 0x61D");
		static_assert(offsetof(CS2::client::C_EnvCubemapFog, m_flFogMaxOpacity) == 0x620, "m_flFogMaxOpacity in C_EnvCubemapFog should be at offset 0x620");
		static_assert(offsetof(CS2::client::C_EnvCubemapFog, m_nCubemapSourceType) == 0x624, "m_nCubemapSourceType in C_EnvCubemapFog should be at offset 0x624");
		static_assert(offsetof(CS2::client::C_EnvCubemapFog, m_hSkyMaterial) == 0x628, "m_hSkyMaterial in C_EnvCubemapFog should be at offset 0x628");
		static_assert(offsetof(CS2::client::C_EnvCubemapFog, m_iszSkyEntity) == 0x630, "m_iszSkyEntity in C_EnvCubemapFog should be at offset 0x630");
		static_assert(offsetof(CS2::client::C_EnvCubemapFog, m_hFogCubemapTexture) == 0x638, "m_hFogCubemapTexture in C_EnvCubemapFog should be at offset 0x638");
		static_assert(offsetof(CS2::client::C_EnvCubemapFog, m_bHasHeightFogEnd) == 0x640, "m_bHasHeightFogEnd in C_EnvCubemapFog should be at offset 0x640");
		static_assert(offsetof(CS2::client::C_EnvCubemapFog, m_bFirstTime) == 0x641, "m_bFirstTime in C_EnvCubemapFog should be at offset 0x641");
		static_assert(sizeof(CS2::client::C_EnvCubemapFog) == 0x648, "C_EnvCubemapFog size should be 0x648");
	}
}
