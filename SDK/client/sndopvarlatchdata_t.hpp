// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif







using namespace GlobalTypes;
namespace CS2 {
	namespace client {
		class sndopvarlatchdata_t  {
		public:
			S2_PAD(0x8);
			GlobalTypes::CUtlSymbolLarge m_iszStack; // 0x8 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlSymbolLarge m_iszOperator; // 0x10 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlSymbolLarge m_iszOpvar; // 0x18 | Schema_Atomic | Size: 0x8
			float32 m_flVal; // 0x20 | Schema_Builtin | Size: 0x4
			GlobalTypes::Vector m_vPos; // 0x24 | Schema_Atomic | Size: 0xc
		};
		static_assert(offsetof(CS2::client::sndopvarlatchdata_t, m_iszStack) == 0x8, "m_iszStack in sndopvarlatchdata_t should be at offset 0x8");
		static_assert(offsetof(CS2::client::sndopvarlatchdata_t, m_iszOperator) == 0x10, "m_iszOperator in sndopvarlatchdata_t should be at offset 0x10");
		static_assert(offsetof(CS2::client::sndopvarlatchdata_t, m_iszOpvar) == 0x18, "m_iszOpvar in sndopvarlatchdata_t should be at offset 0x18");
		static_assert(offsetof(CS2::client::sndopvarlatchdata_t, m_flVal) == 0x20, "m_flVal in sndopvarlatchdata_t should be at offset 0x20");
		static_assert(offsetof(CS2::client::sndopvarlatchdata_t, m_vPos) == 0x24, "m_vPos in sndopvarlatchdata_t should be at offset 0x24");
		static_assert(sizeof(CS2::client::sndopvarlatchdata_t) == 0x30, "sndopvarlatchdata_t size should be 0x30");
	}
}
