// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif





namespace CS2 {
	namespace client {
		class ragdollelement_t;
		class ragdollhierarchyjoint_t;
	}
}


using namespace GlobalTypes;
namespace CS2 {
	namespace client {
		class ragdoll_t  {
		public:
			GlobalTypes::CUtlVector<client::ragdollelement_t> list; // 0x0 | Schema_Atomic | Size: 0x18
			// char  list[0x18]; // 0x0 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector<client::ragdollhierarchyjoint_t> hierarchyJoints; // 0x18 | Schema_Atomic | Size: 0x18
			// char  hierarchyJoints[0x18]; // 0x18 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector< int32 > boneIndex; // 0x30 | Schema_Atomic | Size: 0x18
			// char  boneIndex[0x18]; // 0x30 | Schema_Atomic | Size: 0x18
			bool allowStretch; // 0x48 | Schema_Builtin | Size: 0x1
			bool unused; // 0x49 | Schema_Builtin | Size: 0x1
			S2_PAD(0x6); // End padding
		};
		static_assert(offsetof(CS2::client::ragdoll_t, list) == 0x0, "list in ragdoll_t should be at offset 0x0");
		static_assert(offsetof(CS2::client::ragdoll_t, hierarchyJoints) == 0x18, "hierarchyJoints in ragdoll_t should be at offset 0x18");
		static_assert(offsetof(CS2::client::ragdoll_t, boneIndex) == 0x30, "boneIndex in ragdoll_t should be at offset 0x30");
		static_assert(offsetof(CS2::client::ragdoll_t, allowStretch) == 0x48, "allowStretch in ragdoll_t should be at offset 0x48");
		static_assert(offsetof(CS2::client::ragdoll_t, unused) == 0x49, "unused in ragdoll_t should be at offset 0x49");
		static_assert(sizeof(CS2::client::ragdoll_t) == 0x50, "ragdoll_t size should be 0x50");
	}
}
