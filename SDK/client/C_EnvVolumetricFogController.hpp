// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/client/C_BaseEntity.hpp>
#include <SDK/entity2/GameTime_t.hpp>





using namespace GlobalTypes;
namespace CS2 {
	namespace client {
		class C_EnvVolumetricFogController : public CS2::client::C_BaseEntity {
		public:
			float32 m_flScattering; // 0x5f8 | Schema_Builtin | Size: 0x4
			GlobalTypes::Color m_TintColor; // 0x5fc | Schema_Atomic | Size: 0x4
			float32 m_flAnisotropy; // 0x600 | Schema_Builtin | Size: 0x4
			float32 m_flFadeSpeed; // 0x604 | Schema_Builtin | Size: 0x4
			float32 m_flDrawDistance; // 0x608 | Schema_Builtin | Size: 0x4
			float32 m_flFadeInStart; // 0x60c | Schema_Builtin | Size: 0x4
			float32 m_flFadeInEnd; // 0x610 | Schema_Builtin | Size: 0x4
			float32 m_flIndirectStrength; // 0x614 | Schema_Builtin | Size: 0x4
			int32_t m_nVolumeDepth; // 0x618 | Schema_Builtin | Size: 0x4
			float32 m_fFirstVolumeSliceThickness; // 0x61c | Schema_Builtin | Size: 0x4
			int32_t m_nIndirectTextureDimX; // 0x620 | Schema_Builtin | Size: 0x4
			int32_t m_nIndirectTextureDimY; // 0x624 | Schema_Builtin | Size: 0x4
			int32_t m_nIndirectTextureDimZ; // 0x628 | Schema_Builtin | Size: 0x4
			GlobalTypes::Vector m_vBoxMins; // 0x62c | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vBoxMaxs; // 0x638 | Schema_Atomic | Size: 0xc
			bool m_bActive; // 0x644 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			entity2::GameTime_t m_flStartAnisoTime; // 0x648 | Schema_DeclaredClass | Size: 0x4
			entity2::GameTime_t m_flStartScatterTime; // 0x64c | Schema_DeclaredClass | Size: 0x4
			entity2::GameTime_t m_flStartDrawDistanceTime; // 0x650 | Schema_DeclaredClass | Size: 0x4
			float32 m_flStartAnisotropy; // 0x654 | Schema_Builtin | Size: 0x4
			float32 m_flStartScattering; // 0x658 | Schema_Builtin | Size: 0x4
			float32 m_flStartDrawDistance; // 0x65c | Schema_Builtin | Size: 0x4
			float32 m_flDefaultAnisotropy; // 0x660 | Schema_Builtin | Size: 0x4
			float32 m_flDefaultScattering; // 0x664 | Schema_Builtin | Size: 0x4
			float32 m_flDefaultDrawDistance; // 0x668 | Schema_Builtin | Size: 0x4
			bool m_bStartDisabled; // 0x66c | Schema_Builtin | Size: 0x1
			bool m_bEnableIndirect; // 0x66d | Schema_Builtin | Size: 0x1
			bool m_bIsMaster; // 0x66e | Schema_Builtin | Size: 0x1
			S2_PAD(0x1);
			// GlobalTypes::CStrongHandle< resourcesystem::InfoForResourceTypeCTextureBase > m_hFogIndirectTexture; // 0x670 | Schema_Atomic | Size: 0x8
			char  m_hFogIndirectTexture[0x8]; // 0x670 | Schema_Atomic | Size: 0x8
			int32_t m_nForceRefreshCount; // 0x678 | Schema_Builtin | Size: 0x4
			float32 m_fNoiseSpeed; // 0x67c | Schema_Builtin | Size: 0x4
			float32 m_fNoiseStrength; // 0x680 | Schema_Builtin | Size: 0x4
			GlobalTypes::Vector m_vNoiseScale; // 0x684 | Schema_Atomic | Size: 0xc
			float32 m_fWindSpeed; // 0x690 | Schema_Builtin | Size: 0x4
			GlobalTypes::Vector m_vWindDirection; // 0x694 | Schema_Atomic | Size: 0xc
			bool m_bFirstTime; // 0x6a0 | Schema_Builtin | Size: 0x1
			S2_PAD(0x7); // End padding
		};
		static_assert(offsetof(CS2::client::C_EnvVolumetricFogController, m_flScattering) == 0x5F8, "m_flScattering in C_EnvVolumetricFogController should be at offset 0x5F8");
		static_assert(offsetof(CS2::client::C_EnvVolumetricFogController, m_TintColor) == 0x5FC, "m_TintColor in C_EnvVolumetricFogController should be at offset 0x5FC");
		static_assert(offsetof(CS2::client::C_EnvVolumetricFogController, m_flAnisotropy) == 0x600, "m_flAnisotropy in C_EnvVolumetricFogController should be at offset 0x600");
		static_assert(offsetof(CS2::client::C_EnvVolumetricFogController, m_flFadeSpeed) == 0x604, "m_flFadeSpeed in C_EnvVolumetricFogController should be at offset 0x604");
		static_assert(offsetof(CS2::client::C_EnvVolumetricFogController, m_flDrawDistance) == 0x608, "m_flDrawDistance in C_EnvVolumetricFogController should be at offset 0x608");
		static_assert(offsetof(CS2::client::C_EnvVolumetricFogController, m_flFadeInStart) == 0x60C, "m_flFadeInStart in C_EnvVolumetricFogController should be at offset 0x60C");
		static_assert(offsetof(CS2::client::C_EnvVolumetricFogController, m_flFadeInEnd) == 0x610, "m_flFadeInEnd in C_EnvVolumetricFogController should be at offset 0x610");
		static_assert(offsetof(CS2::client::C_EnvVolumetricFogController, m_flIndirectStrength) == 0x614, "m_flIndirectStrength in C_EnvVolumetricFogController should be at offset 0x614");
		static_assert(offsetof(CS2::client::C_EnvVolumetricFogController, m_nVolumeDepth) == 0x618, "m_nVolumeDepth in C_EnvVolumetricFogController should be at offset 0x618");
		static_assert(offsetof(CS2::client::C_EnvVolumetricFogController, m_fFirstVolumeSliceThickness) == 0x61C, "m_fFirstVolumeSliceThickness in C_EnvVolumetricFogController should be at offset 0x61C");
		static_assert(offsetof(CS2::client::C_EnvVolumetricFogController, m_nIndirectTextureDimX) == 0x620, "m_nIndirectTextureDimX in C_EnvVolumetricFogController should be at offset 0x620");
		static_assert(offsetof(CS2::client::C_EnvVolumetricFogController, m_nIndirectTextureDimY) == 0x624, "m_nIndirectTextureDimY in C_EnvVolumetricFogController should be at offset 0x624");
		static_assert(offsetof(CS2::client::C_EnvVolumetricFogController, m_nIndirectTextureDimZ) == 0x628, "m_nIndirectTextureDimZ in C_EnvVolumetricFogController should be at offset 0x628");
		static_assert(offsetof(CS2::client::C_EnvVolumetricFogController, m_vBoxMins) == 0x62C, "m_vBoxMins in C_EnvVolumetricFogController should be at offset 0x62C");
		static_assert(offsetof(CS2::client::C_EnvVolumetricFogController, m_vBoxMaxs) == 0x638, "m_vBoxMaxs in C_EnvVolumetricFogController should be at offset 0x638");
		static_assert(offsetof(CS2::client::C_EnvVolumetricFogController, m_bActive) == 0x644, "m_bActive in C_EnvVolumetricFogController should be at offset 0x644");
		static_assert(offsetof(CS2::client::C_EnvVolumetricFogController, m_flStartAnisoTime) == 0x648, "m_flStartAnisoTime in C_EnvVolumetricFogController should be at offset 0x648");
		static_assert(offsetof(CS2::client::C_EnvVolumetricFogController, m_flStartScatterTime) == 0x64C, "m_flStartScatterTime in C_EnvVolumetricFogController should be at offset 0x64C");
		static_assert(offsetof(CS2::client::C_EnvVolumetricFogController, m_flStartDrawDistanceTime) == 0x650, "m_flStartDrawDistanceTime in C_EnvVolumetricFogController should be at offset 0x650");
		static_assert(offsetof(CS2::client::C_EnvVolumetricFogController, m_flStartAnisotropy) == 0x654, "m_flStartAnisotropy in C_EnvVolumetricFogController should be at offset 0x654");
		static_assert(offsetof(CS2::client::C_EnvVolumetricFogController, m_flStartScattering) == 0x658, "m_flStartScattering in C_EnvVolumetricFogController should be at offset 0x658");
		static_assert(offsetof(CS2::client::C_EnvVolumetricFogController, m_flStartDrawDistance) == 0x65C, "m_flStartDrawDistance in C_EnvVolumetricFogController should be at offset 0x65C");
		static_assert(offsetof(CS2::client::C_EnvVolumetricFogController, m_flDefaultAnisotropy) == 0x660, "m_flDefaultAnisotropy in C_EnvVolumetricFogController should be at offset 0x660");
		static_assert(offsetof(CS2::client::C_EnvVolumetricFogController, m_flDefaultScattering) == 0x664, "m_flDefaultScattering in C_EnvVolumetricFogController should be at offset 0x664");
		static_assert(offsetof(CS2::client::C_EnvVolumetricFogController, m_flDefaultDrawDistance) == 0x668, "m_flDefaultDrawDistance in C_EnvVolumetricFogController should be at offset 0x668");
		static_assert(offsetof(CS2::client::C_EnvVolumetricFogController, m_bStartDisabled) == 0x66C, "m_bStartDisabled in C_EnvVolumetricFogController should be at offset 0x66C");
		static_assert(offsetof(CS2::client::C_EnvVolumetricFogController, m_bEnableIndirect) == 0x66D, "m_bEnableIndirect in C_EnvVolumetricFogController should be at offset 0x66D");
		static_assert(offsetof(CS2::client::C_EnvVolumetricFogController, m_bIsMaster) == 0x66E, "m_bIsMaster in C_EnvVolumetricFogController should be at offset 0x66E");
		static_assert(offsetof(CS2::client::C_EnvVolumetricFogController, m_hFogIndirectTexture) == 0x670, "m_hFogIndirectTexture in C_EnvVolumetricFogController should be at offset 0x670");
		static_assert(offsetof(CS2::client::C_EnvVolumetricFogController, m_nForceRefreshCount) == 0x678, "m_nForceRefreshCount in C_EnvVolumetricFogController should be at offset 0x678");
		static_assert(offsetof(CS2::client::C_EnvVolumetricFogController, m_fNoiseSpeed) == 0x67C, "m_fNoiseSpeed in C_EnvVolumetricFogController should be at offset 0x67C");
		static_assert(offsetof(CS2::client::C_EnvVolumetricFogController, m_fNoiseStrength) == 0x680, "m_fNoiseStrength in C_EnvVolumetricFogController should be at offset 0x680");
		static_assert(offsetof(CS2::client::C_EnvVolumetricFogController, m_vNoiseScale) == 0x684, "m_vNoiseScale in C_EnvVolumetricFogController should be at offset 0x684");
		static_assert(offsetof(CS2::client::C_EnvVolumetricFogController, m_fWindSpeed) == 0x690, "m_fWindSpeed in C_EnvVolumetricFogController should be at offset 0x690");
		static_assert(offsetof(CS2::client::C_EnvVolumetricFogController, m_vWindDirection) == 0x694, "m_vWindDirection in C_EnvVolumetricFogController should be at offset 0x694");
		static_assert(offsetof(CS2::client::C_EnvVolumetricFogController, m_bFirstTime) == 0x6A0, "m_bFirstTime in C_EnvVolumetricFogController should be at offset 0x6A0");
		static_assert(sizeof(CS2::client::C_EnvVolumetricFogController) == 0x6A8, "C_EnvVolumetricFogController size should be 0x6A8");
	}
}
