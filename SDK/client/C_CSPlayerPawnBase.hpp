// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>

#include <SDK/client/C_BasePlayerPawn.hpp>
#include <SDK/client/CSPlayerState.hpp>
#include <SDK/entity2/GameTime_t.hpp>



namespace CS2 {
	namespace client {
		class CCSPlayer_PingServices;
	}
}
namespace CS2 {
	namespace client {
		class C_CSPlayerPawnBase : public CS2::client::C_BasePlayerPawn {
		public:
			S2_PAD(0x10);
			client::CCSPlayer_PingServices* m_pPingServices; // 0x15f0 | Schema_Ptr | Size: 0x8
			client::CSPlayerState m_previousPlayerState; // 0x15f8 | Schema_DeclaredEnum | Size: 0x4
			client::CSPlayerState m_iPlayerState; // 0x15fc | Schema_DeclaredEnum | Size: 0x4
			bool m_bHasMovedSinceSpawn; // 0x1600 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			entity2::GameTime_t m_flLastSpawnTimeIndex; // 0x1604 | Schema_DeclaredClass | Size: 0x4
			int32_t m_iProgressBarDuration; // 0x1608 | Schema_Builtin | Size: 0x4
			float32 m_flProgressBarStartTime; // 0x160c | Schema_Builtin | Size: 0x4
			entity2::GameTime_t m_flClientDeathTime; // 0x1610 | Schema_DeclaredClass | Size: 0x4
			float32 m_flFlashBangTime; // 0x1614 | Schema_Builtin | Size: 0x4
			float32 m_flFlashScreenshotAlpha; // 0x1618 | Schema_Builtin | Size: 0x4
			float32 m_flFlashOverlayAlpha; // 0x161c | Schema_Builtin | Size: 0x4
			bool m_bFlashBuildUp; // 0x1620 | Schema_Builtin | Size: 0x1
			bool m_bFlashDspHasBeenCleared; // 0x1621 | Schema_Builtin | Size: 0x1
			bool m_bFlashScreenshotHasBeenGrabbed; // 0x1622 | Schema_Builtin | Size: 0x1
			S2_PAD(0x1);
			float32 m_flFlashMaxAlpha; // 0x1624 | Schema_Builtin | Size: 0x4
			float32 m_flFlashDuration; // 0x1628 | Schema_Builtin | Size: 0x4
			entity2::GameTime_t m_flClientHealthFadeChangeTimestamp; // 0x162c | Schema_DeclaredClass | Size: 0x4
			int32_t m_nClientHealthFadeParityValue; // 0x1630 | Schema_Builtin | Size: 0x4
			float32 m_fNextThinkPushAway; // 0x1634 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4);
			float32 m_flCurrentMusicStartTime; // 0x163c | Schema_Builtin | Size: 0x4
			float32 m_flMusicRoundStartTime; // 0x1640 | Schema_Builtin | Size: 0x4
			bool m_bDeferStartMusicOnWarmup; // 0x1644 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			float32 m_flLastSmokeOverlayAlpha; // 0x1648 | Schema_Builtin | Size: 0x4
			float32 m_flLastSmokeAge; // 0x164c | Schema_Builtin | Size: 0x4
			GlobalTypes::Vector m_vLastSmokeOverlayColor; // 0x1650 | Schema_Atomic | Size: 0xc
			S2_PAD(0x1c);
			// client::CHandle< client::CCSPlayerController > m_hOriginalController; // 0x1678 | Schema_Atomic | Size: 0x4
			char  m_hOriginalController[0x4]; // 0x1678 | Schema_Atomic | Size: 0x4
			S2_PAD(0x4); // End padding
		};
		static_assert(offsetof(CS2::client::C_CSPlayerPawnBase, m_pPingServices) == 0x15F0, "m_pPingServices in C_CSPlayerPawnBase should be at offset 0x15F0");
		static_assert(offsetof(CS2::client::C_CSPlayerPawnBase, m_previousPlayerState) == 0x15F8, "m_previousPlayerState in C_CSPlayerPawnBase should be at offset 0x15F8");
		static_assert(offsetof(CS2::client::C_CSPlayerPawnBase, m_iPlayerState) == 0x15FC, "m_iPlayerState in C_CSPlayerPawnBase should be at offset 0x15FC");
		static_assert(offsetof(CS2::client::C_CSPlayerPawnBase, m_bHasMovedSinceSpawn) == 0x1600, "m_bHasMovedSinceSpawn in C_CSPlayerPawnBase should be at offset 0x1600");
		static_assert(offsetof(CS2::client::C_CSPlayerPawnBase, m_flLastSpawnTimeIndex) == 0x1604, "m_flLastSpawnTimeIndex in C_CSPlayerPawnBase should be at offset 0x1604");
		static_assert(offsetof(CS2::client::C_CSPlayerPawnBase, m_iProgressBarDuration) == 0x1608, "m_iProgressBarDuration in C_CSPlayerPawnBase should be at offset 0x1608");
		static_assert(offsetof(CS2::client::C_CSPlayerPawnBase, m_flProgressBarStartTime) == 0x160C, "m_flProgressBarStartTime in C_CSPlayerPawnBase should be at offset 0x160C");
		static_assert(offsetof(CS2::client::C_CSPlayerPawnBase, m_flClientDeathTime) == 0x1610, "m_flClientDeathTime in C_CSPlayerPawnBase should be at offset 0x1610");
		static_assert(offsetof(CS2::client::C_CSPlayerPawnBase, m_flFlashBangTime) == 0x1614, "m_flFlashBangTime in C_CSPlayerPawnBase should be at offset 0x1614");
		static_assert(offsetof(CS2::client::C_CSPlayerPawnBase, m_flFlashScreenshotAlpha) == 0x1618, "m_flFlashScreenshotAlpha in C_CSPlayerPawnBase should be at offset 0x1618");
		static_assert(offsetof(CS2::client::C_CSPlayerPawnBase, m_flFlashOverlayAlpha) == 0x161C, "m_flFlashOverlayAlpha in C_CSPlayerPawnBase should be at offset 0x161C");
		static_assert(offsetof(CS2::client::C_CSPlayerPawnBase, m_bFlashBuildUp) == 0x1620, "m_bFlashBuildUp in C_CSPlayerPawnBase should be at offset 0x1620");
		static_assert(offsetof(CS2::client::C_CSPlayerPawnBase, m_bFlashDspHasBeenCleared) == 0x1621, "m_bFlashDspHasBeenCleared in C_CSPlayerPawnBase should be at offset 0x1621");
		static_assert(offsetof(CS2::client::C_CSPlayerPawnBase, m_bFlashScreenshotHasBeenGrabbed) == 0x1622, "m_bFlashScreenshotHasBeenGrabbed in C_CSPlayerPawnBase should be at offset 0x1622");
		static_assert(offsetof(CS2::client::C_CSPlayerPawnBase, m_flFlashMaxAlpha) == 0x1624, "m_flFlashMaxAlpha in C_CSPlayerPawnBase should be at offset 0x1624");
		static_assert(offsetof(CS2::client::C_CSPlayerPawnBase, m_flFlashDuration) == 0x1628, "m_flFlashDuration in C_CSPlayerPawnBase should be at offset 0x1628");
		static_assert(offsetof(CS2::client::C_CSPlayerPawnBase, m_flClientHealthFadeChangeTimestamp) == 0x162C, "m_flClientHealthFadeChangeTimestamp in C_CSPlayerPawnBase should be at offset 0x162C");
		static_assert(offsetof(CS2::client::C_CSPlayerPawnBase, m_nClientHealthFadeParityValue) == 0x1630, "m_nClientHealthFadeParityValue in C_CSPlayerPawnBase should be at offset 0x1630");
		static_assert(offsetof(CS2::client::C_CSPlayerPawnBase, m_fNextThinkPushAway) == 0x1634, "m_fNextThinkPushAway in C_CSPlayerPawnBase should be at offset 0x1634");
		static_assert(offsetof(CS2::client::C_CSPlayerPawnBase, m_flCurrentMusicStartTime) == 0x163C, "m_flCurrentMusicStartTime in C_CSPlayerPawnBase should be at offset 0x163C");
		static_assert(offsetof(CS2::client::C_CSPlayerPawnBase, m_flMusicRoundStartTime) == 0x1640, "m_flMusicRoundStartTime in C_CSPlayerPawnBase should be at offset 0x1640");
		static_assert(offsetof(CS2::client::C_CSPlayerPawnBase, m_bDeferStartMusicOnWarmup) == 0x1644, "m_bDeferStartMusicOnWarmup in C_CSPlayerPawnBase should be at offset 0x1644");
		static_assert(offsetof(CS2::client::C_CSPlayerPawnBase, m_flLastSmokeOverlayAlpha) == 0x1648, "m_flLastSmokeOverlayAlpha in C_CSPlayerPawnBase should be at offset 0x1648");
		static_assert(offsetof(CS2::client::C_CSPlayerPawnBase, m_flLastSmokeAge) == 0x164C, "m_flLastSmokeAge in C_CSPlayerPawnBase should be at offset 0x164C");
		static_assert(offsetof(CS2::client::C_CSPlayerPawnBase, m_vLastSmokeOverlayColor) == 0x1650, "m_vLastSmokeOverlayColor in C_CSPlayerPawnBase should be at offset 0x1650");
		static_assert(offsetof(CS2::client::C_CSPlayerPawnBase, m_hOriginalController) == 0x1678, "m_hOriginalController in C_CSPlayerPawnBase should be at offset 0x1678");
		static_assert(sizeof(CS2::client::C_CSPlayerPawnBase) == 0x1680, "C_CSPlayerPawnBase size should be 0x1680");
	}
}
