// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>

#include <SDK/client/DamageTypes_t.hpp>
#include <SDK/client/AmmoIndex_t.hpp>
#include <SDK/client/TakeDamageFlags_t.hpp>
#include <SDK/client/HitGroup_t.hpp>



namespace CS2 {
	namespace client {
		class CTakeDamageInfo  {
		public:
			S2_PAD(0x8);
			GlobalTypes::Vector m_vecDamageForce; // 0x8 | Schema_Atomic | Size: 0xc
			GlobalTypes::VectorWS m_vecDamagePosition; // 0x14 | Schema_Atomic | Size: 0xc
			GlobalTypes::VectorWS m_vecReportedPosition; // 0x20 | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vecDamageDirection; // 0x2c | Schema_Atomic | Size: 0xc
			// client::CHandle< client::C_BaseEntity > m_hInflictor; // 0x38 | Schema_Atomic | Size: 0x4
			char  m_hInflictor[0x4]; // 0x38 | Schema_Atomic | Size: 0x4
			// client::CHandle< client::C_BaseEntity > m_hAttacker; // 0x3c | Schema_Atomic | Size: 0x4
			char  m_hAttacker[0x4]; // 0x3c | Schema_Atomic | Size: 0x4
			// client::CHandle< client::C_BaseEntity > m_hAbility; // 0x40 | Schema_Atomic | Size: 0x4
			char  m_hAbility[0x4]; // 0x40 | Schema_Atomic | Size: 0x4
			float32 m_flDamage; // 0x44 | Schema_Builtin | Size: 0x4
			float32 m_flTotalledDamage; // 0x48 | Schema_Builtin | Size: 0x4
			client::DamageTypes_t m_bitsDamageType; // 0x4c | Schema_DeclaredEnum | Size: 0x4
			int32_t m_iDamageCustom; // 0x50 | Schema_Builtin | Size: 0x4
			client::AmmoIndex_t m_iAmmoType; // 0x54 | Schema_DeclaredClass | Size: 0x1
			S2_PAD(0xb);
			float32 m_flOriginalDamage; // 0x60 | Schema_Builtin | Size: 0x4
			bool m_bShouldBleed; // 0x64 | Schema_Builtin | Size: 0x1
			bool m_bShouldSpark; // 0x65 | Schema_Builtin | Size: 0x1
			S2_PAD(0xa);
			client::TakeDamageFlags_t m_nDamageFlags; // 0x70 | Schema_DeclaredEnum | Size: 0x8
			GlobalTypes::CGlobalSymbol m_sDamageSourceName; // 0x78 | Schema_Atomic | Size: 0x8
			client::HitGroup_t m_iHitGroupId; // 0x80 | Schema_DeclaredEnum | Size: 0x4
			int32_t m_nNumObjectsPenetrated; // 0x84 | Schema_Builtin | Size: 0x4
			float32 m_flFriendlyFireDamageReductionRatio; // 0x88 | Schema_Builtin | Size: 0x4
			S2_PAD(0x7c);
			// GlobalTypes::CUtlVector< client::DestructibleHitGroupToDestroy_t > m_nDestructibleHitGroupsToForceDestroy; // 0x108 | Schema_Atomic | Size: 0x18
			char  m_nDestructibleHitGroupsToForceDestroy[0x18]; // 0x108 | Schema_Atomic | Size: 0x18
			bool m_bInTakeDamageFlow; // 0x120 | Schema_Builtin | Size: 0x1
			S2_PAD(0x7); // End padding
		};
		static_assert(offsetof(CS2::client::CTakeDamageInfo, m_vecDamageForce) == 0x8, "m_vecDamageForce in CTakeDamageInfo should be at offset 0x8");
		static_assert(offsetof(CS2::client::CTakeDamageInfo, m_vecDamagePosition) == 0x14, "m_vecDamagePosition in CTakeDamageInfo should be at offset 0x14");
		static_assert(offsetof(CS2::client::CTakeDamageInfo, m_vecReportedPosition) == 0x20, "m_vecReportedPosition in CTakeDamageInfo should be at offset 0x20");
		static_assert(offsetof(CS2::client::CTakeDamageInfo, m_vecDamageDirection) == 0x2C, "m_vecDamageDirection in CTakeDamageInfo should be at offset 0x2C");
		static_assert(offsetof(CS2::client::CTakeDamageInfo, m_hInflictor) == 0x38, "m_hInflictor in CTakeDamageInfo should be at offset 0x38");
		static_assert(offsetof(CS2::client::CTakeDamageInfo, m_hAttacker) == 0x3C, "m_hAttacker in CTakeDamageInfo should be at offset 0x3C");
		static_assert(offsetof(CS2::client::CTakeDamageInfo, m_hAbility) == 0x40, "m_hAbility in CTakeDamageInfo should be at offset 0x40");
		static_assert(offsetof(CS2::client::CTakeDamageInfo, m_flDamage) == 0x44, "m_flDamage in CTakeDamageInfo should be at offset 0x44");
		static_assert(offsetof(CS2::client::CTakeDamageInfo, m_flTotalledDamage) == 0x48, "m_flTotalledDamage in CTakeDamageInfo should be at offset 0x48");
		static_assert(offsetof(CS2::client::CTakeDamageInfo, m_bitsDamageType) == 0x4C, "m_bitsDamageType in CTakeDamageInfo should be at offset 0x4C");
		static_assert(offsetof(CS2::client::CTakeDamageInfo, m_iDamageCustom) == 0x50, "m_iDamageCustom in CTakeDamageInfo should be at offset 0x50");
		static_assert(offsetof(CS2::client::CTakeDamageInfo, m_iAmmoType) == 0x54, "m_iAmmoType in CTakeDamageInfo should be at offset 0x54");
		static_assert(offsetof(CS2::client::CTakeDamageInfo, m_flOriginalDamage) == 0x60, "m_flOriginalDamage in CTakeDamageInfo should be at offset 0x60");
		static_assert(offsetof(CS2::client::CTakeDamageInfo, m_bShouldBleed) == 0x64, "m_bShouldBleed in CTakeDamageInfo should be at offset 0x64");
		static_assert(offsetof(CS2::client::CTakeDamageInfo, m_bShouldSpark) == 0x65, "m_bShouldSpark in CTakeDamageInfo should be at offset 0x65");
		static_assert(offsetof(CS2::client::CTakeDamageInfo, m_nDamageFlags) == 0x70, "m_nDamageFlags in CTakeDamageInfo should be at offset 0x70");
		static_assert(offsetof(CS2::client::CTakeDamageInfo, m_sDamageSourceName) == 0x78, "m_sDamageSourceName in CTakeDamageInfo should be at offset 0x78");
		static_assert(offsetof(CS2::client::CTakeDamageInfo, m_iHitGroupId) == 0x80, "m_iHitGroupId in CTakeDamageInfo should be at offset 0x80");
		static_assert(offsetof(CS2::client::CTakeDamageInfo, m_nNumObjectsPenetrated) == 0x84, "m_nNumObjectsPenetrated in CTakeDamageInfo should be at offset 0x84");
		static_assert(offsetof(CS2::client::CTakeDamageInfo, m_flFriendlyFireDamageReductionRatio) == 0x88, "m_flFriendlyFireDamageReductionRatio in CTakeDamageInfo should be at offset 0x88");
		static_assert(offsetof(CS2::client::CTakeDamageInfo, m_nDestructibleHitGroupsToForceDestroy) == 0x108, "m_nDestructibleHitGroupsToForceDestroy in CTakeDamageInfo should be at offset 0x108");
		static_assert(offsetof(CS2::client::CTakeDamageInfo, m_bInTakeDamageFlow) == 0x120, "m_bInTakeDamageFlow in CTakeDamageInfo should be at offset 0x120");
		static_assert(sizeof(CS2::client::CTakeDamageInfo) == 0x128, "CTakeDamageInfo size should be 0x128");
	}
}
