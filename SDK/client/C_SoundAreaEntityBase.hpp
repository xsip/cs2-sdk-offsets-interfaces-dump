// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/client/C_BaseEntity.hpp>



namespace CS2 {
	namespace client {
		class C_SoundAreaEntityBase : public CS2::client::C_BaseEntity {
		public:
			bool m_bDisabled; // 0x5f8 | Schema_Builtin | Size: 0x1
			S2_PAD(0x7);
			bool m_bWasEnabled; // 0x600 | Schema_Builtin | Size: 0x1
			S2_PAD(0x7);
			GlobalTypes::CUtlSymbolLarge m_iszSoundAreaType; // 0x608 | Schema_Atomic | Size: 0x8
			GlobalTypes::Vector m_vPos; // 0x610 | Schema_Atomic | Size: 0xc
			S2_PAD(0x4); // End padding
		};
		static_assert(offsetof(CS2::client::C_SoundAreaEntityBase, m_bDisabled) == 0x5F8, "m_bDisabled in C_SoundAreaEntityBase should be at offset 0x5F8");
		static_assert(offsetof(CS2::client::C_SoundAreaEntityBase, m_bWasEnabled) == 0x600, "m_bWasEnabled in C_SoundAreaEntityBase should be at offset 0x600");
		static_assert(offsetof(CS2::client::C_SoundAreaEntityBase, m_iszSoundAreaType) == 0x608, "m_iszSoundAreaType in C_SoundAreaEntityBase should be at offset 0x608");
		static_assert(offsetof(CS2::client::C_SoundAreaEntityBase, m_vPos) == 0x610, "m_vPos in C_SoundAreaEntityBase should be at offset 0x610");
		static_assert(sizeof(CS2::client::C_SoundAreaEntityBase) == 0x620, "C_SoundAreaEntityBase size should be 0x620");
	}
}
