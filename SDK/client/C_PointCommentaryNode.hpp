// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>

#include <SDK/client/CBaseAnimGraph.hpp>
#include <SDK/entity2/GameTime_t.hpp>



namespace CS2 {
	namespace client {
		class C_BaseEntity;
	}
}
namespace CS2 {
	namespace client {
		class C_PointCommentaryNode : public CS2::client::CBaseAnimGraph {
		public:
			S2_PAD(0x18);
			bool m_bActive; // 0x1170 | Schema_Builtin | Size: 0x1
			bool m_bWasActive; // 0x1171 | Schema_Builtin | Size: 0x1
			S2_PAD(0x2);
			entity2::GameTime_t m_flEndTime; // 0x1174 | Schema_DeclaredClass | Size: 0x4
			entity2::GameTime_t m_flStartTime; // 0x1178 | Schema_DeclaredClass | Size: 0x4
			float32 m_flStartTimeInCommentary; // 0x117c | Schema_Builtin | Size: 0x4
			GlobalTypes::CUtlSymbolLarge m_iszCommentaryFile; // 0x1180 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlSymbolLarge m_iszTitle; // 0x1188 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlSymbolLarge m_iszSpeakers; // 0x1190 | Schema_Atomic | Size: 0x8
			int32_t m_iNodeNumber; // 0x1198 | Schema_Builtin | Size: 0x4
			int32_t m_iNodeNumberMax; // 0x119c | Schema_Builtin | Size: 0x4
			bool m_bListenedTo; // 0x11a0 | Schema_Builtin | Size: 0x1
			S2_PAD(0xf);
			GlobalTypes::CHandle< client::C_BaseEntity > m_hViewPosition; // 0x11b0 | Schema_Atomic | Size: 0x4
			// char  m_hViewPosition[0x4]; // 0x11b0 | Schema_Atomic | Size: 0x4
			// client::CHandle< client::C_BaseEntity > m_hViewPosition; // 0x11b0 | Schema_Atomic | Size: 0x4
			bool m_bRestartAfterRestore; // 0x11b4 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3); // End padding
		};
		static_assert(offsetof(CS2::client::C_PointCommentaryNode, m_bActive) == 0x1170, "m_bActive in C_PointCommentaryNode should be at offset 0x1170");
		static_assert(offsetof(CS2::client::C_PointCommentaryNode, m_bWasActive) == 0x1171, "m_bWasActive in C_PointCommentaryNode should be at offset 0x1171");
		static_assert(offsetof(CS2::client::C_PointCommentaryNode, m_flEndTime) == 0x1174, "m_flEndTime in C_PointCommentaryNode should be at offset 0x1174");
		static_assert(offsetof(CS2::client::C_PointCommentaryNode, m_flStartTime) == 0x1178, "m_flStartTime in C_PointCommentaryNode should be at offset 0x1178");
		static_assert(offsetof(CS2::client::C_PointCommentaryNode, m_flStartTimeInCommentary) == 0x117C, "m_flStartTimeInCommentary in C_PointCommentaryNode should be at offset 0x117C");
		static_assert(offsetof(CS2::client::C_PointCommentaryNode, m_iszCommentaryFile) == 0x1180, "m_iszCommentaryFile in C_PointCommentaryNode should be at offset 0x1180");
		static_assert(offsetof(CS2::client::C_PointCommentaryNode, m_iszTitle) == 0x1188, "m_iszTitle in C_PointCommentaryNode should be at offset 0x1188");
		static_assert(offsetof(CS2::client::C_PointCommentaryNode, m_iszSpeakers) == 0x1190, "m_iszSpeakers in C_PointCommentaryNode should be at offset 0x1190");
		static_assert(offsetof(CS2::client::C_PointCommentaryNode, m_iNodeNumber) == 0x1198, "m_iNodeNumber in C_PointCommentaryNode should be at offset 0x1198");
		static_assert(offsetof(CS2::client::C_PointCommentaryNode, m_iNodeNumberMax) == 0x119C, "m_iNodeNumberMax in C_PointCommentaryNode should be at offset 0x119C");
		static_assert(offsetof(CS2::client::C_PointCommentaryNode, m_bListenedTo) == 0x11A0, "m_bListenedTo in C_PointCommentaryNode should be at offset 0x11A0");
		static_assert(offsetof(CS2::client::C_PointCommentaryNode, m_hViewPosition) == 0x11B0, "m_hViewPosition in C_PointCommentaryNode should be at offset 0x11B0");
		static_assert(offsetof(CS2::client::C_PointCommentaryNode, m_bRestartAfterRestore) == 0x11B4, "m_bRestartAfterRestore in C_PointCommentaryNode should be at offset 0x11B4");
		static_assert(sizeof(CS2::client::C_PointCommentaryNode) == 0x11B8, "C_PointCommentaryNode size should be 0x11B8");
	}
}
