// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>

#include <SDK/client/CBasePlayerController.hpp>
#include <SDK/entity2/GameTime_t.hpp>
#include <SDK/client/Reason.hpp>



namespace CS2 {
	namespace client {
		class CCSPlayerController_InGameMoneyServices;
		class CCSPlayerController_InventoryServices;
		class CCSPlayerController_ActionTrackingServices;
		class CCSPlayerController_DamageServices;
		class C_CSPlayerPawn;
		class C_CSObserverPawn;
	}
}
namespace CS2 {
	namespace client {
		class CCSPlayerController : public CS2::client::CBasePlayerController {
		public:
			S2_PAD(0x10);
			client::CCSPlayerController_InGameMoneyServices* m_pInGameMoneyServices; // 0x7f8 | Schema_Ptr | Size: 0x8
			client::CCSPlayerController_InventoryServices* m_pInventoryServices; // 0x800 | Schema_Ptr | Size: 0x8
			client::CCSPlayerController_ActionTrackingServices* m_pActionTrackingServices; // 0x808 | Schema_Ptr | Size: 0x8
			client::CCSPlayerController_DamageServices* m_pDamageServices; // 0x810 | Schema_Ptr | Size: 0x8
			uint32_t m_iPing; // 0x818 | Schema_Builtin | Size: 0x4
			bool m_bHasCommunicationAbuseMute; // 0x81c | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			uint32_t m_uiCommunicationMuteFlags; // 0x820 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4);
			GlobalTypes::CUtlSymbolLarge m_szCrosshairCodes; // 0x828 | Schema_Atomic | Size: 0x8
			uint8_t m_iPendingTeamNum; // 0x830 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			entity2::GameTime_t m_flForceTeamTime; // 0x834 | Schema_DeclaredClass | Size: 0x4
			int32_t m_iCompTeammateColor; // 0x838 | Schema_Builtin | Size: 0x4
			bool m_bEverPlayedOnTeam; // 0x83c | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			entity2::GameTime_t m_flPreviousForceJoinTeamTime; // 0x840 | Schema_DeclaredClass | Size: 0x4
			S2_PAD(0x4);
			GlobalTypes::CUtlSymbolLarge m_szClan; // 0x848 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlString m_sSanitizedPlayerName; // 0x850 | Schema_Atomic | Size: 0x8
			int32_t m_iCoachingTeam; // 0x858 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4);
			uint64_t m_nPlayerDominated; // 0x860 | Schema_Builtin | Size: 0x8
			uint64_t m_nPlayerDominatingMe; // 0x868 | Schema_Builtin | Size: 0x8
			int32_t m_iCompetitiveRanking; // 0x870 | Schema_Builtin | Size: 0x4
			int32_t m_iCompetitiveWins; // 0x874 | Schema_Builtin | Size: 0x4
			int8_t m_iCompetitiveRankType; // 0x878 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			int32_t m_iCompetitiveRankingPredicted_Win; // 0x87c | Schema_Builtin | Size: 0x4
			int32_t m_iCompetitiveRankingPredicted_Loss; // 0x880 | Schema_Builtin | Size: 0x4
			int32_t m_iCompetitiveRankingPredicted_Tie; // 0x884 | Schema_Builtin | Size: 0x4
			int32_t m_nEndMatchNextMapVote; // 0x888 | Schema_Builtin | Size: 0x4
			uint16_t m_unActiveQuestId; // 0x88c | Schema_Builtin | Size: 0x2
			S2_PAD(0x2);
			uint32_t m_rtActiveMissionPeriod; // 0x890 | Schema_Builtin | Size: 0x4
			client::Reason m_nQuestProgressReason; // 0x894 | Schema_DeclaredEnum | Size: 0x4
			uint32_t m_unPlayerTvControlFlags; // 0x898 | Schema_Builtin | Size: 0x4
			S2_PAD(0x2c);
			int32_t m_iDraftIndex; // 0x8c8 | Schema_Builtin | Size: 0x4
			uint32_t m_msQueuedModeDisconnectionTimestamp; // 0x8cc | Schema_Builtin | Size: 0x4
			uint32_t m_uiAbandonRecordedReason; // 0x8d0 | Schema_Builtin | Size: 0x4
			uint32_t m_eNetworkDisconnectionReason; // 0x8d4 | Schema_Builtin | Size: 0x4
			bool m_bCannotBeKicked; // 0x8d8 | Schema_Builtin | Size: 0x1
			bool m_bEverFullyConnected; // 0x8d9 | Schema_Builtin | Size: 0x1
			bool m_bAbandonAllowsSurrender; // 0x8da | Schema_Builtin | Size: 0x1
			bool m_bAbandonOffersInstantSurrender; // 0x8db | Schema_Builtin | Size: 0x1
			bool m_bDisconnection1MinWarningPrinted; // 0x8dc | Schema_Builtin | Size: 0x1
			bool m_bScoreReported; // 0x8dd | Schema_Builtin | Size: 0x1
			S2_PAD(0x2);
			int32_t m_nDisconnectionTick; // 0x8e0 | Schema_Builtin | Size: 0x4
			S2_PAD(0xc);
			bool m_bControllingBot; // 0x8f0 | Schema_Builtin | Size: 0x1
			bool m_bHasControlledBotThisRound; // 0x8f1 | Schema_Builtin | Size: 0x1
			bool m_bHasBeenControlledByPlayerThisRound; // 0x8f2 | Schema_Builtin | Size: 0x1
			S2_PAD(0x1);
			int32_t m_nBotsControlledThisRound; // 0x8f4 | Schema_Builtin | Size: 0x4
			bool m_bCanControlObservedBot; // 0x8f8 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			GlobalTypes::CHandle< client::C_CSPlayerPawn > m_hPlayerPawn; // 0x8fc | Schema_Atomic | Size: 0x4
			// char  m_hPlayerPawn[0x4]; // 0x8fc | Schema_Atomic | Size: 0x4
			GlobalTypes::CHandle< client::C_CSObserverPawn > m_hObserverPawn; // 0x900 | Schema_Atomic | Size: 0x4
			// char  m_hObserverPawn[0x4]; // 0x900 | Schema_Atomic | Size: 0x4
			bool m_bPawnIsAlive; // 0x904 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			uint32_t m_iPawnHealth; // 0x908 | Schema_Builtin | Size: 0x4
			int32_t m_iPawnArmor; // 0x90c | Schema_Builtin | Size: 0x4
			bool m_bPawnHasDefuser; // 0x910 | Schema_Builtin | Size: 0x1
			bool m_bPawnHasHelmet; // 0x911 | Schema_Builtin | Size: 0x1
			uint16_t m_nPawnCharacterDefIndex; // 0x912 | Schema_Builtin | Size: 0x2
			int32_t m_iPawnLifetimeStart; // 0x914 | Schema_Builtin | Size: 0x4
			int32_t m_iPawnLifetimeEnd; // 0x918 | Schema_Builtin | Size: 0x4
			int32_t m_iPawnBotDifficulty; // 0x91c | Schema_Builtin | Size: 0x4
			GlobalTypes::CHandle< client::CCSPlayerController > m_hOriginalControllerOfCurrentPawn; // 0x920 | Schema_Atomic | Size: 0x4
			// char  m_hOriginalControllerOfCurrentPawn[0x4]; // 0x920 | Schema_Atomic | Size: 0x4
			int32_t m_iScore; // 0x924 | Schema_Builtin | Size: 0x4
			uint8_t m_recentKillQueue[8]; // 0x928 | Schema_FixedArray | Size: 0x8
			uint8_t m_nFirstKill; // 0x930 | Schema_Builtin | Size: 0x1
			uint8_t m_nKillCount; // 0x931 | Schema_Builtin | Size: 0x1
			bool m_bMvpNoMusic; // 0x932 | Schema_Builtin | Size: 0x1
			S2_PAD(0x1);
			int32_t m_eMvpReason; // 0x934 | Schema_Builtin | Size: 0x4
			int32_t m_iMusicKitID; // 0x938 | Schema_Builtin | Size: 0x4
			int32_t m_iMusicKitMVPs; // 0x93c | Schema_Builtin | Size: 0x4
			int32_t m_iMVPs; // 0x940 | Schema_Builtin | Size: 0x4
			bool m_bIsPlayerNameDirty; // 0x944 | Schema_Builtin | Size: 0x1
			bool m_bFireBulletsSeedSynchronized; // 0x945 | Schema_Builtin | Size: 0x1
			S2_PAD(0x2); // End padding
		};
		static_assert(offsetof(CS2::client::CCSPlayerController, m_pInGameMoneyServices) == 0x7F8, "m_pInGameMoneyServices in CCSPlayerController should be at offset 0x7F8");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_pInventoryServices) == 0x800, "m_pInventoryServices in CCSPlayerController should be at offset 0x800");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_pActionTrackingServices) == 0x808, "m_pActionTrackingServices in CCSPlayerController should be at offset 0x808");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_pDamageServices) == 0x810, "m_pDamageServices in CCSPlayerController should be at offset 0x810");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_iPing) == 0x818, "m_iPing in CCSPlayerController should be at offset 0x818");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_bHasCommunicationAbuseMute) == 0x81C, "m_bHasCommunicationAbuseMute in CCSPlayerController should be at offset 0x81C");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_uiCommunicationMuteFlags) == 0x820, "m_uiCommunicationMuteFlags in CCSPlayerController should be at offset 0x820");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_szCrosshairCodes) == 0x828, "m_szCrosshairCodes in CCSPlayerController should be at offset 0x828");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_iPendingTeamNum) == 0x830, "m_iPendingTeamNum in CCSPlayerController should be at offset 0x830");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_flForceTeamTime) == 0x834, "m_flForceTeamTime in CCSPlayerController should be at offset 0x834");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_iCompTeammateColor) == 0x838, "m_iCompTeammateColor in CCSPlayerController should be at offset 0x838");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_bEverPlayedOnTeam) == 0x83C, "m_bEverPlayedOnTeam in CCSPlayerController should be at offset 0x83C");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_flPreviousForceJoinTeamTime) == 0x840, "m_flPreviousForceJoinTeamTime in CCSPlayerController should be at offset 0x840");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_szClan) == 0x848, "m_szClan in CCSPlayerController should be at offset 0x848");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_sSanitizedPlayerName) == 0x850, "m_sSanitizedPlayerName in CCSPlayerController should be at offset 0x850");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_iCoachingTeam) == 0x858, "m_iCoachingTeam in CCSPlayerController should be at offset 0x858");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_nPlayerDominated) == 0x860, "m_nPlayerDominated in CCSPlayerController should be at offset 0x860");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_nPlayerDominatingMe) == 0x868, "m_nPlayerDominatingMe in CCSPlayerController should be at offset 0x868");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_iCompetitiveRanking) == 0x870, "m_iCompetitiveRanking in CCSPlayerController should be at offset 0x870");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_iCompetitiveWins) == 0x874, "m_iCompetitiveWins in CCSPlayerController should be at offset 0x874");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_iCompetitiveRankType) == 0x878, "m_iCompetitiveRankType in CCSPlayerController should be at offset 0x878");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_iCompetitiveRankingPredicted_Win) == 0x87C, "m_iCompetitiveRankingPredicted_Win in CCSPlayerController should be at offset 0x87C");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_iCompetitiveRankingPredicted_Loss) == 0x880, "m_iCompetitiveRankingPredicted_Loss in CCSPlayerController should be at offset 0x880");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_iCompetitiveRankingPredicted_Tie) == 0x884, "m_iCompetitiveRankingPredicted_Tie in CCSPlayerController should be at offset 0x884");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_nEndMatchNextMapVote) == 0x888, "m_nEndMatchNextMapVote in CCSPlayerController should be at offset 0x888");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_unActiveQuestId) == 0x88C, "m_unActiveQuestId in CCSPlayerController should be at offset 0x88C");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_rtActiveMissionPeriod) == 0x890, "m_rtActiveMissionPeriod in CCSPlayerController should be at offset 0x890");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_nQuestProgressReason) == 0x894, "m_nQuestProgressReason in CCSPlayerController should be at offset 0x894");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_unPlayerTvControlFlags) == 0x898, "m_unPlayerTvControlFlags in CCSPlayerController should be at offset 0x898");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_iDraftIndex) == 0x8C8, "m_iDraftIndex in CCSPlayerController should be at offset 0x8C8");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_msQueuedModeDisconnectionTimestamp) == 0x8CC, "m_msQueuedModeDisconnectionTimestamp in CCSPlayerController should be at offset 0x8CC");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_uiAbandonRecordedReason) == 0x8D0, "m_uiAbandonRecordedReason in CCSPlayerController should be at offset 0x8D0");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_eNetworkDisconnectionReason) == 0x8D4, "m_eNetworkDisconnectionReason in CCSPlayerController should be at offset 0x8D4");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_bCannotBeKicked) == 0x8D8, "m_bCannotBeKicked in CCSPlayerController should be at offset 0x8D8");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_bEverFullyConnected) == 0x8D9, "m_bEverFullyConnected in CCSPlayerController should be at offset 0x8D9");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_bAbandonAllowsSurrender) == 0x8DA, "m_bAbandonAllowsSurrender in CCSPlayerController should be at offset 0x8DA");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_bAbandonOffersInstantSurrender) == 0x8DB, "m_bAbandonOffersInstantSurrender in CCSPlayerController should be at offset 0x8DB");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_bDisconnection1MinWarningPrinted) == 0x8DC, "m_bDisconnection1MinWarningPrinted in CCSPlayerController should be at offset 0x8DC");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_bScoreReported) == 0x8DD, "m_bScoreReported in CCSPlayerController should be at offset 0x8DD");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_nDisconnectionTick) == 0x8E0, "m_nDisconnectionTick in CCSPlayerController should be at offset 0x8E0");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_bControllingBot) == 0x8F0, "m_bControllingBot in CCSPlayerController should be at offset 0x8F0");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_bHasControlledBotThisRound) == 0x8F1, "m_bHasControlledBotThisRound in CCSPlayerController should be at offset 0x8F1");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_bHasBeenControlledByPlayerThisRound) == 0x8F2, "m_bHasBeenControlledByPlayerThisRound in CCSPlayerController should be at offset 0x8F2");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_nBotsControlledThisRound) == 0x8F4, "m_nBotsControlledThisRound in CCSPlayerController should be at offset 0x8F4");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_bCanControlObservedBot) == 0x8F8, "m_bCanControlObservedBot in CCSPlayerController should be at offset 0x8F8");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_hPlayerPawn) == 0x8FC, "m_hPlayerPawn in CCSPlayerController should be at offset 0x8FC");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_hObserverPawn) == 0x900, "m_hObserverPawn in CCSPlayerController should be at offset 0x900");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_bPawnIsAlive) == 0x904, "m_bPawnIsAlive in CCSPlayerController should be at offset 0x904");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_iPawnHealth) == 0x908, "m_iPawnHealth in CCSPlayerController should be at offset 0x908");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_iPawnArmor) == 0x90C, "m_iPawnArmor in CCSPlayerController should be at offset 0x90C");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_bPawnHasDefuser) == 0x910, "m_bPawnHasDefuser in CCSPlayerController should be at offset 0x910");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_bPawnHasHelmet) == 0x911, "m_bPawnHasHelmet in CCSPlayerController should be at offset 0x911");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_nPawnCharacterDefIndex) == 0x912, "m_nPawnCharacterDefIndex in CCSPlayerController should be at offset 0x912");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_iPawnLifetimeStart) == 0x914, "m_iPawnLifetimeStart in CCSPlayerController should be at offset 0x914");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_iPawnLifetimeEnd) == 0x918, "m_iPawnLifetimeEnd in CCSPlayerController should be at offset 0x918");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_iPawnBotDifficulty) == 0x91C, "m_iPawnBotDifficulty in CCSPlayerController should be at offset 0x91C");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_hOriginalControllerOfCurrentPawn) == 0x920, "m_hOriginalControllerOfCurrentPawn in CCSPlayerController should be at offset 0x920");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_iScore) == 0x924, "m_iScore in CCSPlayerController should be at offset 0x924");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_recentKillQueue) == 0x928, "m_recentKillQueue in CCSPlayerController should be at offset 0x928");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_nFirstKill) == 0x930, "m_nFirstKill in CCSPlayerController should be at offset 0x930");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_nKillCount) == 0x931, "m_nKillCount in CCSPlayerController should be at offset 0x931");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_bMvpNoMusic) == 0x932, "m_bMvpNoMusic in CCSPlayerController should be at offset 0x932");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_eMvpReason) == 0x934, "m_eMvpReason in CCSPlayerController should be at offset 0x934");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_iMusicKitID) == 0x938, "m_iMusicKitID in CCSPlayerController should be at offset 0x938");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_iMusicKitMVPs) == 0x93C, "m_iMusicKitMVPs in CCSPlayerController should be at offset 0x93C");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_iMVPs) == 0x940, "m_iMVPs in CCSPlayerController should be at offset 0x940");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_bIsPlayerNameDirty) == 0x944, "m_bIsPlayerNameDirty in CCSPlayerController should be at offset 0x944");
		static_assert(offsetof(CS2::client::CCSPlayerController, m_bFireBulletsSeedSynchronized) == 0x945, "m_bFireBulletsSeedSynchronized in CCSPlayerController should be at offset 0x945");
		static_assert(sizeof(CS2::client::CCSPlayerController) == 0x948, "CCSPlayerController size should be 0x948");
	}
}
