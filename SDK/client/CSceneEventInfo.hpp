// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/animationsystem/HSequence.hpp>
#include <SDK/entity2/GameTime_t.hpp>
#include <SDK/client/SceneEventId_t.hpp>



namespace CS2 {
	namespace client {
		class C_BaseEntity;
	}
}


using namespace GlobalTypes;
namespace CS2 {
	namespace client {
		class CSceneEventInfo  {
		public:
			int32_t m_iLayer; // 0x0 | Schema_Builtin | Size: 0x4
			int32_t m_iPriority; // 0x4 | Schema_Builtin | Size: 0x4
			animationsystem::HSequence m_hSequence; // 0x8 | Schema_DeclaredClass | Size: 0x4
			float32 m_flWeight; // 0xc | Schema_Builtin | Size: 0x4
			bool m_bHasArrived; // 0x10 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			int32_t m_nType; // 0x14 | Schema_Builtin | Size: 0x4
			entity2::GameTime_t m_flNext; // 0x18 | Schema_DeclaredClass | Size: 0x4
			bool m_bIsGesture; // 0x1c | Schema_Builtin | Size: 0x1
			bool m_bShouldRemove; // 0x1d | Schema_Builtin | Size: 0x1
			S2_PAD(0x26);
			GlobalTypes::CHandle< client::C_BaseEntity > m_hTarget; // 0x44 | Schema_Atomic | Size: 0x4
			// char  m_hTarget[0x4]; // 0x44 | Schema_Atomic | Size: 0x4
			client::SceneEventId_t m_nSceneEventId; // 0x48 | Schema_DeclaredClass | Size: 0x4
			bool m_bClientSide; // 0x4c | Schema_Builtin | Size: 0x1
			bool m_bStarted; // 0x4d | Schema_Builtin | Size: 0x1
			S2_PAD(0x2); // End padding
		};
		static_assert(offsetof(CS2::client::CSceneEventInfo, m_iLayer) == 0x0, "m_iLayer in CSceneEventInfo should be at offset 0x0");
		static_assert(offsetof(CS2::client::CSceneEventInfo, m_iPriority) == 0x4, "m_iPriority in CSceneEventInfo should be at offset 0x4");
		static_assert(offsetof(CS2::client::CSceneEventInfo, m_hSequence) == 0x8, "m_hSequence in CSceneEventInfo should be at offset 0x8");
		static_assert(offsetof(CS2::client::CSceneEventInfo, m_flWeight) == 0xC, "m_flWeight in CSceneEventInfo should be at offset 0xC");
		static_assert(offsetof(CS2::client::CSceneEventInfo, m_bHasArrived) == 0x10, "m_bHasArrived in CSceneEventInfo should be at offset 0x10");
		static_assert(offsetof(CS2::client::CSceneEventInfo, m_nType) == 0x14, "m_nType in CSceneEventInfo should be at offset 0x14");
		static_assert(offsetof(CS2::client::CSceneEventInfo, m_flNext) == 0x18, "m_flNext in CSceneEventInfo should be at offset 0x18");
		static_assert(offsetof(CS2::client::CSceneEventInfo, m_bIsGesture) == 0x1C, "m_bIsGesture in CSceneEventInfo should be at offset 0x1C");
		static_assert(offsetof(CS2::client::CSceneEventInfo, m_bShouldRemove) == 0x1D, "m_bShouldRemove in CSceneEventInfo should be at offset 0x1D");
		static_assert(offsetof(CS2::client::CSceneEventInfo, m_hTarget) == 0x44, "m_hTarget in CSceneEventInfo should be at offset 0x44");
		static_assert(offsetof(CS2::client::CSceneEventInfo, m_nSceneEventId) == 0x48, "m_nSceneEventId in CSceneEventInfo should be at offset 0x48");
		static_assert(offsetof(CS2::client::CSceneEventInfo, m_bClientSide) == 0x4C, "m_bClientSide in CSceneEventInfo should be at offset 0x4C");
		static_assert(offsetof(CS2::client::CSceneEventInfo, m_bStarted) == 0x4D, "m_bStarted in CSceneEventInfo should be at offset 0x4D");
		static_assert(sizeof(CS2::client::CSceneEventInfo) == 0x50, "CSceneEventInfo size should be 0x50");
	}
}
