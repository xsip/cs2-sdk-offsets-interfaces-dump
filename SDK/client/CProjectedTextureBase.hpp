// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>




namespace CS2 {
	namespace client {
		class CProjectedTextureBase  {
		public:
			S2_PAD(0xc);
			// client::CHandle< client::C_BaseEntity > m_hTargetEntity; // 0xc | Schema_Atomic | Size: 0x4
			char  m_hTargetEntity[0x4]; // 0xc | Schema_Atomic | Size: 0x4
			bool m_bState; // 0x10 | Schema_Builtin | Size: 0x1
			bool m_bAlwaysUpdate; // 0x11 | Schema_Builtin | Size: 0x1
			S2_PAD(0x2);
			float32 m_flLightFOV; // 0x14 | Schema_Builtin | Size: 0x4
			bool m_bEnableShadows; // 0x18 | Schema_Builtin | Size: 0x1
			bool m_bSimpleProjection; // 0x19 | Schema_Builtin | Size: 0x1
			bool m_bLightOnlyTarget; // 0x1a | Schema_Builtin | Size: 0x1
			bool m_bLightWorld; // 0x1b | Schema_Builtin | Size: 0x1
			bool m_bCameraSpace; // 0x1c | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			float32 m_flBrightnessScale; // 0x20 | Schema_Builtin | Size: 0x4
			GlobalTypes::Color m_LightColor; // 0x24 | Schema_Atomic | Size: 0x4
			float32 m_flIntensity; // 0x28 | Schema_Builtin | Size: 0x4
			float32 m_flLinearAttenuation; // 0x2c | Schema_Builtin | Size: 0x4
			float32 m_flQuadraticAttenuation; // 0x30 | Schema_Builtin | Size: 0x4
			bool m_bVolumetric; // 0x34 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			float32 m_flVolumetricIntensity; // 0x38 | Schema_Builtin | Size: 0x4
			float32 m_flNoiseStrength; // 0x3c | Schema_Builtin | Size: 0x4
			float32 m_flFlashlightTime; // 0x40 | Schema_Builtin | Size: 0x4
			uint32_t m_nNumPlanes; // 0x44 | Schema_Builtin | Size: 0x4
			float32 m_flPlaneOffset; // 0x48 | Schema_Builtin | Size: 0x4
			float32 m_flColorTransitionTime; // 0x4c | Schema_Builtin | Size: 0x4
			float32 m_flAmbient; // 0x50 | Schema_Builtin | Size: 0x4
			char m_SpotlightTextureName[512]; // 0x54 | Schema_FixedArray | Size: 0x200
			int32_t m_nSpotlightTextureFrame; // 0x254 | Schema_Builtin | Size: 0x4
			uint32_t m_nShadowQuality; // 0x258 | Schema_Builtin | Size: 0x4
			float32 m_flNearZ; // 0x25c | Schema_Builtin | Size: 0x4
			float32 m_flFarZ; // 0x260 | Schema_Builtin | Size: 0x4
			float32 m_flProjectionSize; // 0x264 | Schema_Builtin | Size: 0x4
			float32 m_flRotation; // 0x268 | Schema_Builtin | Size: 0x4
			bool m_bFlipHorizontal; // 0x26c | Schema_Builtin | Size: 0x1
			S2_PAD(0x73); // End padding
		};
		static_assert(offsetof(CS2::client::CProjectedTextureBase, m_hTargetEntity) == 0xC, "m_hTargetEntity in CProjectedTextureBase should be at offset 0xC");
		static_assert(offsetof(CS2::client::CProjectedTextureBase, m_bState) == 0x10, "m_bState in CProjectedTextureBase should be at offset 0x10");
		static_assert(offsetof(CS2::client::CProjectedTextureBase, m_bAlwaysUpdate) == 0x11, "m_bAlwaysUpdate in CProjectedTextureBase should be at offset 0x11");
		static_assert(offsetof(CS2::client::CProjectedTextureBase, m_flLightFOV) == 0x14, "m_flLightFOV in CProjectedTextureBase should be at offset 0x14");
		static_assert(offsetof(CS2::client::CProjectedTextureBase, m_bEnableShadows) == 0x18, "m_bEnableShadows in CProjectedTextureBase should be at offset 0x18");
		static_assert(offsetof(CS2::client::CProjectedTextureBase, m_bSimpleProjection) == 0x19, "m_bSimpleProjection in CProjectedTextureBase should be at offset 0x19");
		static_assert(offsetof(CS2::client::CProjectedTextureBase, m_bLightOnlyTarget) == 0x1A, "m_bLightOnlyTarget in CProjectedTextureBase should be at offset 0x1A");
		static_assert(offsetof(CS2::client::CProjectedTextureBase, m_bLightWorld) == 0x1B, "m_bLightWorld in CProjectedTextureBase should be at offset 0x1B");
		static_assert(offsetof(CS2::client::CProjectedTextureBase, m_bCameraSpace) == 0x1C, "m_bCameraSpace in CProjectedTextureBase should be at offset 0x1C");
		static_assert(offsetof(CS2::client::CProjectedTextureBase, m_flBrightnessScale) == 0x20, "m_flBrightnessScale in CProjectedTextureBase should be at offset 0x20");
		static_assert(offsetof(CS2::client::CProjectedTextureBase, m_LightColor) == 0x24, "m_LightColor in CProjectedTextureBase should be at offset 0x24");
		static_assert(offsetof(CS2::client::CProjectedTextureBase, m_flIntensity) == 0x28, "m_flIntensity in CProjectedTextureBase should be at offset 0x28");
		static_assert(offsetof(CS2::client::CProjectedTextureBase, m_flLinearAttenuation) == 0x2C, "m_flLinearAttenuation in CProjectedTextureBase should be at offset 0x2C");
		static_assert(offsetof(CS2::client::CProjectedTextureBase, m_flQuadraticAttenuation) == 0x30, "m_flQuadraticAttenuation in CProjectedTextureBase should be at offset 0x30");
		static_assert(offsetof(CS2::client::CProjectedTextureBase, m_bVolumetric) == 0x34, "m_bVolumetric in CProjectedTextureBase should be at offset 0x34");
		static_assert(offsetof(CS2::client::CProjectedTextureBase, m_flVolumetricIntensity) == 0x38, "m_flVolumetricIntensity in CProjectedTextureBase should be at offset 0x38");
		static_assert(offsetof(CS2::client::CProjectedTextureBase, m_flNoiseStrength) == 0x3C, "m_flNoiseStrength in CProjectedTextureBase should be at offset 0x3C");
		static_assert(offsetof(CS2::client::CProjectedTextureBase, m_flFlashlightTime) == 0x40, "m_flFlashlightTime in CProjectedTextureBase should be at offset 0x40");
		static_assert(offsetof(CS2::client::CProjectedTextureBase, m_nNumPlanes) == 0x44, "m_nNumPlanes in CProjectedTextureBase should be at offset 0x44");
		static_assert(offsetof(CS2::client::CProjectedTextureBase, m_flPlaneOffset) == 0x48, "m_flPlaneOffset in CProjectedTextureBase should be at offset 0x48");
		static_assert(offsetof(CS2::client::CProjectedTextureBase, m_flColorTransitionTime) == 0x4C, "m_flColorTransitionTime in CProjectedTextureBase should be at offset 0x4C");
		static_assert(offsetof(CS2::client::CProjectedTextureBase, m_flAmbient) == 0x50, "m_flAmbient in CProjectedTextureBase should be at offset 0x50");
		static_assert(offsetof(CS2::client::CProjectedTextureBase, m_SpotlightTextureName) == 0x54, "m_SpotlightTextureName in CProjectedTextureBase should be at offset 0x54");
		static_assert(offsetof(CS2::client::CProjectedTextureBase, m_nSpotlightTextureFrame) == 0x254, "m_nSpotlightTextureFrame in CProjectedTextureBase should be at offset 0x254");
		static_assert(offsetof(CS2::client::CProjectedTextureBase, m_nShadowQuality) == 0x258, "m_nShadowQuality in CProjectedTextureBase should be at offset 0x258");
		static_assert(offsetof(CS2::client::CProjectedTextureBase, m_flNearZ) == 0x25C, "m_flNearZ in CProjectedTextureBase should be at offset 0x25C");
		static_assert(offsetof(CS2::client::CProjectedTextureBase, m_flFarZ) == 0x260, "m_flFarZ in CProjectedTextureBase should be at offset 0x260");
		static_assert(offsetof(CS2::client::CProjectedTextureBase, m_flProjectionSize) == 0x264, "m_flProjectionSize in CProjectedTextureBase should be at offset 0x264");
		static_assert(offsetof(CS2::client::CProjectedTextureBase, m_flRotation) == 0x268, "m_flRotation in CProjectedTextureBase should be at offset 0x268");
		static_assert(offsetof(CS2::client::CProjectedTextureBase, m_bFlipHorizontal) == 0x26C, "m_bFlipHorizontal in CProjectedTextureBase should be at offset 0x26C");
		static_assert(sizeof(CS2::client::CProjectedTextureBase) == 0x2E0, "CProjectedTextureBase size should be 0x2E0");
	}
}
