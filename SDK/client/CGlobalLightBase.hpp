// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif





namespace CS2 {
	namespace client {
		class C_BaseEntity;
	}
}
namespace CS2 {
	namespace client {
		class CGlobalLightBase  {
		public:
			S2_PAD(0x10);
			bool m_bSpotLight; // 0x10 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			GlobalTypes::Vector m_SpotLightOrigin; // 0x14 | Schema_Atomic | Size: 0xc
			GlobalTypes::QAngle m_SpotLightAngles; // 0x20 | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_ShadowDirection; // 0x2c | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_AmbientDirection; // 0x38 | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_SpecularDirection; // 0x44 | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_InspectorSpecularDirection; // 0x50 | Schema_Atomic | Size: 0xc
			float32 m_flSpecularPower; // 0x5c | Schema_Builtin | Size: 0x4
			float32 m_flSpecularIndependence; // 0x60 | Schema_Builtin | Size: 0x4
			GlobalTypes::Color m_SpecularColor; // 0x64 | Schema_Atomic | Size: 0x4
			bool m_bStartDisabled; // 0x68 | Schema_Builtin | Size: 0x1
			bool m_bEnabled; // 0x69 | Schema_Builtin | Size: 0x1
			GlobalTypes::Color m_LightColor; // 0x6a | Schema_Atomic | Size: 0x4
			GlobalTypes::Color m_AmbientColor1; // 0x6e | Schema_Atomic | Size: 0x4
			GlobalTypes::Color m_AmbientColor2; // 0x72 | Schema_Atomic | Size: 0x4
			GlobalTypes::Color m_AmbientColor3; // 0x76 | Schema_Atomic | Size: 0x4
			S2_PAD(0x2);
			float32 m_flSunDistance; // 0x7c | Schema_Builtin | Size: 0x4
			float32 m_flFOV; // 0x80 | Schema_Builtin | Size: 0x4
			float32 m_flNearZ; // 0x84 | Schema_Builtin | Size: 0x4
			float32 m_flFarZ; // 0x88 | Schema_Builtin | Size: 0x4
			bool m_bEnableShadows; // 0x8c | Schema_Builtin | Size: 0x1
			bool m_bOldEnableShadows; // 0x8d | Schema_Builtin | Size: 0x1
			bool m_bBackgroundClearNotRequired; // 0x8e | Schema_Builtin | Size: 0x1
			S2_PAD(0x1);
			float32 m_flCloudScale; // 0x90 | Schema_Builtin | Size: 0x4
			float32 m_flCloud1Speed; // 0x94 | Schema_Builtin | Size: 0x4
			float32 m_flCloud1Direction; // 0x98 | Schema_Builtin | Size: 0x4
			float32 m_flCloud2Speed; // 0x9c | Schema_Builtin | Size: 0x4
			float32 m_flCloud2Direction; // 0xa0 | Schema_Builtin | Size: 0x4
			S2_PAD(0xc);
			float32 m_flAmbientScale1; // 0xb0 | Schema_Builtin | Size: 0x4
			float32 m_flAmbientScale2; // 0xb4 | Schema_Builtin | Size: 0x4
			float32 m_flGroundScale; // 0xb8 | Schema_Builtin | Size: 0x4
			float32 m_flLightScale; // 0xbc | Schema_Builtin | Size: 0x4
			float32 m_flFoWDarkness; // 0xc0 | Schema_Builtin | Size: 0x4
			bool m_bEnableSeparateSkyboxFog; // 0xc4 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			GlobalTypes::Vector m_vFowColor; // 0xc8 | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_ViewOrigin; // 0xd4 | Schema_Atomic | Size: 0xc
			GlobalTypes::QAngle m_ViewAngles; // 0xe0 | Schema_Atomic | Size: 0xc
			float32 m_flViewFoV; // 0xec | Schema_Builtin | Size: 0x4
			GlobalTypes::Vector m_WorldPoints[8]; // 0xf0 | Schema_FixedArray | Size: 0x60
			S2_PAD(0x358);
			GlobalTypes::Vector2D m_vFogOffsetLayer0; // 0x4a8 | Schema_Atomic | Size: 0x8
			GlobalTypes::Vector2D m_vFogOffsetLayer1; // 0x4b0 | Schema_Atomic | Size: 0x8
			GlobalTypes::CHandle< client::C_BaseEntity > m_hEnvWind; // 0x4b8 | Schema_Atomic | Size: 0x4
			// char  m_hEnvWind[0x4]; // 0x4b8 | Schema_Atomic | Size: 0x4
			// client::CHandle< client::C_BaseEntity > m_hEnvWind; // 0x4b8 | Schema_Atomic | Size: 0x4
			GlobalTypes::CHandle< client::C_BaseEntity > m_hEnvSky; // 0x4bc | Schema_Atomic | Size: 0x4
			// char  m_hEnvSky[0x4]; // 0x4bc | Schema_Atomic | Size: 0x4
			// client::CHandle< client::C_BaseEntity > m_hEnvSky; // 0x4bc | Schema_Atomic | Size: 0x4
		};
		static_assert(offsetof(CS2::client::CGlobalLightBase, m_bSpotLight) == 0x10, "m_bSpotLight in CGlobalLightBase should be at offset 0x10");
		static_assert(offsetof(CS2::client::CGlobalLightBase, m_SpotLightOrigin) == 0x14, "m_SpotLightOrigin in CGlobalLightBase should be at offset 0x14");
		static_assert(offsetof(CS2::client::CGlobalLightBase, m_SpotLightAngles) == 0x20, "m_SpotLightAngles in CGlobalLightBase should be at offset 0x20");
		static_assert(offsetof(CS2::client::CGlobalLightBase, m_ShadowDirection) == 0x2C, "m_ShadowDirection in CGlobalLightBase should be at offset 0x2C");
		static_assert(offsetof(CS2::client::CGlobalLightBase, m_AmbientDirection) == 0x38, "m_AmbientDirection in CGlobalLightBase should be at offset 0x38");
		static_assert(offsetof(CS2::client::CGlobalLightBase, m_SpecularDirection) == 0x44, "m_SpecularDirection in CGlobalLightBase should be at offset 0x44");
		static_assert(offsetof(CS2::client::CGlobalLightBase, m_InspectorSpecularDirection) == 0x50, "m_InspectorSpecularDirection in CGlobalLightBase should be at offset 0x50");
		static_assert(offsetof(CS2::client::CGlobalLightBase, m_flSpecularPower) == 0x5C, "m_flSpecularPower in CGlobalLightBase should be at offset 0x5C");
		static_assert(offsetof(CS2::client::CGlobalLightBase, m_flSpecularIndependence) == 0x60, "m_flSpecularIndependence in CGlobalLightBase should be at offset 0x60");
		static_assert(offsetof(CS2::client::CGlobalLightBase, m_SpecularColor) == 0x64, "m_SpecularColor in CGlobalLightBase should be at offset 0x64");
		static_assert(offsetof(CS2::client::CGlobalLightBase, m_bStartDisabled) == 0x68, "m_bStartDisabled in CGlobalLightBase should be at offset 0x68");
		static_assert(offsetof(CS2::client::CGlobalLightBase, m_bEnabled) == 0x69, "m_bEnabled in CGlobalLightBase should be at offset 0x69");
		static_assert(offsetof(CS2::client::CGlobalLightBase, m_LightColor) == 0x6A, "m_LightColor in CGlobalLightBase should be at offset 0x6A");
		static_assert(offsetof(CS2::client::CGlobalLightBase, m_AmbientColor1) == 0x6E, "m_AmbientColor1 in CGlobalLightBase should be at offset 0x6E");
		static_assert(offsetof(CS2::client::CGlobalLightBase, m_AmbientColor2) == 0x72, "m_AmbientColor2 in CGlobalLightBase should be at offset 0x72");
		static_assert(offsetof(CS2::client::CGlobalLightBase, m_AmbientColor3) == 0x76, "m_AmbientColor3 in CGlobalLightBase should be at offset 0x76");
		static_assert(offsetof(CS2::client::CGlobalLightBase, m_flSunDistance) == 0x7C, "m_flSunDistance in CGlobalLightBase should be at offset 0x7C");
		static_assert(offsetof(CS2::client::CGlobalLightBase, m_flFOV) == 0x80, "m_flFOV in CGlobalLightBase should be at offset 0x80");
		static_assert(offsetof(CS2::client::CGlobalLightBase, m_flNearZ) == 0x84, "m_flNearZ in CGlobalLightBase should be at offset 0x84");
		static_assert(offsetof(CS2::client::CGlobalLightBase, m_flFarZ) == 0x88, "m_flFarZ in CGlobalLightBase should be at offset 0x88");
		static_assert(offsetof(CS2::client::CGlobalLightBase, m_bEnableShadows) == 0x8C, "m_bEnableShadows in CGlobalLightBase should be at offset 0x8C");
		static_assert(offsetof(CS2::client::CGlobalLightBase, m_bOldEnableShadows) == 0x8D, "m_bOldEnableShadows in CGlobalLightBase should be at offset 0x8D");
		static_assert(offsetof(CS2::client::CGlobalLightBase, m_bBackgroundClearNotRequired) == 0x8E, "m_bBackgroundClearNotRequired in CGlobalLightBase should be at offset 0x8E");
		static_assert(offsetof(CS2::client::CGlobalLightBase, m_flCloudScale) == 0x90, "m_flCloudScale in CGlobalLightBase should be at offset 0x90");
		static_assert(offsetof(CS2::client::CGlobalLightBase, m_flCloud1Speed) == 0x94, "m_flCloud1Speed in CGlobalLightBase should be at offset 0x94");
		static_assert(offsetof(CS2::client::CGlobalLightBase, m_flCloud1Direction) == 0x98, "m_flCloud1Direction in CGlobalLightBase should be at offset 0x98");
		static_assert(offsetof(CS2::client::CGlobalLightBase, m_flCloud2Speed) == 0x9C, "m_flCloud2Speed in CGlobalLightBase should be at offset 0x9C");
		static_assert(offsetof(CS2::client::CGlobalLightBase, m_flCloud2Direction) == 0xA0, "m_flCloud2Direction in CGlobalLightBase should be at offset 0xA0");
		static_assert(offsetof(CS2::client::CGlobalLightBase, m_flAmbientScale1) == 0xB0, "m_flAmbientScale1 in CGlobalLightBase should be at offset 0xB0");
		static_assert(offsetof(CS2::client::CGlobalLightBase, m_flAmbientScale2) == 0xB4, "m_flAmbientScale2 in CGlobalLightBase should be at offset 0xB4");
		static_assert(offsetof(CS2::client::CGlobalLightBase, m_flGroundScale) == 0xB8, "m_flGroundScale in CGlobalLightBase should be at offset 0xB8");
		static_assert(offsetof(CS2::client::CGlobalLightBase, m_flLightScale) == 0xBC, "m_flLightScale in CGlobalLightBase should be at offset 0xBC");
		static_assert(offsetof(CS2::client::CGlobalLightBase, m_flFoWDarkness) == 0xC0, "m_flFoWDarkness in CGlobalLightBase should be at offset 0xC0");
		static_assert(offsetof(CS2::client::CGlobalLightBase, m_bEnableSeparateSkyboxFog) == 0xC4, "m_bEnableSeparateSkyboxFog in CGlobalLightBase should be at offset 0xC4");
		static_assert(offsetof(CS2::client::CGlobalLightBase, m_vFowColor) == 0xC8, "m_vFowColor in CGlobalLightBase should be at offset 0xC8");
		static_assert(offsetof(CS2::client::CGlobalLightBase, m_ViewOrigin) == 0xD4, "m_ViewOrigin in CGlobalLightBase should be at offset 0xD4");
		static_assert(offsetof(CS2::client::CGlobalLightBase, m_ViewAngles) == 0xE0, "m_ViewAngles in CGlobalLightBase should be at offset 0xE0");
		static_assert(offsetof(CS2::client::CGlobalLightBase, m_flViewFoV) == 0xEC, "m_flViewFoV in CGlobalLightBase should be at offset 0xEC");
		static_assert(offsetof(CS2::client::CGlobalLightBase, m_WorldPoints) == 0xF0, "m_WorldPoints in CGlobalLightBase should be at offset 0xF0");
		static_assert(offsetof(CS2::client::CGlobalLightBase, m_vFogOffsetLayer0) == 0x4A8, "m_vFogOffsetLayer0 in CGlobalLightBase should be at offset 0x4A8");
		static_assert(offsetof(CS2::client::CGlobalLightBase, m_vFogOffsetLayer1) == 0x4B0, "m_vFogOffsetLayer1 in CGlobalLightBase should be at offset 0x4B0");
		static_assert(offsetof(CS2::client::CGlobalLightBase, m_hEnvWind) == 0x4B8, "m_hEnvWind in CGlobalLightBase should be at offset 0x4B8");
		static_assert(offsetof(CS2::client::CGlobalLightBase, m_hEnvSky) == 0x4BC, "m_hEnvSky in CGlobalLightBase should be at offset 0x4BC");
		static_assert(sizeof(CS2::client::CGlobalLightBase) == 0x4C0, "CGlobalLightBase size should be 0x4C0");
	}
}
