// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/client/C_BaseEntity.hpp>
#include <SDK/entity2/CEntityIOOutput.hpp>





using namespace GlobalTypes;
namespace CS2 {
	namespace client {
		class CEnvSoundscape : public CS2::client::C_BaseEntity {
		public:
			entity2::CEntityIOOutput m_OnPlay; // 0x5f8 | Schema_DeclaredClass | Size: 0x28
			float32 m_flRadius; // 0x620 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4);
			GlobalTypes::CUtlSymbolLarge m_soundEventName; // 0x628 | Schema_Atomic | Size: 0x8
			bool m_bOverrideWithEvent; // 0x630 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			int32_t m_soundscapeIndex; // 0x634 | Schema_Builtin | Size: 0x4
			int32_t m_soundscapeEntityListId; // 0x638 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4);
			GlobalTypes::CUtlSymbolLarge m_positionNames[8]; // 0x640 | Schema_FixedArray | Size: 0x40
			GlobalTypes::CHandle<client::CEnvSoundscape> m_hProxySoundscape; // 0x680 | Schema_Atomic | Size: 0x4
			// char  m_hProxySoundscape[0x4]; // 0x680 | Schema_Atomic | Size: 0x4
			bool m_bDisabled; // 0x684 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			GlobalTypes::CUtlSymbolLarge m_soundscapeName; // 0x688 | Schema_Atomic | Size: 0x8
			uint32_t m_soundEventHash; // 0x690 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4); // End padding
		};
		static_assert(offsetof(CS2::client::CEnvSoundscape, m_OnPlay) == 0x5F8, "m_OnPlay in CEnvSoundscape should be at offset 0x5F8");
		static_assert(offsetof(CS2::client::CEnvSoundscape, m_flRadius) == 0x620, "m_flRadius in CEnvSoundscape should be at offset 0x620");
		static_assert(offsetof(CS2::client::CEnvSoundscape, m_soundEventName) == 0x628, "m_soundEventName in CEnvSoundscape should be at offset 0x628");
		static_assert(offsetof(CS2::client::CEnvSoundscape, m_bOverrideWithEvent) == 0x630, "m_bOverrideWithEvent in CEnvSoundscape should be at offset 0x630");
		static_assert(offsetof(CS2::client::CEnvSoundscape, m_soundscapeIndex) == 0x634, "m_soundscapeIndex in CEnvSoundscape should be at offset 0x634");
		static_assert(offsetof(CS2::client::CEnvSoundscape, m_soundscapeEntityListId) == 0x638, "m_soundscapeEntityListId in CEnvSoundscape should be at offset 0x638");
		static_assert(offsetof(CS2::client::CEnvSoundscape, m_positionNames) == 0x640, "m_positionNames in CEnvSoundscape should be at offset 0x640");
		static_assert(offsetof(CS2::client::CEnvSoundscape, m_hProxySoundscape) == 0x680, "m_hProxySoundscape in CEnvSoundscape should be at offset 0x680");
		static_assert(offsetof(CS2::client::CEnvSoundscape, m_bDisabled) == 0x684, "m_bDisabled in CEnvSoundscape should be at offset 0x684");
		static_assert(offsetof(CS2::client::CEnvSoundscape, m_soundscapeName) == 0x688, "m_soundscapeName in CEnvSoundscape should be at offset 0x688");
		static_assert(offsetof(CS2::client::CEnvSoundscape, m_soundEventHash) == 0x690, "m_soundEventHash in CEnvSoundscape should be at offset 0x690");
		static_assert(sizeof(CS2::client::CEnvSoundscape) == 0x698, "CEnvSoundscape size should be 0x698");
	}
}
