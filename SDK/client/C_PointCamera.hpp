// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>

#include <SDK/client/C_BaseEntity.hpp>



namespace CS2 {
	namespace client {
		class C_PointCamera : public CS2::client::C_BaseEntity {
		public:
			float32 m_FOV; // 0x5f8 | Schema_Builtin | Size: 0x4
			float32 m_Resolution; // 0x5fc | Schema_Builtin | Size: 0x4
			bool m_bFogEnable; // 0x600 | Schema_Builtin | Size: 0x1
			GlobalTypes::Color m_FogColor; // 0x601 | Schema_Atomic | Size: 0x4
			S2_PAD(0x3);
			float32 m_flFogStart; // 0x608 | Schema_Builtin | Size: 0x4
			float32 m_flFogEnd; // 0x60c | Schema_Builtin | Size: 0x4
			float32 m_flFogMaxDensity; // 0x610 | Schema_Builtin | Size: 0x4
			bool m_bActive; // 0x614 | Schema_Builtin | Size: 0x1
			bool m_bUseScreenAspectRatio; // 0x615 | Schema_Builtin | Size: 0x1
			S2_PAD(0x2);
			float32 m_flAspectRatio; // 0x618 | Schema_Builtin | Size: 0x4
			bool m_bNoSky; // 0x61c | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			float32 m_fBrightness; // 0x620 | Schema_Builtin | Size: 0x4
			float32 m_flZFar; // 0x624 | Schema_Builtin | Size: 0x4
			float32 m_flZNear; // 0x628 | Schema_Builtin | Size: 0x4
			bool m_bCanHLTVUse; // 0x62c | Schema_Builtin | Size: 0x1
			bool m_bAlignWithParent; // 0x62d | Schema_Builtin | Size: 0x1
			bool m_bDofEnabled; // 0x62e | Schema_Builtin | Size: 0x1
			S2_PAD(0x1);
			float32 m_flDofNearBlurry; // 0x630 | Schema_Builtin | Size: 0x4
			float32 m_flDofNearCrisp; // 0x634 | Schema_Builtin | Size: 0x4
			float32 m_flDofFarCrisp; // 0x638 | Schema_Builtin | Size: 0x4
			float32 m_flDofFarBlurry; // 0x63c | Schema_Builtin | Size: 0x4
			float32 m_flDofTiltToGround; // 0x640 | Schema_Builtin | Size: 0x4
			float32 m_TargetFOV; // 0x644 | Schema_Builtin | Size: 0x4
			float32 m_DegreesPerSecond; // 0x648 | Schema_Builtin | Size: 0x4
			bool m_bIsOn; // 0x64c | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			client::C_PointCamera* m_pNext; // 0x650 | Schema_Ptr | Size: 0x8
		};
		static_assert(offsetof(CS2::client::C_PointCamera, m_FOV) == 0x5F8, "m_FOV in C_PointCamera should be at offset 0x5F8");
		static_assert(offsetof(CS2::client::C_PointCamera, m_Resolution) == 0x5FC, "m_Resolution in C_PointCamera should be at offset 0x5FC");
		static_assert(offsetof(CS2::client::C_PointCamera, m_bFogEnable) == 0x600, "m_bFogEnable in C_PointCamera should be at offset 0x600");
		static_assert(offsetof(CS2::client::C_PointCamera, m_FogColor) == 0x601, "m_FogColor in C_PointCamera should be at offset 0x601");
		static_assert(offsetof(CS2::client::C_PointCamera, m_flFogStart) == 0x608, "m_flFogStart in C_PointCamera should be at offset 0x608");
		static_assert(offsetof(CS2::client::C_PointCamera, m_flFogEnd) == 0x60C, "m_flFogEnd in C_PointCamera should be at offset 0x60C");
		static_assert(offsetof(CS2::client::C_PointCamera, m_flFogMaxDensity) == 0x610, "m_flFogMaxDensity in C_PointCamera should be at offset 0x610");
		static_assert(offsetof(CS2::client::C_PointCamera, m_bActive) == 0x614, "m_bActive in C_PointCamera should be at offset 0x614");
		static_assert(offsetof(CS2::client::C_PointCamera, m_bUseScreenAspectRatio) == 0x615, "m_bUseScreenAspectRatio in C_PointCamera should be at offset 0x615");
		static_assert(offsetof(CS2::client::C_PointCamera, m_flAspectRatio) == 0x618, "m_flAspectRatio in C_PointCamera should be at offset 0x618");
		static_assert(offsetof(CS2::client::C_PointCamera, m_bNoSky) == 0x61C, "m_bNoSky in C_PointCamera should be at offset 0x61C");
		static_assert(offsetof(CS2::client::C_PointCamera, m_fBrightness) == 0x620, "m_fBrightness in C_PointCamera should be at offset 0x620");
		static_assert(offsetof(CS2::client::C_PointCamera, m_flZFar) == 0x624, "m_flZFar in C_PointCamera should be at offset 0x624");
		static_assert(offsetof(CS2::client::C_PointCamera, m_flZNear) == 0x628, "m_flZNear in C_PointCamera should be at offset 0x628");
		static_assert(offsetof(CS2::client::C_PointCamera, m_bCanHLTVUse) == 0x62C, "m_bCanHLTVUse in C_PointCamera should be at offset 0x62C");
		static_assert(offsetof(CS2::client::C_PointCamera, m_bAlignWithParent) == 0x62D, "m_bAlignWithParent in C_PointCamera should be at offset 0x62D");
		static_assert(offsetof(CS2::client::C_PointCamera, m_bDofEnabled) == 0x62E, "m_bDofEnabled in C_PointCamera should be at offset 0x62E");
		static_assert(offsetof(CS2::client::C_PointCamera, m_flDofNearBlurry) == 0x630, "m_flDofNearBlurry in C_PointCamera should be at offset 0x630");
		static_assert(offsetof(CS2::client::C_PointCamera, m_flDofNearCrisp) == 0x634, "m_flDofNearCrisp in C_PointCamera should be at offset 0x634");
		static_assert(offsetof(CS2::client::C_PointCamera, m_flDofFarCrisp) == 0x638, "m_flDofFarCrisp in C_PointCamera should be at offset 0x638");
		static_assert(offsetof(CS2::client::C_PointCamera, m_flDofFarBlurry) == 0x63C, "m_flDofFarBlurry in C_PointCamera should be at offset 0x63C");
		static_assert(offsetof(CS2::client::C_PointCamera, m_flDofTiltToGround) == 0x640, "m_flDofTiltToGround in C_PointCamera should be at offset 0x640");
		static_assert(offsetof(CS2::client::C_PointCamera, m_TargetFOV) == 0x644, "m_TargetFOV in C_PointCamera should be at offset 0x644");
		static_assert(offsetof(CS2::client::C_PointCamera, m_DegreesPerSecond) == 0x648, "m_DegreesPerSecond in C_PointCamera should be at offset 0x648");
		static_assert(offsetof(CS2::client::C_PointCamera, m_bIsOn) == 0x64C, "m_bIsOn in C_PointCamera should be at offset 0x64C");
		static_assert(offsetof(CS2::client::C_PointCamera, m_pNext) == 0x650, "m_pNext in C_PointCamera should be at offset 0x650");
		static_assert(sizeof(CS2::client::C_PointCamera) == 0x658, "C_PointCamera size should be 0x658");
	}
}
