// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/client/CSoundEnvelope.hpp>
#include <SDK/client/CCopyRecipientFilter.hpp>



namespace CS2 {
	namespace client {
		class C_BaseEntity;
	}
}


using namespace GlobalTypes;
namespace CS2 {
	namespace client {
		class CSoundPatch  {
		public:
			S2_PAD(0x8);
			client::CSoundEnvelope m_pitch; // 0x8 | Schema_DeclaredClass | Size: 0x10
			client::CSoundEnvelope m_volume; // 0x18 | Schema_DeclaredClass | Size: 0x10
			S2_PAD(0x14);
			float32 m_shutdownTime; // 0x3c | Schema_Builtin | Size: 0x4
			float32 m_flLastTime; // 0x40 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4);
			GlobalTypes::CUtlSymbolLarge m_iszSoundScriptName; // 0x48 | Schema_Atomic | Size: 0x8
			GlobalTypes::CHandle<client::C_BaseEntity> m_hEnt; // 0x50 | Schema_Atomic | Size: 0x4
			// char  m_hEnt[0x4]; // 0x50 | Schema_Atomic | Size: 0x4
			GlobalTypes::CEntityIndex m_soundEntityIndex; // 0x54 | Schema_Atomic | Size: 0x4
			GlobalTypes::Vector m_soundOrigin; // 0x58 | Schema_Atomic | Size: 0xc
			int32_t m_isPlaying; // 0x64 | Schema_Builtin | Size: 0x4
			client::CCopyRecipientFilter m_Filter; // 0x68 | Schema_DeclaredClass | Size: 0x30
			float32 m_flCloseCaptionDuration; // 0x98 | Schema_Builtin | Size: 0x4
			bool m_bUpdatedSoundOrigin; // 0x9c | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			GlobalTypes::CUtlSymbolLarge m_iszClassName; // 0xa0 | Schema_Atomic | Size: 0x8
		};
		static_assert(offsetof(CS2::client::CSoundPatch, m_pitch) == 0x8, "m_pitch in CSoundPatch should be at offset 0x8");
		static_assert(offsetof(CS2::client::CSoundPatch, m_volume) == 0x18, "m_volume in CSoundPatch should be at offset 0x18");
		static_assert(offsetof(CS2::client::CSoundPatch, m_shutdownTime) == 0x3C, "m_shutdownTime in CSoundPatch should be at offset 0x3C");
		static_assert(offsetof(CS2::client::CSoundPatch, m_flLastTime) == 0x40, "m_flLastTime in CSoundPatch should be at offset 0x40");
		static_assert(offsetof(CS2::client::CSoundPatch, m_iszSoundScriptName) == 0x48, "m_iszSoundScriptName in CSoundPatch should be at offset 0x48");
		static_assert(offsetof(CS2::client::CSoundPatch, m_hEnt) == 0x50, "m_hEnt in CSoundPatch should be at offset 0x50");
		static_assert(offsetof(CS2::client::CSoundPatch, m_soundEntityIndex) == 0x54, "m_soundEntityIndex in CSoundPatch should be at offset 0x54");
		static_assert(offsetof(CS2::client::CSoundPatch, m_soundOrigin) == 0x58, "m_soundOrigin in CSoundPatch should be at offset 0x58");
		static_assert(offsetof(CS2::client::CSoundPatch, m_isPlaying) == 0x64, "m_isPlaying in CSoundPatch should be at offset 0x64");
		static_assert(offsetof(CS2::client::CSoundPatch, m_Filter) == 0x68, "m_Filter in CSoundPatch should be at offset 0x68");
		static_assert(offsetof(CS2::client::CSoundPatch, m_flCloseCaptionDuration) == 0x98, "m_flCloseCaptionDuration in CSoundPatch should be at offset 0x98");
		static_assert(offsetof(CS2::client::CSoundPatch, m_bUpdatedSoundOrigin) == 0x9C, "m_bUpdatedSoundOrigin in CSoundPatch should be at offset 0x9C");
		static_assert(offsetof(CS2::client::CSoundPatch, m_iszClassName) == 0xA0, "m_iszClassName in CSoundPatch should be at offset 0xA0");
		static_assert(sizeof(CS2::client::CSoundPatch) == 0xA8, "CSoundPatch size should be 0xA8");
	}
}
