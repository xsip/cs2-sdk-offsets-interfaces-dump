// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif





namespace CS2 {
	namespace client {
		class C_BaseEntity;
	}
}
namespace CS2 {
	namespace client {
		class PhysicsRagdollPose_t  {
		public:
			S2_PAD(0x8);
			// GlobalTypes::C_NetworkUtlVectorBase< GlobalTypes::CTransform > m_Transforms; // 0x8 | Schema_Atomic | Size: 0x18
			char  m_Transforms[0x18]; // 0x8 | Schema_Atomic | Size: 0x18
			GlobalTypes::CHandle< client::C_BaseEntity > m_hOwner; // 0x20 | Schema_Atomic | Size: 0x4
			// char  m_hOwner[0x4]; // 0x20 | Schema_Atomic | Size: 0x4
			// client::CHandle< client::C_BaseEntity > m_hOwner; // 0x20 | Schema_Atomic | Size: 0x4
			bool m_bSetFromDebugHistory; // 0x24 | Schema_Builtin | Size: 0x1
			S2_PAD(0x23); // End padding
		};
		static_assert(offsetof(CS2::client::PhysicsRagdollPose_t, m_Transforms) == 0x8, "m_Transforms in PhysicsRagdollPose_t should be at offset 0x8");
		static_assert(offsetof(CS2::client::PhysicsRagdollPose_t, m_hOwner) == 0x20, "m_hOwner in PhysicsRagdollPose_t should be at offset 0x20");
		static_assert(offsetof(CS2::client::PhysicsRagdollPose_t, m_bSetFromDebugHistory) == 0x24, "m_bSetFromDebugHistory in PhysicsRagdollPose_t should be at offset 0x24");
		static_assert(sizeof(CS2::client::PhysicsRagdollPose_t) == 0x48, "PhysicsRagdollPose_t size should be 0x48");
	}
}
