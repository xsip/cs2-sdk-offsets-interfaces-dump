// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/client/C_BaseEntity.hpp>
#include <SDK/client/C_EnvWindShared.hpp>



namespace CS2 {
	namespace client {
		class C_EnvWindController : public CS2::client::C_BaseEntity {
		public:
			client::C_EnvWindShared m_EnvWindShared; // 0x5f8 | Schema_DeclaredClass | Size: 0xf8
			float32 m_fDirectionVariation; // 0x6f0 | Schema_Builtin | Size: 0x4
			float32 m_fSpeedVariation; // 0x6f4 | Schema_Builtin | Size: 0x4
			float32 m_fTurbulence; // 0x6f8 | Schema_Builtin | Size: 0x4
			float32 m_fVolumeHalfExtentXY; // 0x6fc | Schema_Builtin | Size: 0x4
			float32 m_fVolumeHalfExtentZ; // 0x700 | Schema_Builtin | Size: 0x4
			int32_t m_nVolumeResolutionXY; // 0x704 | Schema_Builtin | Size: 0x4
			int32_t m_nVolumeResolutionZ; // 0x708 | Schema_Builtin | Size: 0x4
			int32_t m_nClipmapLevels; // 0x70c | Schema_Builtin | Size: 0x4
			bool m_bIsMaster; // 0x710 | Schema_Builtin | Size: 0x1
			bool m_bFirstTime; // 0x711 | Schema_Builtin | Size: 0x1
			S2_PAD(0x6); // End padding
		};
		static_assert(offsetof(CS2::client::C_EnvWindController, m_EnvWindShared) == 0x5F8, "m_EnvWindShared in C_EnvWindController should be at offset 0x5F8");
		static_assert(offsetof(CS2::client::C_EnvWindController, m_fDirectionVariation) == 0x6F0, "m_fDirectionVariation in C_EnvWindController should be at offset 0x6F0");
		static_assert(offsetof(CS2::client::C_EnvWindController, m_fSpeedVariation) == 0x6F4, "m_fSpeedVariation in C_EnvWindController should be at offset 0x6F4");
		static_assert(offsetof(CS2::client::C_EnvWindController, m_fTurbulence) == 0x6F8, "m_fTurbulence in C_EnvWindController should be at offset 0x6F8");
		static_assert(offsetof(CS2::client::C_EnvWindController, m_fVolumeHalfExtentXY) == 0x6FC, "m_fVolumeHalfExtentXY in C_EnvWindController should be at offset 0x6FC");
		static_assert(offsetof(CS2::client::C_EnvWindController, m_fVolumeHalfExtentZ) == 0x700, "m_fVolumeHalfExtentZ in C_EnvWindController should be at offset 0x700");
		static_assert(offsetof(CS2::client::C_EnvWindController, m_nVolumeResolutionXY) == 0x704, "m_nVolumeResolutionXY in C_EnvWindController should be at offset 0x704");
		static_assert(offsetof(CS2::client::C_EnvWindController, m_nVolumeResolutionZ) == 0x708, "m_nVolumeResolutionZ in C_EnvWindController should be at offset 0x708");
		static_assert(offsetof(CS2::client::C_EnvWindController, m_nClipmapLevels) == 0x70C, "m_nClipmapLevels in C_EnvWindController should be at offset 0x70C");
		static_assert(offsetof(CS2::client::C_EnvWindController, m_bIsMaster) == 0x710, "m_bIsMaster in C_EnvWindController should be at offset 0x710");
		static_assert(offsetof(CS2::client::C_EnvWindController, m_bFirstTime) == 0x711, "m_bFirstTime in C_EnvWindController should be at offset 0x711");
		static_assert(sizeof(CS2::client::C_EnvWindController) == 0x718, "C_EnvWindController size should be 0x718");
	}
}
