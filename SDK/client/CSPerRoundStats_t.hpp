// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif







using namespace GlobalTypes;
namespace CS2 {
	namespace client {
		class CSPerRoundStats_t  {
		public:
			S2_PAD(0x30);
			int32_t m_iKills; // 0x30 | Schema_Builtin | Size: 0x4
			int32_t m_iDeaths; // 0x34 | Schema_Builtin | Size: 0x4
			int32_t m_iAssists; // 0x38 | Schema_Builtin | Size: 0x4
			int32_t m_iDamage; // 0x3c | Schema_Builtin | Size: 0x4
			int32_t m_iEquipmentValue; // 0x40 | Schema_Builtin | Size: 0x4
			int32_t m_iMoneySaved; // 0x44 | Schema_Builtin | Size: 0x4
			int32_t m_iKillReward; // 0x48 | Schema_Builtin | Size: 0x4
			int32_t m_iLiveTime; // 0x4c | Schema_Builtin | Size: 0x4
			int32_t m_iHeadShotKills; // 0x50 | Schema_Builtin | Size: 0x4
			int32_t m_iObjective; // 0x54 | Schema_Builtin | Size: 0x4
			int32_t m_iCashEarned; // 0x58 | Schema_Builtin | Size: 0x4
			int32_t m_iUtilityDamage; // 0x5c | Schema_Builtin | Size: 0x4
			int32_t m_iEnemiesFlashed; // 0x60 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4); // End padding
		};
		static_assert(offsetof(CS2::client::CSPerRoundStats_t, m_iKills) == 0x30, "m_iKills in CSPerRoundStats_t should be at offset 0x30");
		static_assert(offsetof(CS2::client::CSPerRoundStats_t, m_iDeaths) == 0x34, "m_iDeaths in CSPerRoundStats_t should be at offset 0x34");
		static_assert(offsetof(CS2::client::CSPerRoundStats_t, m_iAssists) == 0x38, "m_iAssists in CSPerRoundStats_t should be at offset 0x38");
		static_assert(offsetof(CS2::client::CSPerRoundStats_t, m_iDamage) == 0x3C, "m_iDamage in CSPerRoundStats_t should be at offset 0x3C");
		static_assert(offsetof(CS2::client::CSPerRoundStats_t, m_iEquipmentValue) == 0x40, "m_iEquipmentValue in CSPerRoundStats_t should be at offset 0x40");
		static_assert(offsetof(CS2::client::CSPerRoundStats_t, m_iMoneySaved) == 0x44, "m_iMoneySaved in CSPerRoundStats_t should be at offset 0x44");
		static_assert(offsetof(CS2::client::CSPerRoundStats_t, m_iKillReward) == 0x48, "m_iKillReward in CSPerRoundStats_t should be at offset 0x48");
		static_assert(offsetof(CS2::client::CSPerRoundStats_t, m_iLiveTime) == 0x4C, "m_iLiveTime in CSPerRoundStats_t should be at offset 0x4C");
		static_assert(offsetof(CS2::client::CSPerRoundStats_t, m_iHeadShotKills) == 0x50, "m_iHeadShotKills in CSPerRoundStats_t should be at offset 0x50");
		static_assert(offsetof(CS2::client::CSPerRoundStats_t, m_iObjective) == 0x54, "m_iObjective in CSPerRoundStats_t should be at offset 0x54");
		static_assert(offsetof(CS2::client::CSPerRoundStats_t, m_iCashEarned) == 0x58, "m_iCashEarned in CSPerRoundStats_t should be at offset 0x58");
		static_assert(offsetof(CS2::client::CSPerRoundStats_t, m_iUtilityDamage) == 0x5C, "m_iUtilityDamage in CSPerRoundStats_t should be at offset 0x5C");
		static_assert(offsetof(CS2::client::CSPerRoundStats_t, m_iEnemiesFlashed) == 0x60, "m_iEnemiesFlashed in CSPerRoundStats_t should be at offset 0x60");
		static_assert(sizeof(CS2::client::CSPerRoundStats_t) == 0x68, "CSPerRoundStats_t size should be 0x68");
	}
}
