// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/client/ResponseParams.hpp>
#include <SDK/client/ResponseFollowup.hpp>





using namespace GlobalTypes;
namespace CS2 {
	namespace client {
		class CRR_Response  {
		public:
			uint8_t m_Type; // 0x0 | Schema_Builtin | Size: 0x1
			char m_szResponseName[192]; // 0x1 | Schema_FixedArray | Size: 0xc0
			char m_szMatchingRule[128]; // 0xc1 | Schema_FixedArray | Size: 0x80
			S2_PAD(0x1f);
			client::ResponseParams m_Params; // 0x160 | Schema_DeclaredClass | Size: 0x20
			float32 m_fMatchScore; // 0x180 | Schema_Builtin | Size: 0x4
			bool m_bAnyMatchingRulesInCooldown; // 0x184 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			char* m_szSpeakerContext; // 0x188 | Schema_Ptr | Size: 0x8
			char* m_szWorldContext; // 0x190 | Schema_Ptr | Size: 0x8
			client::ResponseFollowup m_Followup; // 0x198 | Schema_DeclaredClass | Size: 0x31
			S2_PAD(0x1);
			GlobalTypes::CUtlSymbol m_recipientFilter; // 0x1ca | Schema_Atomic | Size: 0x2
			S2_PAD(0x4); // End padding
		};
		static_assert(offsetof(CS2::client::CRR_Response, m_Type) == 0x0, "m_Type in CRR_Response should be at offset 0x0");
		static_assert(offsetof(CS2::client::CRR_Response, m_szResponseName) == 0x1, "m_szResponseName in CRR_Response should be at offset 0x1");
		static_assert(offsetof(CS2::client::CRR_Response, m_szMatchingRule) == 0xC1, "m_szMatchingRule in CRR_Response should be at offset 0xC1");
		static_assert(offsetof(CS2::client::CRR_Response, m_Params) == 0x160, "m_Params in CRR_Response should be at offset 0x160");
		static_assert(offsetof(CS2::client::CRR_Response, m_fMatchScore) == 0x180, "m_fMatchScore in CRR_Response should be at offset 0x180");
		static_assert(offsetof(CS2::client::CRR_Response, m_bAnyMatchingRulesInCooldown) == 0x184, "m_bAnyMatchingRulesInCooldown in CRR_Response should be at offset 0x184");
		static_assert(offsetof(CS2::client::CRR_Response, m_szSpeakerContext) == 0x188, "m_szSpeakerContext in CRR_Response should be at offset 0x188");
		static_assert(offsetof(CS2::client::CRR_Response, m_szWorldContext) == 0x190, "m_szWorldContext in CRR_Response should be at offset 0x190");
		static_assert(offsetof(CS2::client::CRR_Response, m_Followup) == 0x198, "m_Followup in CRR_Response should be at offset 0x198");
		static_assert(offsetof(CS2::client::CRR_Response, m_recipientFilter) == 0x1CA, "m_recipientFilter in CRR_Response should be at offset 0x1CA");
		static_assert(sizeof(CS2::client::CRR_Response) == 0x1D0, "CRR_Response size should be 0x1D0");
	}
}
