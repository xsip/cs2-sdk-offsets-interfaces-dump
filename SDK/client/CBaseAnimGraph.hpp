// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>

#include <SDK/client/C_BaseModelEntity.hpp>
#include <SDK/client/PhysicsRagdollPose_t.hpp>



namespace CS2 {
	namespace client {
		class CBaseAnimGraph : public CS2::client::C_BaseModelEntity {
		public:
			S2_PAD(0x80);
			bool m_bInitiallyPopulateInterpHistory; // 0xf48 | Schema_Builtin | Size: 0x1
			S2_PAD(0x1);
			bool m_bSuppressAnimEventSounds; // 0xf4a | Schema_Builtin | Size: 0x1
			S2_PAD(0xd);
			bool m_bAnimGraphUpdateEnabled; // 0xf58 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			float32 m_flMaxSlopeDistance; // 0xf5c | Schema_Builtin | Size: 0x4
			GlobalTypes::Vector m_vLastSlopeCheckPos; // 0xf60 | Schema_Atomic | Size: 0xc
			bool m_bAnimationUpdateScheduled; // 0xf6c | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			GlobalTypes::Vector m_vecForce; // 0xf70 | Schema_Atomic | Size: 0xc
			int32_t m_nForceBone; // 0xf7c | Schema_Builtin | Size: 0x4
			client::CBaseAnimGraph* m_pClientsideRagdoll; // 0xf80 | Schema_Ptr | Size: 0x8
			bool m_bBuiltRagdoll; // 0xf88 | Schema_Builtin | Size: 0x1
			S2_PAD(0x17);
			client::PhysicsRagdollPose_t m_RagdollPose; // 0xfa0 | Schema_DeclaredClass | Size: 0x48
			bool m_bRagdollEnabled; // 0xfe8 | Schema_Builtin | Size: 0x1
			bool m_bRagdollClientSide; // 0xfe9 | Schema_Builtin | Size: 0x1
			S2_PAD(0xe);
			bool m_bHasAnimatedMaterialAttributes; // 0xff8 | Schema_Builtin | Size: 0x1
			S2_PAD(0x177); // End padding
		};
		static_assert(offsetof(CS2::client::CBaseAnimGraph, m_bInitiallyPopulateInterpHistory) == 0xF48, "m_bInitiallyPopulateInterpHistory in CBaseAnimGraph should be at offset 0xF48");
		static_assert(offsetof(CS2::client::CBaseAnimGraph, m_bSuppressAnimEventSounds) == 0xF4A, "m_bSuppressAnimEventSounds in CBaseAnimGraph should be at offset 0xF4A");
		static_assert(offsetof(CS2::client::CBaseAnimGraph, m_bAnimGraphUpdateEnabled) == 0xF58, "m_bAnimGraphUpdateEnabled in CBaseAnimGraph should be at offset 0xF58");
		static_assert(offsetof(CS2::client::CBaseAnimGraph, m_flMaxSlopeDistance) == 0xF5C, "m_flMaxSlopeDistance in CBaseAnimGraph should be at offset 0xF5C");
		static_assert(offsetof(CS2::client::CBaseAnimGraph, m_vLastSlopeCheckPos) == 0xF60, "m_vLastSlopeCheckPos in CBaseAnimGraph should be at offset 0xF60");
		static_assert(offsetof(CS2::client::CBaseAnimGraph, m_bAnimationUpdateScheduled) == 0xF6C, "m_bAnimationUpdateScheduled in CBaseAnimGraph should be at offset 0xF6C");
		static_assert(offsetof(CS2::client::CBaseAnimGraph, m_vecForce) == 0xF70, "m_vecForce in CBaseAnimGraph should be at offset 0xF70");
		static_assert(offsetof(CS2::client::CBaseAnimGraph, m_nForceBone) == 0xF7C, "m_nForceBone in CBaseAnimGraph should be at offset 0xF7C");
		static_assert(offsetof(CS2::client::CBaseAnimGraph, m_pClientsideRagdoll) == 0xF80, "m_pClientsideRagdoll in CBaseAnimGraph should be at offset 0xF80");
		static_assert(offsetof(CS2::client::CBaseAnimGraph, m_bBuiltRagdoll) == 0xF88, "m_bBuiltRagdoll in CBaseAnimGraph should be at offset 0xF88");
		static_assert(offsetof(CS2::client::CBaseAnimGraph, m_RagdollPose) == 0xFA0, "m_RagdollPose in CBaseAnimGraph should be at offset 0xFA0");
		static_assert(offsetof(CS2::client::CBaseAnimGraph, m_bRagdollEnabled) == 0xFE8, "m_bRagdollEnabled in CBaseAnimGraph should be at offset 0xFE8");
		static_assert(offsetof(CS2::client::CBaseAnimGraph, m_bRagdollClientSide) == 0xFE9, "m_bRagdollClientSide in CBaseAnimGraph should be at offset 0xFE9");
		static_assert(offsetof(CS2::client::CBaseAnimGraph, m_bHasAnimatedMaterialAttributes) == 0xFF8, "m_bHasAnimatedMaterialAttributes in CBaseAnimGraph should be at offset 0xFF8");
		static_assert(sizeof(CS2::client::CBaseAnimGraph) == 0x1170, "CBaseAnimGraph size should be 0x1170");
	}
}
