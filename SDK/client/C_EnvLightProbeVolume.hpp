// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/client/C_BaseEntity.hpp>





using namespace GlobalTypes;
namespace CS2 {
	namespace client {
		class C_EnvLightProbeVolume : public CS2::client::C_BaseEntity {
		public:
			S2_PAD(0xff8);
			// GlobalTypes::CStrongHandle< resourcesystem::InfoForResourceTypeCTextureBase > m_Entity_hLightProbeTexture_AmbientCube; // 0x15f0 | Schema_Atomic | Size: 0x8
			char  m_Entity_hLightProbeTexture_AmbientCube[0x8]; // 0x15f0 | Schema_Atomic | Size: 0x8
			// GlobalTypes::CStrongHandle< resourcesystem::InfoForResourceTypeCTextureBase > m_Entity_hLightProbeTexture_SDF; // 0x15f8 | Schema_Atomic | Size: 0x8
			char  m_Entity_hLightProbeTexture_SDF[0x8]; // 0x15f8 | Schema_Atomic | Size: 0x8
			// GlobalTypes::CStrongHandle< resourcesystem::InfoForResourceTypeCTextureBase > m_Entity_hLightProbeTexture_SH2_DC; // 0x1600 | Schema_Atomic | Size: 0x8
			char  m_Entity_hLightProbeTexture_SH2_DC[0x8]; // 0x1600 | Schema_Atomic | Size: 0x8
			// GlobalTypes::CStrongHandle< resourcesystem::InfoForResourceTypeCTextureBase > m_Entity_hLightProbeTexture_SH2_R; // 0x1608 | Schema_Atomic | Size: 0x8
			char  m_Entity_hLightProbeTexture_SH2_R[0x8]; // 0x1608 | Schema_Atomic | Size: 0x8
			// GlobalTypes::CStrongHandle< resourcesystem::InfoForResourceTypeCTextureBase > m_Entity_hLightProbeTexture_SH2_G; // 0x1610 | Schema_Atomic | Size: 0x8
			char  m_Entity_hLightProbeTexture_SH2_G[0x8]; // 0x1610 | Schema_Atomic | Size: 0x8
			// GlobalTypes::CStrongHandle< resourcesystem::InfoForResourceTypeCTextureBase > m_Entity_hLightProbeTexture_SH2_B; // 0x1618 | Schema_Atomic | Size: 0x8
			char  m_Entity_hLightProbeTexture_SH2_B[0x8]; // 0x1618 | Schema_Atomic | Size: 0x8
			// GlobalTypes::CStrongHandle< resourcesystem::InfoForResourceTypeCTextureBase > m_Entity_hLightProbeDirectLightIndicesTexture; // 0x1620 | Schema_Atomic | Size: 0x8
			char  m_Entity_hLightProbeDirectLightIndicesTexture[0x8]; // 0x1620 | Schema_Atomic | Size: 0x8
			// GlobalTypes::CStrongHandle< resourcesystem::InfoForResourceTypeCTextureBase > m_Entity_hLightProbeDirectLightScalarsTexture; // 0x1628 | Schema_Atomic | Size: 0x8
			char  m_Entity_hLightProbeDirectLightScalarsTexture[0x8]; // 0x1628 | Schema_Atomic | Size: 0x8
			// GlobalTypes::CStrongHandle< resourcesystem::InfoForResourceTypeCTextureBase > m_Entity_hLightProbeDirectLightShadowsTexture; // 0x1630 | Schema_Atomic | Size: 0x8
			char  m_Entity_hLightProbeDirectLightShadowsTexture[0x8]; // 0x1630 | Schema_Atomic | Size: 0x8
			GlobalTypes::Vector m_Entity_vBoxMins; // 0x1638 | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_Entity_vBoxMaxs; // 0x1644 | Schema_Atomic | Size: 0xc
			bool m_Entity_bMoveable; // 0x1650 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			int32_t m_Entity_nHandshake; // 0x1654 | Schema_Builtin | Size: 0x4
			int32_t m_Entity_nPriority; // 0x1658 | Schema_Builtin | Size: 0x4
			bool m_Entity_bStartDisabled; // 0x165c | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			int32_t m_Entity_nLightProbeSizeX; // 0x1660 | Schema_Builtin | Size: 0x4
			int32_t m_Entity_nLightProbeSizeY; // 0x1664 | Schema_Builtin | Size: 0x4
			int32_t m_Entity_nLightProbeSizeZ; // 0x1668 | Schema_Builtin | Size: 0x4
			int32_t m_Entity_nLightProbeAtlasX; // 0x166c | Schema_Builtin | Size: 0x4
			int32_t m_Entity_nLightProbeAtlasY; // 0x1670 | Schema_Builtin | Size: 0x4
			int32_t m_Entity_nLightProbeAtlasZ; // 0x1674 | Schema_Builtin | Size: 0x4
			S2_PAD(0x9);
			bool m_Entity_bEnabled; // 0x1681 | Schema_Builtin | Size: 0x1
			S2_PAD(0x6); // End padding
		};
		static_assert(offsetof(CS2::client::C_EnvLightProbeVolume, m_Entity_hLightProbeTexture_AmbientCube) == 0x15F0, "m_Entity_hLightProbeTexture_AmbientCube in C_EnvLightProbeVolume should be at offset 0x15F0");
		static_assert(offsetof(CS2::client::C_EnvLightProbeVolume, m_Entity_hLightProbeTexture_SDF) == 0x15F8, "m_Entity_hLightProbeTexture_SDF in C_EnvLightProbeVolume should be at offset 0x15F8");
		static_assert(offsetof(CS2::client::C_EnvLightProbeVolume, m_Entity_hLightProbeTexture_SH2_DC) == 0x1600, "m_Entity_hLightProbeTexture_SH2_DC in C_EnvLightProbeVolume should be at offset 0x1600");
		static_assert(offsetof(CS2::client::C_EnvLightProbeVolume, m_Entity_hLightProbeTexture_SH2_R) == 0x1608, "m_Entity_hLightProbeTexture_SH2_R in C_EnvLightProbeVolume should be at offset 0x1608");
		static_assert(offsetof(CS2::client::C_EnvLightProbeVolume, m_Entity_hLightProbeTexture_SH2_G) == 0x1610, "m_Entity_hLightProbeTexture_SH2_G in C_EnvLightProbeVolume should be at offset 0x1610");
		static_assert(offsetof(CS2::client::C_EnvLightProbeVolume, m_Entity_hLightProbeTexture_SH2_B) == 0x1618, "m_Entity_hLightProbeTexture_SH2_B in C_EnvLightProbeVolume should be at offset 0x1618");
		static_assert(offsetof(CS2::client::C_EnvLightProbeVolume, m_Entity_hLightProbeDirectLightIndicesTexture) == 0x1620, "m_Entity_hLightProbeDirectLightIndicesTexture in C_EnvLightProbeVolume should be at offset 0x1620");
		static_assert(offsetof(CS2::client::C_EnvLightProbeVolume, m_Entity_hLightProbeDirectLightScalarsTexture) == 0x1628, "m_Entity_hLightProbeDirectLightScalarsTexture in C_EnvLightProbeVolume should be at offset 0x1628");
		static_assert(offsetof(CS2::client::C_EnvLightProbeVolume, m_Entity_hLightProbeDirectLightShadowsTexture) == 0x1630, "m_Entity_hLightProbeDirectLightShadowsTexture in C_EnvLightProbeVolume should be at offset 0x1630");
		static_assert(offsetof(CS2::client::C_EnvLightProbeVolume, m_Entity_vBoxMins) == 0x1638, "m_Entity_vBoxMins in C_EnvLightProbeVolume should be at offset 0x1638");
		static_assert(offsetof(CS2::client::C_EnvLightProbeVolume, m_Entity_vBoxMaxs) == 0x1644, "m_Entity_vBoxMaxs in C_EnvLightProbeVolume should be at offset 0x1644");
		static_assert(offsetof(CS2::client::C_EnvLightProbeVolume, m_Entity_bMoveable) == 0x1650, "m_Entity_bMoveable in C_EnvLightProbeVolume should be at offset 0x1650");
		static_assert(offsetof(CS2::client::C_EnvLightProbeVolume, m_Entity_nHandshake) == 0x1654, "m_Entity_nHandshake in C_EnvLightProbeVolume should be at offset 0x1654");
		static_assert(offsetof(CS2::client::C_EnvLightProbeVolume, m_Entity_nPriority) == 0x1658, "m_Entity_nPriority in C_EnvLightProbeVolume should be at offset 0x1658");
		static_assert(offsetof(CS2::client::C_EnvLightProbeVolume, m_Entity_bStartDisabled) == 0x165C, "m_Entity_bStartDisabled in C_EnvLightProbeVolume should be at offset 0x165C");
		static_assert(offsetof(CS2::client::C_EnvLightProbeVolume, m_Entity_nLightProbeSizeX) == 0x1660, "m_Entity_nLightProbeSizeX in C_EnvLightProbeVolume should be at offset 0x1660");
		static_assert(offsetof(CS2::client::C_EnvLightProbeVolume, m_Entity_nLightProbeSizeY) == 0x1664, "m_Entity_nLightProbeSizeY in C_EnvLightProbeVolume should be at offset 0x1664");
		static_assert(offsetof(CS2::client::C_EnvLightProbeVolume, m_Entity_nLightProbeSizeZ) == 0x1668, "m_Entity_nLightProbeSizeZ in C_EnvLightProbeVolume should be at offset 0x1668");
		static_assert(offsetof(CS2::client::C_EnvLightProbeVolume, m_Entity_nLightProbeAtlasX) == 0x166C, "m_Entity_nLightProbeAtlasX in C_EnvLightProbeVolume should be at offset 0x166C");
		static_assert(offsetof(CS2::client::C_EnvLightProbeVolume, m_Entity_nLightProbeAtlasY) == 0x1670, "m_Entity_nLightProbeAtlasY in C_EnvLightProbeVolume should be at offset 0x1670");
		static_assert(offsetof(CS2::client::C_EnvLightProbeVolume, m_Entity_nLightProbeAtlasZ) == 0x1674, "m_Entity_nLightProbeAtlasZ in C_EnvLightProbeVolume should be at offset 0x1674");
		static_assert(offsetof(CS2::client::C_EnvLightProbeVolume, m_Entity_bEnabled) == 0x1681, "m_Entity_bEnabled in C_EnvLightProbeVolume should be at offset 0x1681");
		static_assert(sizeof(CS2::client::C_EnvLightProbeVolume) == 0x1688, "C_EnvLightProbeVolume size should be 0x1688");
	}
}
