// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/entity2/GameTime_t.hpp>



namespace CS2 {
	namespace client {
		class C_BaseEntity;
	}
}


using namespace GlobalTypes;
namespace CS2 {
	namespace client {
		class C_EnvWindShared  {
		public:
			S2_PAD(0x8);
			entity2::GameTime_t m_flStartTime; // 0x8 | Schema_DeclaredClass | Size: 0x4
			uint32_t m_iWindSeed; // 0xc | Schema_Builtin | Size: 0x4
			uint16_t m_iMinWind; // 0x10 | Schema_Builtin | Size: 0x2
			uint16_t m_iMaxWind; // 0x12 | Schema_Builtin | Size: 0x2
			int32_t m_windRadius; // 0x14 | Schema_Builtin | Size: 0x4
			uint16_t m_iMinGust; // 0x18 | Schema_Builtin | Size: 0x2
			uint16_t m_iMaxGust; // 0x1a | Schema_Builtin | Size: 0x2
			float32 m_flMinGustDelay; // 0x1c | Schema_Builtin | Size: 0x4
			float32 m_flMaxGustDelay; // 0x20 | Schema_Builtin | Size: 0x4
			float32 m_flGustDuration; // 0x24 | Schema_Builtin | Size: 0x4
			uint16_t m_iGustDirChange; // 0x28 | Schema_Builtin | Size: 0x2
			uint16_t m_iInitialWindDir; // 0x2a | Schema_Builtin | Size: 0x2
			float32 m_flInitialWindSpeed; // 0x2c | Schema_Builtin | Size: 0x4
			GlobalTypes::Vector m_location; // 0x30 | Schema_Atomic | Size: 0xc
			GlobalTypes::CHandle< client::C_BaseEntity > m_hEntOwner; // 0x3c | Schema_Atomic | Size: 0x4
			// char  m_hEntOwner[0x4]; // 0x3c | Schema_Atomic | Size: 0x4
			S2_PAD(0xb8); // End padding
		};
		static_assert(offsetof(CS2::client::C_EnvWindShared, m_flStartTime) == 0x8, "m_flStartTime in C_EnvWindShared should be at offset 0x8");
		static_assert(offsetof(CS2::client::C_EnvWindShared, m_iWindSeed) == 0xC, "m_iWindSeed in C_EnvWindShared should be at offset 0xC");
		static_assert(offsetof(CS2::client::C_EnvWindShared, m_iMinWind) == 0x10, "m_iMinWind in C_EnvWindShared should be at offset 0x10");
		static_assert(offsetof(CS2::client::C_EnvWindShared, m_iMaxWind) == 0x12, "m_iMaxWind in C_EnvWindShared should be at offset 0x12");
		static_assert(offsetof(CS2::client::C_EnvWindShared, m_windRadius) == 0x14, "m_windRadius in C_EnvWindShared should be at offset 0x14");
		static_assert(offsetof(CS2::client::C_EnvWindShared, m_iMinGust) == 0x18, "m_iMinGust in C_EnvWindShared should be at offset 0x18");
		static_assert(offsetof(CS2::client::C_EnvWindShared, m_iMaxGust) == 0x1A, "m_iMaxGust in C_EnvWindShared should be at offset 0x1A");
		static_assert(offsetof(CS2::client::C_EnvWindShared, m_flMinGustDelay) == 0x1C, "m_flMinGustDelay in C_EnvWindShared should be at offset 0x1C");
		static_assert(offsetof(CS2::client::C_EnvWindShared, m_flMaxGustDelay) == 0x20, "m_flMaxGustDelay in C_EnvWindShared should be at offset 0x20");
		static_assert(offsetof(CS2::client::C_EnvWindShared, m_flGustDuration) == 0x24, "m_flGustDuration in C_EnvWindShared should be at offset 0x24");
		static_assert(offsetof(CS2::client::C_EnvWindShared, m_iGustDirChange) == 0x28, "m_iGustDirChange in C_EnvWindShared should be at offset 0x28");
		static_assert(offsetof(CS2::client::C_EnvWindShared, m_iInitialWindDir) == 0x2A, "m_iInitialWindDir in C_EnvWindShared should be at offset 0x2A");
		static_assert(offsetof(CS2::client::C_EnvWindShared, m_flInitialWindSpeed) == 0x2C, "m_flInitialWindSpeed in C_EnvWindShared should be at offset 0x2C");
		static_assert(offsetof(CS2::client::C_EnvWindShared, m_location) == 0x30, "m_location in C_EnvWindShared should be at offset 0x30");
		static_assert(offsetof(CS2::client::C_EnvWindShared, m_hEntOwner) == 0x3C, "m_hEntOwner in C_EnvWindShared should be at offset 0x3C");
		static_assert(sizeof(CS2::client::C_EnvWindShared) == 0xF8, "C_EnvWindShared size should be 0xF8");
	}
}
