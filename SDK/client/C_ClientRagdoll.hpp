// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>

#include <SDK/client/CBaseAnimGraph.hpp>
#include <SDK/entity2/GameTime_t.hpp>
#include <SDK/modellib/AttachmentHandle_t.hpp>



namespace CS2 {
	namespace client {
		class C_ClientRagdoll : public CS2::client::CBaseAnimGraph {
		public:
			bool m_bFadeOut; // 0x1170 | Schema_Builtin | Size: 0x1
			bool m_bImportant; // 0x1171 | Schema_Builtin | Size: 0x1
			S2_PAD(0x2);
			entity2::GameTime_t m_flEffectTime; // 0x1174 | Schema_DeclaredClass | Size: 0x4
			entity2::GameTime_t m_gibDespawnTime; // 0x1178 | Schema_DeclaredClass | Size: 0x4
			int32_t m_iCurrentFriction; // 0x117c | Schema_Builtin | Size: 0x4
			int32_t m_iMinFriction; // 0x1180 | Schema_Builtin | Size: 0x4
			int32_t m_iMaxFriction; // 0x1184 | Schema_Builtin | Size: 0x4
			int32_t m_iFrictionAnimState; // 0x1188 | Schema_Builtin | Size: 0x4
			bool m_bReleaseRagdoll; // 0x118c | Schema_Builtin | Size: 0x1
			modellib::AttachmentHandle_t m_iEyeAttachment; // 0x118d | Schema_DeclaredClass | Size: 0x1
			bool m_bFadingOut; // 0x118e | Schema_Builtin | Size: 0x1
			S2_PAD(0x1);
			float32 m_flScaleEnd[10]; // 0x1190 | Schema_FixedArray | Size: 0x28
			entity2::GameTime_t m_flScaleTimeStart[10]; // 0x11b8 | Schema_FixedArray | Size: 0x190
			entity2::GameTime_t m_flScaleTimeEnd[10]; // 0x11e0 | Schema_FixedArray | Size: 0x190
		};
		static_assert(offsetof(CS2::client::C_ClientRagdoll, m_bFadeOut) == 0x1170, "m_bFadeOut in C_ClientRagdoll should be at offset 0x1170");
		static_assert(offsetof(CS2::client::C_ClientRagdoll, m_bImportant) == 0x1171, "m_bImportant in C_ClientRagdoll should be at offset 0x1171");
		static_assert(offsetof(CS2::client::C_ClientRagdoll, m_flEffectTime) == 0x1174, "m_flEffectTime in C_ClientRagdoll should be at offset 0x1174");
		static_assert(offsetof(CS2::client::C_ClientRagdoll, m_gibDespawnTime) == 0x1178, "m_gibDespawnTime in C_ClientRagdoll should be at offset 0x1178");
		static_assert(offsetof(CS2::client::C_ClientRagdoll, m_iCurrentFriction) == 0x117C, "m_iCurrentFriction in C_ClientRagdoll should be at offset 0x117C");
		static_assert(offsetof(CS2::client::C_ClientRagdoll, m_iMinFriction) == 0x1180, "m_iMinFriction in C_ClientRagdoll should be at offset 0x1180");
		static_assert(offsetof(CS2::client::C_ClientRagdoll, m_iMaxFriction) == 0x1184, "m_iMaxFriction in C_ClientRagdoll should be at offset 0x1184");
		static_assert(offsetof(CS2::client::C_ClientRagdoll, m_iFrictionAnimState) == 0x1188, "m_iFrictionAnimState in C_ClientRagdoll should be at offset 0x1188");
		static_assert(offsetof(CS2::client::C_ClientRagdoll, m_bReleaseRagdoll) == 0x118C, "m_bReleaseRagdoll in C_ClientRagdoll should be at offset 0x118C");
		static_assert(offsetof(CS2::client::C_ClientRagdoll, m_iEyeAttachment) == 0x118D, "m_iEyeAttachment in C_ClientRagdoll should be at offset 0x118D");
		static_assert(offsetof(CS2::client::C_ClientRagdoll, m_bFadingOut) == 0x118E, "m_bFadingOut in C_ClientRagdoll should be at offset 0x118E");
		static_assert(offsetof(CS2::client::C_ClientRagdoll, m_flScaleEnd) == 0x1190, "m_flScaleEnd in C_ClientRagdoll should be at offset 0x1190");
		static_assert(offsetof(CS2::client::C_ClientRagdoll, m_flScaleTimeStart) == 0x11B8, "m_flScaleTimeStart in C_ClientRagdoll should be at offset 0x11B8");
		static_assert(offsetof(CS2::client::C_ClientRagdoll, m_flScaleTimeEnd) == 0x11E0, "m_flScaleTimeEnd in C_ClientRagdoll should be at offset 0x11E0");
		static_assert(sizeof(CS2::client::C_ClientRagdoll) == 0x1208, "C_ClientRagdoll size should be 0x1208");
	}
}
