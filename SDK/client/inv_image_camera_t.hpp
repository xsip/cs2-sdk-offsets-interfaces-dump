// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif





namespace CS2 {
	namespace client {
		class inv_image_camera_t  {
		public:
			GlobalTypes::QAngle angle; // 0x0 | Schema_Atomic | Size: 0xc
			float32 fov; // 0xc | Schema_Builtin | Size: 0x4
			float32 znear; // 0x10 | Schema_Builtin | Size: 0x4
			float32 zfar; // 0x14 | Schema_Builtin | Size: 0x4
			GlobalTypes::Vector target; // 0x18 | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector target_nudge; // 0x24 | Schema_Atomic | Size: 0xc
			float32 orbit_distance; // 0x30 | Schema_Builtin | Size: 0x4
		};
		static_assert(offsetof(CS2::client::inv_image_camera_t, angle) == 0x0, "angle in inv_image_camera_t should be at offset 0x0");
		static_assert(offsetof(CS2::client::inv_image_camera_t, fov) == 0xC, "fov in inv_image_camera_t should be at offset 0xC");
		static_assert(offsetof(CS2::client::inv_image_camera_t, znear) == 0x10, "znear in inv_image_camera_t should be at offset 0x10");
		static_assert(offsetof(CS2::client::inv_image_camera_t, zfar) == 0x14, "zfar in inv_image_camera_t should be at offset 0x14");
		static_assert(offsetof(CS2::client::inv_image_camera_t, target) == 0x18, "target in inv_image_camera_t should be at offset 0x18");
		static_assert(offsetof(CS2::client::inv_image_camera_t, target_nudge) == 0x24, "target_nudge in inv_image_camera_t should be at offset 0x24");
		static_assert(offsetof(CS2::client::inv_image_camera_t, orbit_distance) == 0x30, "orbit_distance in inv_image_camera_t should be at offset 0x30");
		static_assert(sizeof(CS2::client::inv_image_camera_t) == 0x34, "inv_image_camera_t size should be 0x34");
	}
}
