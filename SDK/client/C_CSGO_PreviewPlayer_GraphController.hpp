// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/client/CBaseAnimGraphAnimGraphController.hpp>





using namespace GlobalTypes;
namespace CS2 {
	namespace client {
		class C_CSGO_PreviewPlayer_GraphController : public CS2::client::CBaseAnimGraphAnimGraphController {
		public:
			// GlobalTypes::CAnimGraphParamOptionalRef<char*> m_pszCharacterMode; // 0x268 | Schema_Atomic | Size: 0x28
			char  m_pszCharacterMode[0x28]; // 0x268 | Schema_Atomic | Size: 0x28
			// GlobalTypes::CAnimGraphParamOptionalRef<char*> m_pszTeamPreviewVariant; // 0x290 | Schema_Atomic | Size: 0x28
			char  m_pszTeamPreviewVariant[0x28]; // 0x290 | Schema_Atomic | Size: 0x28
			// GlobalTypes::CAnimGraphParamOptionalRef<char*> m_pszTeamPreviewPosition; // 0x2b8 | Schema_Atomic | Size: 0x28
			char  m_pszTeamPreviewPosition[0x28]; // 0x2b8 | Schema_Atomic | Size: 0x28
			// GlobalTypes::CAnimGraphParamOptionalRef<char*> m_pszEndOfMatchCelebration; // 0x2e0 | Schema_Atomic | Size: 0x28
			char  m_pszEndOfMatchCelebration[0x28]; // 0x2e0 | Schema_Atomic | Size: 0x28
			// GlobalTypes::CAnimGraphParamOptionalRef< int32 > m_nTeamPreviewRandom; // 0x308 | Schema_Atomic | Size: 0x20
			char  m_nTeamPreviewRandom[0x20]; // 0x308 | Schema_Atomic | Size: 0x20
			// GlobalTypes::CAnimGraphParamOptionalRef<char*> m_pszWeaponState; // 0x328 | Schema_Atomic | Size: 0x28
			char  m_pszWeaponState[0x28]; // 0x328 | Schema_Atomic | Size: 0x28
			// GlobalTypes::CAnimGraphParamOptionalRef<char*> m_pszWeaponType; // 0x350 | Schema_Atomic | Size: 0x28
			char  m_pszWeaponType[0x28]; // 0x350 | Schema_Atomic | Size: 0x28
			// GlobalTypes::CAnimGraphParamOptionalRef< bool > m_bCT; // 0x378 | Schema_Atomic | Size: 0x20
			char  m_bCT[0x20]; // 0x378 | Schema_Atomic | Size: 0x20
		};
		static_assert(offsetof(CS2::client::C_CSGO_PreviewPlayer_GraphController, m_pszCharacterMode) == 0x268, "m_pszCharacterMode in C_CSGO_PreviewPlayer_GraphController should be at offset 0x268");
		static_assert(offsetof(CS2::client::C_CSGO_PreviewPlayer_GraphController, m_pszTeamPreviewVariant) == 0x290, "m_pszTeamPreviewVariant in C_CSGO_PreviewPlayer_GraphController should be at offset 0x290");
		static_assert(offsetof(CS2::client::C_CSGO_PreviewPlayer_GraphController, m_pszTeamPreviewPosition) == 0x2B8, "m_pszTeamPreviewPosition in C_CSGO_PreviewPlayer_GraphController should be at offset 0x2B8");
		static_assert(offsetof(CS2::client::C_CSGO_PreviewPlayer_GraphController, m_pszEndOfMatchCelebration) == 0x2E0, "m_pszEndOfMatchCelebration in C_CSGO_PreviewPlayer_GraphController should be at offset 0x2E0");
		static_assert(offsetof(CS2::client::C_CSGO_PreviewPlayer_GraphController, m_nTeamPreviewRandom) == 0x308, "m_nTeamPreviewRandom in C_CSGO_PreviewPlayer_GraphController should be at offset 0x308");
		static_assert(offsetof(CS2::client::C_CSGO_PreviewPlayer_GraphController, m_pszWeaponState) == 0x328, "m_pszWeaponState in C_CSGO_PreviewPlayer_GraphController should be at offset 0x328");
		static_assert(offsetof(CS2::client::C_CSGO_PreviewPlayer_GraphController, m_pszWeaponType) == 0x350, "m_pszWeaponType in C_CSGO_PreviewPlayer_GraphController should be at offset 0x350");
		static_assert(offsetof(CS2::client::C_CSGO_PreviewPlayer_GraphController, m_bCT) == 0x378, "m_bCT in C_CSGO_PreviewPlayer_GraphController should be at offset 0x378");
		static_assert(sizeof(CS2::client::C_CSGO_PreviewPlayer_GraphController) == 0x398, "C_CSGO_PreviewPlayer_GraphController size should be 0x398");
	}
}
