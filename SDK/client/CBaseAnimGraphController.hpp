// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>

#include <SDK/client/CSkeletonAnimationController.hpp>
#include <SDK/client/CAnimGraphNetworkedVariables.hpp>
#include <SDK/animationsystem/HSequence.hpp>
#include <SDK/entity2/GameTime_t.hpp>
#include <SDK/client/AnimLoopMode_t.hpp>
#include <SDK/client/SequenceFinishNotifyState_t.hpp>



namespace CS2 {
	namespace client {
		class CBaseAnimGraphController : public CS2::client::CSkeletonAnimationController {
		public:
			S2_PAD(0x8);
			client::CAnimGraphNetworkedVariables m_animGraphNetworkedVars; // 0x18 | Schema_DeclaredClass | Size: 0x1490
			bool m_bSequenceFinished; // 0x14a8 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			float32 m_flSoundSyncTime; // 0x14ac | Schema_Builtin | Size: 0x4
			uint32_t m_nActiveIKChainMask; // 0x14b0 | Schema_Builtin | Size: 0x4
			animationsystem::HSequence m_hSequence; // 0x14b4 | Schema_DeclaredClass | Size: 0x4
			entity2::GameTime_t m_flSeqStartTime; // 0x14b8 | Schema_DeclaredClass | Size: 0x4
			float32 m_flSeqFixedCycle; // 0x14bc | Schema_Builtin | Size: 0x4
			client::AnimLoopMode_t m_nAnimLoopMode; // 0x14c0 | Schema_DeclaredEnum | Size: 0x4
			GlobalTypes::CNetworkedQuantizedFloat m_flPlaybackRate; // 0x14c4 | Schema_Atomic | Size: 0x8
			S2_PAD(0x4);
			client::SequenceFinishNotifyState_t m_nNotifyState; // 0x14d0 | Schema_DeclaredEnum | Size: 0x1
			S2_PAD(0x1);
			bool m_bNetworkedAnimationInputsChanged; // 0x14d2 | Schema_Builtin | Size: 0x1
			bool m_bNetworkedSequenceChanged; // 0x14d3 | Schema_Builtin | Size: 0x1
			bool m_bLastUpdateSkipped; // 0x14d4 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			entity2::GameTime_t m_flPrevAnimUpdateTime; // 0x14d8 | Schema_DeclaredClass | Size: 0x4
			S2_PAD(0x384);
			// GlobalTypes::CStrongHandle< resourcesystem::InfoForResourceTypeCNmGraphDefinition > m_hGraphDefinitionAG2; // 0x1860 | Schema_Atomic | Size: 0x8
			char  m_hGraphDefinitionAG2[0x8]; // 0x1860 | Schema_Atomic | Size: 0x8
			bool m_bIsUsingAG2; // 0x1868 | Schema_Builtin | Size: 0x1
			S2_PAD(0x7);
			// GlobalTypes::C_NetworkUtlVectorBase< uint8 > m_serializedPoseRecipeAG2; // 0x1870 | Schema_Atomic | Size: 0x18
			char  m_serializedPoseRecipeAG2[0x18]; // 0x1870 | Schema_Atomic | Size: 0x18
			int32_t m_nSerializePoseRecipeSizeAG2; // 0x1888 | Schema_Builtin | Size: 0x4
			int32_t m_nSerializePoseRecipeVersionAG2; // 0x188c | Schema_Builtin | Size: 0x4
			uint8_t m_nGraphCreationFlagsAG2; // 0x1890 | Schema_Builtin | Size: 0x1
			S2_PAD(0x1eb);
			int32_t m_nServerGraphDefReloadCountAG2; // 0x1a7c | Schema_Builtin | Size: 0x4
			S2_PAD(0x4);
			int32_t m_nServerSerializationContextIteration; // 0x1a84 | Schema_Builtin | Size: 0x4
			S2_PAD(0x8); // End padding
		};
		static_assert(offsetof(CS2::client::CBaseAnimGraphController, m_animGraphNetworkedVars) == 0x18, "m_animGraphNetworkedVars in CBaseAnimGraphController should be at offset 0x18");
		static_assert(offsetof(CS2::client::CBaseAnimGraphController, m_bSequenceFinished) == 0x14A8, "m_bSequenceFinished in CBaseAnimGraphController should be at offset 0x14A8");
		static_assert(offsetof(CS2::client::CBaseAnimGraphController, m_flSoundSyncTime) == 0x14AC, "m_flSoundSyncTime in CBaseAnimGraphController should be at offset 0x14AC");
		static_assert(offsetof(CS2::client::CBaseAnimGraphController, m_nActiveIKChainMask) == 0x14B0, "m_nActiveIKChainMask in CBaseAnimGraphController should be at offset 0x14B0");
		static_assert(offsetof(CS2::client::CBaseAnimGraphController, m_hSequence) == 0x14B4, "m_hSequence in CBaseAnimGraphController should be at offset 0x14B4");
		static_assert(offsetof(CS2::client::CBaseAnimGraphController, m_flSeqStartTime) == 0x14B8, "m_flSeqStartTime in CBaseAnimGraphController should be at offset 0x14B8");
		static_assert(offsetof(CS2::client::CBaseAnimGraphController, m_flSeqFixedCycle) == 0x14BC, "m_flSeqFixedCycle in CBaseAnimGraphController should be at offset 0x14BC");
		static_assert(offsetof(CS2::client::CBaseAnimGraphController, m_nAnimLoopMode) == 0x14C0, "m_nAnimLoopMode in CBaseAnimGraphController should be at offset 0x14C0");
		static_assert(offsetof(CS2::client::CBaseAnimGraphController, m_flPlaybackRate) == 0x14C4, "m_flPlaybackRate in CBaseAnimGraphController should be at offset 0x14C4");
		static_assert(offsetof(CS2::client::CBaseAnimGraphController, m_nNotifyState) == 0x14D0, "m_nNotifyState in CBaseAnimGraphController should be at offset 0x14D0");
		static_assert(offsetof(CS2::client::CBaseAnimGraphController, m_bNetworkedAnimationInputsChanged) == 0x14D2, "m_bNetworkedAnimationInputsChanged in CBaseAnimGraphController should be at offset 0x14D2");
		static_assert(offsetof(CS2::client::CBaseAnimGraphController, m_bNetworkedSequenceChanged) == 0x14D3, "m_bNetworkedSequenceChanged in CBaseAnimGraphController should be at offset 0x14D3");
		static_assert(offsetof(CS2::client::CBaseAnimGraphController, m_bLastUpdateSkipped) == 0x14D4, "m_bLastUpdateSkipped in CBaseAnimGraphController should be at offset 0x14D4");
		static_assert(offsetof(CS2::client::CBaseAnimGraphController, m_flPrevAnimUpdateTime) == 0x14D8, "m_flPrevAnimUpdateTime in CBaseAnimGraphController should be at offset 0x14D8");
		static_assert(offsetof(CS2::client::CBaseAnimGraphController, m_hGraphDefinitionAG2) == 0x1860, "m_hGraphDefinitionAG2 in CBaseAnimGraphController should be at offset 0x1860");
		static_assert(offsetof(CS2::client::CBaseAnimGraphController, m_bIsUsingAG2) == 0x1868, "m_bIsUsingAG2 in CBaseAnimGraphController should be at offset 0x1868");
		static_assert(offsetof(CS2::client::CBaseAnimGraphController, m_serializedPoseRecipeAG2) == 0x1870, "m_serializedPoseRecipeAG2 in CBaseAnimGraphController should be at offset 0x1870");
		static_assert(offsetof(CS2::client::CBaseAnimGraphController, m_nSerializePoseRecipeSizeAG2) == 0x1888, "m_nSerializePoseRecipeSizeAG2 in CBaseAnimGraphController should be at offset 0x1888");
		static_assert(offsetof(CS2::client::CBaseAnimGraphController, m_nSerializePoseRecipeVersionAG2) == 0x188C, "m_nSerializePoseRecipeVersionAG2 in CBaseAnimGraphController should be at offset 0x188C");
		static_assert(offsetof(CS2::client::CBaseAnimGraphController, m_nGraphCreationFlagsAG2) == 0x1890, "m_nGraphCreationFlagsAG2 in CBaseAnimGraphController should be at offset 0x1890");
		static_assert(offsetof(CS2::client::CBaseAnimGraphController, m_nServerGraphDefReloadCountAG2) == 0x1A7C, "m_nServerGraphDefReloadCountAG2 in CBaseAnimGraphController should be at offset 0x1A7C");
		static_assert(offsetof(CS2::client::CBaseAnimGraphController, m_nServerSerializationContextIteration) == 0x1A84, "m_nServerSerializationContextIteration in CBaseAnimGraphController should be at offset 0x1A84");
		static_assert(sizeof(CS2::client::CBaseAnimGraphController) == 0x1A90, "CBaseAnimGraphController size should be 0x1A90");
	}
}
