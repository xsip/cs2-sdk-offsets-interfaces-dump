// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>

#include <SDK/client/C_BaseTrigger.hpp>



namespace CS2 {
	namespace client {
		class C_PostProcessingVolume : public CS2::client::C_BaseTrigger {
		public:
			S2_PAD(0x10);
			// GlobalTypes::CStrongHandle< resourcesystem::InfoForResourceTypeCPostProcessingResource > m_hPostSettings; // 0x1018 | Schema_Atomic | Size: 0x8
			char  m_hPostSettings[0x8]; // 0x1018 | Schema_Atomic | Size: 0x8
			float32 m_flFadeDuration; // 0x1020 | Schema_Builtin | Size: 0x4
			float32 m_flMinLogExposure; // 0x1024 | Schema_Builtin | Size: 0x4
			float32 m_flMaxLogExposure; // 0x1028 | Schema_Builtin | Size: 0x4
			float32 m_flMinExposure; // 0x102c | Schema_Builtin | Size: 0x4
			float32 m_flMaxExposure; // 0x1030 | Schema_Builtin | Size: 0x4
			float32 m_flExposureCompensation; // 0x1034 | Schema_Builtin | Size: 0x4
			float32 m_flExposureFadeSpeedUp; // 0x1038 | Schema_Builtin | Size: 0x4
			float32 m_flExposureFadeSpeedDown; // 0x103c | Schema_Builtin | Size: 0x4
			float32 m_flTonemapEVSmoothingRange; // 0x1040 | Schema_Builtin | Size: 0x4
			bool m_bMaster; // 0x1044 | Schema_Builtin | Size: 0x1
			bool m_bExposureControl; // 0x1045 | Schema_Builtin | Size: 0x1
			S2_PAD(0x2); // End padding
		};
		static_assert(offsetof(CS2::client::C_PostProcessingVolume, m_hPostSettings) == 0x1018, "m_hPostSettings in C_PostProcessingVolume should be at offset 0x1018");
		static_assert(offsetof(CS2::client::C_PostProcessingVolume, m_flFadeDuration) == 0x1020, "m_flFadeDuration in C_PostProcessingVolume should be at offset 0x1020");
		static_assert(offsetof(CS2::client::C_PostProcessingVolume, m_flMinLogExposure) == 0x1024, "m_flMinLogExposure in C_PostProcessingVolume should be at offset 0x1024");
		static_assert(offsetof(CS2::client::C_PostProcessingVolume, m_flMaxLogExposure) == 0x1028, "m_flMaxLogExposure in C_PostProcessingVolume should be at offset 0x1028");
		static_assert(offsetof(CS2::client::C_PostProcessingVolume, m_flMinExposure) == 0x102C, "m_flMinExposure in C_PostProcessingVolume should be at offset 0x102C");
		static_assert(offsetof(CS2::client::C_PostProcessingVolume, m_flMaxExposure) == 0x1030, "m_flMaxExposure in C_PostProcessingVolume should be at offset 0x1030");
		static_assert(offsetof(CS2::client::C_PostProcessingVolume, m_flExposureCompensation) == 0x1034, "m_flExposureCompensation in C_PostProcessingVolume should be at offset 0x1034");
		static_assert(offsetof(CS2::client::C_PostProcessingVolume, m_flExposureFadeSpeedUp) == 0x1038, "m_flExposureFadeSpeedUp in C_PostProcessingVolume should be at offset 0x1038");
		static_assert(offsetof(CS2::client::C_PostProcessingVolume, m_flExposureFadeSpeedDown) == 0x103C, "m_flExposureFadeSpeedDown in C_PostProcessingVolume should be at offset 0x103C");
		static_assert(offsetof(CS2::client::C_PostProcessingVolume, m_flTonemapEVSmoothingRange) == 0x1040, "m_flTonemapEVSmoothingRange in C_PostProcessingVolume should be at offset 0x1040");
		static_assert(offsetof(CS2::client::C_PostProcessingVolume, m_bMaster) == 0x1044, "m_bMaster in C_PostProcessingVolume should be at offset 0x1044");
		static_assert(offsetof(CS2::client::C_PostProcessingVolume, m_bExposureControl) == 0x1045, "m_bExposureControl in C_PostProcessingVolume should be at offset 0x1045");
		static_assert(sizeof(CS2::client::C_PostProcessingVolume) == 0x1048, "C_PostProcessingVolume size should be 0x1048");
	}
}
