// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>




namespace CS2 {
	namespace client {
		class HullFlags_t  {
		public:
			bool m_bHull_Human; // 0x0 | Schema_Builtin | Size: 0x1
			bool m_bHull_SmallCentered; // 0x1 | Schema_Builtin | Size: 0x1
			bool m_bHull_WideHuman; // 0x2 | Schema_Builtin | Size: 0x1
			bool m_bHull_Tiny; // 0x3 | Schema_Builtin | Size: 0x1
			bool m_bHull_Medium; // 0x4 | Schema_Builtin | Size: 0x1
			bool m_bHull_TinyCentered; // 0x5 | Schema_Builtin | Size: 0x1
			bool m_bHull_Large; // 0x6 | Schema_Builtin | Size: 0x1
			bool m_bHull_LargeCentered; // 0x7 | Schema_Builtin | Size: 0x1
			bool m_bHull_MediumTall; // 0x8 | Schema_Builtin | Size: 0x1
			bool m_bHull_Small; // 0x9 | Schema_Builtin | Size: 0x1
		};
		static_assert(offsetof(CS2::client::HullFlags_t, m_bHull_Human) == 0x0, "m_bHull_Human in HullFlags_t should be at offset 0x0");
		static_assert(offsetof(CS2::client::HullFlags_t, m_bHull_SmallCentered) == 0x1, "m_bHull_SmallCentered in HullFlags_t should be at offset 0x1");
		static_assert(offsetof(CS2::client::HullFlags_t, m_bHull_WideHuman) == 0x2, "m_bHull_WideHuman in HullFlags_t should be at offset 0x2");
		static_assert(offsetof(CS2::client::HullFlags_t, m_bHull_Tiny) == 0x3, "m_bHull_Tiny in HullFlags_t should be at offset 0x3");
		static_assert(offsetof(CS2::client::HullFlags_t, m_bHull_Medium) == 0x4, "m_bHull_Medium in HullFlags_t should be at offset 0x4");
		static_assert(offsetof(CS2::client::HullFlags_t, m_bHull_TinyCentered) == 0x5, "m_bHull_TinyCentered in HullFlags_t should be at offset 0x5");
		static_assert(offsetof(CS2::client::HullFlags_t, m_bHull_Large) == 0x6, "m_bHull_Large in HullFlags_t should be at offset 0x6");
		static_assert(offsetof(CS2::client::HullFlags_t, m_bHull_LargeCentered) == 0x7, "m_bHull_LargeCentered in HullFlags_t should be at offset 0x7");
		static_assert(offsetof(CS2::client::HullFlags_t, m_bHull_MediumTall) == 0x8, "m_bHull_MediumTall in HullFlags_t should be at offset 0x8");
		static_assert(offsetof(CS2::client::HullFlags_t, m_bHull_Small) == 0x9, "m_bHull_Small in HullFlags_t should be at offset 0x9");
		static_assert(sizeof(CS2::client::HullFlags_t) == 0xA, "HullFlags_t size should be 0xA");
	}
}
