// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>

#include <SDK/client/C_BaseEntity.hpp>



namespace CS2 {
	namespace client {
		class C_EnvVolumetricFogVolume : public CS2::client::C_BaseEntity {
		public:
			bool m_bActive; // 0x5f8 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			GlobalTypes::Vector m_vBoxMins; // 0x5fc | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vBoxMaxs; // 0x608 | Schema_Atomic | Size: 0xc
			bool m_bStartDisabled; // 0x614 | Schema_Builtin | Size: 0x1
			bool m_bIndirectUseLPVs; // 0x615 | Schema_Builtin | Size: 0x1
			S2_PAD(0x2);
			float32 m_flStrength; // 0x618 | Schema_Builtin | Size: 0x4
			int32_t m_nFalloffShape; // 0x61c | Schema_Builtin | Size: 0x4
			float32 m_flFalloffExponent; // 0x620 | Schema_Builtin | Size: 0x4
			float32 m_flHeightFogDepth; // 0x624 | Schema_Builtin | Size: 0x4
			float32 m_fHeightFogEdgeWidth; // 0x628 | Schema_Builtin | Size: 0x4
			float32 m_fIndirectLightStrength; // 0x62c | Schema_Builtin | Size: 0x4
			float32 m_fSunLightStrength; // 0x630 | Schema_Builtin | Size: 0x4
			float32 m_fNoiseStrength; // 0x634 | Schema_Builtin | Size: 0x4
			GlobalTypes::Color m_TintColor; // 0x638 | Schema_Atomic | Size: 0x4
			bool m_bOverrideTintColor; // 0x63c | Schema_Builtin | Size: 0x1
			bool m_bOverrideIndirectLightStrength; // 0x63d | Schema_Builtin | Size: 0x1
			bool m_bOverrideSunLightStrength; // 0x63e | Schema_Builtin | Size: 0x1
			bool m_bOverrideNoiseStrength; // 0x63f | Schema_Builtin | Size: 0x1
		};
		static_assert(offsetof(CS2::client::C_EnvVolumetricFogVolume, m_bActive) == 0x5F8, "m_bActive in C_EnvVolumetricFogVolume should be at offset 0x5F8");
		static_assert(offsetof(CS2::client::C_EnvVolumetricFogVolume, m_vBoxMins) == 0x5FC, "m_vBoxMins in C_EnvVolumetricFogVolume should be at offset 0x5FC");
		static_assert(offsetof(CS2::client::C_EnvVolumetricFogVolume, m_vBoxMaxs) == 0x608, "m_vBoxMaxs in C_EnvVolumetricFogVolume should be at offset 0x608");
		static_assert(offsetof(CS2::client::C_EnvVolumetricFogVolume, m_bStartDisabled) == 0x614, "m_bStartDisabled in C_EnvVolumetricFogVolume should be at offset 0x614");
		static_assert(offsetof(CS2::client::C_EnvVolumetricFogVolume, m_bIndirectUseLPVs) == 0x615, "m_bIndirectUseLPVs in C_EnvVolumetricFogVolume should be at offset 0x615");
		static_assert(offsetof(CS2::client::C_EnvVolumetricFogVolume, m_flStrength) == 0x618, "m_flStrength in C_EnvVolumetricFogVolume should be at offset 0x618");
		static_assert(offsetof(CS2::client::C_EnvVolumetricFogVolume, m_nFalloffShape) == 0x61C, "m_nFalloffShape in C_EnvVolumetricFogVolume should be at offset 0x61C");
		static_assert(offsetof(CS2::client::C_EnvVolumetricFogVolume, m_flFalloffExponent) == 0x620, "m_flFalloffExponent in C_EnvVolumetricFogVolume should be at offset 0x620");
		static_assert(offsetof(CS2::client::C_EnvVolumetricFogVolume, m_flHeightFogDepth) == 0x624, "m_flHeightFogDepth in C_EnvVolumetricFogVolume should be at offset 0x624");
		static_assert(offsetof(CS2::client::C_EnvVolumetricFogVolume, m_fHeightFogEdgeWidth) == 0x628, "m_fHeightFogEdgeWidth in C_EnvVolumetricFogVolume should be at offset 0x628");
		static_assert(offsetof(CS2::client::C_EnvVolumetricFogVolume, m_fIndirectLightStrength) == 0x62C, "m_fIndirectLightStrength in C_EnvVolumetricFogVolume should be at offset 0x62C");
		static_assert(offsetof(CS2::client::C_EnvVolumetricFogVolume, m_fSunLightStrength) == 0x630, "m_fSunLightStrength in C_EnvVolumetricFogVolume should be at offset 0x630");
		static_assert(offsetof(CS2::client::C_EnvVolumetricFogVolume, m_fNoiseStrength) == 0x634, "m_fNoiseStrength in C_EnvVolumetricFogVolume should be at offset 0x634");
		static_assert(offsetof(CS2::client::C_EnvVolumetricFogVolume, m_TintColor) == 0x638, "m_TintColor in C_EnvVolumetricFogVolume should be at offset 0x638");
		static_assert(offsetof(CS2::client::C_EnvVolumetricFogVolume, m_bOverrideTintColor) == 0x63C, "m_bOverrideTintColor in C_EnvVolumetricFogVolume should be at offset 0x63C");
		static_assert(offsetof(CS2::client::C_EnvVolumetricFogVolume, m_bOverrideIndirectLightStrength) == 0x63D, "m_bOverrideIndirectLightStrength in C_EnvVolumetricFogVolume should be at offset 0x63D");
		static_assert(offsetof(CS2::client::C_EnvVolumetricFogVolume, m_bOverrideSunLightStrength) == 0x63E, "m_bOverrideSunLightStrength in C_EnvVolumetricFogVolume should be at offset 0x63E");
		static_assert(offsetof(CS2::client::C_EnvVolumetricFogVolume, m_bOverrideNoiseStrength) == 0x63F, "m_bOverrideNoiseStrength in C_EnvVolumetricFogVolume should be at offset 0x63F");
		static_assert(sizeof(CS2::client::C_EnvVolumetricFogVolume) == 0x640, "C_EnvVolumetricFogVolume size should be 0x640");
	}
}
