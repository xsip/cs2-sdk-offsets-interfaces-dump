// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/client/CEntitySubclassVDataBase.hpp>
#include <SDK/client/CSkillFloat.hpp>





using namespace GlobalTypes;
namespace CS2 {
	namespace client {
		class CBasePlayerVData : public CS2::client::CEntitySubclassVDataBase {
		public:
			// GlobalTypes::CResourceNameTyped< GlobalTypes::CWeakHandle< InfoForResourceTypeCModel > > m_sModelName; // 0x28 | Schema_Atomic | Size: 0xe0
			char  m_sModelName[0xe0]; // 0x28 | Schema_Atomic | Size: 0xe0
			client::CSkillFloat m_flHeadDamageMultiplier; // 0x108 | Schema_DeclaredClass | Size: 0x10
			client::CSkillFloat m_flChestDamageMultiplier; // 0x118 | Schema_DeclaredClass | Size: 0x10
			client::CSkillFloat m_flStomachDamageMultiplier; // 0x128 | Schema_DeclaredClass | Size: 0x10
			client::CSkillFloat m_flArmDamageMultiplier; // 0x138 | Schema_DeclaredClass | Size: 0x10
			client::CSkillFloat m_flLegDamageMultiplier; // 0x148 | Schema_DeclaredClass | Size: 0x10
			float32 m_flHoldBreathTime; // 0x158 | Schema_Builtin | Size: 0x4
			float32 m_flDrowningDamageInterval; // 0x15c | Schema_Builtin | Size: 0x4
			int32_t m_nDrowningDamageInitial; // 0x160 | Schema_Builtin | Size: 0x4
			int32_t m_nDrowningDamageMax; // 0x164 | Schema_Builtin | Size: 0x4
			int32_t m_nWaterSpeed; // 0x168 | Schema_Builtin | Size: 0x4
			float32 m_flUseRange; // 0x16c | Schema_Builtin | Size: 0x4
			float32 m_flUseAngleTolerance; // 0x170 | Schema_Builtin | Size: 0x4
			float32 m_flCrouchTime; // 0x174 | Schema_Builtin | Size: 0x4
		};
		static_assert(offsetof(CS2::client::CBasePlayerVData, m_sModelName) == 0x28, "m_sModelName in CBasePlayerVData should be at offset 0x28");
		static_assert(offsetof(CS2::client::CBasePlayerVData, m_flHeadDamageMultiplier) == 0x108, "m_flHeadDamageMultiplier in CBasePlayerVData should be at offset 0x108");
		static_assert(offsetof(CS2::client::CBasePlayerVData, m_flChestDamageMultiplier) == 0x118, "m_flChestDamageMultiplier in CBasePlayerVData should be at offset 0x118");
		static_assert(offsetof(CS2::client::CBasePlayerVData, m_flStomachDamageMultiplier) == 0x128, "m_flStomachDamageMultiplier in CBasePlayerVData should be at offset 0x128");
		static_assert(offsetof(CS2::client::CBasePlayerVData, m_flArmDamageMultiplier) == 0x138, "m_flArmDamageMultiplier in CBasePlayerVData should be at offset 0x138");
		static_assert(offsetof(CS2::client::CBasePlayerVData, m_flLegDamageMultiplier) == 0x148, "m_flLegDamageMultiplier in CBasePlayerVData should be at offset 0x148");
		static_assert(offsetof(CS2::client::CBasePlayerVData, m_flHoldBreathTime) == 0x158, "m_flHoldBreathTime in CBasePlayerVData should be at offset 0x158");
		static_assert(offsetof(CS2::client::CBasePlayerVData, m_flDrowningDamageInterval) == 0x15C, "m_flDrowningDamageInterval in CBasePlayerVData should be at offset 0x15C");
		static_assert(offsetof(CS2::client::CBasePlayerVData, m_nDrowningDamageInitial) == 0x160, "m_nDrowningDamageInitial in CBasePlayerVData should be at offset 0x160");
		static_assert(offsetof(CS2::client::CBasePlayerVData, m_nDrowningDamageMax) == 0x164, "m_nDrowningDamageMax in CBasePlayerVData should be at offset 0x164");
		static_assert(offsetof(CS2::client::CBasePlayerVData, m_nWaterSpeed) == 0x168, "m_nWaterSpeed in CBasePlayerVData should be at offset 0x168");
		static_assert(offsetof(CS2::client::CBasePlayerVData, m_flUseRange) == 0x16C, "m_flUseRange in CBasePlayerVData should be at offset 0x16C");
		static_assert(offsetof(CS2::client::CBasePlayerVData, m_flUseAngleTolerance) == 0x170, "m_flUseAngleTolerance in CBasePlayerVData should be at offset 0x170");
		static_assert(offsetof(CS2::client::CBasePlayerVData, m_flCrouchTime) == 0x174, "m_flCrouchTime in CBasePlayerVData should be at offset 0x174");
		static_assert(sizeof(CS2::client::CBasePlayerVData) == 0x178, "CBasePlayerVData size should be 0x178");
	}
}
