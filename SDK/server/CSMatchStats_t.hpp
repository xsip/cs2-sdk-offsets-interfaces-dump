// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/server/CSPerRoundStats_t.hpp>





using namespace GlobalTypes;
namespace CS2 {
	namespace server {
		class CSMatchStats_t : public CS2::server::CSPerRoundStats_t {
		public:
			int32_t m_iEnemy5Ks; // 0x68 | Schema_Builtin | Size: 0x4
			int32_t m_iEnemy4Ks; // 0x6c | Schema_Builtin | Size: 0x4
			int32_t m_iEnemy3Ks; // 0x70 | Schema_Builtin | Size: 0x4
			int32_t m_iEnemyKnifeKills; // 0x74 | Schema_Builtin | Size: 0x4
			int32_t m_iEnemyTaserKills; // 0x78 | Schema_Builtin | Size: 0x4
			int32_t m_iEnemy2Ks; // 0x7c | Schema_Builtin | Size: 0x4
			int32_t m_iUtility_Count; // 0x80 | Schema_Builtin | Size: 0x4
			int32_t m_iUtility_Successes; // 0x84 | Schema_Builtin | Size: 0x4
			int32_t m_iUtility_Enemies; // 0x88 | Schema_Builtin | Size: 0x4
			int32_t m_iFlash_Count; // 0x8c | Schema_Builtin | Size: 0x4
			int32_t m_iFlash_Successes; // 0x90 | Schema_Builtin | Size: 0x4
			float32 m_flHealthPointsRemovedTotal; // 0x94 | Schema_Builtin | Size: 0x4
			float32 m_flHealthPointsDealtTotal; // 0x98 | Schema_Builtin | Size: 0x4
			int32_t m_nShotsFiredTotal; // 0x9c | Schema_Builtin | Size: 0x4
			int32_t m_nShotsOnTargetTotal; // 0xa0 | Schema_Builtin | Size: 0x4
			int32_t m_i1v1Count; // 0xa4 | Schema_Builtin | Size: 0x4
			int32_t m_i1v1Wins; // 0xa8 | Schema_Builtin | Size: 0x4
			int32_t m_i1v2Count; // 0xac | Schema_Builtin | Size: 0x4
			int32_t m_i1v2Wins; // 0xb0 | Schema_Builtin | Size: 0x4
			int32_t m_iEntryCount; // 0xb4 | Schema_Builtin | Size: 0x4
			int32_t m_iEntryWins; // 0xb8 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4); // End padding
		};
		static_assert(offsetof(CS2::server::CSMatchStats_t, m_iEnemy5Ks) == 0x68, "m_iEnemy5Ks in CSMatchStats_t should be at offset 0x68");
		static_assert(offsetof(CS2::server::CSMatchStats_t, m_iEnemy4Ks) == 0x6C, "m_iEnemy4Ks in CSMatchStats_t should be at offset 0x6C");
		static_assert(offsetof(CS2::server::CSMatchStats_t, m_iEnemy3Ks) == 0x70, "m_iEnemy3Ks in CSMatchStats_t should be at offset 0x70");
		static_assert(offsetof(CS2::server::CSMatchStats_t, m_iEnemyKnifeKills) == 0x74, "m_iEnemyKnifeKills in CSMatchStats_t should be at offset 0x74");
		static_assert(offsetof(CS2::server::CSMatchStats_t, m_iEnemyTaserKills) == 0x78, "m_iEnemyTaserKills in CSMatchStats_t should be at offset 0x78");
		static_assert(offsetof(CS2::server::CSMatchStats_t, m_iEnemy2Ks) == 0x7C, "m_iEnemy2Ks in CSMatchStats_t should be at offset 0x7C");
		static_assert(offsetof(CS2::server::CSMatchStats_t, m_iUtility_Count) == 0x80, "m_iUtility_Count in CSMatchStats_t should be at offset 0x80");
		static_assert(offsetof(CS2::server::CSMatchStats_t, m_iUtility_Successes) == 0x84, "m_iUtility_Successes in CSMatchStats_t should be at offset 0x84");
		static_assert(offsetof(CS2::server::CSMatchStats_t, m_iUtility_Enemies) == 0x88, "m_iUtility_Enemies in CSMatchStats_t should be at offset 0x88");
		static_assert(offsetof(CS2::server::CSMatchStats_t, m_iFlash_Count) == 0x8C, "m_iFlash_Count in CSMatchStats_t should be at offset 0x8C");
		static_assert(offsetof(CS2::server::CSMatchStats_t, m_iFlash_Successes) == 0x90, "m_iFlash_Successes in CSMatchStats_t should be at offset 0x90");
		static_assert(offsetof(CS2::server::CSMatchStats_t, m_flHealthPointsRemovedTotal) == 0x94, "m_flHealthPointsRemovedTotal in CSMatchStats_t should be at offset 0x94");
		static_assert(offsetof(CS2::server::CSMatchStats_t, m_flHealthPointsDealtTotal) == 0x98, "m_flHealthPointsDealtTotal in CSMatchStats_t should be at offset 0x98");
		static_assert(offsetof(CS2::server::CSMatchStats_t, m_nShotsFiredTotal) == 0x9C, "m_nShotsFiredTotal in CSMatchStats_t should be at offset 0x9C");
		static_assert(offsetof(CS2::server::CSMatchStats_t, m_nShotsOnTargetTotal) == 0xA0, "m_nShotsOnTargetTotal in CSMatchStats_t should be at offset 0xA0");
		static_assert(offsetof(CS2::server::CSMatchStats_t, m_i1v1Count) == 0xA4, "m_i1v1Count in CSMatchStats_t should be at offset 0xA4");
		static_assert(offsetof(CS2::server::CSMatchStats_t, m_i1v1Wins) == 0xA8, "m_i1v1Wins in CSMatchStats_t should be at offset 0xA8");
		static_assert(offsetof(CS2::server::CSMatchStats_t, m_i1v2Count) == 0xAC, "m_i1v2Count in CSMatchStats_t should be at offset 0xAC");
		static_assert(offsetof(CS2::server::CSMatchStats_t, m_i1v2Wins) == 0xB0, "m_i1v2Wins in CSMatchStats_t should be at offset 0xB0");
		static_assert(offsetof(CS2::server::CSMatchStats_t, m_iEntryCount) == 0xB4, "m_iEntryCount in CSMatchStats_t should be at offset 0xB4");
		static_assert(offsetof(CS2::server::CSMatchStats_t, m_iEntryWins) == 0xB8, "m_iEntryWins in CSMatchStats_t should be at offset 0xB8");
		static_assert(sizeof(CS2::server::CSMatchStats_t) == 0xC0, "CSMatchStats_t size should be 0xC0");
	}
}
