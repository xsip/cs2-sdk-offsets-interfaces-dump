// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>

#include <SDK/server/CBaseModelEntity.hpp>
#include <SDK/server/Move_t.hpp>
#include <SDK/client/SolidType_t.hpp>
#include <SDK/entity2/GameTime_t.hpp>
#include <SDK/entity2/CEntityIOOutput.hpp>
#include <SDK/server/OrientationUpdate_t.hpp>
#include <SDK/server/TransitionToPathNodeAction_t.hpp>
#include <SDK/server/FollowEntityDirection_t.hpp>



namespace CS2 {
	namespace server {
		class CFuncMover : public CS2::server::CBaseModelEntity {
		public:
			GlobalTypes::CUtlSymbolLarge m_iszPathName; // 0x7f0 | Schema_Atomic | Size: 0x8
			// server::CHandle< server::CPathMover > m_hPathMover; // 0x7f8 | Schema_Atomic | Size: 0x4
			char  m_hPathMover[0x4]; // 0x7f8 | Schema_Atomic | Size: 0x4
			// server::CHandle< server::CPathMover > m_hPrevPathMover; // 0x7fc | Schema_Atomic | Size: 0x4
			char  m_hPrevPathMover[0x4]; // 0x7fc | Schema_Atomic | Size: 0x4
			GlobalTypes::CUtlSymbolLarge m_iszPathNodeStart; // 0x800 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlSymbolLarge m_iszPathNodeEnd; // 0x808 | Schema_Atomic | Size: 0x8
			server::Move_t m_eMoveType; // 0x810 | Schema_DeclaredEnum | Size: 0x4
			bool m_bIsReversing; // 0x814 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			GlobalTypes::Vector m_vTarget; // 0x818 | Schema_Atomic | Size: 0xc
			float32 m_flStartSpeed; // 0x824 | Schema_Builtin | Size: 0x4
			float32 m_flPathLocation; // 0x828 | Schema_Builtin | Size: 0x4
			float32 m_flT; // 0x82c | Schema_Builtin | Size: 0x4
			int32_t m_nCurrentNodeIndex; // 0x830 | Schema_Builtin | Size: 0x4
			int32_t m_nPreviousNodeIndex; // 0x834 | Schema_Builtin | Size: 0x4
			client::SolidType_t m_eSolidType; // 0x838 | Schema_DeclaredEnum | Size: 0x1
			bool m_bIsMoving; // 0x839 | Schema_Builtin | Size: 0x1
			S2_PAD(0x2);
			float32 m_flTimeToReachMaxSpeed; // 0x83c | Schema_Builtin | Size: 0x4
			float32 m_flDistanceToReachMaxSpeed; // 0x840 | Schema_Builtin | Size: 0x4
			float32 m_flTimeToReachZeroSpeed; // 0x844 | Schema_Builtin | Size: 0x4
			float32 m_flDistanceToReachZeroSpeed; // 0x848 | Schema_Builtin | Size: 0x4
			entity2::GameTime_t m_flTimeMovementStart; // 0x84c | Schema_DeclaredClass | Size: 0x4
			entity2::GameTime_t m_flTimeMovementStop; // 0x850 | Schema_DeclaredClass | Size: 0x4
			// server::CHandle< server::CMoverPathNode > m_hStopAtNode; // 0x854 | Schema_Atomic | Size: 0x4
			char  m_hStopAtNode[0x4]; // 0x854 | Schema_Atomic | Size: 0x4
			float32 m_flPathLocationToBeginStop; // 0x858 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4);
			GlobalTypes::CUtlSymbolLarge m_iszStartForwardSound; // 0x860 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlSymbolLarge m_iszLoopForwardSound; // 0x868 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlSymbolLarge m_iszStopForwardSound; // 0x870 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlSymbolLarge m_iszStartReverseSound; // 0x878 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlSymbolLarge m_iszLoopReverseSound; // 0x880 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlSymbolLarge m_iszStopReverseSound; // 0x888 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlSymbolLarge m_iszArriveAtDestinationSound; // 0x890 | Schema_Atomic | Size: 0x8
			S2_PAD(0x18);
			entity2::CEntityIOOutput m_OnMovementEnd; // 0x8b0 | Schema_DeclaredClass | Size: 0x28
			bool m_bStartAtClosestPoint; // 0x8d8 | Schema_Builtin | Size: 0x1
			bool m_bStartAtEnd; // 0x8d9 | Schema_Builtin | Size: 0x1
			S2_PAD(0x2);
			server::OrientationUpdate_t m_eOrientationUpdate; // 0x8dc | Schema_DeclaredEnum | Size: 0x4
			entity2::GameTime_t m_flTimeStartOrientationChange; // 0x8e0 | Schema_DeclaredClass | Size: 0x4
			float32 m_flTimeToBlendToNewOrientation; // 0x8e4 | Schema_Builtin | Size: 0x4
			float32 m_flDurationBlendToNewOrientationRan; // 0x8e8 | Schema_Builtin | Size: 0x4
			int32_t m_nOriginalOrientationIndex; // 0x8ec | Schema_Builtin | Size: 0x4
			bool m_bCreateMovableNavMesh; // 0x8f0 | Schema_Builtin | Size: 0x1
			bool m_bAllowMovableNavMeshDockingOnEntireEntity; // 0x8f1 | Schema_Builtin | Size: 0x1
			S2_PAD(0x6);
			entity2::CEntityIOOutput m_OnNodePassed; // 0x8f8 | Schema_DeclaredClass | Size: 0x28
			GlobalTypes::CUtlSymbolLarge m_iszOrientationMatchEntityName; // 0x920 | Schema_Atomic | Size: 0x8
			// server::CHandle< server::CBaseEntity > m_hOrientationMatchEntity; // 0x928 | Schema_Atomic | Size: 0x4
			char  m_hOrientationMatchEntity[0x4]; // 0x928 | Schema_Atomic | Size: 0x4
			float32 m_flTimeToTraverseToNextNode; // 0x92c | Schema_Builtin | Size: 0x4
			GlobalTypes::Vector m_vLerpToNewPosStartInPathEntitySpace; // 0x930 | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vLerpToNewPosEndInPathEntitySpace; // 0x93c | Schema_Atomic | Size: 0xc
			float32 m_flLerpToPositionT; // 0x948 | Schema_Builtin | Size: 0x4
			float32 m_flLerpToPositionDeltaT; // 0x94c | Schema_Builtin | Size: 0x4
			entity2::CEntityIOOutput m_OnLerpToPositionComplete; // 0x950 | Schema_DeclaredClass | Size: 0x28
			bool m_bIsPaused; // 0x978 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			server::TransitionToPathNodeAction_t m_eTransitionedToPathNodeAction; // 0x97c | Schema_DeclaredEnum | Size: 0x4
			int32_t m_nDelayedTeleportToNode; // 0x980 | Schema_Builtin | Size: 0x4
			bool m_bIsVerboseLogging; // 0x984 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			// server::CHandle< server::CBaseEntity > m_hFollowEntity; // 0x988 | Schema_Atomic | Size: 0x4
			char  m_hFollowEntity[0x4]; // 0x988 | Schema_Atomic | Size: 0x4
			float32 m_flFollowDistance; // 0x98c | Schema_Builtin | Size: 0x4
			float32 m_flFollowMinimumSpeed; // 0x990 | Schema_Builtin | Size: 0x4
			float32 m_flCurFollowEntityT; // 0x994 | Schema_Builtin | Size: 0x4
			float32 m_flCurFollowSpeed; // 0x998 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4);
			GlobalTypes::CUtlSymbolLarge m_strOrientationFaceEntityName; // 0x9a0 | Schema_Atomic | Size: 0x8
			// server::CHandle< server::CBaseEntity > m_hOrientationFaceEntity; // 0x9a8 | Schema_Atomic | Size: 0x4
			char  m_hOrientationFaceEntity[0x4]; // 0x9a8 | Schema_Atomic | Size: 0x4
			S2_PAD(0x4);
			entity2::CEntityIOOutput m_OnStart; // 0x9b0 | Schema_DeclaredClass | Size: 0x28
			entity2::CEntityIOOutput m_OnStartForward; // 0x9d8 | Schema_DeclaredClass | Size: 0x28
			entity2::CEntityIOOutput m_OnStartReverse; // 0xa00 | Schema_DeclaredClass | Size: 0x28
			entity2::CEntityIOOutput m_OnStop; // 0xa28 | Schema_DeclaredClass | Size: 0x28
			entity2::CEntityIOOutput m_OnStopped; // 0xa50 | Schema_DeclaredClass | Size: 0x28
			bool m_bNextNodeReturnsCurrent; // 0xa78 | Schema_Builtin | Size: 0x1
			bool m_bStartedMoving; // 0xa79 | Schema_Builtin | Size: 0x1
			S2_PAD(0x1e);
			server::FollowEntityDirection_t m_eFollowEntityDirection; // 0xa98 | Schema_DeclaredEnum | Size: 0x4
			S2_PAD(0x4); // End padding
		};
		static_assert(offsetof(CS2::server::CFuncMover, m_iszPathName) == 0x7F0, "m_iszPathName in CFuncMover should be at offset 0x7F0");
		static_assert(offsetof(CS2::server::CFuncMover, m_hPathMover) == 0x7F8, "m_hPathMover in CFuncMover should be at offset 0x7F8");
		static_assert(offsetof(CS2::server::CFuncMover, m_hPrevPathMover) == 0x7FC, "m_hPrevPathMover in CFuncMover should be at offset 0x7FC");
		static_assert(offsetof(CS2::server::CFuncMover, m_iszPathNodeStart) == 0x800, "m_iszPathNodeStart in CFuncMover should be at offset 0x800");
		static_assert(offsetof(CS2::server::CFuncMover, m_iszPathNodeEnd) == 0x808, "m_iszPathNodeEnd in CFuncMover should be at offset 0x808");
		static_assert(offsetof(CS2::server::CFuncMover, m_eMoveType) == 0x810, "m_eMoveType in CFuncMover should be at offset 0x810");
		static_assert(offsetof(CS2::server::CFuncMover, m_bIsReversing) == 0x814, "m_bIsReversing in CFuncMover should be at offset 0x814");
		static_assert(offsetof(CS2::server::CFuncMover, m_vTarget) == 0x818, "m_vTarget in CFuncMover should be at offset 0x818");
		static_assert(offsetof(CS2::server::CFuncMover, m_flStartSpeed) == 0x824, "m_flStartSpeed in CFuncMover should be at offset 0x824");
		static_assert(offsetof(CS2::server::CFuncMover, m_flPathLocation) == 0x828, "m_flPathLocation in CFuncMover should be at offset 0x828");
		static_assert(offsetof(CS2::server::CFuncMover, m_flT) == 0x82C, "m_flT in CFuncMover should be at offset 0x82C");
		static_assert(offsetof(CS2::server::CFuncMover, m_nCurrentNodeIndex) == 0x830, "m_nCurrentNodeIndex in CFuncMover should be at offset 0x830");
		static_assert(offsetof(CS2::server::CFuncMover, m_nPreviousNodeIndex) == 0x834, "m_nPreviousNodeIndex in CFuncMover should be at offset 0x834");
		static_assert(offsetof(CS2::server::CFuncMover, m_eSolidType) == 0x838, "m_eSolidType in CFuncMover should be at offset 0x838");
		static_assert(offsetof(CS2::server::CFuncMover, m_bIsMoving) == 0x839, "m_bIsMoving in CFuncMover should be at offset 0x839");
		static_assert(offsetof(CS2::server::CFuncMover, m_flTimeToReachMaxSpeed) == 0x83C, "m_flTimeToReachMaxSpeed in CFuncMover should be at offset 0x83C");
		static_assert(offsetof(CS2::server::CFuncMover, m_flDistanceToReachMaxSpeed) == 0x840, "m_flDistanceToReachMaxSpeed in CFuncMover should be at offset 0x840");
		static_assert(offsetof(CS2::server::CFuncMover, m_flTimeToReachZeroSpeed) == 0x844, "m_flTimeToReachZeroSpeed in CFuncMover should be at offset 0x844");
		static_assert(offsetof(CS2::server::CFuncMover, m_flDistanceToReachZeroSpeed) == 0x848, "m_flDistanceToReachZeroSpeed in CFuncMover should be at offset 0x848");
		static_assert(offsetof(CS2::server::CFuncMover, m_flTimeMovementStart) == 0x84C, "m_flTimeMovementStart in CFuncMover should be at offset 0x84C");
		static_assert(offsetof(CS2::server::CFuncMover, m_flTimeMovementStop) == 0x850, "m_flTimeMovementStop in CFuncMover should be at offset 0x850");
		static_assert(offsetof(CS2::server::CFuncMover, m_hStopAtNode) == 0x854, "m_hStopAtNode in CFuncMover should be at offset 0x854");
		static_assert(offsetof(CS2::server::CFuncMover, m_flPathLocationToBeginStop) == 0x858, "m_flPathLocationToBeginStop in CFuncMover should be at offset 0x858");
		static_assert(offsetof(CS2::server::CFuncMover, m_iszStartForwardSound) == 0x860, "m_iszStartForwardSound in CFuncMover should be at offset 0x860");
		static_assert(offsetof(CS2::server::CFuncMover, m_iszLoopForwardSound) == 0x868, "m_iszLoopForwardSound in CFuncMover should be at offset 0x868");
		static_assert(offsetof(CS2::server::CFuncMover, m_iszStopForwardSound) == 0x870, "m_iszStopForwardSound in CFuncMover should be at offset 0x870");
		static_assert(offsetof(CS2::server::CFuncMover, m_iszStartReverseSound) == 0x878, "m_iszStartReverseSound in CFuncMover should be at offset 0x878");
		static_assert(offsetof(CS2::server::CFuncMover, m_iszLoopReverseSound) == 0x880, "m_iszLoopReverseSound in CFuncMover should be at offset 0x880");
		static_assert(offsetof(CS2::server::CFuncMover, m_iszStopReverseSound) == 0x888, "m_iszStopReverseSound in CFuncMover should be at offset 0x888");
		static_assert(offsetof(CS2::server::CFuncMover, m_iszArriveAtDestinationSound) == 0x890, "m_iszArriveAtDestinationSound in CFuncMover should be at offset 0x890");
		static_assert(offsetof(CS2::server::CFuncMover, m_OnMovementEnd) == 0x8B0, "m_OnMovementEnd in CFuncMover should be at offset 0x8B0");
		static_assert(offsetof(CS2::server::CFuncMover, m_bStartAtClosestPoint) == 0x8D8, "m_bStartAtClosestPoint in CFuncMover should be at offset 0x8D8");
		static_assert(offsetof(CS2::server::CFuncMover, m_bStartAtEnd) == 0x8D9, "m_bStartAtEnd in CFuncMover should be at offset 0x8D9");
		static_assert(offsetof(CS2::server::CFuncMover, m_eOrientationUpdate) == 0x8DC, "m_eOrientationUpdate in CFuncMover should be at offset 0x8DC");
		static_assert(offsetof(CS2::server::CFuncMover, m_flTimeStartOrientationChange) == 0x8E0, "m_flTimeStartOrientationChange in CFuncMover should be at offset 0x8E0");
		static_assert(offsetof(CS2::server::CFuncMover, m_flTimeToBlendToNewOrientation) == 0x8E4, "m_flTimeToBlendToNewOrientation in CFuncMover should be at offset 0x8E4");
		static_assert(offsetof(CS2::server::CFuncMover, m_flDurationBlendToNewOrientationRan) == 0x8E8, "m_flDurationBlendToNewOrientationRan in CFuncMover should be at offset 0x8E8");
		static_assert(offsetof(CS2::server::CFuncMover, m_nOriginalOrientationIndex) == 0x8EC, "m_nOriginalOrientationIndex in CFuncMover should be at offset 0x8EC");
		static_assert(offsetof(CS2::server::CFuncMover, m_bCreateMovableNavMesh) == 0x8F0, "m_bCreateMovableNavMesh in CFuncMover should be at offset 0x8F0");
		static_assert(offsetof(CS2::server::CFuncMover, m_bAllowMovableNavMeshDockingOnEntireEntity) == 0x8F1, "m_bAllowMovableNavMeshDockingOnEntireEntity in CFuncMover should be at offset 0x8F1");
		static_assert(offsetof(CS2::server::CFuncMover, m_OnNodePassed) == 0x8F8, "m_OnNodePassed in CFuncMover should be at offset 0x8F8");
		static_assert(offsetof(CS2::server::CFuncMover, m_iszOrientationMatchEntityName) == 0x920, "m_iszOrientationMatchEntityName in CFuncMover should be at offset 0x920");
		static_assert(offsetof(CS2::server::CFuncMover, m_hOrientationMatchEntity) == 0x928, "m_hOrientationMatchEntity in CFuncMover should be at offset 0x928");
		static_assert(offsetof(CS2::server::CFuncMover, m_flTimeToTraverseToNextNode) == 0x92C, "m_flTimeToTraverseToNextNode in CFuncMover should be at offset 0x92C");
		static_assert(offsetof(CS2::server::CFuncMover, m_vLerpToNewPosStartInPathEntitySpace) == 0x930, "m_vLerpToNewPosStartInPathEntitySpace in CFuncMover should be at offset 0x930");
		static_assert(offsetof(CS2::server::CFuncMover, m_vLerpToNewPosEndInPathEntitySpace) == 0x93C, "m_vLerpToNewPosEndInPathEntitySpace in CFuncMover should be at offset 0x93C");
		static_assert(offsetof(CS2::server::CFuncMover, m_flLerpToPositionT) == 0x948, "m_flLerpToPositionT in CFuncMover should be at offset 0x948");
		static_assert(offsetof(CS2::server::CFuncMover, m_flLerpToPositionDeltaT) == 0x94C, "m_flLerpToPositionDeltaT in CFuncMover should be at offset 0x94C");
		static_assert(offsetof(CS2::server::CFuncMover, m_OnLerpToPositionComplete) == 0x950, "m_OnLerpToPositionComplete in CFuncMover should be at offset 0x950");
		static_assert(offsetof(CS2::server::CFuncMover, m_bIsPaused) == 0x978, "m_bIsPaused in CFuncMover should be at offset 0x978");
		static_assert(offsetof(CS2::server::CFuncMover, m_eTransitionedToPathNodeAction) == 0x97C, "m_eTransitionedToPathNodeAction in CFuncMover should be at offset 0x97C");
		static_assert(offsetof(CS2::server::CFuncMover, m_nDelayedTeleportToNode) == 0x980, "m_nDelayedTeleportToNode in CFuncMover should be at offset 0x980");
		static_assert(offsetof(CS2::server::CFuncMover, m_bIsVerboseLogging) == 0x984, "m_bIsVerboseLogging in CFuncMover should be at offset 0x984");
		static_assert(offsetof(CS2::server::CFuncMover, m_hFollowEntity) == 0x988, "m_hFollowEntity in CFuncMover should be at offset 0x988");
		static_assert(offsetof(CS2::server::CFuncMover, m_flFollowDistance) == 0x98C, "m_flFollowDistance in CFuncMover should be at offset 0x98C");
		static_assert(offsetof(CS2::server::CFuncMover, m_flFollowMinimumSpeed) == 0x990, "m_flFollowMinimumSpeed in CFuncMover should be at offset 0x990");
		static_assert(offsetof(CS2::server::CFuncMover, m_flCurFollowEntityT) == 0x994, "m_flCurFollowEntityT in CFuncMover should be at offset 0x994");
		static_assert(offsetof(CS2::server::CFuncMover, m_flCurFollowSpeed) == 0x998, "m_flCurFollowSpeed in CFuncMover should be at offset 0x998");
		static_assert(offsetof(CS2::server::CFuncMover, m_strOrientationFaceEntityName) == 0x9A0, "m_strOrientationFaceEntityName in CFuncMover should be at offset 0x9A0");
		static_assert(offsetof(CS2::server::CFuncMover, m_hOrientationFaceEntity) == 0x9A8, "m_hOrientationFaceEntity in CFuncMover should be at offset 0x9A8");
		static_assert(offsetof(CS2::server::CFuncMover, m_OnStart) == 0x9B0, "m_OnStart in CFuncMover should be at offset 0x9B0");
		static_assert(offsetof(CS2::server::CFuncMover, m_OnStartForward) == 0x9D8, "m_OnStartForward in CFuncMover should be at offset 0x9D8");
		static_assert(offsetof(CS2::server::CFuncMover, m_OnStartReverse) == 0xA00, "m_OnStartReverse in CFuncMover should be at offset 0xA00");
		static_assert(offsetof(CS2::server::CFuncMover, m_OnStop) == 0xA28, "m_OnStop in CFuncMover should be at offset 0xA28");
		static_assert(offsetof(CS2::server::CFuncMover, m_OnStopped) == 0xA50, "m_OnStopped in CFuncMover should be at offset 0xA50");
		static_assert(offsetof(CS2::server::CFuncMover, m_bNextNodeReturnsCurrent) == 0xA78, "m_bNextNodeReturnsCurrent in CFuncMover should be at offset 0xA78");
		static_assert(offsetof(CS2::server::CFuncMover, m_bStartedMoving) == 0xA79, "m_bStartedMoving in CFuncMover should be at offset 0xA79");
		static_assert(offsetof(CS2::server::CFuncMover, m_eFollowEntityDirection) == 0xA98, "m_eFollowEntityDirection in CFuncMover should be at offset 0xA98");
		static_assert(sizeof(CS2::server::CFuncMover) == 0xAA0, "CFuncMover size should be 0xAA0");
	}
}
