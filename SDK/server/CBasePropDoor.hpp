// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>

#include <SDK/server/CDynamicProp.hpp>
#include <SDK/client/DoorState_t.hpp>
#include <SDK/server/locksound_t.hpp>
#include <SDK/entity2/CEntityIOOutput.hpp>



namespace CS2 {
	namespace server {
		class CBasePropDoor : public CS2::server::CDynamicProp {
		public:
			S2_PAD(0x10);
			float32 m_flAutoReturnDelay; // 0xd50 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4);
			// server::CUtlVector< server.dll::CHandle< CBasePropDoor > > m_hDoorList; // 0xd58 | Schema_Atomic | Size: 0x18
			char  m_hDoorList[0x18]; // 0xd58 | Schema_Atomic | Size: 0x18
			int32_t m_nHardwareType; // 0xd70 | Schema_Builtin | Size: 0x4
			bool m_bNeedsHardware; // 0xd74 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			client::DoorState_t m_eDoorState; // 0xd78 | Schema_DeclaredEnum | Size: 0x4
			bool m_bLocked; // 0xd7c | Schema_Builtin | Size: 0x1
			bool m_bNoNPCs; // 0xd7d | Schema_Builtin | Size: 0x1
			S2_PAD(0x2);
			GlobalTypes::Vector m_closedPosition; // 0xd80 | Schema_Atomic | Size: 0xc
			GlobalTypes::QAngle m_closedAngles; // 0xd8c | Schema_Atomic | Size: 0xc
			// server::CHandle< server::CBaseEntity > m_hBlocker; // 0xd98 | Schema_Atomic | Size: 0x4
			char  m_hBlocker[0x4]; // 0xd98 | Schema_Atomic | Size: 0x4
			bool m_bFirstBlocked; // 0xd9c | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			server::locksound_t m_ls; // 0xda0 | Schema_DeclaredClass | Size: 0x20
			bool m_bForceClosed; // 0xdc0 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			GlobalTypes::VectorWS m_vecLatchWorldPosition; // 0xdc4 | Schema_Atomic | Size: 0xc
			// server::CHandle< server::CBaseEntity > m_hActivator; // 0xdd0 | Schema_Atomic | Size: 0x4
			char  m_hActivator[0x4]; // 0xdd0 | Schema_Atomic | Size: 0x4
			S2_PAD(0x14);
			GlobalTypes::CUtlSymbolLarge m_SoundMoving; // 0xde8 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlSymbolLarge m_SoundOpen; // 0xdf0 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlSymbolLarge m_SoundClose; // 0xdf8 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlSymbolLarge m_SoundLock; // 0xe00 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlSymbolLarge m_SoundUnlock; // 0xe08 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlSymbolLarge m_SoundLatch; // 0xe10 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlSymbolLarge m_SoundPound; // 0xe18 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlSymbolLarge m_SoundJiggle; // 0xe20 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlSymbolLarge m_SoundLockedAnim; // 0xe28 | Schema_Atomic | Size: 0x8
			int32_t m_numCloseAttempts; // 0xe30 | Schema_Builtin | Size: 0x4
			GlobalTypes::CUtlStringToken m_nPhysicsMaterial; // 0xe34 | Schema_Atomic | Size: 0x4
			GlobalTypes::CUtlSymbolLarge m_SlaveName; // 0xe38 | Schema_Atomic | Size: 0x8
			// server::CHandle< server::CBasePropDoor > m_hMaster; // 0xe40 | Schema_Atomic | Size: 0x4
			char  m_hMaster[0x4]; // 0xe40 | Schema_Atomic | Size: 0x4
			S2_PAD(0x4);
			entity2::CEntityIOOutput m_OnBlockedClosing; // 0xe48 | Schema_DeclaredClass | Size: 0x28
			entity2::CEntityIOOutput m_OnBlockedOpening; // 0xe70 | Schema_DeclaredClass | Size: 0x28
			entity2::CEntityIOOutput m_OnUnblockedClosing; // 0xe98 | Schema_DeclaredClass | Size: 0x28
			entity2::CEntityIOOutput m_OnUnblockedOpening; // 0xec0 | Schema_DeclaredClass | Size: 0x28
			entity2::CEntityIOOutput m_OnFullyClosed; // 0xee8 | Schema_DeclaredClass | Size: 0x28
			entity2::CEntityIOOutput m_OnFullyOpen; // 0xf10 | Schema_DeclaredClass | Size: 0x28
			entity2::CEntityIOOutput m_OnClose; // 0xf38 | Schema_DeclaredClass | Size: 0x28
			entity2::CEntityIOOutput m_OnOpen; // 0xf60 | Schema_DeclaredClass | Size: 0x28
			entity2::CEntityIOOutput m_OnLockedUse; // 0xf88 | Schema_DeclaredClass | Size: 0x28
			entity2::CEntityIOOutput m_OnAjarOpen; // 0xfb0 | Schema_DeclaredClass | Size: 0x28
			S2_PAD(0x8); // End padding
		};
		static_assert(offsetof(CS2::server::CBasePropDoor, m_flAutoReturnDelay) == 0xD50, "m_flAutoReturnDelay in CBasePropDoor should be at offset 0xD50");
		static_assert(offsetof(CS2::server::CBasePropDoor, m_hDoorList) == 0xD58, "m_hDoorList in CBasePropDoor should be at offset 0xD58");
		static_assert(offsetof(CS2::server::CBasePropDoor, m_nHardwareType) == 0xD70, "m_nHardwareType in CBasePropDoor should be at offset 0xD70");
		static_assert(offsetof(CS2::server::CBasePropDoor, m_bNeedsHardware) == 0xD74, "m_bNeedsHardware in CBasePropDoor should be at offset 0xD74");
		static_assert(offsetof(CS2::server::CBasePropDoor, m_eDoorState) == 0xD78, "m_eDoorState in CBasePropDoor should be at offset 0xD78");
		static_assert(offsetof(CS2::server::CBasePropDoor, m_bLocked) == 0xD7C, "m_bLocked in CBasePropDoor should be at offset 0xD7C");
		static_assert(offsetof(CS2::server::CBasePropDoor, m_bNoNPCs) == 0xD7D, "m_bNoNPCs in CBasePropDoor should be at offset 0xD7D");
		static_assert(offsetof(CS2::server::CBasePropDoor, m_closedPosition) == 0xD80, "m_closedPosition in CBasePropDoor should be at offset 0xD80");
		static_assert(offsetof(CS2::server::CBasePropDoor, m_closedAngles) == 0xD8C, "m_closedAngles in CBasePropDoor should be at offset 0xD8C");
		static_assert(offsetof(CS2::server::CBasePropDoor, m_hBlocker) == 0xD98, "m_hBlocker in CBasePropDoor should be at offset 0xD98");
		static_assert(offsetof(CS2::server::CBasePropDoor, m_bFirstBlocked) == 0xD9C, "m_bFirstBlocked in CBasePropDoor should be at offset 0xD9C");
		static_assert(offsetof(CS2::server::CBasePropDoor, m_ls) == 0xDA0, "m_ls in CBasePropDoor should be at offset 0xDA0");
		static_assert(offsetof(CS2::server::CBasePropDoor, m_bForceClosed) == 0xDC0, "m_bForceClosed in CBasePropDoor should be at offset 0xDC0");
		static_assert(offsetof(CS2::server::CBasePropDoor, m_vecLatchWorldPosition) == 0xDC4, "m_vecLatchWorldPosition in CBasePropDoor should be at offset 0xDC4");
		static_assert(offsetof(CS2::server::CBasePropDoor, m_hActivator) == 0xDD0, "m_hActivator in CBasePropDoor should be at offset 0xDD0");
		static_assert(offsetof(CS2::server::CBasePropDoor, m_SoundMoving) == 0xDE8, "m_SoundMoving in CBasePropDoor should be at offset 0xDE8");
		static_assert(offsetof(CS2::server::CBasePropDoor, m_SoundOpen) == 0xDF0, "m_SoundOpen in CBasePropDoor should be at offset 0xDF0");
		static_assert(offsetof(CS2::server::CBasePropDoor, m_SoundClose) == 0xDF8, "m_SoundClose in CBasePropDoor should be at offset 0xDF8");
		static_assert(offsetof(CS2::server::CBasePropDoor, m_SoundLock) == 0xE00, "m_SoundLock in CBasePropDoor should be at offset 0xE00");
		static_assert(offsetof(CS2::server::CBasePropDoor, m_SoundUnlock) == 0xE08, "m_SoundUnlock in CBasePropDoor should be at offset 0xE08");
		static_assert(offsetof(CS2::server::CBasePropDoor, m_SoundLatch) == 0xE10, "m_SoundLatch in CBasePropDoor should be at offset 0xE10");
		static_assert(offsetof(CS2::server::CBasePropDoor, m_SoundPound) == 0xE18, "m_SoundPound in CBasePropDoor should be at offset 0xE18");
		static_assert(offsetof(CS2::server::CBasePropDoor, m_SoundJiggle) == 0xE20, "m_SoundJiggle in CBasePropDoor should be at offset 0xE20");
		static_assert(offsetof(CS2::server::CBasePropDoor, m_SoundLockedAnim) == 0xE28, "m_SoundLockedAnim in CBasePropDoor should be at offset 0xE28");
		static_assert(offsetof(CS2::server::CBasePropDoor, m_numCloseAttempts) == 0xE30, "m_numCloseAttempts in CBasePropDoor should be at offset 0xE30");
		static_assert(offsetof(CS2::server::CBasePropDoor, m_nPhysicsMaterial) == 0xE34, "m_nPhysicsMaterial in CBasePropDoor should be at offset 0xE34");
		static_assert(offsetof(CS2::server::CBasePropDoor, m_SlaveName) == 0xE38, "m_SlaveName in CBasePropDoor should be at offset 0xE38");
		static_assert(offsetof(CS2::server::CBasePropDoor, m_hMaster) == 0xE40, "m_hMaster in CBasePropDoor should be at offset 0xE40");
		static_assert(offsetof(CS2::server::CBasePropDoor, m_OnBlockedClosing) == 0xE48, "m_OnBlockedClosing in CBasePropDoor should be at offset 0xE48");
		static_assert(offsetof(CS2::server::CBasePropDoor, m_OnBlockedOpening) == 0xE70, "m_OnBlockedOpening in CBasePropDoor should be at offset 0xE70");
		static_assert(offsetof(CS2::server::CBasePropDoor, m_OnUnblockedClosing) == 0xE98, "m_OnUnblockedClosing in CBasePropDoor should be at offset 0xE98");
		static_assert(offsetof(CS2::server::CBasePropDoor, m_OnUnblockedOpening) == 0xEC0, "m_OnUnblockedOpening in CBasePropDoor should be at offset 0xEC0");
		static_assert(offsetof(CS2::server::CBasePropDoor, m_OnFullyClosed) == 0xEE8, "m_OnFullyClosed in CBasePropDoor should be at offset 0xEE8");
		static_assert(offsetof(CS2::server::CBasePropDoor, m_OnFullyOpen) == 0xF10, "m_OnFullyOpen in CBasePropDoor should be at offset 0xF10");
		static_assert(offsetof(CS2::server::CBasePropDoor, m_OnClose) == 0xF38, "m_OnClose in CBasePropDoor should be at offset 0xF38");
		static_assert(offsetof(CS2::server::CBasePropDoor, m_OnOpen) == 0xF60, "m_OnOpen in CBasePropDoor should be at offset 0xF60");
		static_assert(offsetof(CS2::server::CBasePropDoor, m_OnLockedUse) == 0xF88, "m_OnLockedUse in CBasePropDoor should be at offset 0xF88");
		static_assert(offsetof(CS2::server::CBasePropDoor, m_OnAjarOpen) == 0xFB0, "m_OnAjarOpen in CBasePropDoor should be at offset 0xFB0");
		static_assert(sizeof(CS2::server::CBasePropDoor) == 0xFE0, "CBasePropDoor size should be 0xFE0");
	}
}
