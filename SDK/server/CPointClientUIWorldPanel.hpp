// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>

#include <SDK/server/CBaseClientUIEntity.hpp>



namespace CS2 {
	namespace server {
		class CPointClientUIWorldPanel : public CS2::server::CBaseClientUIEntity {
		public:
			bool m_bIgnoreInput; // 0x9a0 | Schema_Builtin | Size: 0x1
			bool m_bLit; // 0x9a1 | Schema_Builtin | Size: 0x1
			bool m_bFollowPlayerAcrossTeleport; // 0x9a2 | Schema_Builtin | Size: 0x1
			S2_PAD(0x1);
			float32 m_flWidth; // 0x9a4 | Schema_Builtin | Size: 0x4
			float32 m_flHeight; // 0x9a8 | Schema_Builtin | Size: 0x4
			float32 m_flDPI; // 0x9ac | Schema_Builtin | Size: 0x4
			float32 m_flInteractDistance; // 0x9b0 | Schema_Builtin | Size: 0x4
			float32 m_flDepthOffset; // 0x9b4 | Schema_Builtin | Size: 0x4
			uint32_t m_unOwnerContext; // 0x9b8 | Schema_Builtin | Size: 0x4
			uint32_t m_unHorizontalAlign; // 0x9bc | Schema_Builtin | Size: 0x4
			uint32_t m_unVerticalAlign; // 0x9c0 | Schema_Builtin | Size: 0x4
			uint32_t m_unOrientation; // 0x9c4 | Schema_Builtin | Size: 0x4
			bool m_bAllowInteractionFromAllSceneWorlds; // 0x9c8 | Schema_Builtin | Size: 0x1
			S2_PAD(0x7);
			// GlobalTypes::CNetworkUtlVectorBase< GlobalTypes::CUtlSymbolLarge > m_vecCSSClasses; // 0x9d0 | Schema_Atomic | Size: 0x18
			char  m_vecCSSClasses[0x18]; // 0x9d0 | Schema_Atomic | Size: 0x18
			bool m_bOpaque; // 0x9e8 | Schema_Builtin | Size: 0x1
			bool m_bNoDepth; // 0x9e9 | Schema_Builtin | Size: 0x1
			bool m_bVisibleWhenParentNoDraw; // 0x9ea | Schema_Builtin | Size: 0x1
			bool m_bRenderBackface; // 0x9eb | Schema_Builtin | Size: 0x1
			bool m_bUseOffScreenIndicator; // 0x9ec | Schema_Builtin | Size: 0x1
			bool m_bExcludeFromSaveGames; // 0x9ed | Schema_Builtin | Size: 0x1
			bool m_bGrabbable; // 0x9ee | Schema_Builtin | Size: 0x1
			bool m_bOnlyRenderToTexture; // 0x9ef | Schema_Builtin | Size: 0x1
			bool m_bDisableMipGen; // 0x9f0 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			int32_t m_nExplicitImageLayout; // 0x9f4 | Schema_Builtin | Size: 0x4
		};
		static_assert(offsetof(CS2::server::CPointClientUIWorldPanel, m_bIgnoreInput) == 0x9A0, "m_bIgnoreInput in CPointClientUIWorldPanel should be at offset 0x9A0");
		static_assert(offsetof(CS2::server::CPointClientUIWorldPanel, m_bLit) == 0x9A1, "m_bLit in CPointClientUIWorldPanel should be at offset 0x9A1");
		static_assert(offsetof(CS2::server::CPointClientUIWorldPanel, m_bFollowPlayerAcrossTeleport) == 0x9A2, "m_bFollowPlayerAcrossTeleport in CPointClientUIWorldPanel should be at offset 0x9A2");
		static_assert(offsetof(CS2::server::CPointClientUIWorldPanel, m_flWidth) == 0x9A4, "m_flWidth in CPointClientUIWorldPanel should be at offset 0x9A4");
		static_assert(offsetof(CS2::server::CPointClientUIWorldPanel, m_flHeight) == 0x9A8, "m_flHeight in CPointClientUIWorldPanel should be at offset 0x9A8");
		static_assert(offsetof(CS2::server::CPointClientUIWorldPanel, m_flDPI) == 0x9AC, "m_flDPI in CPointClientUIWorldPanel should be at offset 0x9AC");
		static_assert(offsetof(CS2::server::CPointClientUIWorldPanel, m_flInteractDistance) == 0x9B0, "m_flInteractDistance in CPointClientUIWorldPanel should be at offset 0x9B0");
		static_assert(offsetof(CS2::server::CPointClientUIWorldPanel, m_flDepthOffset) == 0x9B4, "m_flDepthOffset in CPointClientUIWorldPanel should be at offset 0x9B4");
		static_assert(offsetof(CS2::server::CPointClientUIWorldPanel, m_unOwnerContext) == 0x9B8, "m_unOwnerContext in CPointClientUIWorldPanel should be at offset 0x9B8");
		static_assert(offsetof(CS2::server::CPointClientUIWorldPanel, m_unHorizontalAlign) == 0x9BC, "m_unHorizontalAlign in CPointClientUIWorldPanel should be at offset 0x9BC");
		static_assert(offsetof(CS2::server::CPointClientUIWorldPanel, m_unVerticalAlign) == 0x9C0, "m_unVerticalAlign in CPointClientUIWorldPanel should be at offset 0x9C0");
		static_assert(offsetof(CS2::server::CPointClientUIWorldPanel, m_unOrientation) == 0x9C4, "m_unOrientation in CPointClientUIWorldPanel should be at offset 0x9C4");
		static_assert(offsetof(CS2::server::CPointClientUIWorldPanel, m_bAllowInteractionFromAllSceneWorlds) == 0x9C8, "m_bAllowInteractionFromAllSceneWorlds in CPointClientUIWorldPanel should be at offset 0x9C8");
		static_assert(offsetof(CS2::server::CPointClientUIWorldPanel, m_vecCSSClasses) == 0x9D0, "m_vecCSSClasses in CPointClientUIWorldPanel should be at offset 0x9D0");
		static_assert(offsetof(CS2::server::CPointClientUIWorldPanel, m_bOpaque) == 0x9E8, "m_bOpaque in CPointClientUIWorldPanel should be at offset 0x9E8");
		static_assert(offsetof(CS2::server::CPointClientUIWorldPanel, m_bNoDepth) == 0x9E9, "m_bNoDepth in CPointClientUIWorldPanel should be at offset 0x9E9");
		static_assert(offsetof(CS2::server::CPointClientUIWorldPanel, m_bVisibleWhenParentNoDraw) == 0x9EA, "m_bVisibleWhenParentNoDraw in CPointClientUIWorldPanel should be at offset 0x9EA");
		static_assert(offsetof(CS2::server::CPointClientUIWorldPanel, m_bRenderBackface) == 0x9EB, "m_bRenderBackface in CPointClientUIWorldPanel should be at offset 0x9EB");
		static_assert(offsetof(CS2::server::CPointClientUIWorldPanel, m_bUseOffScreenIndicator) == 0x9EC, "m_bUseOffScreenIndicator in CPointClientUIWorldPanel should be at offset 0x9EC");
		static_assert(offsetof(CS2::server::CPointClientUIWorldPanel, m_bExcludeFromSaveGames) == 0x9ED, "m_bExcludeFromSaveGames in CPointClientUIWorldPanel should be at offset 0x9ED");
		static_assert(offsetof(CS2::server::CPointClientUIWorldPanel, m_bGrabbable) == 0x9EE, "m_bGrabbable in CPointClientUIWorldPanel should be at offset 0x9EE");
		static_assert(offsetof(CS2::server::CPointClientUIWorldPanel, m_bOnlyRenderToTexture) == 0x9EF, "m_bOnlyRenderToTexture in CPointClientUIWorldPanel should be at offset 0x9EF");
		static_assert(offsetof(CS2::server::CPointClientUIWorldPanel, m_bDisableMipGen) == 0x9F0, "m_bDisableMipGen in CPointClientUIWorldPanel should be at offset 0x9F0");
		static_assert(offsetof(CS2::server::CPointClientUIWorldPanel, m_nExplicitImageLayout) == 0x9F4, "m_nExplicitImageLayout in CPointClientUIWorldPanel should be at offset 0x9F4");
		static_assert(sizeof(CS2::server::CPointClientUIWorldPanel) == 0x9F8, "CPointClientUIWorldPanel size should be 0x9F8");
	}
}
