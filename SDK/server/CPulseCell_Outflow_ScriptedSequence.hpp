// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>

#include <SDK/pulse_runtime_lib/CPulseCell_BaseYieldingInflow.hpp>
#include <SDK/server/PulseScriptedSequenceData_t.hpp>
#include <SDK/pulse_runtime_lib/CPulse_ResumePoint.hpp>



namespace CS2 {
	namespace server {
		class CPulseCell_Outflow_ScriptedSequence : public CS2::pulse_runtime_lib::CPulseCell_BaseYieldingInflow {
		public:
			GlobalTypes::CUtlString m_szSyncGroup; // 0x48 | Schema_Atomic | Size: 0x8
			int32_t m_nExpectedNumSequencesInSyncGroup; // 0x50 | Schema_Builtin | Size: 0x4
			bool m_bEnsureOnNavmeshOnFinish; // 0x54 | Schema_Builtin | Size: 0x1
			bool m_bDontTeleportAtEnd; // 0x55 | Schema_Builtin | Size: 0x1
			bool m_bDisallowInterrupts; // 0x56 | Schema_Builtin | Size: 0x1
			S2_PAD(0x1);
			server::PulseScriptedSequenceData_t m_scriptedSequenceDataMain; // 0x58 | Schema_DeclaredClass | Size: 0x38
			// GlobalTypes::CUtlVector< server::PulseScriptedSequenceData_t > m_vecAdditionalActors; // 0x90 | Schema_Atomic | Size: 0x18
			char  m_vecAdditionalActors[0x18]; // 0x90 | Schema_Atomic | Size: 0x18
			pulse_runtime_lib::CPulse_ResumePoint m_OnFinished; // 0xa8 | Schema_DeclaredClass | Size: 0x48
			pulse_runtime_lib::CPulse_ResumePoint m_OnCanceled; // 0xf0 | Schema_DeclaredClass | Size: 0x48
			// server::CUtlVector< pulse_runtime_lib::CPulse_OutflowConnection > m_Triggers; // 0x138 | Schema_Atomic | Size: 0x18
			char  m_Triggers[0x18]; // 0x138 | Schema_Atomic | Size: 0x18
		};
		static_assert(offsetof(CS2::server::CPulseCell_Outflow_ScriptedSequence, m_szSyncGroup) == 0x48, "m_szSyncGroup in CPulseCell_Outflow_ScriptedSequence should be at offset 0x48");
		static_assert(offsetof(CS2::server::CPulseCell_Outflow_ScriptedSequence, m_nExpectedNumSequencesInSyncGroup) == 0x50, "m_nExpectedNumSequencesInSyncGroup in CPulseCell_Outflow_ScriptedSequence should be at offset 0x50");
		static_assert(offsetof(CS2::server::CPulseCell_Outflow_ScriptedSequence, m_bEnsureOnNavmeshOnFinish) == 0x54, "m_bEnsureOnNavmeshOnFinish in CPulseCell_Outflow_ScriptedSequence should be at offset 0x54");
		static_assert(offsetof(CS2::server::CPulseCell_Outflow_ScriptedSequence, m_bDontTeleportAtEnd) == 0x55, "m_bDontTeleportAtEnd in CPulseCell_Outflow_ScriptedSequence should be at offset 0x55");
		static_assert(offsetof(CS2::server::CPulseCell_Outflow_ScriptedSequence, m_bDisallowInterrupts) == 0x56, "m_bDisallowInterrupts in CPulseCell_Outflow_ScriptedSequence should be at offset 0x56");
		static_assert(offsetof(CS2::server::CPulseCell_Outflow_ScriptedSequence, m_scriptedSequenceDataMain) == 0x58, "m_scriptedSequenceDataMain in CPulseCell_Outflow_ScriptedSequence should be at offset 0x58");
		static_assert(offsetof(CS2::server::CPulseCell_Outflow_ScriptedSequence, m_vecAdditionalActors) == 0x90, "m_vecAdditionalActors in CPulseCell_Outflow_ScriptedSequence should be at offset 0x90");
		static_assert(offsetof(CS2::server::CPulseCell_Outflow_ScriptedSequence, m_OnFinished) == 0xA8, "m_OnFinished in CPulseCell_Outflow_ScriptedSequence should be at offset 0xA8");
		static_assert(offsetof(CS2::server::CPulseCell_Outflow_ScriptedSequence, m_OnCanceled) == 0xF0, "m_OnCanceled in CPulseCell_Outflow_ScriptedSequence should be at offset 0xF0");
		static_assert(offsetof(CS2::server::CPulseCell_Outflow_ScriptedSequence, m_Triggers) == 0x138, "m_Triggers in CPulseCell_Outflow_ScriptedSequence should be at offset 0x138");
		static_assert(sizeof(CS2::server::CPulseCell_Outflow_ScriptedSequence) == 0x150, "CPulseCell_Outflow_ScriptedSequence size should be 0x150");
	}
}
