// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>

#include <SDK/server/CLogicalEntity.hpp>
#include <SDK/entity2/CEntityIOOutput.hpp>



namespace CS2 {
	namespace server {
		class CPhysConstraint : public CS2::server::CLogicalEntity {
		public:
			S2_PAD(0x8);
			GlobalTypes::CUtlSymbolLarge m_nameAttach1; // 0x4f8 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlSymbolLarge m_nameAttach2; // 0x500 | Schema_Atomic | Size: 0x8
			// server::CHandle< server::CBaseEntity > m_hAttach1; // 0x508 | Schema_Atomic | Size: 0x4
			char  m_hAttach1[0x4]; // 0x508 | Schema_Atomic | Size: 0x4
			// server::CHandle< server::CBaseEntity > m_hAttach2; // 0x50c | Schema_Atomic | Size: 0x4
			char  m_hAttach2[0x4]; // 0x50c | Schema_Atomic | Size: 0x4
			GlobalTypes::CUtlSymbolLarge m_nameAttachment1; // 0x510 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlSymbolLarge m_nameAttachment2; // 0x518 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlSymbolLarge m_breakSound; // 0x520 | Schema_Atomic | Size: 0x8
			float32 m_forceLimit; // 0x528 | Schema_Builtin | Size: 0x4
			float32 m_torqueLimit; // 0x52c | Schema_Builtin | Size: 0x4
			float32 m_minTeleportDistance; // 0x530 | Schema_Builtin | Size: 0x4
			bool m_bSnapObjectPositions; // 0x534 | Schema_Builtin | Size: 0x1
			bool m_bTreatEntity1AsInfiniteMass; // 0x535 | Schema_Builtin | Size: 0x1
			S2_PAD(0x2);
			entity2::CEntityIOOutput m_OnBreak; // 0x538 | Schema_DeclaredClass | Size: 0x28
		};
		static_assert(offsetof(CS2::server::CPhysConstraint, m_nameAttach1) == 0x4F8, "m_nameAttach1 in CPhysConstraint should be at offset 0x4F8");
		static_assert(offsetof(CS2::server::CPhysConstraint, m_nameAttach2) == 0x500, "m_nameAttach2 in CPhysConstraint should be at offset 0x500");
		static_assert(offsetof(CS2::server::CPhysConstraint, m_hAttach1) == 0x508, "m_hAttach1 in CPhysConstraint should be at offset 0x508");
		static_assert(offsetof(CS2::server::CPhysConstraint, m_hAttach2) == 0x50C, "m_hAttach2 in CPhysConstraint should be at offset 0x50C");
		static_assert(offsetof(CS2::server::CPhysConstraint, m_nameAttachment1) == 0x510, "m_nameAttachment1 in CPhysConstraint should be at offset 0x510");
		static_assert(offsetof(CS2::server::CPhysConstraint, m_nameAttachment2) == 0x518, "m_nameAttachment2 in CPhysConstraint should be at offset 0x518");
		static_assert(offsetof(CS2::server::CPhysConstraint, m_breakSound) == 0x520, "m_breakSound in CPhysConstraint should be at offset 0x520");
		static_assert(offsetof(CS2::server::CPhysConstraint, m_forceLimit) == 0x528, "m_forceLimit in CPhysConstraint should be at offset 0x528");
		static_assert(offsetof(CS2::server::CPhysConstraint, m_torqueLimit) == 0x52C, "m_torqueLimit in CPhysConstraint should be at offset 0x52C");
		static_assert(offsetof(CS2::server::CPhysConstraint, m_minTeleportDistance) == 0x530, "m_minTeleportDistance in CPhysConstraint should be at offset 0x530");
		static_assert(offsetof(CS2::server::CPhysConstraint, m_bSnapObjectPositions) == 0x534, "m_bSnapObjectPositions in CPhysConstraint should be at offset 0x534");
		static_assert(offsetof(CS2::server::CPhysConstraint, m_bTreatEntity1AsInfiniteMass) == 0x535, "m_bTreatEntity1AsInfiniteMass in CPhysConstraint should be at offset 0x535");
		static_assert(offsetof(CS2::server::CPhysConstraint, m_OnBreak) == 0x538, "m_OnBreak in CPhysConstraint should be at offset 0x538");
		static_assert(sizeof(CS2::server::CPhysConstraint) == 0x560, "CPhysConstraint size should be 0x560");
	}
}
