// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>

#include <SDK/server/CBaseToggle.hpp>
#include <SDK/server/locksound_t.hpp>
#include <SDK/server/FuncDoorSpawnPos_t.hpp>
#include <SDK/entity2/CEntityIOOutput.hpp>



namespace CS2 {
	namespace server {
		class CBaseDoor : public CS2::server::CBaseToggle {
		public:
			S2_PAD(0x10);
			GlobalTypes::QAngle m_angMoveEntitySpace; // 0x880 | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vecMoveDirParentSpace; // 0x88c | Schema_Atomic | Size: 0xc
			server::locksound_t m_ls; // 0x898 | Schema_DeclaredClass | Size: 0x20
			bool m_bForceClosed; // 0x8b8 | Schema_Builtin | Size: 0x1
			bool m_bDoorGroup; // 0x8b9 | Schema_Builtin | Size: 0x1
			bool m_bLocked; // 0x8ba | Schema_Builtin | Size: 0x1
			bool m_bIgnoreDebris; // 0x8bb | Schema_Builtin | Size: 0x1
			bool m_bNoNPCs; // 0x8bc | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			server::FuncDoorSpawnPos_t m_eSpawnPosition; // 0x8c0 | Schema_DeclaredEnum | Size: 0x4
			float32 m_flBlockDamage; // 0x8c4 | Schema_Builtin | Size: 0x4
			GlobalTypes::CUtlSymbolLarge m_NoiseMoving; // 0x8c8 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlSymbolLarge m_NoiseArrived; // 0x8d0 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlSymbolLarge m_NoiseMovingClosed; // 0x8d8 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlSymbolLarge m_NoiseArrivedClosed; // 0x8e0 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlSymbolLarge m_ChainTarget; // 0x8e8 | Schema_Atomic | Size: 0x8
			entity2::CEntityIOOutput m_OnBlockedClosing; // 0x8f0 | Schema_DeclaredClass | Size: 0x28
			entity2::CEntityIOOutput m_OnBlockedOpening; // 0x918 | Schema_DeclaredClass | Size: 0x28
			entity2::CEntityIOOutput m_OnUnblockedClosing; // 0x940 | Schema_DeclaredClass | Size: 0x28
			entity2::CEntityIOOutput m_OnUnblockedOpening; // 0x968 | Schema_DeclaredClass | Size: 0x28
			entity2::CEntityIOOutput m_OnFullyClosed; // 0x990 | Schema_DeclaredClass | Size: 0x28
			entity2::CEntityIOOutput m_OnFullyOpen; // 0x9b8 | Schema_DeclaredClass | Size: 0x28
			entity2::CEntityIOOutput m_OnClose; // 0x9e0 | Schema_DeclaredClass | Size: 0x28
			entity2::CEntityIOOutput m_OnOpen; // 0xa08 | Schema_DeclaredClass | Size: 0x28
			entity2::CEntityIOOutput m_OnLockedUse; // 0xa30 | Schema_DeclaredClass | Size: 0x28
			bool m_bLoopMoveSound; // 0xa58 | Schema_Builtin | Size: 0x1
			S2_PAD(0x1f);
			bool m_bCreateNavObstacle; // 0xa78 | Schema_Builtin | Size: 0x1
			bool m_isChaining; // 0xa79 | Schema_Builtin | Size: 0x1
			bool m_bIsUsable; // 0xa7a | Schema_Builtin | Size: 0x1
			S2_PAD(0x5); // End padding
		};
		static_assert(offsetof(CS2::server::CBaseDoor, m_angMoveEntitySpace) == 0x880, "m_angMoveEntitySpace in CBaseDoor should be at offset 0x880");
		static_assert(offsetof(CS2::server::CBaseDoor, m_vecMoveDirParentSpace) == 0x88C, "m_vecMoveDirParentSpace in CBaseDoor should be at offset 0x88C");
		static_assert(offsetof(CS2::server::CBaseDoor, m_ls) == 0x898, "m_ls in CBaseDoor should be at offset 0x898");
		static_assert(offsetof(CS2::server::CBaseDoor, m_bForceClosed) == 0x8B8, "m_bForceClosed in CBaseDoor should be at offset 0x8B8");
		static_assert(offsetof(CS2::server::CBaseDoor, m_bDoorGroup) == 0x8B9, "m_bDoorGroup in CBaseDoor should be at offset 0x8B9");
		static_assert(offsetof(CS2::server::CBaseDoor, m_bLocked) == 0x8BA, "m_bLocked in CBaseDoor should be at offset 0x8BA");
		static_assert(offsetof(CS2::server::CBaseDoor, m_bIgnoreDebris) == 0x8BB, "m_bIgnoreDebris in CBaseDoor should be at offset 0x8BB");
		static_assert(offsetof(CS2::server::CBaseDoor, m_bNoNPCs) == 0x8BC, "m_bNoNPCs in CBaseDoor should be at offset 0x8BC");
		static_assert(offsetof(CS2::server::CBaseDoor, m_eSpawnPosition) == 0x8C0, "m_eSpawnPosition in CBaseDoor should be at offset 0x8C0");
		static_assert(offsetof(CS2::server::CBaseDoor, m_flBlockDamage) == 0x8C4, "m_flBlockDamage in CBaseDoor should be at offset 0x8C4");
		static_assert(offsetof(CS2::server::CBaseDoor, m_NoiseMoving) == 0x8C8, "m_NoiseMoving in CBaseDoor should be at offset 0x8C8");
		static_assert(offsetof(CS2::server::CBaseDoor, m_NoiseArrived) == 0x8D0, "m_NoiseArrived in CBaseDoor should be at offset 0x8D0");
		static_assert(offsetof(CS2::server::CBaseDoor, m_NoiseMovingClosed) == 0x8D8, "m_NoiseMovingClosed in CBaseDoor should be at offset 0x8D8");
		static_assert(offsetof(CS2::server::CBaseDoor, m_NoiseArrivedClosed) == 0x8E0, "m_NoiseArrivedClosed in CBaseDoor should be at offset 0x8E0");
		static_assert(offsetof(CS2::server::CBaseDoor, m_ChainTarget) == 0x8E8, "m_ChainTarget in CBaseDoor should be at offset 0x8E8");
		static_assert(offsetof(CS2::server::CBaseDoor, m_OnBlockedClosing) == 0x8F0, "m_OnBlockedClosing in CBaseDoor should be at offset 0x8F0");
		static_assert(offsetof(CS2::server::CBaseDoor, m_OnBlockedOpening) == 0x918, "m_OnBlockedOpening in CBaseDoor should be at offset 0x918");
		static_assert(offsetof(CS2::server::CBaseDoor, m_OnUnblockedClosing) == 0x940, "m_OnUnblockedClosing in CBaseDoor should be at offset 0x940");
		static_assert(offsetof(CS2::server::CBaseDoor, m_OnUnblockedOpening) == 0x968, "m_OnUnblockedOpening in CBaseDoor should be at offset 0x968");
		static_assert(offsetof(CS2::server::CBaseDoor, m_OnFullyClosed) == 0x990, "m_OnFullyClosed in CBaseDoor should be at offset 0x990");
		static_assert(offsetof(CS2::server::CBaseDoor, m_OnFullyOpen) == 0x9B8, "m_OnFullyOpen in CBaseDoor should be at offset 0x9B8");
		static_assert(offsetof(CS2::server::CBaseDoor, m_OnClose) == 0x9E0, "m_OnClose in CBaseDoor should be at offset 0x9E0");
		static_assert(offsetof(CS2::server::CBaseDoor, m_OnOpen) == 0xA08, "m_OnOpen in CBaseDoor should be at offset 0xA08");
		static_assert(offsetof(CS2::server::CBaseDoor, m_OnLockedUse) == 0xA30, "m_OnLockedUse in CBaseDoor should be at offset 0xA30");
		static_assert(offsetof(CS2::server::CBaseDoor, m_bLoopMoveSound) == 0xA58, "m_bLoopMoveSound in CBaseDoor should be at offset 0xA58");
		static_assert(offsetof(CS2::server::CBaseDoor, m_bCreateNavObstacle) == 0xA78, "m_bCreateNavObstacle in CBaseDoor should be at offset 0xA78");
		static_assert(offsetof(CS2::server::CBaseDoor, m_isChaining) == 0xA79, "m_isChaining in CBaseDoor should be at offset 0xA79");
		static_assert(offsetof(CS2::server::CBaseDoor, m_bIsUsable) == 0xA7A, "m_bIsUsable in CBaseDoor should be at offset 0xA7A");
		static_assert(sizeof(CS2::server::CBaseDoor) == 0xA80, "CBaseDoor size should be 0xA80");
	}
}
