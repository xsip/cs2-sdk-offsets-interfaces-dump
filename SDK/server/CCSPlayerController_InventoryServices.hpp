// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/client/CPlayerControllerComponent.hpp>
#include <SDK/client/MedalRank_t.hpp>



namespace CS2 {
	namespace client {
		class ServerAuthoritativeWeaponSlot_t;
	}
}


using namespace GlobalTypes;
namespace CS2 {
	namespace server {
		class CCSPlayerController_InventoryServices : public CS2::client::CPlayerControllerComponent {
		public:
			uint16_t m_unMusicID; // 0x40 | Schema_Builtin | Size: 0x2
			S2_PAD(0x2);
			client::MedalRank_t m_rank[6]; // 0x44 | Schema_FixedArray | Size: 0x120
			int32_t m_nPersonaDataPublicLevel; // 0x5c | Schema_Builtin | Size: 0x4
			int32_t m_nPersonaDataPublicCommendsLeader; // 0x60 | Schema_Builtin | Size: 0x4
			int32_t m_nPersonaDataPublicCommendsTeacher; // 0x64 | Schema_Builtin | Size: 0x4
			int32_t m_nPersonaDataPublicCommendsFriendly; // 0x68 | Schema_Builtin | Size: 0x4
			int32_t m_nPersonaDataXpTrailLevel; // 0x6c | Schema_Builtin | Size: 0x4
			S2_PAD(0xed8);
			uint32_t m_unEquippedPlayerSprayIDs[1]; // 0xf48 | Schema_FixedArray | Size: 0x4
			S2_PAD(0x4);
			uint64_t m_unCurrentLoadoutHash; // 0xf50 | Schema_Builtin | Size: 0x8
			GlobalTypes::CUtlVectorEmbeddedNetworkVar<client::ServerAuthoritativeWeaponSlot_t> m_vecServerAuthoritativeWeaponSlots; // 0xf58 | Schema_Atomic | Size: 0x88
			// char  m_vecServerAuthoritativeWeaponSlots[0x88]; // 0xf58 | Schema_Atomic | Size: 0x88
		};
		static_assert(offsetof(CS2::server::CCSPlayerController_InventoryServices, m_unMusicID) == 0x40, "m_unMusicID in CCSPlayerController_InventoryServices should be at offset 0x40");
		static_assert(offsetof(CS2::server::CCSPlayerController_InventoryServices, m_rank) == 0x44, "m_rank in CCSPlayerController_InventoryServices should be at offset 0x44");
		static_assert(offsetof(CS2::server::CCSPlayerController_InventoryServices, m_nPersonaDataPublicLevel) == 0x5C, "m_nPersonaDataPublicLevel in CCSPlayerController_InventoryServices should be at offset 0x5C");
		static_assert(offsetof(CS2::server::CCSPlayerController_InventoryServices, m_nPersonaDataPublicCommendsLeader) == 0x60, "m_nPersonaDataPublicCommendsLeader in CCSPlayerController_InventoryServices should be at offset 0x60");
		static_assert(offsetof(CS2::server::CCSPlayerController_InventoryServices, m_nPersonaDataPublicCommendsTeacher) == 0x64, "m_nPersonaDataPublicCommendsTeacher in CCSPlayerController_InventoryServices should be at offset 0x64");
		static_assert(offsetof(CS2::server::CCSPlayerController_InventoryServices, m_nPersonaDataPublicCommendsFriendly) == 0x68, "m_nPersonaDataPublicCommendsFriendly in CCSPlayerController_InventoryServices should be at offset 0x68");
		static_assert(offsetof(CS2::server::CCSPlayerController_InventoryServices, m_nPersonaDataXpTrailLevel) == 0x6C, "m_nPersonaDataXpTrailLevel in CCSPlayerController_InventoryServices should be at offset 0x6C");
		static_assert(offsetof(CS2::server::CCSPlayerController_InventoryServices, m_unEquippedPlayerSprayIDs) == 0xF48, "m_unEquippedPlayerSprayIDs in CCSPlayerController_InventoryServices should be at offset 0xF48");
		static_assert(offsetof(CS2::server::CCSPlayerController_InventoryServices, m_unCurrentLoadoutHash) == 0xF50, "m_unCurrentLoadoutHash in CCSPlayerController_InventoryServices should be at offset 0xF50");
		static_assert(offsetof(CS2::server::CCSPlayerController_InventoryServices, m_vecServerAuthoritativeWeaponSlots) == 0xF58, "m_vecServerAuthoritativeWeaponSlots in CCSPlayerController_InventoryServices should be at offset 0xF58");
		static_assert(sizeof(CS2::server::CCSPlayerController_InventoryServices) == 0xFE0, "CCSPlayerController_InventoryServices size should be 0xFE0");
	}
}
