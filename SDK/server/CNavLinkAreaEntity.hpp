// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/server/CPointEntity.hpp>
#include <SDK/entity2/CEntityIOOutput.hpp>



namespace CS2 {
	namespace server {
		class CBaseFilter;
	}
}


using namespace GlobalTypes;
namespace CS2 {
	namespace server {
		class CNavLinkAreaEntity : public CS2::server::CPointEntity {
		public:
			float32 m_flWidth; // 0x4f0 | Schema_Builtin | Size: 0x4
			GlobalTypes::VectorWS m_vLocatorOffset; // 0x4f4 | Schema_Atomic | Size: 0xc
			GlobalTypes::QAngle m_qLocatorAnglesOffset; // 0x500 | Schema_Atomic | Size: 0xc
			S2_PAD(0x4);
			GlobalTypes::CUtlSymbolLarge m_strMovementForward; // 0x510 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlSymbolLarge m_strMovementReverse; // 0x518 | Schema_Atomic | Size: 0x8
			S2_PAD(0x30);
			bool m_bEnabled; // 0x550 | Schema_Builtin | Size: 0x1
			bool m_bAllowCrossMovableConnections; // 0x551 | Schema_Builtin | Size: 0x1
			S2_PAD(0x6);
			GlobalTypes::CUtlSymbolLarge m_strFilterName; // 0x558 | Schema_Atomic | Size: 0x8
			GlobalTypes::CHandle<server::CBaseFilter> m_hFilter; // 0x560 | Schema_Atomic | Size: 0x4
			// char  m_hFilter[0x4]; // 0x560 | Schema_Atomic | Size: 0x4
			S2_PAD(0x4);
			entity2::CEntityIOOutput m_OnNavLinkStart; // 0x568 | Schema_DeclaredClass | Size: 0x28
			entity2::CEntityIOOutput m_OnNavLinkFinish; // 0x590 | Schema_DeclaredClass | Size: 0x28
			bool m_bIsTerminus; // 0x5b8 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			int32_t m_nSplits; // 0x5bc | Schema_Builtin | Size: 0x4
		};
		static_assert(offsetof(CS2::server::CNavLinkAreaEntity, m_flWidth) == 0x4F0, "m_flWidth in CNavLinkAreaEntity should be at offset 0x4F0");
		static_assert(offsetof(CS2::server::CNavLinkAreaEntity, m_vLocatorOffset) == 0x4F4, "m_vLocatorOffset in CNavLinkAreaEntity should be at offset 0x4F4");
		static_assert(offsetof(CS2::server::CNavLinkAreaEntity, m_qLocatorAnglesOffset) == 0x500, "m_qLocatorAnglesOffset in CNavLinkAreaEntity should be at offset 0x500");
		static_assert(offsetof(CS2::server::CNavLinkAreaEntity, m_strMovementForward) == 0x510, "m_strMovementForward in CNavLinkAreaEntity should be at offset 0x510");
		static_assert(offsetof(CS2::server::CNavLinkAreaEntity, m_strMovementReverse) == 0x518, "m_strMovementReverse in CNavLinkAreaEntity should be at offset 0x518");
		static_assert(offsetof(CS2::server::CNavLinkAreaEntity, m_bEnabled) == 0x550, "m_bEnabled in CNavLinkAreaEntity should be at offset 0x550");
		static_assert(offsetof(CS2::server::CNavLinkAreaEntity, m_bAllowCrossMovableConnections) == 0x551, "m_bAllowCrossMovableConnections in CNavLinkAreaEntity should be at offset 0x551");
		static_assert(offsetof(CS2::server::CNavLinkAreaEntity, m_strFilterName) == 0x558, "m_strFilterName in CNavLinkAreaEntity should be at offset 0x558");
		static_assert(offsetof(CS2::server::CNavLinkAreaEntity, m_hFilter) == 0x560, "m_hFilter in CNavLinkAreaEntity should be at offset 0x560");
		static_assert(offsetof(CS2::server::CNavLinkAreaEntity, m_OnNavLinkStart) == 0x568, "m_OnNavLinkStart in CNavLinkAreaEntity should be at offset 0x568");
		static_assert(offsetof(CS2::server::CNavLinkAreaEntity, m_OnNavLinkFinish) == 0x590, "m_OnNavLinkFinish in CNavLinkAreaEntity should be at offset 0x590");
		static_assert(offsetof(CS2::server::CNavLinkAreaEntity, m_bIsTerminus) == 0x5B8, "m_bIsTerminus in CNavLinkAreaEntity should be at offset 0x5B8");
		static_assert(offsetof(CS2::server::CNavLinkAreaEntity, m_nSplits) == 0x5BC, "m_nSplits in CNavLinkAreaEntity should be at offset 0x5BC");
		static_assert(sizeof(CS2::server::CNavLinkAreaEntity) == 0x5C0, "CNavLinkAreaEntity size should be 0x5C0");
	}
}
