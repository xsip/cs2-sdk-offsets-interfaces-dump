// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/server/CPointEntity.hpp>



namespace CS2 {
	namespace server {
		class CMapInfo : public CS2::server::CPointEntity {
		public:
			int32_t m_iBuyingStatus; // 0x4f0 | Schema_Builtin | Size: 0x4
			float32 m_flBombRadius; // 0x4f4 | Schema_Builtin | Size: 0x4
			int32_t m_iPetPopulation; // 0x4f8 | Schema_Builtin | Size: 0x4
			bool m_bUseNormalSpawnsForDM; // 0x4fc | Schema_Builtin | Size: 0x1
			bool m_bDisableAutoGeneratedDMSpawns; // 0x4fd | Schema_Builtin | Size: 0x1
			S2_PAD(0x2);
			float32 m_flBotMaxVisionDistance; // 0x500 | Schema_Builtin | Size: 0x4
			int32_t m_iHostageCount; // 0x504 | Schema_Builtin | Size: 0x4
			bool m_bFadePlayerVisibilityFarZ; // 0x508 | Schema_Builtin | Size: 0x1
			bool m_bRainTraceToSkyEnabled; // 0x509 | Schema_Builtin | Size: 0x1
			S2_PAD(0x2);
			float32 m_flEnvRainStrength; // 0x50c | Schema_Builtin | Size: 0x4
			float32 m_flEnvPuddleRippleStrength; // 0x510 | Schema_Builtin | Size: 0x4
			float32 m_flEnvPuddleRippleDirection; // 0x514 | Schema_Builtin | Size: 0x4
			float32 m_flEnvWetnessCoverage; // 0x518 | Schema_Builtin | Size: 0x4
			float32 m_flEnvWetnessDryingAmount; // 0x51c | Schema_Builtin | Size: 0x4
		};
		static_assert(offsetof(CS2::server::CMapInfo, m_iBuyingStatus) == 0x4F0, "m_iBuyingStatus in CMapInfo should be at offset 0x4F0");
		static_assert(offsetof(CS2::server::CMapInfo, m_flBombRadius) == 0x4F4, "m_flBombRadius in CMapInfo should be at offset 0x4F4");
		static_assert(offsetof(CS2::server::CMapInfo, m_iPetPopulation) == 0x4F8, "m_iPetPopulation in CMapInfo should be at offset 0x4F8");
		static_assert(offsetof(CS2::server::CMapInfo, m_bUseNormalSpawnsForDM) == 0x4FC, "m_bUseNormalSpawnsForDM in CMapInfo should be at offset 0x4FC");
		static_assert(offsetof(CS2::server::CMapInfo, m_bDisableAutoGeneratedDMSpawns) == 0x4FD, "m_bDisableAutoGeneratedDMSpawns in CMapInfo should be at offset 0x4FD");
		static_assert(offsetof(CS2::server::CMapInfo, m_flBotMaxVisionDistance) == 0x500, "m_flBotMaxVisionDistance in CMapInfo should be at offset 0x500");
		static_assert(offsetof(CS2::server::CMapInfo, m_iHostageCount) == 0x504, "m_iHostageCount in CMapInfo should be at offset 0x504");
		static_assert(offsetof(CS2::server::CMapInfo, m_bFadePlayerVisibilityFarZ) == 0x508, "m_bFadePlayerVisibilityFarZ in CMapInfo should be at offset 0x508");
		static_assert(offsetof(CS2::server::CMapInfo, m_bRainTraceToSkyEnabled) == 0x509, "m_bRainTraceToSkyEnabled in CMapInfo should be at offset 0x509");
		static_assert(offsetof(CS2::server::CMapInfo, m_flEnvRainStrength) == 0x50C, "m_flEnvRainStrength in CMapInfo should be at offset 0x50C");
		static_assert(offsetof(CS2::server::CMapInfo, m_flEnvPuddleRippleStrength) == 0x510, "m_flEnvPuddleRippleStrength in CMapInfo should be at offset 0x510");
		static_assert(offsetof(CS2::server::CMapInfo, m_flEnvPuddleRippleDirection) == 0x514, "m_flEnvPuddleRippleDirection in CMapInfo should be at offset 0x514");
		static_assert(offsetof(CS2::server::CMapInfo, m_flEnvWetnessCoverage) == 0x518, "m_flEnvWetnessCoverage in CMapInfo should be at offset 0x518");
		static_assert(offsetof(CS2::server::CMapInfo, m_flEnvWetnessDryingAmount) == 0x51C, "m_flEnvWetnessDryingAmount in CMapInfo should be at offset 0x51C");
		static_assert(sizeof(CS2::server::CMapInfo) == 0x520, "CMapInfo size should be 0x520");
	}
}
