// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>

#include <SDK/server/CBaseModelEntity.hpp>
#include <SDK/entity2/GameTime_t.hpp>
#include <SDK/entity2/CEntityIOOutput.hpp>



namespace CS2 {
	namespace server {
		class CBarnLight : public CS2::server::CBaseModelEntity {
		public:
			bool m_bEnabled; // 0x7f0 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			int32_t m_nColorMode; // 0x7f4 | Schema_Builtin | Size: 0x4
			GlobalTypes::Color m_Color; // 0x7f8 | Schema_Atomic | Size: 0x4
			float32 m_flColorTemperature; // 0x7fc | Schema_Builtin | Size: 0x4
			float32 m_flBrightness; // 0x800 | Schema_Builtin | Size: 0x4
			float32 m_flBrightnessScale; // 0x804 | Schema_Builtin | Size: 0x4
			int32_t m_nDirectLight; // 0x808 | Schema_Builtin | Size: 0x4
			int32_t m_nBakedShadowIndex; // 0x80c | Schema_Builtin | Size: 0x4
			int32_t m_nLightPathUniqueId; // 0x810 | Schema_Builtin | Size: 0x4
			int32_t m_nLightMapUniqueId; // 0x814 | Schema_Builtin | Size: 0x4
			int32_t m_nLuminaireShape; // 0x818 | Schema_Builtin | Size: 0x4
			float32 m_flLuminaireSize; // 0x81c | Schema_Builtin | Size: 0x4
			float32 m_flLuminaireAnisotropy; // 0x820 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4);
			GlobalTypes::CUtlString m_LightStyleString; // 0x828 | Schema_Atomic | Size: 0x8
			entity2::GameTime_t m_flLightStyleStartTime; // 0x830 | Schema_DeclaredClass | Size: 0x4
			S2_PAD(0x4);
			// GlobalTypes::CNetworkUtlVectorBase< GlobalTypes::CUtlString > m_QueuedLightStyleStrings; // 0x838 | Schema_Atomic | Size: 0x18
			char  m_QueuedLightStyleStrings[0x18]; // 0x838 | Schema_Atomic | Size: 0x18
			// GlobalTypes::CNetworkUtlVectorBase< GlobalTypes::CUtlString > m_LightStyleEvents; // 0x850 | Schema_Atomic | Size: 0x18
			char  m_LightStyleEvents[0x18]; // 0x850 | Schema_Atomic | Size: 0x18
			// server::CNetworkUtlVectorBase< server.dll::CHandle< CBaseModelEntity > > m_LightStyleTargets; // 0x868 | Schema_Atomic | Size: 0x18
			char  m_LightStyleTargets[0x18]; // 0x868 | Schema_Atomic | Size: 0x18
			entity2::CEntityIOOutput m_StyleEvent[4]; // 0x880 | Schema_FixedArray | Size: 0x280
			// GlobalTypes::CStrongHandle< resourcesystem::InfoForResourceTypeCTextureBase > m_hLightCookie; // 0x940 | Schema_Atomic | Size: 0x8
			char  m_hLightCookie[0x8]; // 0x940 | Schema_Atomic | Size: 0x8
			float32 m_flShape; // 0x948 | Schema_Builtin | Size: 0x4
			float32 m_flSoftX; // 0x94c | Schema_Builtin | Size: 0x4
			float32 m_flSoftY; // 0x950 | Schema_Builtin | Size: 0x4
			float32 m_flSkirt; // 0x954 | Schema_Builtin | Size: 0x4
			float32 m_flSkirtNear; // 0x958 | Schema_Builtin | Size: 0x4
			GlobalTypes::Vector m_vSizeParams; // 0x95c | Schema_Atomic | Size: 0xc
			float32 m_flRange; // 0x968 | Schema_Builtin | Size: 0x4
			GlobalTypes::Vector m_vShear; // 0x96c | Schema_Atomic | Size: 0xc
			int32_t m_nBakeSpecularToCubemaps; // 0x978 | Schema_Builtin | Size: 0x4
			GlobalTypes::Vector m_vBakeSpecularToCubemapsSize; // 0x97c | Schema_Atomic | Size: 0xc
			int32_t m_nCastShadows; // 0x988 | Schema_Builtin | Size: 0x4
			int32_t m_nShadowMapSize; // 0x98c | Schema_Builtin | Size: 0x4
			int32_t m_nShadowPriority; // 0x990 | Schema_Builtin | Size: 0x4
			bool m_bContactShadow; // 0x994 | Schema_Builtin | Size: 0x1
			bool m_bForceShadowsEnabled; // 0x995 | Schema_Builtin | Size: 0x1
			S2_PAD(0x2);
			int32_t m_nBounceLight; // 0x998 | Schema_Builtin | Size: 0x4
			float32 m_flBounceScale; // 0x99c | Schema_Builtin | Size: 0x4
			float32 m_flMinRoughness; // 0x9a0 | Schema_Builtin | Size: 0x4
			GlobalTypes::Vector m_vAlternateColor; // 0x9a4 | Schema_Atomic | Size: 0xc
			float32 m_fAlternateColorBrightness; // 0x9b0 | Schema_Builtin | Size: 0x4
			int32_t m_nFog; // 0x9b4 | Schema_Builtin | Size: 0x4
			float32 m_flFogStrength; // 0x9b8 | Schema_Builtin | Size: 0x4
			int32_t m_nFogShadows; // 0x9bc | Schema_Builtin | Size: 0x4
			float32 m_flFogScale; // 0x9c0 | Schema_Builtin | Size: 0x4
			bool m_bFogMixedShadows; // 0x9c4 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			float32 m_flFadeSizeStart; // 0x9c8 | Schema_Builtin | Size: 0x4
			float32 m_flFadeSizeEnd; // 0x9cc | Schema_Builtin | Size: 0x4
			float32 m_flShadowFadeSizeStart; // 0x9d0 | Schema_Builtin | Size: 0x4
			float32 m_flShadowFadeSizeEnd; // 0x9d4 | Schema_Builtin | Size: 0x4
			bool m_bPrecomputedFieldsValid; // 0x9d8 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			GlobalTypes::Vector m_vPrecomputedBoundsMins; // 0x9dc | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vPrecomputedBoundsMaxs; // 0x9e8 | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vPrecomputedOBBOrigin; // 0x9f4 | Schema_Atomic | Size: 0xc
			GlobalTypes::QAngle m_vPrecomputedOBBAngles; // 0xa00 | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vPrecomputedOBBExtent; // 0xa0c | Schema_Atomic | Size: 0xc
			int32_t m_nPrecomputedSubFrusta; // 0xa18 | Schema_Builtin | Size: 0x4
			GlobalTypes::Vector m_vPrecomputedOBBOrigin0; // 0xa1c | Schema_Atomic | Size: 0xc
			GlobalTypes::QAngle m_vPrecomputedOBBAngles0; // 0xa28 | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vPrecomputedOBBExtent0; // 0xa34 | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vPrecomputedOBBOrigin1; // 0xa40 | Schema_Atomic | Size: 0xc
			GlobalTypes::QAngle m_vPrecomputedOBBAngles1; // 0xa4c | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vPrecomputedOBBExtent1; // 0xa58 | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vPrecomputedOBBOrigin2; // 0xa64 | Schema_Atomic | Size: 0xc
			GlobalTypes::QAngle m_vPrecomputedOBBAngles2; // 0xa70 | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vPrecomputedOBBExtent2; // 0xa7c | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vPrecomputedOBBOrigin3; // 0xa88 | Schema_Atomic | Size: 0xc
			GlobalTypes::QAngle m_vPrecomputedOBBAngles3; // 0xa94 | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vPrecomputedOBBExtent3; // 0xaa0 | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vPrecomputedOBBOrigin4; // 0xaac | Schema_Atomic | Size: 0xc
			GlobalTypes::QAngle m_vPrecomputedOBBAngles4; // 0xab8 | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vPrecomputedOBBExtent4; // 0xac4 | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vPrecomputedOBBOrigin5; // 0xad0 | Schema_Atomic | Size: 0xc
			GlobalTypes::QAngle m_vPrecomputedOBBAngles5; // 0xadc | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vPrecomputedOBBExtent5; // 0xae8 | Schema_Atomic | Size: 0xc
			bool m_bPvsModifyEntity; // 0xaf4 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			// GlobalTypes::CNetworkUtlVectorBase< uint16 > m_VisClusters; // 0xaf8 | Schema_Atomic | Size: 0x18
			char  m_VisClusters[0x18]; // 0xaf8 | Schema_Atomic | Size: 0x18
			S2_PAD(0x8); // End padding
		};
		static_assert(offsetof(CS2::server::CBarnLight, m_bEnabled) == 0x7F0, "m_bEnabled in CBarnLight should be at offset 0x7F0");
		static_assert(offsetof(CS2::server::CBarnLight, m_nColorMode) == 0x7F4, "m_nColorMode in CBarnLight should be at offset 0x7F4");
		static_assert(offsetof(CS2::server::CBarnLight, m_Color) == 0x7F8, "m_Color in CBarnLight should be at offset 0x7F8");
		static_assert(offsetof(CS2::server::CBarnLight, m_flColorTemperature) == 0x7FC, "m_flColorTemperature in CBarnLight should be at offset 0x7FC");
		static_assert(offsetof(CS2::server::CBarnLight, m_flBrightness) == 0x800, "m_flBrightness in CBarnLight should be at offset 0x800");
		static_assert(offsetof(CS2::server::CBarnLight, m_flBrightnessScale) == 0x804, "m_flBrightnessScale in CBarnLight should be at offset 0x804");
		static_assert(offsetof(CS2::server::CBarnLight, m_nDirectLight) == 0x808, "m_nDirectLight in CBarnLight should be at offset 0x808");
		static_assert(offsetof(CS2::server::CBarnLight, m_nBakedShadowIndex) == 0x80C, "m_nBakedShadowIndex in CBarnLight should be at offset 0x80C");
		static_assert(offsetof(CS2::server::CBarnLight, m_nLightPathUniqueId) == 0x810, "m_nLightPathUniqueId in CBarnLight should be at offset 0x810");
		static_assert(offsetof(CS2::server::CBarnLight, m_nLightMapUniqueId) == 0x814, "m_nLightMapUniqueId in CBarnLight should be at offset 0x814");
		static_assert(offsetof(CS2::server::CBarnLight, m_nLuminaireShape) == 0x818, "m_nLuminaireShape in CBarnLight should be at offset 0x818");
		static_assert(offsetof(CS2::server::CBarnLight, m_flLuminaireSize) == 0x81C, "m_flLuminaireSize in CBarnLight should be at offset 0x81C");
		static_assert(offsetof(CS2::server::CBarnLight, m_flLuminaireAnisotropy) == 0x820, "m_flLuminaireAnisotropy in CBarnLight should be at offset 0x820");
		static_assert(offsetof(CS2::server::CBarnLight, m_LightStyleString) == 0x828, "m_LightStyleString in CBarnLight should be at offset 0x828");
		static_assert(offsetof(CS2::server::CBarnLight, m_flLightStyleStartTime) == 0x830, "m_flLightStyleStartTime in CBarnLight should be at offset 0x830");
		static_assert(offsetof(CS2::server::CBarnLight, m_QueuedLightStyleStrings) == 0x838, "m_QueuedLightStyleStrings in CBarnLight should be at offset 0x838");
		static_assert(offsetof(CS2::server::CBarnLight, m_LightStyleEvents) == 0x850, "m_LightStyleEvents in CBarnLight should be at offset 0x850");
		static_assert(offsetof(CS2::server::CBarnLight, m_LightStyleTargets) == 0x868, "m_LightStyleTargets in CBarnLight should be at offset 0x868");
		static_assert(offsetof(CS2::server::CBarnLight, m_StyleEvent) == 0x880, "m_StyleEvent in CBarnLight should be at offset 0x880");
		static_assert(offsetof(CS2::server::CBarnLight, m_hLightCookie) == 0x940, "m_hLightCookie in CBarnLight should be at offset 0x940");
		static_assert(offsetof(CS2::server::CBarnLight, m_flShape) == 0x948, "m_flShape in CBarnLight should be at offset 0x948");
		static_assert(offsetof(CS2::server::CBarnLight, m_flSoftX) == 0x94C, "m_flSoftX in CBarnLight should be at offset 0x94C");
		static_assert(offsetof(CS2::server::CBarnLight, m_flSoftY) == 0x950, "m_flSoftY in CBarnLight should be at offset 0x950");
		static_assert(offsetof(CS2::server::CBarnLight, m_flSkirt) == 0x954, "m_flSkirt in CBarnLight should be at offset 0x954");
		static_assert(offsetof(CS2::server::CBarnLight, m_flSkirtNear) == 0x958, "m_flSkirtNear in CBarnLight should be at offset 0x958");
		static_assert(offsetof(CS2::server::CBarnLight, m_vSizeParams) == 0x95C, "m_vSizeParams in CBarnLight should be at offset 0x95C");
		static_assert(offsetof(CS2::server::CBarnLight, m_flRange) == 0x968, "m_flRange in CBarnLight should be at offset 0x968");
		static_assert(offsetof(CS2::server::CBarnLight, m_vShear) == 0x96C, "m_vShear in CBarnLight should be at offset 0x96C");
		static_assert(offsetof(CS2::server::CBarnLight, m_nBakeSpecularToCubemaps) == 0x978, "m_nBakeSpecularToCubemaps in CBarnLight should be at offset 0x978");
		static_assert(offsetof(CS2::server::CBarnLight, m_vBakeSpecularToCubemapsSize) == 0x97C, "m_vBakeSpecularToCubemapsSize in CBarnLight should be at offset 0x97C");
		static_assert(offsetof(CS2::server::CBarnLight, m_nCastShadows) == 0x988, "m_nCastShadows in CBarnLight should be at offset 0x988");
		static_assert(offsetof(CS2::server::CBarnLight, m_nShadowMapSize) == 0x98C, "m_nShadowMapSize in CBarnLight should be at offset 0x98C");
		static_assert(offsetof(CS2::server::CBarnLight, m_nShadowPriority) == 0x990, "m_nShadowPriority in CBarnLight should be at offset 0x990");
		static_assert(offsetof(CS2::server::CBarnLight, m_bContactShadow) == 0x994, "m_bContactShadow in CBarnLight should be at offset 0x994");
		static_assert(offsetof(CS2::server::CBarnLight, m_bForceShadowsEnabled) == 0x995, "m_bForceShadowsEnabled in CBarnLight should be at offset 0x995");
		static_assert(offsetof(CS2::server::CBarnLight, m_nBounceLight) == 0x998, "m_nBounceLight in CBarnLight should be at offset 0x998");
		static_assert(offsetof(CS2::server::CBarnLight, m_flBounceScale) == 0x99C, "m_flBounceScale in CBarnLight should be at offset 0x99C");
		static_assert(offsetof(CS2::server::CBarnLight, m_flMinRoughness) == 0x9A0, "m_flMinRoughness in CBarnLight should be at offset 0x9A0");
		static_assert(offsetof(CS2::server::CBarnLight, m_vAlternateColor) == 0x9A4, "m_vAlternateColor in CBarnLight should be at offset 0x9A4");
		static_assert(offsetof(CS2::server::CBarnLight, m_fAlternateColorBrightness) == 0x9B0, "m_fAlternateColorBrightness in CBarnLight should be at offset 0x9B0");
		static_assert(offsetof(CS2::server::CBarnLight, m_nFog) == 0x9B4, "m_nFog in CBarnLight should be at offset 0x9B4");
		static_assert(offsetof(CS2::server::CBarnLight, m_flFogStrength) == 0x9B8, "m_flFogStrength in CBarnLight should be at offset 0x9B8");
		static_assert(offsetof(CS2::server::CBarnLight, m_nFogShadows) == 0x9BC, "m_nFogShadows in CBarnLight should be at offset 0x9BC");
		static_assert(offsetof(CS2::server::CBarnLight, m_flFogScale) == 0x9C0, "m_flFogScale in CBarnLight should be at offset 0x9C0");
		static_assert(offsetof(CS2::server::CBarnLight, m_bFogMixedShadows) == 0x9C4, "m_bFogMixedShadows in CBarnLight should be at offset 0x9C4");
		static_assert(offsetof(CS2::server::CBarnLight, m_flFadeSizeStart) == 0x9C8, "m_flFadeSizeStart in CBarnLight should be at offset 0x9C8");
		static_assert(offsetof(CS2::server::CBarnLight, m_flFadeSizeEnd) == 0x9CC, "m_flFadeSizeEnd in CBarnLight should be at offset 0x9CC");
		static_assert(offsetof(CS2::server::CBarnLight, m_flShadowFadeSizeStart) == 0x9D0, "m_flShadowFadeSizeStart in CBarnLight should be at offset 0x9D0");
		static_assert(offsetof(CS2::server::CBarnLight, m_flShadowFadeSizeEnd) == 0x9D4, "m_flShadowFadeSizeEnd in CBarnLight should be at offset 0x9D4");
		static_assert(offsetof(CS2::server::CBarnLight, m_bPrecomputedFieldsValid) == 0x9D8, "m_bPrecomputedFieldsValid in CBarnLight should be at offset 0x9D8");
		static_assert(offsetof(CS2::server::CBarnLight, m_vPrecomputedBoundsMins) == 0x9DC, "m_vPrecomputedBoundsMins in CBarnLight should be at offset 0x9DC");
		static_assert(offsetof(CS2::server::CBarnLight, m_vPrecomputedBoundsMaxs) == 0x9E8, "m_vPrecomputedBoundsMaxs in CBarnLight should be at offset 0x9E8");
		static_assert(offsetof(CS2::server::CBarnLight, m_vPrecomputedOBBOrigin) == 0x9F4, "m_vPrecomputedOBBOrigin in CBarnLight should be at offset 0x9F4");
		static_assert(offsetof(CS2::server::CBarnLight, m_vPrecomputedOBBAngles) == 0xA00, "m_vPrecomputedOBBAngles in CBarnLight should be at offset 0xA00");
		static_assert(offsetof(CS2::server::CBarnLight, m_vPrecomputedOBBExtent) == 0xA0C, "m_vPrecomputedOBBExtent in CBarnLight should be at offset 0xA0C");
		static_assert(offsetof(CS2::server::CBarnLight, m_nPrecomputedSubFrusta) == 0xA18, "m_nPrecomputedSubFrusta in CBarnLight should be at offset 0xA18");
		static_assert(offsetof(CS2::server::CBarnLight, m_vPrecomputedOBBOrigin0) == 0xA1C, "m_vPrecomputedOBBOrigin0 in CBarnLight should be at offset 0xA1C");
		static_assert(offsetof(CS2::server::CBarnLight, m_vPrecomputedOBBAngles0) == 0xA28, "m_vPrecomputedOBBAngles0 in CBarnLight should be at offset 0xA28");
		static_assert(offsetof(CS2::server::CBarnLight, m_vPrecomputedOBBExtent0) == 0xA34, "m_vPrecomputedOBBExtent0 in CBarnLight should be at offset 0xA34");
		static_assert(offsetof(CS2::server::CBarnLight, m_vPrecomputedOBBOrigin1) == 0xA40, "m_vPrecomputedOBBOrigin1 in CBarnLight should be at offset 0xA40");
		static_assert(offsetof(CS2::server::CBarnLight, m_vPrecomputedOBBAngles1) == 0xA4C, "m_vPrecomputedOBBAngles1 in CBarnLight should be at offset 0xA4C");
		static_assert(offsetof(CS2::server::CBarnLight, m_vPrecomputedOBBExtent1) == 0xA58, "m_vPrecomputedOBBExtent1 in CBarnLight should be at offset 0xA58");
		static_assert(offsetof(CS2::server::CBarnLight, m_vPrecomputedOBBOrigin2) == 0xA64, "m_vPrecomputedOBBOrigin2 in CBarnLight should be at offset 0xA64");
		static_assert(offsetof(CS2::server::CBarnLight, m_vPrecomputedOBBAngles2) == 0xA70, "m_vPrecomputedOBBAngles2 in CBarnLight should be at offset 0xA70");
		static_assert(offsetof(CS2::server::CBarnLight, m_vPrecomputedOBBExtent2) == 0xA7C, "m_vPrecomputedOBBExtent2 in CBarnLight should be at offset 0xA7C");
		static_assert(offsetof(CS2::server::CBarnLight, m_vPrecomputedOBBOrigin3) == 0xA88, "m_vPrecomputedOBBOrigin3 in CBarnLight should be at offset 0xA88");
		static_assert(offsetof(CS2::server::CBarnLight, m_vPrecomputedOBBAngles3) == 0xA94, "m_vPrecomputedOBBAngles3 in CBarnLight should be at offset 0xA94");
		static_assert(offsetof(CS2::server::CBarnLight, m_vPrecomputedOBBExtent3) == 0xAA0, "m_vPrecomputedOBBExtent3 in CBarnLight should be at offset 0xAA0");
		static_assert(offsetof(CS2::server::CBarnLight, m_vPrecomputedOBBOrigin4) == 0xAAC, "m_vPrecomputedOBBOrigin4 in CBarnLight should be at offset 0xAAC");
		static_assert(offsetof(CS2::server::CBarnLight, m_vPrecomputedOBBAngles4) == 0xAB8, "m_vPrecomputedOBBAngles4 in CBarnLight should be at offset 0xAB8");
		static_assert(offsetof(CS2::server::CBarnLight, m_vPrecomputedOBBExtent4) == 0xAC4, "m_vPrecomputedOBBExtent4 in CBarnLight should be at offset 0xAC4");
		static_assert(offsetof(CS2::server::CBarnLight, m_vPrecomputedOBBOrigin5) == 0xAD0, "m_vPrecomputedOBBOrigin5 in CBarnLight should be at offset 0xAD0");
		static_assert(offsetof(CS2::server::CBarnLight, m_vPrecomputedOBBAngles5) == 0xADC, "m_vPrecomputedOBBAngles5 in CBarnLight should be at offset 0xADC");
		static_assert(offsetof(CS2::server::CBarnLight, m_vPrecomputedOBBExtent5) == 0xAE8, "m_vPrecomputedOBBExtent5 in CBarnLight should be at offset 0xAE8");
		static_assert(offsetof(CS2::server::CBarnLight, m_bPvsModifyEntity) == 0xAF4, "m_bPvsModifyEntity in CBarnLight should be at offset 0xAF4");
		static_assert(offsetof(CS2::server::CBarnLight, m_VisClusters) == 0xAF8, "m_VisClusters in CBarnLight should be at offset 0xAF8");
		static_assert(sizeof(CS2::server::CBarnLight) == 0xB18, "CBarnLight size should be 0xB18");
	}
}
