// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>

#include <SDK/server/CBaseTrigger.hpp>



namespace CS2 {
	namespace server {
		class CTriggerPhysics : public CS2::server::CBaseTrigger {
		public:
			S2_PAD(0x10);
			float32 m_gravityScale; // 0x9b8 | Schema_Builtin | Size: 0x4
			float32 m_linearLimit; // 0x9bc | Schema_Builtin | Size: 0x4
			float32 m_linearDamping; // 0x9c0 | Schema_Builtin | Size: 0x4
			float32 m_angularLimit; // 0x9c4 | Schema_Builtin | Size: 0x4
			float32 m_angularDamping; // 0x9c8 | Schema_Builtin | Size: 0x4
			float32 m_linearForce; // 0x9cc | Schema_Builtin | Size: 0x4
			float32 m_flFrequency; // 0x9d0 | Schema_Builtin | Size: 0x4
			float32 m_flDampingRatio; // 0x9d4 | Schema_Builtin | Size: 0x4
			GlobalTypes::Vector m_vecLinearForcePointAt; // 0x9d8 | Schema_Atomic | Size: 0xc
			bool m_bCollapseToForcePoint; // 0x9e4 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			GlobalTypes::Vector m_vecLinearForcePointAtWorld; // 0x9e8 | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vecLinearForceDirection; // 0x9f4 | Schema_Atomic | Size: 0xc
			bool m_bConvertToDebrisWhenPossible; // 0xa00 | Schema_Builtin | Size: 0x1
			S2_PAD(0x7); // End padding
		};
		static_assert(offsetof(CS2::server::CTriggerPhysics, m_gravityScale) == 0x9B8, "m_gravityScale in CTriggerPhysics should be at offset 0x9B8");
		static_assert(offsetof(CS2::server::CTriggerPhysics, m_linearLimit) == 0x9BC, "m_linearLimit in CTriggerPhysics should be at offset 0x9BC");
		static_assert(offsetof(CS2::server::CTriggerPhysics, m_linearDamping) == 0x9C0, "m_linearDamping in CTriggerPhysics should be at offset 0x9C0");
		static_assert(offsetof(CS2::server::CTriggerPhysics, m_angularLimit) == 0x9C4, "m_angularLimit in CTriggerPhysics should be at offset 0x9C4");
		static_assert(offsetof(CS2::server::CTriggerPhysics, m_angularDamping) == 0x9C8, "m_angularDamping in CTriggerPhysics should be at offset 0x9C8");
		static_assert(offsetof(CS2::server::CTriggerPhysics, m_linearForce) == 0x9CC, "m_linearForce in CTriggerPhysics should be at offset 0x9CC");
		static_assert(offsetof(CS2::server::CTriggerPhysics, m_flFrequency) == 0x9D0, "m_flFrequency in CTriggerPhysics should be at offset 0x9D0");
		static_assert(offsetof(CS2::server::CTriggerPhysics, m_flDampingRatio) == 0x9D4, "m_flDampingRatio in CTriggerPhysics should be at offset 0x9D4");
		static_assert(offsetof(CS2::server::CTriggerPhysics, m_vecLinearForcePointAt) == 0x9D8, "m_vecLinearForcePointAt in CTriggerPhysics should be at offset 0x9D8");
		static_assert(offsetof(CS2::server::CTriggerPhysics, m_bCollapseToForcePoint) == 0x9E4, "m_bCollapseToForcePoint in CTriggerPhysics should be at offset 0x9E4");
		static_assert(offsetof(CS2::server::CTriggerPhysics, m_vecLinearForcePointAtWorld) == 0x9E8, "m_vecLinearForcePointAtWorld in CTriggerPhysics should be at offset 0x9E8");
		static_assert(offsetof(CS2::server::CTriggerPhysics, m_vecLinearForceDirection) == 0x9F4, "m_vecLinearForceDirection in CTriggerPhysics should be at offset 0x9F4");
		static_assert(offsetof(CS2::server::CTriggerPhysics, m_bConvertToDebrisWhenPossible) == 0xA00, "m_bConvertToDebrisWhenPossible in CTriggerPhysics should be at offset 0xA00");
		static_assert(sizeof(CS2::server::CTriggerPhysics) == 0xA08, "CTriggerPhysics size should be 0xA08");
	}
}
