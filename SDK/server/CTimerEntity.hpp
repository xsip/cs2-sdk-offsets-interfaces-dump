// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/server/CLogicalEntity.hpp>
#include <SDK/entity2/CEntityIOOutput.hpp>



namespace CS2 {
	namespace server {
		class CTimerEntity : public CS2::server::CLogicalEntity {
		public:
			entity2::CEntityIOOutput m_OnTimer; // 0x4f0 | Schema_DeclaredClass | Size: 0x28
			entity2::CEntityIOOutput m_OnTimerHigh; // 0x518 | Schema_DeclaredClass | Size: 0x28
			entity2::CEntityIOOutput m_OnTimerLow; // 0x540 | Schema_DeclaredClass | Size: 0x28
			int32_t m_iDisabled; // 0x568 | Schema_Builtin | Size: 0x4
			float32 m_flInitialDelay; // 0x56c | Schema_Builtin | Size: 0x4
			float32 m_flRefireTime; // 0x570 | Schema_Builtin | Size: 0x4
			bool m_bUpDownState; // 0x574 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			int32_t m_iUseRandomTime; // 0x578 | Schema_Builtin | Size: 0x4
			bool m_bPauseAfterFiring; // 0x57c | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			float32 m_flLowerRandomBound; // 0x580 | Schema_Builtin | Size: 0x4
			float32 m_flUpperRandomBound; // 0x584 | Schema_Builtin | Size: 0x4
			float32 m_flRemainingTime; // 0x588 | Schema_Builtin | Size: 0x4
			bool m_bPaused; // 0x58c | Schema_Builtin | Size: 0x1
			S2_PAD(0x3); // End padding
		};
		static_assert(offsetof(CS2::server::CTimerEntity, m_OnTimer) == 0x4F0, "m_OnTimer in CTimerEntity should be at offset 0x4F0");
		static_assert(offsetof(CS2::server::CTimerEntity, m_OnTimerHigh) == 0x518, "m_OnTimerHigh in CTimerEntity should be at offset 0x518");
		static_assert(offsetof(CS2::server::CTimerEntity, m_OnTimerLow) == 0x540, "m_OnTimerLow in CTimerEntity should be at offset 0x540");
		static_assert(offsetof(CS2::server::CTimerEntity, m_iDisabled) == 0x568, "m_iDisabled in CTimerEntity should be at offset 0x568");
		static_assert(offsetof(CS2::server::CTimerEntity, m_flInitialDelay) == 0x56C, "m_flInitialDelay in CTimerEntity should be at offset 0x56C");
		static_assert(offsetof(CS2::server::CTimerEntity, m_flRefireTime) == 0x570, "m_flRefireTime in CTimerEntity should be at offset 0x570");
		static_assert(offsetof(CS2::server::CTimerEntity, m_bUpDownState) == 0x574, "m_bUpDownState in CTimerEntity should be at offset 0x574");
		static_assert(offsetof(CS2::server::CTimerEntity, m_iUseRandomTime) == 0x578, "m_iUseRandomTime in CTimerEntity should be at offset 0x578");
		static_assert(offsetof(CS2::server::CTimerEntity, m_bPauseAfterFiring) == 0x57C, "m_bPauseAfterFiring in CTimerEntity should be at offset 0x57C");
		static_assert(offsetof(CS2::server::CTimerEntity, m_flLowerRandomBound) == 0x580, "m_flLowerRandomBound in CTimerEntity should be at offset 0x580");
		static_assert(offsetof(CS2::server::CTimerEntity, m_flUpperRandomBound) == 0x584, "m_flUpperRandomBound in CTimerEntity should be at offset 0x584");
		static_assert(offsetof(CS2::server::CTimerEntity, m_flRemainingTime) == 0x588, "m_flRemainingTime in CTimerEntity should be at offset 0x588");
		static_assert(offsetof(CS2::server::CTimerEntity, m_bPaused) == 0x58C, "m_bPaused in CTimerEntity should be at offset 0x58C");
		static_assert(sizeof(CS2::server::CTimerEntity) == 0x590, "CTimerEntity size should be 0x590");
	}
}
