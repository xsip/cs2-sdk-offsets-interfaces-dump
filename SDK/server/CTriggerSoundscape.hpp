// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>

#include <SDK/server/CBaseTrigger.hpp>



namespace CS2 {
	namespace server {
		class CTriggerSoundscape : public CS2::server::CBaseTrigger {
		public:
			// server::CHandle< server::CEnvSoundscapeTriggerable > m_hSoundscape; // 0x9a8 | Schema_Atomic | Size: 0x4
			char  m_hSoundscape[0x4]; // 0x9a8 | Schema_Atomic | Size: 0x4
			S2_PAD(0x4);
			GlobalTypes::CUtlSymbolLarge m_SoundscapeName; // 0x9b0 | Schema_Atomic | Size: 0x8
			// server::CUtlVector< server.dll::CHandle< CBasePlayerPawn > > m_spectators; // 0x9b8 | Schema_Atomic | Size: 0x18
			char  m_spectators[0x18]; // 0x9b8 | Schema_Atomic | Size: 0x18
		};
		static_assert(offsetof(CS2::server::CTriggerSoundscape, m_hSoundscape) == 0x9A8, "m_hSoundscape in CTriggerSoundscape should be at offset 0x9A8");
		static_assert(offsetof(CS2::server::CTriggerSoundscape, m_SoundscapeName) == 0x9B0, "m_SoundscapeName in CTriggerSoundscape should be at offset 0x9B0");
		static_assert(offsetof(CS2::server::CTriggerSoundscape, m_spectators) == 0x9B8, "m_spectators in CTriggerSoundscape should be at offset 0x9B8");
		static_assert(sizeof(CS2::server::CTriggerSoundscape) == 0x9D0, "CTriggerSoundscape size should be 0x9D0");
	}
}
