// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>

#include <SDK/server/CCSPlayerPawnBase.hpp>
#include <SDK/client/loadout_slot_t.hpp>
#include <SDK/entity2/GameTime_t.hpp>
#include <SDK/entity2/GameTick_t.hpp>
#include <SDK/server/CEconItemView.hpp>
#include <SDK/server/EntitySpottedState_t.hpp>
#include <SDK/client/CSPlayerBlockingUseAction_t.hpp>



namespace CS2 {
	namespace server {
		class CCSPlayer_BulletServices;
		class CCSPlayer_HostageServices;
		class CCSPlayer_BuyServices;
		class CCSPlayer_ActionTrackingServices;
		class CCSPlayer_RadioServices;
		class CCSPlayer_DamageReactServices;
		class CCSBot;
	}
}
namespace CS2 {
	namespace server {
		class CCSPlayerPawn : public CS2::server::CCSPlayerPawnBase {
		public:
			S2_PAD(0x8);
			server::CCSPlayer_BulletServices* m_pBulletServices; // 0xed0 | Schema_Ptr | Size: 0x8
			server::CCSPlayer_HostageServices* m_pHostageServices; // 0xed8 | Schema_Ptr | Size: 0x8
			server::CCSPlayer_BuyServices* m_pBuyServices; // 0xee0 | Schema_Ptr | Size: 0x8
			server::CCSPlayer_ActionTrackingServices* m_pActionTrackingServices; // 0xee8 | Schema_Ptr | Size: 0x8
			server::CCSPlayer_RadioServices* m_pRadioServices; // 0xef0 | Schema_Ptr | Size: 0x8
			server::CCSPlayer_DamageReactServices* m_pDamageReactServices; // 0xef8 | Schema_Ptr | Size: 0x8
			uint16_t m_nCharacterDefIndex; // 0xf00 | Schema_Builtin | Size: 0x2
			bool m_bHasFemaleVoice; // 0xf02 | Schema_Builtin | Size: 0x1
			S2_PAD(0x5);
			GlobalTypes::CUtlString m_strVOPrefix; // 0xf08 | Schema_Atomic | Size: 0x8
			char m_szLastPlaceName[18]; // 0xf10 | Schema_FixedArray | Size: 0x12
			S2_PAD(0xae);
			bool m_bInHostageResetZone; // 0xfd0 | Schema_Builtin | Size: 0x1
			bool m_bInBuyZone; // 0xfd1 | Schema_Builtin | Size: 0x1
			S2_PAD(0x6);
			// server::CUtlVector< server.dll::CHandle< CBaseEntity > > m_TouchingBuyZones; // 0xfd8 | Schema_Atomic | Size: 0x18
			char  m_TouchingBuyZones[0x18]; // 0xfd8 | Schema_Atomic | Size: 0x18
			bool m_bWasInBuyZone; // 0xff0 | Schema_Builtin | Size: 0x1
			bool m_bInHostageRescueZone; // 0xff1 | Schema_Builtin | Size: 0x1
			bool m_bInBombZone; // 0xff2 | Schema_Builtin | Size: 0x1
			bool m_bWasInHostageRescueZone; // 0xff3 | Schema_Builtin | Size: 0x1
			int32_t m_iRetakesOffering; // 0xff4 | Schema_Builtin | Size: 0x4
			int32_t m_iRetakesOfferingCard; // 0xff8 | Schema_Builtin | Size: 0x4
			bool m_bRetakesHasDefuseKit; // 0xffc | Schema_Builtin | Size: 0x1
			bool m_bRetakesMVPLastRound; // 0xffd | Schema_Builtin | Size: 0x1
			S2_PAD(0x2);
			int32_t m_iRetakesMVPBoostItem; // 0x1000 | Schema_Builtin | Size: 0x4
			client::loadout_slot_t m_RetakesMVPBoostExtraUtility; // 0x1004 | Schema_DeclaredEnum | Size: 0x4
			entity2::GameTime_t m_flHealthShotBoostExpirationTime; // 0x1008 | Schema_DeclaredClass | Size: 0x4
			float32 m_flLandingTimeSeconds; // 0x100c | Schema_Builtin | Size: 0x4
			GlobalTypes::QAngle m_aimPunchAngle; // 0x1010 | Schema_Atomic | Size: 0xc
			GlobalTypes::QAngle m_aimPunchAngleVel; // 0x101c | Schema_Atomic | Size: 0xc
			entity2::GameTick_t m_aimPunchTickBase; // 0x1028 | Schema_DeclaredClass | Size: 0x4
			float32 m_aimPunchTickFraction; // 0x102c | Schema_Builtin | Size: 0x4
			// GlobalTypes::CUtlVector< GlobalTypes::QAngle > m_aimPunchCache; // 0x1030 | Schema_Atomic | Size: 0x18
			char  m_aimPunchCache[0x18]; // 0x1030 | Schema_Atomic | Size: 0x18
			bool m_bIsBuyMenuOpen; // 0x1048 | Schema_Builtin | Size: 0x1
			S2_PAD(0x6a7);
			GlobalTypes::CTransform m_xLastHeadBoneTransform; // 0x16f0 | Schema_Atomic | Size: 0x20
			bool m_bLastHeadBoneTransformIsValid; // 0x1710 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			entity2::GameTime_t m_lastLandTime; // 0x1714 | Schema_DeclaredClass | Size: 0x4
			bool m_bOnGroundLastTick; // 0x1718 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			int32_t m_iPlayerLocked; // 0x171c | Schema_Builtin | Size: 0x4
			S2_PAD(0x4);
			entity2::GameTime_t m_flTimeOfLastInjury; // 0x1724 | Schema_DeclaredClass | Size: 0x4
			entity2::GameTime_t m_flNextSprayDecalTime; // 0x1728 | Schema_DeclaredClass | Size: 0x4
			bool m_bNextSprayDecalTimeExpedited; // 0x172c | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			int32_t m_nRagdollDamageBone; // 0x1730 | Schema_Builtin | Size: 0x4
			GlobalTypes::Vector m_vRagdollDamageForce; // 0x1734 | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vRagdollDamagePosition; // 0x1740 | Schema_Atomic | Size: 0xc
			char m_szRagdollDamageWeaponName[64]; // 0x174c | Schema_FixedArray | Size: 0x40
			bool m_bRagdollDamageHeadshot; // 0x178c | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			GlobalTypes::Vector m_vRagdollServerOrigin; // 0x1790 | Schema_Atomic | Size: 0xc
			S2_PAD(0x4);
			server::CEconItemView m_EconGloves; // 0x17a0 | Schema_DeclaredClass | Size: 0x2a8
			uint8_t m_nEconGlovesChanged; // 0x1a48 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			GlobalTypes::QAngle m_qDeathEyeAngles; // 0x1a4c | Schema_Atomic | Size: 0xc
			bool m_bSkipOneHeadConstraintUpdate; // 0x1a58 | Schema_Builtin | Size: 0x1
			bool m_bLeftHanded; // 0x1a59 | Schema_Builtin | Size: 0x1
			S2_PAD(0x2);
			entity2::GameTime_t m_fSwitchedHandednessTime; // 0x1a5c | Schema_DeclaredClass | Size: 0x4
			float32 m_flViewmodelOffsetX; // 0x1a60 | Schema_Builtin | Size: 0x4
			float32 m_flViewmodelOffsetY; // 0x1a64 | Schema_Builtin | Size: 0x4
			float32 m_flViewmodelOffsetZ; // 0x1a68 | Schema_Builtin | Size: 0x4
			float32 m_flViewmodelFOV; // 0x1a6c | Schema_Builtin | Size: 0x4
			bool m_bIsWalking; // 0x1a70 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			float32 m_fLastGivenDefuserTime; // 0x1a74 | Schema_Builtin | Size: 0x4
			float32 m_fLastGivenBombTime; // 0x1a78 | Schema_Builtin | Size: 0x4
			float32 m_flDealtDamageToEnemyMostRecentTimestamp; // 0x1a7c | Schema_Builtin | Size: 0x4
			uint32_t m_iDisplayHistoryBits; // 0x1a80 | Schema_Builtin | Size: 0x4
			float32 m_flLastAttackedTeammate; // 0x1a84 | Schema_Builtin | Size: 0x4
			entity2::GameTime_t m_allowAutoFollowTime; // 0x1a88 | Schema_DeclaredClass | Size: 0x4
			bool m_bResetArmorNextSpawn; // 0x1a8c | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			GlobalTypes::CEntityIndex m_nLastKillerIndex; // 0x1a90 | Schema_Atomic | Size: 0x4
			S2_PAD(0x4);
			server::EntitySpottedState_t m_entitySpottedState; // 0x1a98 | Schema_DeclaredClass | Size: 0x18
			int32_t m_nSpotRules; // 0x1ab0 | Schema_Builtin | Size: 0x4
			bool m_bIsScoped; // 0x1ab4 | Schema_Builtin | Size: 0x1
			bool m_bResumeZoom; // 0x1ab5 | Schema_Builtin | Size: 0x1
			bool m_bIsDefusing; // 0x1ab6 | Schema_Builtin | Size: 0x1
			bool m_bIsGrabbingHostage; // 0x1ab7 | Schema_Builtin | Size: 0x1
			client::CSPlayerBlockingUseAction_t m_iBlockingUseActionInProgress; // 0x1ab8 | Schema_DeclaredEnum | Size: 0x4
			entity2::GameTime_t m_flEmitSoundTime; // 0x1abc | Schema_DeclaredClass | Size: 0x4
			bool m_bInNoDefuseArea; // 0x1ac0 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			GlobalTypes::CEntityIndex m_iBombSiteIndex; // 0x1ac4 | Schema_Atomic | Size: 0x4
			int32_t m_nWhichBombZone; // 0x1ac8 | Schema_Builtin | Size: 0x4
			bool m_bInBombZoneTrigger; // 0x1acc | Schema_Builtin | Size: 0x1
			bool m_bWasInBombZoneTrigger; // 0x1acd | Schema_Builtin | Size: 0x1
			S2_PAD(0x2);
			int32_t m_iShotsFired; // 0x1ad0 | Schema_Builtin | Size: 0x4
			float32 m_flFlinchStack; // 0x1ad4 | Schema_Builtin | Size: 0x4
			float32 m_flVelocityModifier; // 0x1ad8 | Schema_Builtin | Size: 0x4
			float32 m_flHitHeading; // 0x1adc | Schema_Builtin | Size: 0x4
			int32_t m_nHitBodyPart; // 0x1ae0 | Schema_Builtin | Size: 0x4
			GlobalTypes::Vector m_vecTotalBulletForce; // 0x1ae4 | Schema_Atomic | Size: 0xc
			bool m_bWaitForNoAttack; // 0x1af0 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			float32 m_ignoreLadderJumpTime; // 0x1af4 | Schema_Builtin | Size: 0x4
			bool m_bKilledByHeadshot; // 0x1af8 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			int32_t m_LastHitBox; // 0x1afc | Schema_Builtin | Size: 0x4
			int32_t m_LastHealth; // 0x1b00 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4);
			server::CCSBot* m_pBot; // 0x1b08 | Schema_Ptr | Size: 0x8
			bool m_bBotAllowActive; // 0x1b10 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			GlobalTypes::QAngle m_thirdPersonHeading; // 0x1b14 | Schema_Atomic | Size: 0xc
			float32 m_flSlopeDropOffset; // 0x1b20 | Schema_Builtin | Size: 0x4
			float32 m_flSlopeDropHeight; // 0x1b24 | Schema_Builtin | Size: 0x4
			GlobalTypes::Vector m_vHeadConstraintOffset; // 0x1b28 | Schema_Atomic | Size: 0xc
			int32_t m_nLastPickupPriority; // 0x1b34 | Schema_Builtin | Size: 0x4
			float32 m_flLastPickupPriorityTime; // 0x1b38 | Schema_Builtin | Size: 0x4
			int32_t m_ArmorValue; // 0x1b3c | Schema_Builtin | Size: 0x4
			uint16_t m_unCurrentEquipmentValue; // 0x1b40 | Schema_Builtin | Size: 0x2
			uint16_t m_unRoundStartEquipmentValue; // 0x1b42 | Schema_Builtin | Size: 0x2
			uint16_t m_unFreezetimeEndEquipmentValue; // 0x1b44 | Schema_Builtin | Size: 0x2
			S2_PAD(0x2);
			int32_t m_iLastWeaponFireUsercmd; // 0x1b48 | Schema_Builtin | Size: 0x4
			bool m_bIsSpawning; // 0x1b4c | Schema_Builtin | Size: 0x1
			S2_PAD(0xb);
			int32_t m_iDeathFlags; // 0x1b58 | Schema_Builtin | Size: 0x4
			bool m_bHasDeathInfo; // 0x1b5c | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			float32 m_flDeathInfoTime; // 0x1b60 | Schema_Builtin | Size: 0x4
			GlobalTypes::Vector m_vecDeathInfoOrigin; // 0x1b64 | Schema_Atomic | Size: 0xc
			uint32_t m_vecPlayerPatchEconIndices[5]; // 0x1b70 | Schema_FixedArray | Size: 0x14
			GlobalTypes::Color m_GunGameImmunityColor; // 0x1b84 | Schema_Atomic | Size: 0x4
			entity2::GameTime_t m_grenadeParameterStashTime; // 0x1b88 | Schema_DeclaredClass | Size: 0x4
			bool m_bGrenadeParametersStashed; // 0x1b8c | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			GlobalTypes::QAngle m_angStashedShootAngles; // 0x1b90 | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vecStashedGrenadeThrowPosition; // 0x1b9c | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vecStashedVelocity; // 0x1ba8 | Schema_Atomic | Size: 0xc
			GlobalTypes::QAngle m_angShootAngleHistory[2]; // 0x1bb4 | Schema_FixedArray | Size: 0x18
			GlobalTypes::Vector m_vecThrowPositionHistory[2]; // 0x1bcc | Schema_FixedArray | Size: 0x18
			GlobalTypes::Vector m_vecVelocityHistory[2]; // 0x1be4 | Schema_FixedArray | Size: 0x18
			S2_PAD(0x4);
			// server::CUtlVectorEmbeddedNetworkVar< server::PredictedDamageTag_t > m_PredictedDamageTags; // 0x1c00 | Schema_Atomic | Size: 0x68
			char  m_PredictedDamageTags[0x68]; // 0x1c00 | Schema_Atomic | Size: 0x68
			int32_t m_nHighestAppliedDamageTagTick; // 0x1c68 | Schema_Builtin | Size: 0x4
			bool m_bCommittingSuicideOnTeamChange; // 0x1c6c | Schema_Builtin | Size: 0x1
			bool m_wasNotKilledNaturally; // 0x1c6d | Schema_Builtin | Size: 0x1
			S2_PAD(0x2);
			entity2::GameTime_t m_fImmuneToGunGameDamageTime; // 0x1c70 | Schema_DeclaredClass | Size: 0x4
			bool m_bGunGameImmunity; // 0x1c74 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			float32 m_fMolotovDamageTime; // 0x1c78 | Schema_Builtin | Size: 0x4
			GlobalTypes::QAngle m_angEyeAngles; // 0x1c7c | Schema_Atomic | Size: 0xc
			S2_PAD(0x8); // End padding
		};
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_pBulletServices) == 0xED0, "m_pBulletServices in CCSPlayerPawn should be at offset 0xED0");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_pHostageServices) == 0xED8, "m_pHostageServices in CCSPlayerPawn should be at offset 0xED8");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_pBuyServices) == 0xEE0, "m_pBuyServices in CCSPlayerPawn should be at offset 0xEE0");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_pActionTrackingServices) == 0xEE8, "m_pActionTrackingServices in CCSPlayerPawn should be at offset 0xEE8");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_pRadioServices) == 0xEF0, "m_pRadioServices in CCSPlayerPawn should be at offset 0xEF0");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_pDamageReactServices) == 0xEF8, "m_pDamageReactServices in CCSPlayerPawn should be at offset 0xEF8");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_nCharacterDefIndex) == 0xF00, "m_nCharacterDefIndex in CCSPlayerPawn should be at offset 0xF00");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_bHasFemaleVoice) == 0xF02, "m_bHasFemaleVoice in CCSPlayerPawn should be at offset 0xF02");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_strVOPrefix) == 0xF08, "m_strVOPrefix in CCSPlayerPawn should be at offset 0xF08");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_szLastPlaceName) == 0xF10, "m_szLastPlaceName in CCSPlayerPawn should be at offset 0xF10");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_bInHostageResetZone) == 0xFD0, "m_bInHostageResetZone in CCSPlayerPawn should be at offset 0xFD0");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_bInBuyZone) == 0xFD1, "m_bInBuyZone in CCSPlayerPawn should be at offset 0xFD1");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_TouchingBuyZones) == 0xFD8, "m_TouchingBuyZones in CCSPlayerPawn should be at offset 0xFD8");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_bWasInBuyZone) == 0xFF0, "m_bWasInBuyZone in CCSPlayerPawn should be at offset 0xFF0");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_bInHostageRescueZone) == 0xFF1, "m_bInHostageRescueZone in CCSPlayerPawn should be at offset 0xFF1");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_bInBombZone) == 0xFF2, "m_bInBombZone in CCSPlayerPawn should be at offset 0xFF2");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_bWasInHostageRescueZone) == 0xFF3, "m_bWasInHostageRescueZone in CCSPlayerPawn should be at offset 0xFF3");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_iRetakesOffering) == 0xFF4, "m_iRetakesOffering in CCSPlayerPawn should be at offset 0xFF4");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_iRetakesOfferingCard) == 0xFF8, "m_iRetakesOfferingCard in CCSPlayerPawn should be at offset 0xFF8");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_bRetakesHasDefuseKit) == 0xFFC, "m_bRetakesHasDefuseKit in CCSPlayerPawn should be at offset 0xFFC");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_bRetakesMVPLastRound) == 0xFFD, "m_bRetakesMVPLastRound in CCSPlayerPawn should be at offset 0xFFD");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_iRetakesMVPBoostItem) == 0x1000, "m_iRetakesMVPBoostItem in CCSPlayerPawn should be at offset 0x1000");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_RetakesMVPBoostExtraUtility) == 0x1004, "m_RetakesMVPBoostExtraUtility in CCSPlayerPawn should be at offset 0x1004");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_flHealthShotBoostExpirationTime) == 0x1008, "m_flHealthShotBoostExpirationTime in CCSPlayerPawn should be at offset 0x1008");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_flLandingTimeSeconds) == 0x100C, "m_flLandingTimeSeconds in CCSPlayerPawn should be at offset 0x100C");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_aimPunchAngle) == 0x1010, "m_aimPunchAngle in CCSPlayerPawn should be at offset 0x1010");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_aimPunchAngleVel) == 0x101C, "m_aimPunchAngleVel in CCSPlayerPawn should be at offset 0x101C");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_aimPunchTickBase) == 0x1028, "m_aimPunchTickBase in CCSPlayerPawn should be at offset 0x1028");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_aimPunchTickFraction) == 0x102C, "m_aimPunchTickFraction in CCSPlayerPawn should be at offset 0x102C");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_aimPunchCache) == 0x1030, "m_aimPunchCache in CCSPlayerPawn should be at offset 0x1030");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_bIsBuyMenuOpen) == 0x1048, "m_bIsBuyMenuOpen in CCSPlayerPawn should be at offset 0x1048");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_xLastHeadBoneTransform) == 0x16F0, "m_xLastHeadBoneTransform in CCSPlayerPawn should be at offset 0x16F0");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_bLastHeadBoneTransformIsValid) == 0x1710, "m_bLastHeadBoneTransformIsValid in CCSPlayerPawn should be at offset 0x1710");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_lastLandTime) == 0x1714, "m_lastLandTime in CCSPlayerPawn should be at offset 0x1714");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_bOnGroundLastTick) == 0x1718, "m_bOnGroundLastTick in CCSPlayerPawn should be at offset 0x1718");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_iPlayerLocked) == 0x171C, "m_iPlayerLocked in CCSPlayerPawn should be at offset 0x171C");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_flTimeOfLastInjury) == 0x1724, "m_flTimeOfLastInjury in CCSPlayerPawn should be at offset 0x1724");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_flNextSprayDecalTime) == 0x1728, "m_flNextSprayDecalTime in CCSPlayerPawn should be at offset 0x1728");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_bNextSprayDecalTimeExpedited) == 0x172C, "m_bNextSprayDecalTimeExpedited in CCSPlayerPawn should be at offset 0x172C");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_nRagdollDamageBone) == 0x1730, "m_nRagdollDamageBone in CCSPlayerPawn should be at offset 0x1730");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_vRagdollDamageForce) == 0x1734, "m_vRagdollDamageForce in CCSPlayerPawn should be at offset 0x1734");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_vRagdollDamagePosition) == 0x1740, "m_vRagdollDamagePosition in CCSPlayerPawn should be at offset 0x1740");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_szRagdollDamageWeaponName) == 0x174C, "m_szRagdollDamageWeaponName in CCSPlayerPawn should be at offset 0x174C");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_bRagdollDamageHeadshot) == 0x178C, "m_bRagdollDamageHeadshot in CCSPlayerPawn should be at offset 0x178C");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_vRagdollServerOrigin) == 0x1790, "m_vRagdollServerOrigin in CCSPlayerPawn should be at offset 0x1790");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_EconGloves) == 0x17A0, "m_EconGloves in CCSPlayerPawn should be at offset 0x17A0");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_nEconGlovesChanged) == 0x1A48, "m_nEconGlovesChanged in CCSPlayerPawn should be at offset 0x1A48");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_qDeathEyeAngles) == 0x1A4C, "m_qDeathEyeAngles in CCSPlayerPawn should be at offset 0x1A4C");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_bSkipOneHeadConstraintUpdate) == 0x1A58, "m_bSkipOneHeadConstraintUpdate in CCSPlayerPawn should be at offset 0x1A58");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_bLeftHanded) == 0x1A59, "m_bLeftHanded in CCSPlayerPawn should be at offset 0x1A59");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_fSwitchedHandednessTime) == 0x1A5C, "m_fSwitchedHandednessTime in CCSPlayerPawn should be at offset 0x1A5C");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_flViewmodelOffsetX) == 0x1A60, "m_flViewmodelOffsetX in CCSPlayerPawn should be at offset 0x1A60");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_flViewmodelOffsetY) == 0x1A64, "m_flViewmodelOffsetY in CCSPlayerPawn should be at offset 0x1A64");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_flViewmodelOffsetZ) == 0x1A68, "m_flViewmodelOffsetZ in CCSPlayerPawn should be at offset 0x1A68");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_flViewmodelFOV) == 0x1A6C, "m_flViewmodelFOV in CCSPlayerPawn should be at offset 0x1A6C");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_bIsWalking) == 0x1A70, "m_bIsWalking in CCSPlayerPawn should be at offset 0x1A70");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_fLastGivenDefuserTime) == 0x1A74, "m_fLastGivenDefuserTime in CCSPlayerPawn should be at offset 0x1A74");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_fLastGivenBombTime) == 0x1A78, "m_fLastGivenBombTime in CCSPlayerPawn should be at offset 0x1A78");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_flDealtDamageToEnemyMostRecentTimestamp) == 0x1A7C, "m_flDealtDamageToEnemyMostRecentTimestamp in CCSPlayerPawn should be at offset 0x1A7C");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_iDisplayHistoryBits) == 0x1A80, "m_iDisplayHistoryBits in CCSPlayerPawn should be at offset 0x1A80");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_flLastAttackedTeammate) == 0x1A84, "m_flLastAttackedTeammate in CCSPlayerPawn should be at offset 0x1A84");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_allowAutoFollowTime) == 0x1A88, "m_allowAutoFollowTime in CCSPlayerPawn should be at offset 0x1A88");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_bResetArmorNextSpawn) == 0x1A8C, "m_bResetArmorNextSpawn in CCSPlayerPawn should be at offset 0x1A8C");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_nLastKillerIndex) == 0x1A90, "m_nLastKillerIndex in CCSPlayerPawn should be at offset 0x1A90");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_entitySpottedState) == 0x1A98, "m_entitySpottedState in CCSPlayerPawn should be at offset 0x1A98");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_nSpotRules) == 0x1AB0, "m_nSpotRules in CCSPlayerPawn should be at offset 0x1AB0");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_bIsScoped) == 0x1AB4, "m_bIsScoped in CCSPlayerPawn should be at offset 0x1AB4");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_bResumeZoom) == 0x1AB5, "m_bResumeZoom in CCSPlayerPawn should be at offset 0x1AB5");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_bIsDefusing) == 0x1AB6, "m_bIsDefusing in CCSPlayerPawn should be at offset 0x1AB6");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_bIsGrabbingHostage) == 0x1AB7, "m_bIsGrabbingHostage in CCSPlayerPawn should be at offset 0x1AB7");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_iBlockingUseActionInProgress) == 0x1AB8, "m_iBlockingUseActionInProgress in CCSPlayerPawn should be at offset 0x1AB8");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_flEmitSoundTime) == 0x1ABC, "m_flEmitSoundTime in CCSPlayerPawn should be at offset 0x1ABC");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_bInNoDefuseArea) == 0x1AC0, "m_bInNoDefuseArea in CCSPlayerPawn should be at offset 0x1AC0");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_iBombSiteIndex) == 0x1AC4, "m_iBombSiteIndex in CCSPlayerPawn should be at offset 0x1AC4");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_nWhichBombZone) == 0x1AC8, "m_nWhichBombZone in CCSPlayerPawn should be at offset 0x1AC8");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_bInBombZoneTrigger) == 0x1ACC, "m_bInBombZoneTrigger in CCSPlayerPawn should be at offset 0x1ACC");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_bWasInBombZoneTrigger) == 0x1ACD, "m_bWasInBombZoneTrigger in CCSPlayerPawn should be at offset 0x1ACD");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_iShotsFired) == 0x1AD0, "m_iShotsFired in CCSPlayerPawn should be at offset 0x1AD0");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_flFlinchStack) == 0x1AD4, "m_flFlinchStack in CCSPlayerPawn should be at offset 0x1AD4");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_flVelocityModifier) == 0x1AD8, "m_flVelocityModifier in CCSPlayerPawn should be at offset 0x1AD8");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_flHitHeading) == 0x1ADC, "m_flHitHeading in CCSPlayerPawn should be at offset 0x1ADC");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_nHitBodyPart) == 0x1AE0, "m_nHitBodyPart in CCSPlayerPawn should be at offset 0x1AE0");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_vecTotalBulletForce) == 0x1AE4, "m_vecTotalBulletForce in CCSPlayerPawn should be at offset 0x1AE4");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_bWaitForNoAttack) == 0x1AF0, "m_bWaitForNoAttack in CCSPlayerPawn should be at offset 0x1AF0");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_ignoreLadderJumpTime) == 0x1AF4, "m_ignoreLadderJumpTime in CCSPlayerPawn should be at offset 0x1AF4");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_bKilledByHeadshot) == 0x1AF8, "m_bKilledByHeadshot in CCSPlayerPawn should be at offset 0x1AF8");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_LastHitBox) == 0x1AFC, "m_LastHitBox in CCSPlayerPawn should be at offset 0x1AFC");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_LastHealth) == 0x1B00, "m_LastHealth in CCSPlayerPawn should be at offset 0x1B00");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_pBot) == 0x1B08, "m_pBot in CCSPlayerPawn should be at offset 0x1B08");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_bBotAllowActive) == 0x1B10, "m_bBotAllowActive in CCSPlayerPawn should be at offset 0x1B10");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_thirdPersonHeading) == 0x1B14, "m_thirdPersonHeading in CCSPlayerPawn should be at offset 0x1B14");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_flSlopeDropOffset) == 0x1B20, "m_flSlopeDropOffset in CCSPlayerPawn should be at offset 0x1B20");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_flSlopeDropHeight) == 0x1B24, "m_flSlopeDropHeight in CCSPlayerPawn should be at offset 0x1B24");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_vHeadConstraintOffset) == 0x1B28, "m_vHeadConstraintOffset in CCSPlayerPawn should be at offset 0x1B28");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_nLastPickupPriority) == 0x1B34, "m_nLastPickupPriority in CCSPlayerPawn should be at offset 0x1B34");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_flLastPickupPriorityTime) == 0x1B38, "m_flLastPickupPriorityTime in CCSPlayerPawn should be at offset 0x1B38");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_ArmorValue) == 0x1B3C, "m_ArmorValue in CCSPlayerPawn should be at offset 0x1B3C");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_unCurrentEquipmentValue) == 0x1B40, "m_unCurrentEquipmentValue in CCSPlayerPawn should be at offset 0x1B40");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_unRoundStartEquipmentValue) == 0x1B42, "m_unRoundStartEquipmentValue in CCSPlayerPawn should be at offset 0x1B42");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_unFreezetimeEndEquipmentValue) == 0x1B44, "m_unFreezetimeEndEquipmentValue in CCSPlayerPawn should be at offset 0x1B44");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_iLastWeaponFireUsercmd) == 0x1B48, "m_iLastWeaponFireUsercmd in CCSPlayerPawn should be at offset 0x1B48");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_bIsSpawning) == 0x1B4C, "m_bIsSpawning in CCSPlayerPawn should be at offset 0x1B4C");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_iDeathFlags) == 0x1B58, "m_iDeathFlags in CCSPlayerPawn should be at offset 0x1B58");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_bHasDeathInfo) == 0x1B5C, "m_bHasDeathInfo in CCSPlayerPawn should be at offset 0x1B5C");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_flDeathInfoTime) == 0x1B60, "m_flDeathInfoTime in CCSPlayerPawn should be at offset 0x1B60");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_vecDeathInfoOrigin) == 0x1B64, "m_vecDeathInfoOrigin in CCSPlayerPawn should be at offset 0x1B64");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_vecPlayerPatchEconIndices) == 0x1B70, "m_vecPlayerPatchEconIndices in CCSPlayerPawn should be at offset 0x1B70");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_GunGameImmunityColor) == 0x1B84, "m_GunGameImmunityColor in CCSPlayerPawn should be at offset 0x1B84");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_grenadeParameterStashTime) == 0x1B88, "m_grenadeParameterStashTime in CCSPlayerPawn should be at offset 0x1B88");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_bGrenadeParametersStashed) == 0x1B8C, "m_bGrenadeParametersStashed in CCSPlayerPawn should be at offset 0x1B8C");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_angStashedShootAngles) == 0x1B90, "m_angStashedShootAngles in CCSPlayerPawn should be at offset 0x1B90");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_vecStashedGrenadeThrowPosition) == 0x1B9C, "m_vecStashedGrenadeThrowPosition in CCSPlayerPawn should be at offset 0x1B9C");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_vecStashedVelocity) == 0x1BA8, "m_vecStashedVelocity in CCSPlayerPawn should be at offset 0x1BA8");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_angShootAngleHistory) == 0x1BB4, "m_angShootAngleHistory in CCSPlayerPawn should be at offset 0x1BB4");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_vecThrowPositionHistory) == 0x1BCC, "m_vecThrowPositionHistory in CCSPlayerPawn should be at offset 0x1BCC");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_vecVelocityHistory) == 0x1BE4, "m_vecVelocityHistory in CCSPlayerPawn should be at offset 0x1BE4");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_PredictedDamageTags) == 0x1C00, "m_PredictedDamageTags in CCSPlayerPawn should be at offset 0x1C00");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_nHighestAppliedDamageTagTick) == 0x1C68, "m_nHighestAppliedDamageTagTick in CCSPlayerPawn should be at offset 0x1C68");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_bCommittingSuicideOnTeamChange) == 0x1C6C, "m_bCommittingSuicideOnTeamChange in CCSPlayerPawn should be at offset 0x1C6C");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_wasNotKilledNaturally) == 0x1C6D, "m_wasNotKilledNaturally in CCSPlayerPawn should be at offset 0x1C6D");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_fImmuneToGunGameDamageTime) == 0x1C70, "m_fImmuneToGunGameDamageTime in CCSPlayerPawn should be at offset 0x1C70");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_bGunGameImmunity) == 0x1C74, "m_bGunGameImmunity in CCSPlayerPawn should be at offset 0x1C74");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_fMolotovDamageTime) == 0x1C78, "m_fMolotovDamageTime in CCSPlayerPawn should be at offset 0x1C78");
		static_assert(offsetof(CS2::server::CCSPlayerPawn, m_angEyeAngles) == 0x1C7C, "m_angEyeAngles in CCSPlayerPawn should be at offset 0x1C7C");
		static_assert(sizeof(CS2::server::CCSPlayerPawn) == 0x1C90, "CCSPlayerPawn size should be 0x1C90");
	}
}
