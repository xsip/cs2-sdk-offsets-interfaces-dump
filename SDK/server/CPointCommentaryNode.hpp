// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>

#include <SDK/server/CBaseAnimGraph.hpp>
#include <SDK/entity2/GameTime_t.hpp>
#include <SDK/entity2/CEntityIOOutput.hpp>



namespace CS2 {
	namespace server {
		class CPointCommentaryNode : public CS2::server::CBaseAnimGraph {
		public:
			GlobalTypes::CUtlSymbolLarge m_iszPreCommands; // 0xa80 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlSymbolLarge m_iszPostCommands; // 0xa88 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlSymbolLarge m_iszCommentaryFile; // 0xa90 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlSymbolLarge m_iszViewTarget; // 0xa98 | Schema_Atomic | Size: 0x8
			// server::CHandle< server::CBaseEntity > m_hViewTarget; // 0xaa0 | Schema_Atomic | Size: 0x4
			char  m_hViewTarget[0x4]; // 0xaa0 | Schema_Atomic | Size: 0x4
			// server::CHandle< server::CBaseEntity > m_hViewTargetAngles; // 0xaa4 | Schema_Atomic | Size: 0x4
			char  m_hViewTargetAngles[0x4]; // 0xaa4 | Schema_Atomic | Size: 0x4
			GlobalTypes::CUtlSymbolLarge m_iszViewPosition; // 0xaa8 | Schema_Atomic | Size: 0x8
			// server::CHandle< server::CBaseEntity > m_hViewPosition; // 0xab0 | Schema_Atomic | Size: 0x4
			char  m_hViewPosition[0x4]; // 0xab0 | Schema_Atomic | Size: 0x4
			// server::CHandle< server::CBaseEntity > m_hViewPositionMover; // 0xab4 | Schema_Atomic | Size: 0x4
			char  m_hViewPositionMover[0x4]; // 0xab4 | Schema_Atomic | Size: 0x4
			bool m_bPreventMovement; // 0xab8 | Schema_Builtin | Size: 0x1
			bool m_bUnderCrosshair; // 0xab9 | Schema_Builtin | Size: 0x1
			bool m_bUnstoppable; // 0xaba | Schema_Builtin | Size: 0x1
			S2_PAD(0x1);
			entity2::GameTime_t m_flFinishedTime; // 0xabc | Schema_DeclaredClass | Size: 0x4
			GlobalTypes::Vector m_vecFinishOrigin; // 0xac0 | Schema_Atomic | Size: 0xc
			GlobalTypes::QAngle m_vecOriginalAngles; // 0xacc | Schema_Atomic | Size: 0xc
			GlobalTypes::QAngle m_vecFinishAngles; // 0xad8 | Schema_Atomic | Size: 0xc
			bool m_bPreventChangesWhileMoving; // 0xae4 | Schema_Builtin | Size: 0x1
			bool m_bDisabled; // 0xae5 | Schema_Builtin | Size: 0x1
			S2_PAD(0x2);
			GlobalTypes::Vector m_vecTeleportOrigin; // 0xae8 | Schema_Atomic | Size: 0xc
			entity2::GameTime_t m_flAbortedPlaybackAt; // 0xaf4 | Schema_DeclaredClass | Size: 0x4
			entity2::CEntityIOOutput m_pOnCommentaryStarted; // 0xaf8 | Schema_DeclaredClass | Size: 0x28
			entity2::CEntityIOOutput m_pOnCommentaryStopped; // 0xb20 | Schema_DeclaredClass | Size: 0x28
			bool m_bActive; // 0xb48 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			entity2::GameTime_t m_flStartTime; // 0xb4c | Schema_DeclaredClass | Size: 0x4
			float32 m_flStartTimeInCommentary; // 0xb50 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4);
			GlobalTypes::CUtlSymbolLarge m_iszTitle; // 0xb58 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlSymbolLarge m_iszSpeakers; // 0xb60 | Schema_Atomic | Size: 0x8
			int32_t m_iNodeNumber; // 0xb68 | Schema_Builtin | Size: 0x4
			int32_t m_iNodeNumberMax; // 0xb6c | Schema_Builtin | Size: 0x4
			bool m_bListenedTo; // 0xb70 | Schema_Builtin | Size: 0x1
			S2_PAD(0x7); // End padding
		};
		static_assert(offsetof(CS2::server::CPointCommentaryNode, m_iszPreCommands) == 0xA80, "m_iszPreCommands in CPointCommentaryNode should be at offset 0xA80");
		static_assert(offsetof(CS2::server::CPointCommentaryNode, m_iszPostCommands) == 0xA88, "m_iszPostCommands in CPointCommentaryNode should be at offset 0xA88");
		static_assert(offsetof(CS2::server::CPointCommentaryNode, m_iszCommentaryFile) == 0xA90, "m_iszCommentaryFile in CPointCommentaryNode should be at offset 0xA90");
		static_assert(offsetof(CS2::server::CPointCommentaryNode, m_iszViewTarget) == 0xA98, "m_iszViewTarget in CPointCommentaryNode should be at offset 0xA98");
		static_assert(offsetof(CS2::server::CPointCommentaryNode, m_hViewTarget) == 0xAA0, "m_hViewTarget in CPointCommentaryNode should be at offset 0xAA0");
		static_assert(offsetof(CS2::server::CPointCommentaryNode, m_hViewTargetAngles) == 0xAA4, "m_hViewTargetAngles in CPointCommentaryNode should be at offset 0xAA4");
		static_assert(offsetof(CS2::server::CPointCommentaryNode, m_iszViewPosition) == 0xAA8, "m_iszViewPosition in CPointCommentaryNode should be at offset 0xAA8");
		static_assert(offsetof(CS2::server::CPointCommentaryNode, m_hViewPosition) == 0xAB0, "m_hViewPosition in CPointCommentaryNode should be at offset 0xAB0");
		static_assert(offsetof(CS2::server::CPointCommentaryNode, m_hViewPositionMover) == 0xAB4, "m_hViewPositionMover in CPointCommentaryNode should be at offset 0xAB4");
		static_assert(offsetof(CS2::server::CPointCommentaryNode, m_bPreventMovement) == 0xAB8, "m_bPreventMovement in CPointCommentaryNode should be at offset 0xAB8");
		static_assert(offsetof(CS2::server::CPointCommentaryNode, m_bUnderCrosshair) == 0xAB9, "m_bUnderCrosshair in CPointCommentaryNode should be at offset 0xAB9");
		static_assert(offsetof(CS2::server::CPointCommentaryNode, m_bUnstoppable) == 0xABA, "m_bUnstoppable in CPointCommentaryNode should be at offset 0xABA");
		static_assert(offsetof(CS2::server::CPointCommentaryNode, m_flFinishedTime) == 0xABC, "m_flFinishedTime in CPointCommentaryNode should be at offset 0xABC");
		static_assert(offsetof(CS2::server::CPointCommentaryNode, m_vecFinishOrigin) == 0xAC0, "m_vecFinishOrigin in CPointCommentaryNode should be at offset 0xAC0");
		static_assert(offsetof(CS2::server::CPointCommentaryNode, m_vecOriginalAngles) == 0xACC, "m_vecOriginalAngles in CPointCommentaryNode should be at offset 0xACC");
		static_assert(offsetof(CS2::server::CPointCommentaryNode, m_vecFinishAngles) == 0xAD8, "m_vecFinishAngles in CPointCommentaryNode should be at offset 0xAD8");
		static_assert(offsetof(CS2::server::CPointCommentaryNode, m_bPreventChangesWhileMoving) == 0xAE4, "m_bPreventChangesWhileMoving in CPointCommentaryNode should be at offset 0xAE4");
		static_assert(offsetof(CS2::server::CPointCommentaryNode, m_bDisabled) == 0xAE5, "m_bDisabled in CPointCommentaryNode should be at offset 0xAE5");
		static_assert(offsetof(CS2::server::CPointCommentaryNode, m_vecTeleportOrigin) == 0xAE8, "m_vecTeleportOrigin in CPointCommentaryNode should be at offset 0xAE8");
		static_assert(offsetof(CS2::server::CPointCommentaryNode, m_flAbortedPlaybackAt) == 0xAF4, "m_flAbortedPlaybackAt in CPointCommentaryNode should be at offset 0xAF4");
		static_assert(offsetof(CS2::server::CPointCommentaryNode, m_pOnCommentaryStarted) == 0xAF8, "m_pOnCommentaryStarted in CPointCommentaryNode should be at offset 0xAF8");
		static_assert(offsetof(CS2::server::CPointCommentaryNode, m_pOnCommentaryStopped) == 0xB20, "m_pOnCommentaryStopped in CPointCommentaryNode should be at offset 0xB20");
		static_assert(offsetof(CS2::server::CPointCommentaryNode, m_bActive) == 0xB48, "m_bActive in CPointCommentaryNode should be at offset 0xB48");
		static_assert(offsetof(CS2::server::CPointCommentaryNode, m_flStartTime) == 0xB4C, "m_flStartTime in CPointCommentaryNode should be at offset 0xB4C");
		static_assert(offsetof(CS2::server::CPointCommentaryNode, m_flStartTimeInCommentary) == 0xB50, "m_flStartTimeInCommentary in CPointCommentaryNode should be at offset 0xB50");
		static_assert(offsetof(CS2::server::CPointCommentaryNode, m_iszTitle) == 0xB58, "m_iszTitle in CPointCommentaryNode should be at offset 0xB58");
		static_assert(offsetof(CS2::server::CPointCommentaryNode, m_iszSpeakers) == 0xB60, "m_iszSpeakers in CPointCommentaryNode should be at offset 0xB60");
		static_assert(offsetof(CS2::server::CPointCommentaryNode, m_iNodeNumber) == 0xB68, "m_iNodeNumber in CPointCommentaryNode should be at offset 0xB68");
		static_assert(offsetof(CS2::server::CPointCommentaryNode, m_iNodeNumberMax) == 0xB6C, "m_iNodeNumberMax in CPointCommentaryNode should be at offset 0xB6C");
		static_assert(offsetof(CS2::server::CPointCommentaryNode, m_bListenedTo) == 0xB70, "m_bListenedTo in CPointCommentaryNode should be at offset 0xB70");
		static_assert(sizeof(CS2::server::CPointCommentaryNode) == 0xB78, "CPointCommentaryNode size should be 0xB78");
	}
}
