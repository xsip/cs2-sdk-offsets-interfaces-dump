// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>




namespace CS2 {
	namespace server {
		class fogplayerparams_t  {
		public:
			S2_PAD(0x8);
			// server::CHandle< server::CFogController > m_hCtrl; // 0x8 | Schema_Atomic | Size: 0x4
			char  m_hCtrl[0x4]; // 0x8 | Schema_Atomic | Size: 0x4
			float32 m_flTransitionTime; // 0xc | Schema_Builtin | Size: 0x4
			GlobalTypes::Color m_OldColor; // 0x10 | Schema_Atomic | Size: 0x4
			float32 m_flOldStart; // 0x14 | Schema_Builtin | Size: 0x4
			float32 m_flOldEnd; // 0x18 | Schema_Builtin | Size: 0x4
			float32 m_flOldMaxDensity; // 0x1c | Schema_Builtin | Size: 0x4
			float32 m_flOldHDRColorScale; // 0x20 | Schema_Builtin | Size: 0x4
			float32 m_flOldFarZ; // 0x24 | Schema_Builtin | Size: 0x4
			GlobalTypes::Color m_NewColor; // 0x28 | Schema_Atomic | Size: 0x4
			float32 m_flNewStart; // 0x2c | Schema_Builtin | Size: 0x4
			float32 m_flNewEnd; // 0x30 | Schema_Builtin | Size: 0x4
			float32 m_flNewMaxDensity; // 0x34 | Schema_Builtin | Size: 0x4
			float32 m_flNewHDRColorScale; // 0x38 | Schema_Builtin | Size: 0x4
			float32 m_flNewFarZ; // 0x3c | Schema_Builtin | Size: 0x4
		};
		static_assert(offsetof(CS2::server::fogplayerparams_t, m_hCtrl) == 0x8, "m_hCtrl in fogplayerparams_t should be at offset 0x8");
		static_assert(offsetof(CS2::server::fogplayerparams_t, m_flTransitionTime) == 0xC, "m_flTransitionTime in fogplayerparams_t should be at offset 0xC");
		static_assert(offsetof(CS2::server::fogplayerparams_t, m_OldColor) == 0x10, "m_OldColor in fogplayerparams_t should be at offset 0x10");
		static_assert(offsetof(CS2::server::fogplayerparams_t, m_flOldStart) == 0x14, "m_flOldStart in fogplayerparams_t should be at offset 0x14");
		static_assert(offsetof(CS2::server::fogplayerparams_t, m_flOldEnd) == 0x18, "m_flOldEnd in fogplayerparams_t should be at offset 0x18");
		static_assert(offsetof(CS2::server::fogplayerparams_t, m_flOldMaxDensity) == 0x1C, "m_flOldMaxDensity in fogplayerparams_t should be at offset 0x1C");
		static_assert(offsetof(CS2::server::fogplayerparams_t, m_flOldHDRColorScale) == 0x20, "m_flOldHDRColorScale in fogplayerparams_t should be at offset 0x20");
		static_assert(offsetof(CS2::server::fogplayerparams_t, m_flOldFarZ) == 0x24, "m_flOldFarZ in fogplayerparams_t should be at offset 0x24");
		static_assert(offsetof(CS2::server::fogplayerparams_t, m_NewColor) == 0x28, "m_NewColor in fogplayerparams_t should be at offset 0x28");
		static_assert(offsetof(CS2::server::fogplayerparams_t, m_flNewStart) == 0x2C, "m_flNewStart in fogplayerparams_t should be at offset 0x2C");
		static_assert(offsetof(CS2::server::fogplayerparams_t, m_flNewEnd) == 0x30, "m_flNewEnd in fogplayerparams_t should be at offset 0x30");
		static_assert(offsetof(CS2::server::fogplayerparams_t, m_flNewMaxDensity) == 0x34, "m_flNewMaxDensity in fogplayerparams_t should be at offset 0x34");
		static_assert(offsetof(CS2::server::fogplayerparams_t, m_flNewHDRColorScale) == 0x38, "m_flNewHDRColorScale in fogplayerparams_t should be at offset 0x38");
		static_assert(offsetof(CS2::server::fogplayerparams_t, m_flNewFarZ) == 0x3C, "m_flNewFarZ in fogplayerparams_t should be at offset 0x3C");
		static_assert(sizeof(CS2::server::fogplayerparams_t) == 0x40, "fogplayerparams_t size should be 0x40");
	}
}
