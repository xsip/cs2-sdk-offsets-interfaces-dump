// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>

#include <SDK/server/CLogicalEntity.hpp>
#include <SDK/entity2/CEntityIOOutput.hpp>



namespace CS2 {
	namespace server {
		class CInfoSpawnGroupLoadUnload : public CS2::server::CLogicalEntity {
		public:
			entity2::CEntityIOOutput m_OnSpawnGroupLoadStarted; // 0x4f0 | Schema_DeclaredClass | Size: 0x28
			entity2::CEntityIOOutput m_OnSpawnGroupLoadFinished; // 0x518 | Schema_DeclaredClass | Size: 0x28
			entity2::CEntityIOOutput m_OnSpawnGroupUnloadStarted; // 0x540 | Schema_DeclaredClass | Size: 0x28
			entity2::CEntityIOOutput m_OnSpawnGroupUnloadFinished; // 0x568 | Schema_DeclaredClass | Size: 0x28
			GlobalTypes::CUtlSymbolLarge m_iszSpawnGroupName; // 0x590 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlSymbolLarge m_iszSpawnGroupFilterName; // 0x598 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlSymbolLarge m_iszLandmarkName; // 0x5a0 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlString m_sFixedSpawnGroupName; // 0x5a8 | Schema_Atomic | Size: 0x8
			float32 m_flTimeoutInterval; // 0x5b0 | Schema_Builtin | Size: 0x4
			bool m_bAutoActivate; // 0x5b4 | Schema_Builtin | Size: 0x1
			bool m_bUnloadingStarted; // 0x5b5 | Schema_Builtin | Size: 0x1
			bool m_bQueueActiveSpawnGroupChange; // 0x5b6 | Schema_Builtin | Size: 0x1
			bool m_bQueueFinishLoading; // 0x5b7 | Schema_Builtin | Size: 0x1
			S2_PAD(0x50); // End padding
		};
		static_assert(offsetof(CS2::server::CInfoSpawnGroupLoadUnload, m_OnSpawnGroupLoadStarted) == 0x4F0, "m_OnSpawnGroupLoadStarted in CInfoSpawnGroupLoadUnload should be at offset 0x4F0");
		static_assert(offsetof(CS2::server::CInfoSpawnGroupLoadUnload, m_OnSpawnGroupLoadFinished) == 0x518, "m_OnSpawnGroupLoadFinished in CInfoSpawnGroupLoadUnload should be at offset 0x518");
		static_assert(offsetof(CS2::server::CInfoSpawnGroupLoadUnload, m_OnSpawnGroupUnloadStarted) == 0x540, "m_OnSpawnGroupUnloadStarted in CInfoSpawnGroupLoadUnload should be at offset 0x540");
		static_assert(offsetof(CS2::server::CInfoSpawnGroupLoadUnload, m_OnSpawnGroupUnloadFinished) == 0x568, "m_OnSpawnGroupUnloadFinished in CInfoSpawnGroupLoadUnload should be at offset 0x568");
		static_assert(offsetof(CS2::server::CInfoSpawnGroupLoadUnload, m_iszSpawnGroupName) == 0x590, "m_iszSpawnGroupName in CInfoSpawnGroupLoadUnload should be at offset 0x590");
		static_assert(offsetof(CS2::server::CInfoSpawnGroupLoadUnload, m_iszSpawnGroupFilterName) == 0x598, "m_iszSpawnGroupFilterName in CInfoSpawnGroupLoadUnload should be at offset 0x598");
		static_assert(offsetof(CS2::server::CInfoSpawnGroupLoadUnload, m_iszLandmarkName) == 0x5A0, "m_iszLandmarkName in CInfoSpawnGroupLoadUnload should be at offset 0x5A0");
		static_assert(offsetof(CS2::server::CInfoSpawnGroupLoadUnload, m_sFixedSpawnGroupName) == 0x5A8, "m_sFixedSpawnGroupName in CInfoSpawnGroupLoadUnload should be at offset 0x5A8");
		static_assert(offsetof(CS2::server::CInfoSpawnGroupLoadUnload, m_flTimeoutInterval) == 0x5B0, "m_flTimeoutInterval in CInfoSpawnGroupLoadUnload should be at offset 0x5B0");
		static_assert(offsetof(CS2::server::CInfoSpawnGroupLoadUnload, m_bAutoActivate) == 0x5B4, "m_bAutoActivate in CInfoSpawnGroupLoadUnload should be at offset 0x5B4");
		static_assert(offsetof(CS2::server::CInfoSpawnGroupLoadUnload, m_bUnloadingStarted) == 0x5B5, "m_bUnloadingStarted in CInfoSpawnGroupLoadUnload should be at offset 0x5B5");
		static_assert(offsetof(CS2::server::CInfoSpawnGroupLoadUnload, m_bQueueActiveSpawnGroupChange) == 0x5B6, "m_bQueueActiveSpawnGroupChange in CInfoSpawnGroupLoadUnload should be at offset 0x5B6");
		static_assert(offsetof(CS2::server::CInfoSpawnGroupLoadUnload, m_bQueueFinishLoading) == 0x5B7, "m_bQueueFinishLoading in CInfoSpawnGroupLoadUnload should be at offset 0x5B7");
		static_assert(sizeof(CS2::server::CInfoSpawnGroupLoadUnload) == 0x608, "CInfoSpawnGroupLoadUnload size should be 0x608");
	}
}
