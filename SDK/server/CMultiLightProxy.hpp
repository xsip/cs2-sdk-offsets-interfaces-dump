// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/server/CLogicalEntity.hpp>



namespace CS2 {
	namespace server {
		class CMultiLightProxy : public CS2::server::CLogicalEntity {
		public:
			GlobalTypes::CUtlSymbolLarge m_iszLightNameFilter; // 0x4f0 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlSymbolLarge m_iszLightClassFilter; // 0x4f8 | Schema_Atomic | Size: 0x8
			float32 m_flLightRadiusFilter; // 0x500 | Schema_Builtin | Size: 0x4
			float32 m_flBrightnessDelta; // 0x504 | Schema_Builtin | Size: 0x4
			bool m_bPerformScreenFade; // 0x508 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			float32 m_flTargetBrightnessMultiplier; // 0x50c | Schema_Builtin | Size: 0x4
			float32 m_flCurrentBrightnessMultiplier; // 0x510 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4);
			// server::CUtlVector< server.dll::CHandle< CLightEntity > > m_vecLights; // 0x518 | Schema_Atomic | Size: 0x18
			char  m_vecLights[0x18]; // 0x518 | Schema_Atomic | Size: 0x18
		};
		static_assert(offsetof(CS2::server::CMultiLightProxy, m_iszLightNameFilter) == 0x4F0, "m_iszLightNameFilter in CMultiLightProxy should be at offset 0x4F0");
		static_assert(offsetof(CS2::server::CMultiLightProxy, m_iszLightClassFilter) == 0x4F8, "m_iszLightClassFilter in CMultiLightProxy should be at offset 0x4F8");
		static_assert(offsetof(CS2::server::CMultiLightProxy, m_flLightRadiusFilter) == 0x500, "m_flLightRadiusFilter in CMultiLightProxy should be at offset 0x500");
		static_assert(offsetof(CS2::server::CMultiLightProxy, m_flBrightnessDelta) == 0x504, "m_flBrightnessDelta in CMultiLightProxy should be at offset 0x504");
		static_assert(offsetof(CS2::server::CMultiLightProxy, m_bPerformScreenFade) == 0x508, "m_bPerformScreenFade in CMultiLightProxy should be at offset 0x508");
		static_assert(offsetof(CS2::server::CMultiLightProxy, m_flTargetBrightnessMultiplier) == 0x50C, "m_flTargetBrightnessMultiplier in CMultiLightProxy should be at offset 0x50C");
		static_assert(offsetof(CS2::server::CMultiLightProxy, m_flCurrentBrightnessMultiplier) == 0x510, "m_flCurrentBrightnessMultiplier in CMultiLightProxy should be at offset 0x510");
		static_assert(offsetof(CS2::server::CMultiLightProxy, m_vecLights) == 0x518, "m_vecLights in CMultiLightProxy should be at offset 0x518");
		static_assert(sizeof(CS2::server::CMultiLightProxy) == 0x530, "CMultiLightProxy size should be 0x530");
	}
}
