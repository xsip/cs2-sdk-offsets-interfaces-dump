// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/client/ShatterGlassStressType.hpp>
#include <SDK/client/OnFrame.hpp>
#include <SDK/entity2/GameTime_t.hpp>



namespace CS2 {
	namespace server {
		class CShatterGlassShardPhysics;
		class CFuncShatterglass;
		class CBaseEntity;
	}
}


using namespace GlobalTypes;
namespace CS2 {
	namespace server {
		class CShatterGlassShard  {
		public:
			S2_PAD(0x8);
			uint32_t m_hShardHandle; // 0x8 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4);
			GlobalTypes::CUtlVector<GlobalTypes::Vector2D> m_vecPanelVertices; // 0x10 | Schema_Atomic | Size: 0x18
			// char  m_vecPanelVertices[0x18]; // 0x10 | Schema_Atomic | Size: 0x18
			GlobalTypes::Vector2D m_vLocalPanelSpaceOrigin; // 0x28 | Schema_Atomic | Size: 0x8
			// GlobalTypes::CStrongHandle<resourcesystem::InfoForResourceTypeCModel> m_hModel; // 0x30 | Schema_Atomic | Size: 0x8
			char  m_hModel[0x8]; // 0x30 | Schema_Atomic | Size: 0x8
			GlobalTypes::CHandle<server::CShatterGlassShardPhysics> m_hPhysicsEntity; // 0x38 | Schema_Atomic | Size: 0x4
			// char  m_hPhysicsEntity[0x4]; // 0x38 | Schema_Atomic | Size: 0x4
			GlobalTypes::CHandle<server::CFuncShatterglass> m_hParentPanel; // 0x3c | Schema_Atomic | Size: 0x4
			// char  m_hParentPanel[0x4]; // 0x3c | Schema_Atomic | Size: 0x4
			uint32_t m_hParentShard; // 0x40 | Schema_Builtin | Size: 0x4
			client::ShatterGlassStressType m_ShatterStressType; // 0x44 | Schema_DeclaredEnum | Size: 0x1
			S2_PAD(0x3);
			GlobalTypes::Vector m_vecStressVelocity; // 0x48 | Schema_Atomic | Size: 0xc
			bool m_bCreatedModel; // 0x54 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			float32 m_flLongestEdge; // 0x58 | Schema_Builtin | Size: 0x4
			float32 m_flShortestEdge; // 0x5c | Schema_Builtin | Size: 0x4
			float32 m_flLongestAcross; // 0x60 | Schema_Builtin | Size: 0x4
			float32 m_flShortestAcross; // 0x64 | Schema_Builtin | Size: 0x4
			float32 m_flSumOfAllEdges; // 0x68 | Schema_Builtin | Size: 0x4
			float32 m_flArea; // 0x6c | Schema_Builtin | Size: 0x4
			client::OnFrame m_nOnFrameEdge; // 0x70 | Schema_DeclaredEnum | Size: 0x1
			S2_PAD(0x3);
			int32_t m_nSubShardGeneration; // 0x74 | Schema_Builtin | Size: 0x4
			GlobalTypes::Vector2D m_vecAverageVertPosition; // 0x78 | Schema_Atomic | Size: 0x8
			bool m_bAverageVertPositionIsValid; // 0x80 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			GlobalTypes::Vector2D m_vecPanelSpaceStressPositionA; // 0x84 | Schema_Atomic | Size: 0x8
			GlobalTypes::Vector2D m_vecPanelSpaceStressPositionB; // 0x8c | Schema_Atomic | Size: 0x8
			bool m_bStressPositionAIsValid; // 0x94 | Schema_Builtin | Size: 0x1
			bool m_bStressPositionBIsValid; // 0x95 | Schema_Builtin | Size: 0x1
			bool m_bFlaggedForRemoval; // 0x96 | Schema_Builtin | Size: 0x1
			S2_PAD(0x1);
			entity2::GameTime_t m_flPhysicsEntitySpawnedAtTime; // 0x98 | Schema_DeclaredClass | Size: 0x4
			GlobalTypes::CHandle<server::CBaseEntity> m_hEntityHittingMe; // 0x9c | Schema_Atomic | Size: 0x4
			// char  m_hEntityHittingMe[0x4]; // 0x9c | Schema_Atomic | Size: 0x4
			GlobalTypes::CUtlVector< uint32 > m_vecNeighbors; // 0xa0 | Schema_Atomic | Size: 0x18
			// char  m_vecNeighbors[0x18]; // 0xa0 | Schema_Atomic | Size: 0x18
		};
		static_assert(offsetof(CS2::server::CShatterGlassShard, m_hShardHandle) == 0x8, "m_hShardHandle in CShatterGlassShard should be at offset 0x8");
		static_assert(offsetof(CS2::server::CShatterGlassShard, m_vecPanelVertices) == 0x10, "m_vecPanelVertices in CShatterGlassShard should be at offset 0x10");
		static_assert(offsetof(CS2::server::CShatterGlassShard, m_vLocalPanelSpaceOrigin) == 0x28, "m_vLocalPanelSpaceOrigin in CShatterGlassShard should be at offset 0x28");
		static_assert(offsetof(CS2::server::CShatterGlassShard, m_hModel) == 0x30, "m_hModel in CShatterGlassShard should be at offset 0x30");
		static_assert(offsetof(CS2::server::CShatterGlassShard, m_hPhysicsEntity) == 0x38, "m_hPhysicsEntity in CShatterGlassShard should be at offset 0x38");
		static_assert(offsetof(CS2::server::CShatterGlassShard, m_hParentPanel) == 0x3C, "m_hParentPanel in CShatterGlassShard should be at offset 0x3C");
		static_assert(offsetof(CS2::server::CShatterGlassShard, m_hParentShard) == 0x40, "m_hParentShard in CShatterGlassShard should be at offset 0x40");
		static_assert(offsetof(CS2::server::CShatterGlassShard, m_ShatterStressType) == 0x44, "m_ShatterStressType in CShatterGlassShard should be at offset 0x44");
		static_assert(offsetof(CS2::server::CShatterGlassShard, m_vecStressVelocity) == 0x48, "m_vecStressVelocity in CShatterGlassShard should be at offset 0x48");
		static_assert(offsetof(CS2::server::CShatterGlassShard, m_bCreatedModel) == 0x54, "m_bCreatedModel in CShatterGlassShard should be at offset 0x54");
		static_assert(offsetof(CS2::server::CShatterGlassShard, m_flLongestEdge) == 0x58, "m_flLongestEdge in CShatterGlassShard should be at offset 0x58");
		static_assert(offsetof(CS2::server::CShatterGlassShard, m_flShortestEdge) == 0x5C, "m_flShortestEdge in CShatterGlassShard should be at offset 0x5C");
		static_assert(offsetof(CS2::server::CShatterGlassShard, m_flLongestAcross) == 0x60, "m_flLongestAcross in CShatterGlassShard should be at offset 0x60");
		static_assert(offsetof(CS2::server::CShatterGlassShard, m_flShortestAcross) == 0x64, "m_flShortestAcross in CShatterGlassShard should be at offset 0x64");
		static_assert(offsetof(CS2::server::CShatterGlassShard, m_flSumOfAllEdges) == 0x68, "m_flSumOfAllEdges in CShatterGlassShard should be at offset 0x68");
		static_assert(offsetof(CS2::server::CShatterGlassShard, m_flArea) == 0x6C, "m_flArea in CShatterGlassShard should be at offset 0x6C");
		static_assert(offsetof(CS2::server::CShatterGlassShard, m_nOnFrameEdge) == 0x70, "m_nOnFrameEdge in CShatterGlassShard should be at offset 0x70");
		static_assert(offsetof(CS2::server::CShatterGlassShard, m_nSubShardGeneration) == 0x74, "m_nSubShardGeneration in CShatterGlassShard should be at offset 0x74");
		static_assert(offsetof(CS2::server::CShatterGlassShard, m_vecAverageVertPosition) == 0x78, "m_vecAverageVertPosition in CShatterGlassShard should be at offset 0x78");
		static_assert(offsetof(CS2::server::CShatterGlassShard, m_bAverageVertPositionIsValid) == 0x80, "m_bAverageVertPositionIsValid in CShatterGlassShard should be at offset 0x80");
		static_assert(offsetof(CS2::server::CShatterGlassShard, m_vecPanelSpaceStressPositionA) == 0x84, "m_vecPanelSpaceStressPositionA in CShatterGlassShard should be at offset 0x84");
		static_assert(offsetof(CS2::server::CShatterGlassShard, m_vecPanelSpaceStressPositionB) == 0x8C, "m_vecPanelSpaceStressPositionB in CShatterGlassShard should be at offset 0x8C");
		static_assert(offsetof(CS2::server::CShatterGlassShard, m_bStressPositionAIsValid) == 0x94, "m_bStressPositionAIsValid in CShatterGlassShard should be at offset 0x94");
		static_assert(offsetof(CS2::server::CShatterGlassShard, m_bStressPositionBIsValid) == 0x95, "m_bStressPositionBIsValid in CShatterGlassShard should be at offset 0x95");
		static_assert(offsetof(CS2::server::CShatterGlassShard, m_bFlaggedForRemoval) == 0x96, "m_bFlaggedForRemoval in CShatterGlassShard should be at offset 0x96");
		static_assert(offsetof(CS2::server::CShatterGlassShard, m_flPhysicsEntitySpawnedAtTime) == 0x98, "m_flPhysicsEntitySpawnedAtTime in CShatterGlassShard should be at offset 0x98");
		static_assert(offsetof(CS2::server::CShatterGlassShard, m_hEntityHittingMe) == 0x9C, "m_hEntityHittingMe in CShatterGlassShard should be at offset 0x9C");
		static_assert(offsetof(CS2::server::CShatterGlassShard, m_vecNeighbors) == 0xA0, "m_vecNeighbors in CShatterGlassShard should be at offset 0xA0");
		static_assert(sizeof(CS2::server::CShatterGlassShard) == 0xB8, "CShatterGlassShard size should be 0xB8");
	}
}
