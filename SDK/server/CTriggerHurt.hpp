// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/server/CBaseTrigger.hpp>
#include <SDK/entity2/GameTime_t.hpp>
#include <SDK/client/DamageTypes_t.hpp>
#include <SDK/entity2/CEntityIOOutput.hpp>





using namespace GlobalTypes;
namespace CS2 {
	namespace server {
		class CTriggerHurt : public CS2::server::CBaseTrigger {
		public:
			float32 m_flOriginalDamage; // 0x9a8 | Schema_Builtin | Size: 0x4
			float32 m_flDamage; // 0x9ac | Schema_Builtin | Size: 0x4
			float32 m_flDamageCap; // 0x9b0 | Schema_Builtin | Size: 0x4
			entity2::GameTime_t m_flLastDmgTime; // 0x9b4 | Schema_DeclaredClass | Size: 0x4
			float32 m_flForgivenessDelay; // 0x9b8 | Schema_Builtin | Size: 0x4
			client::DamageTypes_t m_bitsDamageInflict; // 0x9bc | Schema_DeclaredEnum | Size: 0x4
			int32_t m_damageModel; // 0x9c0 | Schema_Builtin | Size: 0x4
			bool m_bNoDmgForce; // 0x9c4 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			GlobalTypes::Vector m_vDamageForce; // 0x9c8 | Schema_Atomic | Size: 0xc
			bool m_thinkAlways; // 0x9d4 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			float32 m_hurtThinkPeriod; // 0x9d8 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4);
			entity2::CEntityIOOutput m_OnHurt; // 0x9e0 | Schema_DeclaredClass | Size: 0x28
			entity2::CEntityIOOutput m_OnHurtPlayer; // 0xa08 | Schema_DeclaredClass | Size: 0x28
			// server::CUtlVector< server.dll::CHandle< CBaseEntity > > m_hurtEntities; // 0xa30 | Schema_Atomic | Size: 0x18
			char  m_hurtEntities[0x18]; // 0xa30 | Schema_Atomic | Size: 0x18
		};
		static_assert(offsetof(CS2::server::CTriggerHurt, m_flOriginalDamage) == 0x9A8, "m_flOriginalDamage in CTriggerHurt should be at offset 0x9A8");
		static_assert(offsetof(CS2::server::CTriggerHurt, m_flDamage) == 0x9AC, "m_flDamage in CTriggerHurt should be at offset 0x9AC");
		static_assert(offsetof(CS2::server::CTriggerHurt, m_flDamageCap) == 0x9B0, "m_flDamageCap in CTriggerHurt should be at offset 0x9B0");
		static_assert(offsetof(CS2::server::CTriggerHurt, m_flLastDmgTime) == 0x9B4, "m_flLastDmgTime in CTriggerHurt should be at offset 0x9B4");
		static_assert(offsetof(CS2::server::CTriggerHurt, m_flForgivenessDelay) == 0x9B8, "m_flForgivenessDelay in CTriggerHurt should be at offset 0x9B8");
		static_assert(offsetof(CS2::server::CTriggerHurt, m_bitsDamageInflict) == 0x9BC, "m_bitsDamageInflict in CTriggerHurt should be at offset 0x9BC");
		static_assert(offsetof(CS2::server::CTriggerHurt, m_damageModel) == 0x9C0, "m_damageModel in CTriggerHurt should be at offset 0x9C0");
		static_assert(offsetof(CS2::server::CTriggerHurt, m_bNoDmgForce) == 0x9C4, "m_bNoDmgForce in CTriggerHurt should be at offset 0x9C4");
		static_assert(offsetof(CS2::server::CTriggerHurt, m_vDamageForce) == 0x9C8, "m_vDamageForce in CTriggerHurt should be at offset 0x9C8");
		static_assert(offsetof(CS2::server::CTriggerHurt, m_thinkAlways) == 0x9D4, "m_thinkAlways in CTriggerHurt should be at offset 0x9D4");
		static_assert(offsetof(CS2::server::CTriggerHurt, m_hurtThinkPeriod) == 0x9D8, "m_hurtThinkPeriod in CTriggerHurt should be at offset 0x9D8");
		static_assert(offsetof(CS2::server::CTriggerHurt, m_OnHurt) == 0x9E0, "m_OnHurt in CTriggerHurt should be at offset 0x9E0");
		static_assert(offsetof(CS2::server::CTriggerHurt, m_OnHurtPlayer) == 0xA08, "m_OnHurtPlayer in CTriggerHurt should be at offset 0xA08");
		static_assert(offsetof(CS2::server::CTriggerHurt, m_hurtEntities) == 0xA30, "m_hurtEntities in CTriggerHurt should be at offset 0xA30");
		static_assert(sizeof(CS2::server::CTriggerHurt) == 0xA48, "CTriggerHurt size should be 0xA48");
	}
}
