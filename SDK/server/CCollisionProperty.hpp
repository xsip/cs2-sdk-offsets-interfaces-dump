// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>

#include <SDK/server/VPhysicsCollisionAttribute_t.hpp>
#include <SDK/client/SolidType_t.hpp>
#include <SDK/client/SurroundingBoundsType_t.hpp>



namespace CS2 {
	namespace server {
		class CCollisionProperty  {
		public:
			S2_PAD(0x10);
			server::VPhysicsCollisionAttribute_t m_collisionAttribute; // 0x10 | Schema_DeclaredClass | Size: 0x30
			GlobalTypes::Vector m_vecMins; // 0x40 | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vecMaxs; // 0x4c | Schema_Atomic | Size: 0xc
			S2_PAD(0x2);
			uint8_t m_usSolidFlags; // 0x5a | Schema_Builtin | Size: 0x1
			client::SolidType_t m_nSolidType; // 0x5b | Schema_DeclaredEnum | Size: 0x1
			uint8_t m_triggerBloat; // 0x5c | Schema_Builtin | Size: 0x1
			client::SurroundingBoundsType_t m_nSurroundType; // 0x5d | Schema_DeclaredEnum | Size: 0x1
			uint8_t m_CollisionGroup; // 0x5e | Schema_Builtin | Size: 0x1
			uint8_t m_nEnablePhysics; // 0x5f | Schema_Builtin | Size: 0x1
			float32 m_flBoundingRadius; // 0x60 | Schema_Builtin | Size: 0x4
			GlobalTypes::Vector m_vecSpecifiedSurroundingMins; // 0x64 | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vecSpecifiedSurroundingMaxs; // 0x70 | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vecSurroundingMaxs; // 0x7c | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vecSurroundingMins; // 0x88 | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vCapsuleCenter1; // 0x94 | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vCapsuleCenter2; // 0xa0 | Schema_Atomic | Size: 0xc
			float32 m_flCapsuleRadius; // 0xac | Schema_Builtin | Size: 0x4
		};
		static_assert(offsetof(CS2::server::CCollisionProperty, m_collisionAttribute) == 0x10, "m_collisionAttribute in CCollisionProperty should be at offset 0x10");
		static_assert(offsetof(CS2::server::CCollisionProperty, m_vecMins) == 0x40, "m_vecMins in CCollisionProperty should be at offset 0x40");
		static_assert(offsetof(CS2::server::CCollisionProperty, m_vecMaxs) == 0x4C, "m_vecMaxs in CCollisionProperty should be at offset 0x4C");
		static_assert(offsetof(CS2::server::CCollisionProperty, m_usSolidFlags) == 0x5A, "m_usSolidFlags in CCollisionProperty should be at offset 0x5A");
		static_assert(offsetof(CS2::server::CCollisionProperty, m_nSolidType) == 0x5B, "m_nSolidType in CCollisionProperty should be at offset 0x5B");
		static_assert(offsetof(CS2::server::CCollisionProperty, m_triggerBloat) == 0x5C, "m_triggerBloat in CCollisionProperty should be at offset 0x5C");
		static_assert(offsetof(CS2::server::CCollisionProperty, m_nSurroundType) == 0x5D, "m_nSurroundType in CCollisionProperty should be at offset 0x5D");
		static_assert(offsetof(CS2::server::CCollisionProperty, m_CollisionGroup) == 0x5E, "m_CollisionGroup in CCollisionProperty should be at offset 0x5E");
		static_assert(offsetof(CS2::server::CCollisionProperty, m_nEnablePhysics) == 0x5F, "m_nEnablePhysics in CCollisionProperty should be at offset 0x5F");
		static_assert(offsetof(CS2::server::CCollisionProperty, m_flBoundingRadius) == 0x60, "m_flBoundingRadius in CCollisionProperty should be at offset 0x60");
		static_assert(offsetof(CS2::server::CCollisionProperty, m_vecSpecifiedSurroundingMins) == 0x64, "m_vecSpecifiedSurroundingMins in CCollisionProperty should be at offset 0x64");
		static_assert(offsetof(CS2::server::CCollisionProperty, m_vecSpecifiedSurroundingMaxs) == 0x70, "m_vecSpecifiedSurroundingMaxs in CCollisionProperty should be at offset 0x70");
		static_assert(offsetof(CS2::server::CCollisionProperty, m_vecSurroundingMaxs) == 0x7C, "m_vecSurroundingMaxs in CCollisionProperty should be at offset 0x7C");
		static_assert(offsetof(CS2::server::CCollisionProperty, m_vecSurroundingMins) == 0x88, "m_vecSurroundingMins in CCollisionProperty should be at offset 0x88");
		static_assert(offsetof(CS2::server::CCollisionProperty, m_vCapsuleCenter1) == 0x94, "m_vCapsuleCenter1 in CCollisionProperty should be at offset 0x94");
		static_assert(offsetof(CS2::server::CCollisionProperty, m_vCapsuleCenter2) == 0xA0, "m_vCapsuleCenter2 in CCollisionProperty should be at offset 0xA0");
		static_assert(offsetof(CS2::server::CCollisionProperty, m_flCapsuleRadius) == 0xAC, "m_flCapsuleRadius in CCollisionProperty should be at offset 0xAC");
		static_assert(sizeof(CS2::server::CCollisionProperty) == 0xB0, "CCollisionProperty size should be 0xB0");
	}
}
