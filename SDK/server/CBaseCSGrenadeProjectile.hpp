// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>

#include <SDK/server/CBaseGrenade.hpp>
#include <SDK/entity2/GameTime_t.hpp>



namespace CS2 {
	namespace server {
		class CBaseCSGrenadeProjectile : public CS2::server::CBaseGrenade {
		public:
			GlobalTypes::Vector m_vInitialPosition; // 0xbb8 | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vInitialVelocity; // 0xbc4 | Schema_Atomic | Size: 0xc
			int32_t m_nBounces; // 0xbd0 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4);
			// GlobalTypes::CStrongHandle< resourcesystem::InfoForResourceTypeIParticleSystemDefinition > m_nExplodeEffectIndex; // 0xbd8 | Schema_Atomic | Size: 0x8
			char  m_nExplodeEffectIndex[0x8]; // 0xbd8 | Schema_Atomic | Size: 0x8
			int32_t m_nExplodeEffectTickBegin; // 0xbe0 | Schema_Builtin | Size: 0x4
			GlobalTypes::Vector m_vecExplodeEffectOrigin; // 0xbe4 | Schema_Atomic | Size: 0xc
			entity2::GameTime_t m_flSpawnTime; // 0xbf0 | Schema_DeclaredClass | Size: 0x4
			uint8_t m_unOGSExtraFlags; // 0xbf4 | Schema_Builtin | Size: 0x1
			bool m_bDetonationRecorded; // 0xbf5 | Schema_Builtin | Size: 0x1
			uint16_t m_nItemIndex; // 0xbf6 | Schema_Builtin | Size: 0x2
			GlobalTypes::Vector m_vecOriginalSpawnLocation; // 0xbf8 | Schema_Atomic | Size: 0xc
			entity2::GameTime_t m_flLastBounceSoundTime; // 0xc04 | Schema_DeclaredClass | Size: 0x4
			GlobalTypes::RotationVector m_vecGrenadeSpin; // 0xc08 | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vecLastHitSurfaceNormal; // 0xc14 | Schema_Atomic | Size: 0xc
			int32_t m_nTicksAtZeroVelocity; // 0xc20 | Schema_Builtin | Size: 0x4
			bool m_bHasEverHitEnemy; // 0xc24 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3); // End padding
		};
		static_assert(offsetof(CS2::server::CBaseCSGrenadeProjectile, m_vInitialPosition) == 0xBB8, "m_vInitialPosition in CBaseCSGrenadeProjectile should be at offset 0xBB8");
		static_assert(offsetof(CS2::server::CBaseCSGrenadeProjectile, m_vInitialVelocity) == 0xBC4, "m_vInitialVelocity in CBaseCSGrenadeProjectile should be at offset 0xBC4");
		static_assert(offsetof(CS2::server::CBaseCSGrenadeProjectile, m_nBounces) == 0xBD0, "m_nBounces in CBaseCSGrenadeProjectile should be at offset 0xBD0");
		static_assert(offsetof(CS2::server::CBaseCSGrenadeProjectile, m_nExplodeEffectIndex) == 0xBD8, "m_nExplodeEffectIndex in CBaseCSGrenadeProjectile should be at offset 0xBD8");
		static_assert(offsetof(CS2::server::CBaseCSGrenadeProjectile, m_nExplodeEffectTickBegin) == 0xBE0, "m_nExplodeEffectTickBegin in CBaseCSGrenadeProjectile should be at offset 0xBE0");
		static_assert(offsetof(CS2::server::CBaseCSGrenadeProjectile, m_vecExplodeEffectOrigin) == 0xBE4, "m_vecExplodeEffectOrigin in CBaseCSGrenadeProjectile should be at offset 0xBE4");
		static_assert(offsetof(CS2::server::CBaseCSGrenadeProjectile, m_flSpawnTime) == 0xBF0, "m_flSpawnTime in CBaseCSGrenadeProjectile should be at offset 0xBF0");
		static_assert(offsetof(CS2::server::CBaseCSGrenadeProjectile, m_unOGSExtraFlags) == 0xBF4, "m_unOGSExtraFlags in CBaseCSGrenadeProjectile should be at offset 0xBF4");
		static_assert(offsetof(CS2::server::CBaseCSGrenadeProjectile, m_bDetonationRecorded) == 0xBF5, "m_bDetonationRecorded in CBaseCSGrenadeProjectile should be at offset 0xBF5");
		static_assert(offsetof(CS2::server::CBaseCSGrenadeProjectile, m_nItemIndex) == 0xBF6, "m_nItemIndex in CBaseCSGrenadeProjectile should be at offset 0xBF6");
		static_assert(offsetof(CS2::server::CBaseCSGrenadeProjectile, m_vecOriginalSpawnLocation) == 0xBF8, "m_vecOriginalSpawnLocation in CBaseCSGrenadeProjectile should be at offset 0xBF8");
		static_assert(offsetof(CS2::server::CBaseCSGrenadeProjectile, m_flLastBounceSoundTime) == 0xC04, "m_flLastBounceSoundTime in CBaseCSGrenadeProjectile should be at offset 0xC04");
		static_assert(offsetof(CS2::server::CBaseCSGrenadeProjectile, m_vecGrenadeSpin) == 0xC08, "m_vecGrenadeSpin in CBaseCSGrenadeProjectile should be at offset 0xC08");
		static_assert(offsetof(CS2::server::CBaseCSGrenadeProjectile, m_vecLastHitSurfaceNormal) == 0xC14, "m_vecLastHitSurfaceNormal in CBaseCSGrenadeProjectile should be at offset 0xC14");
		static_assert(offsetof(CS2::server::CBaseCSGrenadeProjectile, m_nTicksAtZeroVelocity) == 0xC20, "m_nTicksAtZeroVelocity in CBaseCSGrenadeProjectile should be at offset 0xC20");
		static_assert(offsetof(CS2::server::CBaseCSGrenadeProjectile, m_bHasEverHitEnemy) == 0xC24, "m_bHasEverHitEnemy in CBaseCSGrenadeProjectile should be at offset 0xC24");
		static_assert(sizeof(CS2::server::CBaseCSGrenadeProjectile) == 0xC28, "CBaseCSGrenadeProjectile size should be 0xC28");
	}
}
