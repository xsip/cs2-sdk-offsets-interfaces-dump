// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>

#include <SDK/server/CBtNode.hpp>
#include <SDK/server/CountdownTimer.hpp>



namespace CS2 {
	namespace server {
		class CBtActionAim : public CS2::server::CBtNode {
		public:
			S2_PAD(0x10);
			GlobalTypes::CUtlString m_szSensorInputKey; // 0x68 | Schema_Atomic | Size: 0x8
			S2_PAD(0x10);
			GlobalTypes::CUtlString m_szAimReadyKey; // 0x80 | Schema_Atomic | Size: 0x8
			float32 m_flZoomCooldownTimestamp; // 0x88 | Schema_Builtin | Size: 0x4
			bool m_bDoneAiming; // 0x8c | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			float32 m_flLerpStartTime; // 0x90 | Schema_Builtin | Size: 0x4
			float32 m_flNextLookTargetLerpTime; // 0x94 | Schema_Builtin | Size: 0x4
			float32 m_flPenaltyReductionRatio; // 0x98 | Schema_Builtin | Size: 0x4
			GlobalTypes::QAngle m_NextLookTarget; // 0x9c | Schema_Atomic | Size: 0xc
			server::CountdownTimer m_AimTimer; // 0xa8 | Schema_DeclaredClass | Size: 0x18
			server::CountdownTimer m_SniperHoldTimer; // 0xc0 | Schema_DeclaredClass | Size: 0x18
			server::CountdownTimer m_FocusIntervalTimer; // 0xd8 | Schema_DeclaredClass | Size: 0x18
			bool m_bAcquired; // 0xf0 | Schema_Builtin | Size: 0x1
			S2_PAD(0x7); // End padding
		};
		static_assert(offsetof(CS2::server::CBtActionAim, m_szSensorInputKey) == 0x68, "m_szSensorInputKey in CBtActionAim should be at offset 0x68");
		static_assert(offsetof(CS2::server::CBtActionAim, m_szAimReadyKey) == 0x80, "m_szAimReadyKey in CBtActionAim should be at offset 0x80");
		static_assert(offsetof(CS2::server::CBtActionAim, m_flZoomCooldownTimestamp) == 0x88, "m_flZoomCooldownTimestamp in CBtActionAim should be at offset 0x88");
		static_assert(offsetof(CS2::server::CBtActionAim, m_bDoneAiming) == 0x8C, "m_bDoneAiming in CBtActionAim should be at offset 0x8C");
		static_assert(offsetof(CS2::server::CBtActionAim, m_flLerpStartTime) == 0x90, "m_flLerpStartTime in CBtActionAim should be at offset 0x90");
		static_assert(offsetof(CS2::server::CBtActionAim, m_flNextLookTargetLerpTime) == 0x94, "m_flNextLookTargetLerpTime in CBtActionAim should be at offset 0x94");
		static_assert(offsetof(CS2::server::CBtActionAim, m_flPenaltyReductionRatio) == 0x98, "m_flPenaltyReductionRatio in CBtActionAim should be at offset 0x98");
		static_assert(offsetof(CS2::server::CBtActionAim, m_NextLookTarget) == 0x9C, "m_NextLookTarget in CBtActionAim should be at offset 0x9C");
		static_assert(offsetof(CS2::server::CBtActionAim, m_AimTimer) == 0xA8, "m_AimTimer in CBtActionAim should be at offset 0xA8");
		static_assert(offsetof(CS2::server::CBtActionAim, m_SniperHoldTimer) == 0xC0, "m_SniperHoldTimer in CBtActionAim should be at offset 0xC0");
		static_assert(offsetof(CS2::server::CBtActionAim, m_FocusIntervalTimer) == 0xD8, "m_FocusIntervalTimer in CBtActionAim should be at offset 0xD8");
		static_assert(offsetof(CS2::server::CBtActionAim, m_bAcquired) == 0xF0, "m_bAcquired in CBtActionAim should be at offset 0xF0");
		static_assert(sizeof(CS2::server::CBtActionAim) == 0xF8, "CBtActionAim size should be 0xF8");
	}
}
