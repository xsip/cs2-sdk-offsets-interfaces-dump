// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/server/CBtNode.hpp>
#include <SDK/server/CountdownTimer.hpp>



namespace CS2 {
	namespace server {
		class CBtActionMoveTo : public CS2::server::CBtNode {
		public:
			S2_PAD(0x8);
			GlobalTypes::CUtlString m_szDestinationInputKey; // 0x60 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlString m_szHidingSpotInputKey; // 0x68 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlString m_szThreatInputKey; // 0x70 | Schema_Atomic | Size: 0x8
			GlobalTypes::Vector m_vecDestination; // 0x78 | Schema_Atomic | Size: 0xc
			bool m_bAutoLookAdjust; // 0x84 | Schema_Builtin | Size: 0x1
			bool m_bComputePath; // 0x85 | Schema_Builtin | Size: 0x1
			S2_PAD(0x2);
			float32 m_flDamagingAreasPenaltyCost; // 0x88 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4);
			server::CountdownTimer m_CheckApproximateCornersTimer; // 0x90 | Schema_DeclaredClass | Size: 0x18
			server::CountdownTimer m_CheckHighPriorityItem; // 0xa8 | Schema_DeclaredClass | Size: 0x18
			server::CountdownTimer m_RepathTimer; // 0xc0 | Schema_DeclaredClass | Size: 0x18
			float32 m_flArrivalEpsilon; // 0xd8 | Schema_Builtin | Size: 0x4
			float32 m_flAdditionalArrivalEpsilon2D; // 0xdc | Schema_Builtin | Size: 0x4
			float32 m_flHidingSpotCheckDistanceThreshold; // 0xe0 | Schema_Builtin | Size: 0x4
			float32 m_flNearestAreaDistanceThreshold; // 0xe4 | Schema_Builtin | Size: 0x4
		};
		static_assert(offsetof(CS2::server::CBtActionMoveTo, m_szDestinationInputKey) == 0x60, "m_szDestinationInputKey in CBtActionMoveTo should be at offset 0x60");
		static_assert(offsetof(CS2::server::CBtActionMoveTo, m_szHidingSpotInputKey) == 0x68, "m_szHidingSpotInputKey in CBtActionMoveTo should be at offset 0x68");
		static_assert(offsetof(CS2::server::CBtActionMoveTo, m_szThreatInputKey) == 0x70, "m_szThreatInputKey in CBtActionMoveTo should be at offset 0x70");
		static_assert(offsetof(CS2::server::CBtActionMoveTo, m_vecDestination) == 0x78, "m_vecDestination in CBtActionMoveTo should be at offset 0x78");
		static_assert(offsetof(CS2::server::CBtActionMoveTo, m_bAutoLookAdjust) == 0x84, "m_bAutoLookAdjust in CBtActionMoveTo should be at offset 0x84");
		static_assert(offsetof(CS2::server::CBtActionMoveTo, m_bComputePath) == 0x85, "m_bComputePath in CBtActionMoveTo should be at offset 0x85");
		static_assert(offsetof(CS2::server::CBtActionMoveTo, m_flDamagingAreasPenaltyCost) == 0x88, "m_flDamagingAreasPenaltyCost in CBtActionMoveTo should be at offset 0x88");
		static_assert(offsetof(CS2::server::CBtActionMoveTo, m_CheckApproximateCornersTimer) == 0x90, "m_CheckApproximateCornersTimer in CBtActionMoveTo should be at offset 0x90");
		static_assert(offsetof(CS2::server::CBtActionMoveTo, m_CheckHighPriorityItem) == 0xA8, "m_CheckHighPriorityItem in CBtActionMoveTo should be at offset 0xA8");
		static_assert(offsetof(CS2::server::CBtActionMoveTo, m_RepathTimer) == 0xC0, "m_RepathTimer in CBtActionMoveTo should be at offset 0xC0");
		static_assert(offsetof(CS2::server::CBtActionMoveTo, m_flArrivalEpsilon) == 0xD8, "m_flArrivalEpsilon in CBtActionMoveTo should be at offset 0xD8");
		static_assert(offsetof(CS2::server::CBtActionMoveTo, m_flAdditionalArrivalEpsilon2D) == 0xDC, "m_flAdditionalArrivalEpsilon2D in CBtActionMoveTo should be at offset 0xDC");
		static_assert(offsetof(CS2::server::CBtActionMoveTo, m_flHidingSpotCheckDistanceThreshold) == 0xE0, "m_flHidingSpotCheckDistanceThreshold in CBtActionMoveTo should be at offset 0xE0");
		static_assert(offsetof(CS2::server::CBtActionMoveTo, m_flNearestAreaDistanceThreshold) == 0xE4, "m_flNearestAreaDistanceThreshold in CBtActionMoveTo should be at offset 0xE4");
		static_assert(sizeof(CS2::server::CBtActionMoveTo) == 0xE8, "CBtActionMoveTo size should be 0xE8");
	}
}
