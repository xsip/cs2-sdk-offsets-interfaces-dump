// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/server/CBaseEntity.hpp>
#include <SDK/entity2/CEntityIOOutput.hpp>





using namespace GlobalTypes;
namespace CS2 {
	namespace server {
		class CEnvSoundscape : public CS2::server::CBaseEntity {
		public:
			entity2::CEntityIOOutput m_OnPlay; // 0x4f0 | Schema_DeclaredClass | Size: 0x28
			float32 m_flRadius; // 0x518 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4);
			GlobalTypes::CUtlSymbolLarge m_soundEventName; // 0x520 | Schema_Atomic | Size: 0x8
			bool m_bOverrideWithEvent; // 0x528 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			int32_t m_soundscapeIndex; // 0x52c | Schema_Builtin | Size: 0x4
			int32_t m_soundscapeEntityListId; // 0x530 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4);
			GlobalTypes::CUtlSymbolLarge m_positionNames[8]; // 0x538 | Schema_FixedArray | Size: 0x40
			// server::CHandle< server::CEnvSoundscape > m_hProxySoundscape; // 0x578 | Schema_Atomic | Size: 0x4
			char  m_hProxySoundscape[0x4]; // 0x578 | Schema_Atomic | Size: 0x4
			bool m_bDisabled; // 0x57c | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			GlobalTypes::CUtlSymbolLarge m_soundscapeName; // 0x580 | Schema_Atomic | Size: 0x8
			uint32_t m_soundEventHash; // 0x588 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4); // End padding
		};
		static_assert(offsetof(CS2::server::CEnvSoundscape, m_OnPlay) == 0x4F0, "m_OnPlay in CEnvSoundscape should be at offset 0x4F0");
		static_assert(offsetof(CS2::server::CEnvSoundscape, m_flRadius) == 0x518, "m_flRadius in CEnvSoundscape should be at offset 0x518");
		static_assert(offsetof(CS2::server::CEnvSoundscape, m_soundEventName) == 0x520, "m_soundEventName in CEnvSoundscape should be at offset 0x520");
		static_assert(offsetof(CS2::server::CEnvSoundscape, m_bOverrideWithEvent) == 0x528, "m_bOverrideWithEvent in CEnvSoundscape should be at offset 0x528");
		static_assert(offsetof(CS2::server::CEnvSoundscape, m_soundscapeIndex) == 0x52C, "m_soundscapeIndex in CEnvSoundscape should be at offset 0x52C");
		static_assert(offsetof(CS2::server::CEnvSoundscape, m_soundscapeEntityListId) == 0x530, "m_soundscapeEntityListId in CEnvSoundscape should be at offset 0x530");
		static_assert(offsetof(CS2::server::CEnvSoundscape, m_positionNames) == 0x538, "m_positionNames in CEnvSoundscape should be at offset 0x538");
		static_assert(offsetof(CS2::server::CEnvSoundscape, m_hProxySoundscape) == 0x578, "m_hProxySoundscape in CEnvSoundscape should be at offset 0x578");
		static_assert(offsetof(CS2::server::CEnvSoundscape, m_bDisabled) == 0x57C, "m_bDisabled in CEnvSoundscape should be at offset 0x57C");
		static_assert(offsetof(CS2::server::CEnvSoundscape, m_soundscapeName) == 0x580, "m_soundscapeName in CEnvSoundscape should be at offset 0x580");
		static_assert(offsetof(CS2::server::CEnvSoundscape, m_soundEventHash) == 0x588, "m_soundEventHash in CEnvSoundscape should be at offset 0x588");
		static_assert(sizeof(CS2::server::CEnvSoundscape) == 0x590, "CEnvSoundscape size should be 0x590");
	}
}
