// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/server/CPointEntity.hpp>



namespace CS2 {
	namespace server {
		class CMessageEntity : public CS2::server::CPointEntity {
		public:
			int32_t m_radius; // 0x4f0 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4);
			GlobalTypes::CUtlSymbolLarge m_messageText; // 0x4f8 | Schema_Atomic | Size: 0x8
			bool m_drawText; // 0x500 | Schema_Builtin | Size: 0x1
			bool m_bDeveloperOnly; // 0x501 | Schema_Builtin | Size: 0x1
			bool m_bEnabled; // 0x502 | Schema_Builtin | Size: 0x1
			S2_PAD(0x5); // End padding
		};
		static_assert(offsetof(CS2::server::CMessageEntity, m_radius) == 0x4F0, "m_radius in CMessageEntity should be at offset 0x4F0");
		static_assert(offsetof(CS2::server::CMessageEntity, m_messageText) == 0x4F8, "m_messageText in CMessageEntity should be at offset 0x4F8");
		static_assert(offsetof(CS2::server::CMessageEntity, m_drawText) == 0x500, "m_drawText in CMessageEntity should be at offset 0x500");
		static_assert(offsetof(CS2::server::CMessageEntity, m_bDeveloperOnly) == 0x501, "m_bDeveloperOnly in CMessageEntity should be at offset 0x501");
		static_assert(offsetof(CS2::server::CMessageEntity, m_bEnabled) == 0x502, "m_bEnabled in CMessageEntity should be at offset 0x502");
		static_assert(sizeof(CS2::server::CMessageEntity) == 0x508, "CMessageEntity size should be 0x508");
	}
}
