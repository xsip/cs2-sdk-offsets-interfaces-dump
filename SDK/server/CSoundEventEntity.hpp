// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/server/CBaseEntity.hpp>
#include <SDK/entity2/CEntityIOOutput.hpp>



namespace CS2 {
	namespace server {
		class CSoundEventEntity : public CS2::server::CBaseEntity {
		public:
			bool m_bStartOnSpawn; // 0x4f0 | Schema_Builtin | Size: 0x1
			bool m_bToLocalPlayer; // 0x4f1 | Schema_Builtin | Size: 0x1
			bool m_bStopOnNew; // 0x4f2 | Schema_Builtin | Size: 0x1
			bool m_bSaveRestore; // 0x4f3 | Schema_Builtin | Size: 0x1
			bool m_bSavedIsPlaying; // 0x4f4 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			float32 m_flSavedElapsedTime; // 0x4f8 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4);
			GlobalTypes::CUtlSymbolLarge m_iszSourceEntityName; // 0x500 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlSymbolLarge m_iszAttachmentName; // 0x508 | Schema_Atomic | Size: 0x8
			// GlobalTypes::CEntityOutputTemplate< uint64 > m_onGUIDChanged; // 0x510 | Schema_Atomic | Size: 0x28
			char  m_onGUIDChanged[0x28]; // 0x510 | Schema_Atomic | Size: 0x28
			entity2::CEntityIOOutput m_onSoundFinished; // 0x538 | Schema_DeclaredClass | Size: 0x28
			float32 m_flClientCullRadius; // 0x560 | Schema_Builtin | Size: 0x4
			S2_PAD(0x2c);
			GlobalTypes::CUtlSymbolLarge m_iszSoundName; // 0x590 | Schema_Atomic | Size: 0x8
			S2_PAD(0x14);
			GlobalTypes::CEntityHandle m_hSource; // 0x5ac | Schema_Atomic | Size: 0x4
			int32_t m_nEntityIndexSelection; // 0x5b0 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4); // End padding
		};
		static_assert(offsetof(CS2::server::CSoundEventEntity, m_bStartOnSpawn) == 0x4F0, "m_bStartOnSpawn in CSoundEventEntity should be at offset 0x4F0");
		static_assert(offsetof(CS2::server::CSoundEventEntity, m_bToLocalPlayer) == 0x4F1, "m_bToLocalPlayer in CSoundEventEntity should be at offset 0x4F1");
		static_assert(offsetof(CS2::server::CSoundEventEntity, m_bStopOnNew) == 0x4F2, "m_bStopOnNew in CSoundEventEntity should be at offset 0x4F2");
		static_assert(offsetof(CS2::server::CSoundEventEntity, m_bSaveRestore) == 0x4F3, "m_bSaveRestore in CSoundEventEntity should be at offset 0x4F3");
		static_assert(offsetof(CS2::server::CSoundEventEntity, m_bSavedIsPlaying) == 0x4F4, "m_bSavedIsPlaying in CSoundEventEntity should be at offset 0x4F4");
		static_assert(offsetof(CS2::server::CSoundEventEntity, m_flSavedElapsedTime) == 0x4F8, "m_flSavedElapsedTime in CSoundEventEntity should be at offset 0x4F8");
		static_assert(offsetof(CS2::server::CSoundEventEntity, m_iszSourceEntityName) == 0x500, "m_iszSourceEntityName in CSoundEventEntity should be at offset 0x500");
		static_assert(offsetof(CS2::server::CSoundEventEntity, m_iszAttachmentName) == 0x508, "m_iszAttachmentName in CSoundEventEntity should be at offset 0x508");
		static_assert(offsetof(CS2::server::CSoundEventEntity, m_onGUIDChanged) == 0x510, "m_onGUIDChanged in CSoundEventEntity should be at offset 0x510");
		static_assert(offsetof(CS2::server::CSoundEventEntity, m_onSoundFinished) == 0x538, "m_onSoundFinished in CSoundEventEntity should be at offset 0x538");
		static_assert(offsetof(CS2::server::CSoundEventEntity, m_flClientCullRadius) == 0x560, "m_flClientCullRadius in CSoundEventEntity should be at offset 0x560");
		static_assert(offsetof(CS2::server::CSoundEventEntity, m_iszSoundName) == 0x590, "m_iszSoundName in CSoundEventEntity should be at offset 0x590");
		static_assert(offsetof(CS2::server::CSoundEventEntity, m_hSource) == 0x5AC, "m_hSource in CSoundEventEntity should be at offset 0x5AC");
		static_assert(offsetof(CS2::server::CSoundEventEntity, m_nEntityIndexSelection) == 0x5B0, "m_nEntityIndexSelection in CSoundEventEntity should be at offset 0x5B0");
		static_assert(sizeof(CS2::server::CSoundEventEntity) == 0x5B8, "CSoundEventEntity size should be 0x5B8");
	}
}
