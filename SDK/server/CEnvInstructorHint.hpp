// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/server/CPointEntity.hpp>



namespace CS2 {
	namespace server {
		class CEnvInstructorHint : public CS2::server::CPointEntity {
		public:
			GlobalTypes::CUtlSymbolLarge m_iszName; // 0x4f0 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlSymbolLarge m_iszReplace_Key; // 0x4f8 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlSymbolLarge m_iszHintTargetEntity; // 0x500 | Schema_Atomic | Size: 0x8
			int32_t m_iTimeout; // 0x508 | Schema_Builtin | Size: 0x4
			int32_t m_iDisplayLimit; // 0x50c | Schema_Builtin | Size: 0x4
			GlobalTypes::CUtlSymbolLarge m_iszIcon_Onscreen; // 0x510 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlSymbolLarge m_iszIcon_Offscreen; // 0x518 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlSymbolLarge m_iszCaption; // 0x520 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlSymbolLarge m_iszActivatorCaption; // 0x528 | Schema_Atomic | Size: 0x8
			GlobalTypes::Color m_Color; // 0x530 | Schema_Atomic | Size: 0x4
			float32 m_fIconOffset; // 0x534 | Schema_Builtin | Size: 0x4
			float32 m_fRange; // 0x538 | Schema_Builtin | Size: 0x4
			uint8_t m_iPulseOption; // 0x53c | Schema_Builtin | Size: 0x1
			uint8_t m_iAlphaOption; // 0x53d | Schema_Builtin | Size: 0x1
			uint8_t m_iShakeOption; // 0x53e | Schema_Builtin | Size: 0x1
			bool m_bStatic; // 0x53f | Schema_Builtin | Size: 0x1
			bool m_bNoOffscreen; // 0x540 | Schema_Builtin | Size: 0x1
			bool m_bForceCaption; // 0x541 | Schema_Builtin | Size: 0x1
			S2_PAD(0x2);
			int32_t m_iInstanceType; // 0x544 | Schema_Builtin | Size: 0x4
			bool m_bSuppressRest; // 0x548 | Schema_Builtin | Size: 0x1
			S2_PAD(0x7);
			GlobalTypes::CUtlSymbolLarge m_iszBinding; // 0x550 | Schema_Atomic | Size: 0x8
			bool m_bAllowNoDrawTarget; // 0x558 | Schema_Builtin | Size: 0x1
			bool m_bAutoStart; // 0x559 | Schema_Builtin | Size: 0x1
			bool m_bLocalPlayerOnly; // 0x55a | Schema_Builtin | Size: 0x1
			S2_PAD(0x5); // End padding
		};
		static_assert(offsetof(CS2::server::CEnvInstructorHint, m_iszName) == 0x4F0, "m_iszName in CEnvInstructorHint should be at offset 0x4F0");
		static_assert(offsetof(CS2::server::CEnvInstructorHint, m_iszReplace_Key) == 0x4F8, "m_iszReplace_Key in CEnvInstructorHint should be at offset 0x4F8");
		static_assert(offsetof(CS2::server::CEnvInstructorHint, m_iszHintTargetEntity) == 0x500, "m_iszHintTargetEntity in CEnvInstructorHint should be at offset 0x500");
		static_assert(offsetof(CS2::server::CEnvInstructorHint, m_iTimeout) == 0x508, "m_iTimeout in CEnvInstructorHint should be at offset 0x508");
		static_assert(offsetof(CS2::server::CEnvInstructorHint, m_iDisplayLimit) == 0x50C, "m_iDisplayLimit in CEnvInstructorHint should be at offset 0x50C");
		static_assert(offsetof(CS2::server::CEnvInstructorHint, m_iszIcon_Onscreen) == 0x510, "m_iszIcon_Onscreen in CEnvInstructorHint should be at offset 0x510");
		static_assert(offsetof(CS2::server::CEnvInstructorHint, m_iszIcon_Offscreen) == 0x518, "m_iszIcon_Offscreen in CEnvInstructorHint should be at offset 0x518");
		static_assert(offsetof(CS2::server::CEnvInstructorHint, m_iszCaption) == 0x520, "m_iszCaption in CEnvInstructorHint should be at offset 0x520");
		static_assert(offsetof(CS2::server::CEnvInstructorHint, m_iszActivatorCaption) == 0x528, "m_iszActivatorCaption in CEnvInstructorHint should be at offset 0x528");
		static_assert(offsetof(CS2::server::CEnvInstructorHint, m_Color) == 0x530, "m_Color in CEnvInstructorHint should be at offset 0x530");
		static_assert(offsetof(CS2::server::CEnvInstructorHint, m_fIconOffset) == 0x534, "m_fIconOffset in CEnvInstructorHint should be at offset 0x534");
		static_assert(offsetof(CS2::server::CEnvInstructorHint, m_fRange) == 0x538, "m_fRange in CEnvInstructorHint should be at offset 0x538");
		static_assert(offsetof(CS2::server::CEnvInstructorHint, m_iPulseOption) == 0x53C, "m_iPulseOption in CEnvInstructorHint should be at offset 0x53C");
		static_assert(offsetof(CS2::server::CEnvInstructorHint, m_iAlphaOption) == 0x53D, "m_iAlphaOption in CEnvInstructorHint should be at offset 0x53D");
		static_assert(offsetof(CS2::server::CEnvInstructorHint, m_iShakeOption) == 0x53E, "m_iShakeOption in CEnvInstructorHint should be at offset 0x53E");
		static_assert(offsetof(CS2::server::CEnvInstructorHint, m_bStatic) == 0x53F, "m_bStatic in CEnvInstructorHint should be at offset 0x53F");
		static_assert(offsetof(CS2::server::CEnvInstructorHint, m_bNoOffscreen) == 0x540, "m_bNoOffscreen in CEnvInstructorHint should be at offset 0x540");
		static_assert(offsetof(CS2::server::CEnvInstructorHint, m_bForceCaption) == 0x541, "m_bForceCaption in CEnvInstructorHint should be at offset 0x541");
		static_assert(offsetof(CS2::server::CEnvInstructorHint, m_iInstanceType) == 0x544, "m_iInstanceType in CEnvInstructorHint should be at offset 0x544");
		static_assert(offsetof(CS2::server::CEnvInstructorHint, m_bSuppressRest) == 0x548, "m_bSuppressRest in CEnvInstructorHint should be at offset 0x548");
		static_assert(offsetof(CS2::server::CEnvInstructorHint, m_iszBinding) == 0x550, "m_iszBinding in CEnvInstructorHint should be at offset 0x550");
		static_assert(offsetof(CS2::server::CEnvInstructorHint, m_bAllowNoDrawTarget) == 0x558, "m_bAllowNoDrawTarget in CEnvInstructorHint should be at offset 0x558");
		static_assert(offsetof(CS2::server::CEnvInstructorHint, m_bAutoStart) == 0x559, "m_bAutoStart in CEnvInstructorHint should be at offset 0x559");
		static_assert(offsetof(CS2::server::CEnvInstructorHint, m_bLocalPlayerOnly) == 0x55A, "m_bLocalPlayerOnly in CEnvInstructorHint should be at offset 0x55A");
		static_assert(sizeof(CS2::server::CEnvInstructorHint) == 0x560, "CEnvInstructorHint size should be 0x560");
	}
}
