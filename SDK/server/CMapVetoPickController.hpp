// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>

#include <SDK/server/CBaseEntity.hpp>



namespace CS2 {
	namespace server {
		class CMapVetoPickController : public CS2::server::CBaseEntity {
		public:
			bool m_bPlayedIntroVcd; // 0x4f0 | Schema_Builtin | Size: 0x1
			bool m_bNeedToPlayFiveSecondsRemaining; // 0x4f1 | Schema_Builtin | Size: 0x1
			S2_PAD(0x1e);
			float64 m_dblPreMatchDraftSequenceTime; // 0x510 | Schema_Builtin | Size: 0x8
			bool m_bPreMatchDraftStateChanged; // 0x518 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			int32_t m_nDraftType; // 0x51c | Schema_Builtin | Size: 0x4
			int32_t m_nTeamWinningCoinToss; // 0x520 | Schema_Builtin | Size: 0x4
			int32_t m_nTeamWithFirstChoice[64]; // 0x524 | Schema_FixedArray | Size: 0x100
			int32_t m_nVoteMapIdsList[7]; // 0x624 | Schema_FixedArray | Size: 0x1c
			int32_t m_nAccountIDs[64]; // 0x640 | Schema_FixedArray | Size: 0x100
			int32_t m_nMapId0[64]; // 0x740 | Schema_FixedArray | Size: 0x100
			int32_t m_nMapId1[64]; // 0x840 | Schema_FixedArray | Size: 0x100
			int32_t m_nMapId2[64]; // 0x940 | Schema_FixedArray | Size: 0x100
			int32_t m_nMapId3[64]; // 0xa40 | Schema_FixedArray | Size: 0x100
			int32_t m_nMapId4[64]; // 0xb40 | Schema_FixedArray | Size: 0x100
			int32_t m_nMapId5[64]; // 0xc40 | Schema_FixedArray | Size: 0x100
			int32_t m_nStartingSide0[64]; // 0xd40 | Schema_FixedArray | Size: 0x100
			int32_t m_nCurrentPhase; // 0xe40 | Schema_Builtin | Size: 0x4
			int32_t m_nPhaseStartTick; // 0xe44 | Schema_Builtin | Size: 0x4
			int32_t m_nPhaseDurationTicks; // 0xe48 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4);
			// GlobalTypes::CEntityOutputTemplate< GlobalTypes::CUtlSymbolLarge > m_OnMapVetoed; // 0xe50 | Schema_Atomic | Size: 0x28
			char  m_OnMapVetoed[0x28]; // 0xe50 | Schema_Atomic | Size: 0x28
			// GlobalTypes::CEntityOutputTemplate< GlobalTypes::CUtlSymbolLarge > m_OnMapPicked; // 0xe78 | Schema_Atomic | Size: 0x28
			char  m_OnMapPicked[0x28]; // 0xe78 | Schema_Atomic | Size: 0x28
			// GlobalTypes::CEntityOutputTemplate< int32 > m_OnSidesPicked; // 0xea0 | Schema_Atomic | Size: 0x28
			char  m_OnSidesPicked[0x28]; // 0xea0 | Schema_Atomic | Size: 0x28
			// GlobalTypes::CEntityOutputTemplate< int32 > m_OnNewPhaseStarted; // 0xec8 | Schema_Atomic | Size: 0x28
			char  m_OnNewPhaseStarted[0x28]; // 0xec8 | Schema_Atomic | Size: 0x28
			// GlobalTypes::CEntityOutputTemplate< int32 > m_OnLevelTransition; // 0xef0 | Schema_Atomic | Size: 0x28
			char  m_OnLevelTransition[0x28]; // 0xef0 | Schema_Atomic | Size: 0x28
		};
		static_assert(offsetof(CS2::server::CMapVetoPickController, m_bPlayedIntroVcd) == 0x4F0, "m_bPlayedIntroVcd in CMapVetoPickController should be at offset 0x4F0");
		static_assert(offsetof(CS2::server::CMapVetoPickController, m_bNeedToPlayFiveSecondsRemaining) == 0x4F1, "m_bNeedToPlayFiveSecondsRemaining in CMapVetoPickController should be at offset 0x4F1");
		static_assert(offsetof(CS2::server::CMapVetoPickController, m_dblPreMatchDraftSequenceTime) == 0x510, "m_dblPreMatchDraftSequenceTime in CMapVetoPickController should be at offset 0x510");
		static_assert(offsetof(CS2::server::CMapVetoPickController, m_bPreMatchDraftStateChanged) == 0x518, "m_bPreMatchDraftStateChanged in CMapVetoPickController should be at offset 0x518");
		static_assert(offsetof(CS2::server::CMapVetoPickController, m_nDraftType) == 0x51C, "m_nDraftType in CMapVetoPickController should be at offset 0x51C");
		static_assert(offsetof(CS2::server::CMapVetoPickController, m_nTeamWinningCoinToss) == 0x520, "m_nTeamWinningCoinToss in CMapVetoPickController should be at offset 0x520");
		static_assert(offsetof(CS2::server::CMapVetoPickController, m_nTeamWithFirstChoice) == 0x524, "m_nTeamWithFirstChoice in CMapVetoPickController should be at offset 0x524");
		static_assert(offsetof(CS2::server::CMapVetoPickController, m_nVoteMapIdsList) == 0x624, "m_nVoteMapIdsList in CMapVetoPickController should be at offset 0x624");
		static_assert(offsetof(CS2::server::CMapVetoPickController, m_nAccountIDs) == 0x640, "m_nAccountIDs in CMapVetoPickController should be at offset 0x640");
		static_assert(offsetof(CS2::server::CMapVetoPickController, m_nMapId0) == 0x740, "m_nMapId0 in CMapVetoPickController should be at offset 0x740");
		static_assert(offsetof(CS2::server::CMapVetoPickController, m_nMapId1) == 0x840, "m_nMapId1 in CMapVetoPickController should be at offset 0x840");
		static_assert(offsetof(CS2::server::CMapVetoPickController, m_nMapId2) == 0x940, "m_nMapId2 in CMapVetoPickController should be at offset 0x940");
		static_assert(offsetof(CS2::server::CMapVetoPickController, m_nMapId3) == 0xA40, "m_nMapId3 in CMapVetoPickController should be at offset 0xA40");
		static_assert(offsetof(CS2::server::CMapVetoPickController, m_nMapId4) == 0xB40, "m_nMapId4 in CMapVetoPickController should be at offset 0xB40");
		static_assert(offsetof(CS2::server::CMapVetoPickController, m_nMapId5) == 0xC40, "m_nMapId5 in CMapVetoPickController should be at offset 0xC40");
		static_assert(offsetof(CS2::server::CMapVetoPickController, m_nStartingSide0) == 0xD40, "m_nStartingSide0 in CMapVetoPickController should be at offset 0xD40");
		static_assert(offsetof(CS2::server::CMapVetoPickController, m_nCurrentPhase) == 0xE40, "m_nCurrentPhase in CMapVetoPickController should be at offset 0xE40");
		static_assert(offsetof(CS2::server::CMapVetoPickController, m_nPhaseStartTick) == 0xE44, "m_nPhaseStartTick in CMapVetoPickController should be at offset 0xE44");
		static_assert(offsetof(CS2::server::CMapVetoPickController, m_nPhaseDurationTicks) == 0xE48, "m_nPhaseDurationTicks in CMapVetoPickController should be at offset 0xE48");
		static_assert(offsetof(CS2::server::CMapVetoPickController, m_OnMapVetoed) == 0xE50, "m_OnMapVetoed in CMapVetoPickController should be at offset 0xE50");
		static_assert(offsetof(CS2::server::CMapVetoPickController, m_OnMapPicked) == 0xE78, "m_OnMapPicked in CMapVetoPickController should be at offset 0xE78");
		static_assert(offsetof(CS2::server::CMapVetoPickController, m_OnSidesPicked) == 0xEA0, "m_OnSidesPicked in CMapVetoPickController should be at offset 0xEA0");
		static_assert(offsetof(CS2::server::CMapVetoPickController, m_OnNewPhaseStarted) == 0xEC8, "m_OnNewPhaseStarted in CMapVetoPickController should be at offset 0xEC8");
		static_assert(offsetof(CS2::server::CMapVetoPickController, m_OnLevelTransition) == 0xEF0, "m_OnLevelTransition in CMapVetoPickController should be at offset 0xEF0");
		static_assert(sizeof(CS2::server::CMapVetoPickController) == 0xF18, "CMapVetoPickController size should be 0xF18");
	}
}
