// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>

#include <SDK/server/CCSWeaponBase.hpp>
#include <SDK/entity2/GameTime_t.hpp>
#include <SDK/entity2/GameTick_t.hpp>



namespace CS2 {
	namespace server {
		class CBaseCSGrenade : public CS2::server::CCSWeaponBase {
		public:
			bool m_bRedraw; // 0x11a8 | Schema_Builtin | Size: 0x1
			bool m_bIsHeldByPlayer; // 0x11a9 | Schema_Builtin | Size: 0x1
			bool m_bPinPulled; // 0x11aa | Schema_Builtin | Size: 0x1
			bool m_bJumpThrow; // 0x11ab | Schema_Builtin | Size: 0x1
			bool m_bThrowAnimating; // 0x11ac | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			entity2::GameTime_t m_fThrowTime; // 0x11b0 | Schema_DeclaredClass | Size: 0x4
			float32 m_flThrowStrength; // 0x11b4 | Schema_Builtin | Size: 0x4
			entity2::GameTime_t m_fDropTime; // 0x11b8 | Schema_DeclaredClass | Size: 0x4
			entity2::GameTime_t m_fPinPullTime; // 0x11bc | Schema_DeclaredClass | Size: 0x4
			bool m_bJustPulledPin; // 0x11c0 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			entity2::GameTick_t m_nNextHoldTick; // 0x11c4 | Schema_DeclaredClass | Size: 0x4
			float32 m_flNextHoldFrac; // 0x11c8 | Schema_Builtin | Size: 0x4
			// server::CHandle< server::CCSWeaponBase > m_hSwitchToWeaponAfterThrow; // 0x11cc | Schema_Atomic | Size: 0x4
			char  m_hSwitchToWeaponAfterThrow[0x4]; // 0x11cc | Schema_Atomic | Size: 0x4
			S2_PAD(0x18); // End padding
		};
		static_assert(offsetof(CS2::server::CBaseCSGrenade, m_bRedraw) == 0x11A8, "m_bRedraw in CBaseCSGrenade should be at offset 0x11A8");
		static_assert(offsetof(CS2::server::CBaseCSGrenade, m_bIsHeldByPlayer) == 0x11A9, "m_bIsHeldByPlayer in CBaseCSGrenade should be at offset 0x11A9");
		static_assert(offsetof(CS2::server::CBaseCSGrenade, m_bPinPulled) == 0x11AA, "m_bPinPulled in CBaseCSGrenade should be at offset 0x11AA");
		static_assert(offsetof(CS2::server::CBaseCSGrenade, m_bJumpThrow) == 0x11AB, "m_bJumpThrow in CBaseCSGrenade should be at offset 0x11AB");
		static_assert(offsetof(CS2::server::CBaseCSGrenade, m_bThrowAnimating) == 0x11AC, "m_bThrowAnimating in CBaseCSGrenade should be at offset 0x11AC");
		static_assert(offsetof(CS2::server::CBaseCSGrenade, m_fThrowTime) == 0x11B0, "m_fThrowTime in CBaseCSGrenade should be at offset 0x11B0");
		static_assert(offsetof(CS2::server::CBaseCSGrenade, m_flThrowStrength) == 0x11B4, "m_flThrowStrength in CBaseCSGrenade should be at offset 0x11B4");
		static_assert(offsetof(CS2::server::CBaseCSGrenade, m_fDropTime) == 0x11B8, "m_fDropTime in CBaseCSGrenade should be at offset 0x11B8");
		static_assert(offsetof(CS2::server::CBaseCSGrenade, m_fPinPullTime) == 0x11BC, "m_fPinPullTime in CBaseCSGrenade should be at offset 0x11BC");
		static_assert(offsetof(CS2::server::CBaseCSGrenade, m_bJustPulledPin) == 0x11C0, "m_bJustPulledPin in CBaseCSGrenade should be at offset 0x11C0");
		static_assert(offsetof(CS2::server::CBaseCSGrenade, m_nNextHoldTick) == 0x11C4, "m_nNextHoldTick in CBaseCSGrenade should be at offset 0x11C4");
		static_assert(offsetof(CS2::server::CBaseCSGrenade, m_flNextHoldFrac) == 0x11C8, "m_flNextHoldFrac in CBaseCSGrenade should be at offset 0x11C8");
		static_assert(offsetof(CS2::server::CBaseCSGrenade, m_hSwitchToWeaponAfterThrow) == 0x11CC, "m_hSwitchToWeaponAfterThrow in CBaseCSGrenade should be at offset 0x11CC");
		static_assert(sizeof(CS2::server::CBaseCSGrenade) == 0x11E8, "CBaseCSGrenade size should be 0x11E8");
	}
}
