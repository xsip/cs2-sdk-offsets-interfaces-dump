// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>

#include <SDK/modellib/ScriptedMoveTo_t.hpp>
#include <SDK/modellib/SharedMovementGait_t.hpp>
#include <SDK/modellib/ScriptedHeldWeaponBehavior_t.hpp>



namespace CS2 {
	namespace server {
		class PulseScriptedSequenceData_t  {
		public:
			int32_t m_nActorID; // 0x0 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4);
			GlobalTypes::CUtlString m_szPreIdleSequence; // 0x8 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlString m_szEntrySequence; // 0x10 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlString m_szSequence; // 0x18 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlString m_szExitSequence; // 0x20 | Schema_Atomic | Size: 0x8
			modellib::ScriptedMoveTo_t m_nMoveTo; // 0x28 | Schema_DeclaredEnum | Size: 0x4
			modellib::SharedMovementGait_t m_nMoveToGait; // 0x2c | Schema_DeclaredEnum | Size: 0x1
			S2_PAD(0x3);
			modellib::ScriptedHeldWeaponBehavior_t m_nHeldWeaponBehavior; // 0x30 | Schema_DeclaredEnum | Size: 0x4
			bool m_bLoopPreIdleSequence; // 0x34 | Schema_Builtin | Size: 0x1
			bool m_bLoopActionSequence; // 0x35 | Schema_Builtin | Size: 0x1
			bool m_bLoopPostIdleSequence; // 0x36 | Schema_Builtin | Size: 0x1
			bool m_bIgnoreLookAt; // 0x37 | Schema_Builtin | Size: 0x1
		};
		static_assert(offsetof(CS2::server::PulseScriptedSequenceData_t, m_nActorID) == 0x0, "m_nActorID in PulseScriptedSequenceData_t should be at offset 0x0");
		static_assert(offsetof(CS2::server::PulseScriptedSequenceData_t, m_szPreIdleSequence) == 0x8, "m_szPreIdleSequence in PulseScriptedSequenceData_t should be at offset 0x8");
		static_assert(offsetof(CS2::server::PulseScriptedSequenceData_t, m_szEntrySequence) == 0x10, "m_szEntrySequence in PulseScriptedSequenceData_t should be at offset 0x10");
		static_assert(offsetof(CS2::server::PulseScriptedSequenceData_t, m_szSequence) == 0x18, "m_szSequence in PulseScriptedSequenceData_t should be at offset 0x18");
		static_assert(offsetof(CS2::server::PulseScriptedSequenceData_t, m_szExitSequence) == 0x20, "m_szExitSequence in PulseScriptedSequenceData_t should be at offset 0x20");
		static_assert(offsetof(CS2::server::PulseScriptedSequenceData_t, m_nMoveTo) == 0x28, "m_nMoveTo in PulseScriptedSequenceData_t should be at offset 0x28");
		static_assert(offsetof(CS2::server::PulseScriptedSequenceData_t, m_nMoveToGait) == 0x2C, "m_nMoveToGait in PulseScriptedSequenceData_t should be at offset 0x2C");
		static_assert(offsetof(CS2::server::PulseScriptedSequenceData_t, m_nHeldWeaponBehavior) == 0x30, "m_nHeldWeaponBehavior in PulseScriptedSequenceData_t should be at offset 0x30");
		static_assert(offsetof(CS2::server::PulseScriptedSequenceData_t, m_bLoopPreIdleSequence) == 0x34, "m_bLoopPreIdleSequence in PulseScriptedSequenceData_t should be at offset 0x34");
		static_assert(offsetof(CS2::server::PulseScriptedSequenceData_t, m_bLoopActionSequence) == 0x35, "m_bLoopActionSequence in PulseScriptedSequenceData_t should be at offset 0x35");
		static_assert(offsetof(CS2::server::PulseScriptedSequenceData_t, m_bLoopPostIdleSequence) == 0x36, "m_bLoopPostIdleSequence in PulseScriptedSequenceData_t should be at offset 0x36");
		static_assert(offsetof(CS2::server::PulseScriptedSequenceData_t, m_bIgnoreLookAt) == 0x37, "m_bIgnoreLookAt in PulseScriptedSequenceData_t should be at offset 0x37");
		static_assert(sizeof(CS2::server::PulseScriptedSequenceData_t) == 0x38, "PulseScriptedSequenceData_t size should be 0x38");
	}
}
