// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/entity2/GameTime_t.hpp>



namespace CS2 {
	namespace server {
		class CBaseFlex;
	}
}
namespace CS2 {
	namespace server {
		class CAI_Expresser  {
		public:
			S2_PAD(0x60);
			entity2::GameTime_t m_flStopTalkTime; // 0x60 | Schema_DeclaredClass | Size: 0x4
			entity2::GameTime_t m_flStopTalkTimeWithoutDelay; // 0x64 | Schema_DeclaredClass | Size: 0x4
			entity2::GameTime_t m_flQueuedSpeechTime; // 0x68 | Schema_DeclaredClass | Size: 0x4
			entity2::GameTime_t m_flBlockedTalkTime; // 0x6c | Schema_DeclaredClass | Size: 0x4
			int32_t m_voicePitch; // 0x70 | Schema_Builtin | Size: 0x4
			entity2::GameTime_t m_flLastTimeAcceptedSpeak; // 0x74 | Schema_DeclaredClass | Size: 0x4
			bool m_bAllowSpeakingInterrupts; // 0x78 | Schema_Builtin | Size: 0x1
			bool m_bConsiderSceneInvolvementAsSpeech; // 0x79 | Schema_Builtin | Size: 0x1
			bool m_bSceneEntityDisabled; // 0x7a | Schema_Builtin | Size: 0x1
			S2_PAD(0x1);
			int32_t m_nLastSpokenPriority; // 0x7c | Schema_Builtin | Size: 0x4
			S2_PAD(0x18);
			server::CBaseFlex* m_pOuter; // 0x98 | Schema_Ptr | Size: 0x8
		};
		static_assert(offsetof(CS2::server::CAI_Expresser, m_flStopTalkTime) == 0x60, "m_flStopTalkTime in CAI_Expresser should be at offset 0x60");
		static_assert(offsetof(CS2::server::CAI_Expresser, m_flStopTalkTimeWithoutDelay) == 0x64, "m_flStopTalkTimeWithoutDelay in CAI_Expresser should be at offset 0x64");
		static_assert(offsetof(CS2::server::CAI_Expresser, m_flQueuedSpeechTime) == 0x68, "m_flQueuedSpeechTime in CAI_Expresser should be at offset 0x68");
		static_assert(offsetof(CS2::server::CAI_Expresser, m_flBlockedTalkTime) == 0x6C, "m_flBlockedTalkTime in CAI_Expresser should be at offset 0x6C");
		static_assert(offsetof(CS2::server::CAI_Expresser, m_voicePitch) == 0x70, "m_voicePitch in CAI_Expresser should be at offset 0x70");
		static_assert(offsetof(CS2::server::CAI_Expresser, m_flLastTimeAcceptedSpeak) == 0x74, "m_flLastTimeAcceptedSpeak in CAI_Expresser should be at offset 0x74");
		static_assert(offsetof(CS2::server::CAI_Expresser, m_bAllowSpeakingInterrupts) == 0x78, "m_bAllowSpeakingInterrupts in CAI_Expresser should be at offset 0x78");
		static_assert(offsetof(CS2::server::CAI_Expresser, m_bConsiderSceneInvolvementAsSpeech) == 0x79, "m_bConsiderSceneInvolvementAsSpeech in CAI_Expresser should be at offset 0x79");
		static_assert(offsetof(CS2::server::CAI_Expresser, m_bSceneEntityDisabled) == 0x7A, "m_bSceneEntityDisabled in CAI_Expresser should be at offset 0x7A");
		static_assert(offsetof(CS2::server::CAI_Expresser, m_nLastSpokenPriority) == 0x7C, "m_nLastSpokenPriority in CAI_Expresser should be at offset 0x7C");
		static_assert(offsetof(CS2::server::CAI_Expresser, m_pOuter) == 0x98, "m_pOuter in CAI_Expresser should be at offset 0x98");
		static_assert(sizeof(CS2::server::CAI_Expresser) == 0xA0, "CAI_Expresser size should be 0xA0");
	}
}
