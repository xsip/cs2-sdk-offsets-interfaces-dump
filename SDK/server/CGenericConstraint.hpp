// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/server/CPhysConstraint.hpp>
#include <SDK/physicslib/JointMotion_t.hpp>
#include <SDK/entity2/GameTime_t.hpp>
#include <SDK/entity2/CEntityIOOutput.hpp>



namespace CS2 {
	namespace server {
		class CGenericConstraint : public CS2::server::CPhysConstraint {
		public:
			S2_PAD(0x8);
			physicslib::JointMotion_t m_nLinearMotionX; // 0x568 | Schema_DeclaredEnum | Size: 0x4
			physicslib::JointMotion_t m_nLinearMotionY; // 0x56c | Schema_DeclaredEnum | Size: 0x4
			physicslib::JointMotion_t m_nLinearMotionZ; // 0x570 | Schema_DeclaredEnum | Size: 0x4
			float32 m_flLinearFrequencyX; // 0x574 | Schema_Builtin | Size: 0x4
			float32 m_flLinearFrequencyY; // 0x578 | Schema_Builtin | Size: 0x4
			float32 m_flLinearFrequencyZ; // 0x57c | Schema_Builtin | Size: 0x4
			float32 m_flLinearDampingRatioX; // 0x580 | Schema_Builtin | Size: 0x4
			float32 m_flLinearDampingRatioY; // 0x584 | Schema_Builtin | Size: 0x4
			float32 m_flLinearDampingRatioZ; // 0x588 | Schema_Builtin | Size: 0x4
			float32 m_flMaxLinearImpulseX; // 0x58c | Schema_Builtin | Size: 0x4
			float32 m_flMaxLinearImpulseY; // 0x590 | Schema_Builtin | Size: 0x4
			float32 m_flMaxLinearImpulseZ; // 0x594 | Schema_Builtin | Size: 0x4
			float32 m_flBreakAfterTimeX; // 0x598 | Schema_Builtin | Size: 0x4
			float32 m_flBreakAfterTimeY; // 0x59c | Schema_Builtin | Size: 0x4
			float32 m_flBreakAfterTimeZ; // 0x5a0 | Schema_Builtin | Size: 0x4
			entity2::GameTime_t m_flBreakAfterTimeStartTimeX; // 0x5a4 | Schema_DeclaredClass | Size: 0x4
			entity2::GameTime_t m_flBreakAfterTimeStartTimeY; // 0x5a8 | Schema_DeclaredClass | Size: 0x4
			entity2::GameTime_t m_flBreakAfterTimeStartTimeZ; // 0x5ac | Schema_DeclaredClass | Size: 0x4
			float32 m_flBreakAfterTimeThresholdX; // 0x5b0 | Schema_Builtin | Size: 0x4
			float32 m_flBreakAfterTimeThresholdY; // 0x5b4 | Schema_Builtin | Size: 0x4
			float32 m_flBreakAfterTimeThresholdZ; // 0x5b8 | Schema_Builtin | Size: 0x4
			float32 m_flNotifyForceX; // 0x5bc | Schema_Builtin | Size: 0x4
			float32 m_flNotifyForceY; // 0x5c0 | Schema_Builtin | Size: 0x4
			float32 m_flNotifyForceZ; // 0x5c4 | Schema_Builtin | Size: 0x4
			float32 m_flNotifyForceMinTimeX; // 0x5c8 | Schema_Builtin | Size: 0x4
			float32 m_flNotifyForceMinTimeY; // 0x5cc | Schema_Builtin | Size: 0x4
			float32 m_flNotifyForceMinTimeZ; // 0x5d0 | Schema_Builtin | Size: 0x4
			entity2::GameTime_t m_flNotifyForceLastTimeX; // 0x5d4 | Schema_DeclaredClass | Size: 0x4
			entity2::GameTime_t m_flNotifyForceLastTimeY; // 0x5d8 | Schema_DeclaredClass | Size: 0x4
			entity2::GameTime_t m_flNotifyForceLastTimeZ; // 0x5dc | Schema_DeclaredClass | Size: 0x4
			bool m_bAxisNotifiedX; // 0x5e0 | Schema_Builtin | Size: 0x1
			bool m_bAxisNotifiedY; // 0x5e1 | Schema_Builtin | Size: 0x1
			bool m_bAxisNotifiedZ; // 0x5e2 | Schema_Builtin | Size: 0x1
			S2_PAD(0x1);
			physicslib::JointMotion_t m_nAngularMotionX; // 0x5e4 | Schema_DeclaredEnum | Size: 0x4
			physicslib::JointMotion_t m_nAngularMotionY; // 0x5e8 | Schema_DeclaredEnum | Size: 0x4
			physicslib::JointMotion_t m_nAngularMotionZ; // 0x5ec | Schema_DeclaredEnum | Size: 0x4
			float32 m_flAngularFrequencyX; // 0x5f0 | Schema_Builtin | Size: 0x4
			float32 m_flAngularFrequencyY; // 0x5f4 | Schema_Builtin | Size: 0x4
			float32 m_flAngularFrequencyZ; // 0x5f8 | Schema_Builtin | Size: 0x4
			float32 m_flAngularDampingRatioX; // 0x5fc | Schema_Builtin | Size: 0x4
			float32 m_flAngularDampingRatioY; // 0x600 | Schema_Builtin | Size: 0x4
			float32 m_flAngularDampingRatioZ; // 0x604 | Schema_Builtin | Size: 0x4
			float32 m_flMaxAngularImpulseX; // 0x608 | Schema_Builtin | Size: 0x4
			float32 m_flMaxAngularImpulseY; // 0x60c | Schema_Builtin | Size: 0x4
			float32 m_flMaxAngularImpulseZ; // 0x610 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4);
			entity2::CEntityIOOutput m_NotifyForceReachedX; // 0x618 | Schema_DeclaredClass | Size: 0x28
			entity2::CEntityIOOutput m_NotifyForceReachedY; // 0x640 | Schema_DeclaredClass | Size: 0x28
			entity2::CEntityIOOutput m_NotifyForceReachedZ; // 0x668 | Schema_DeclaredClass | Size: 0x28
		};
		static_assert(offsetof(CS2::server::CGenericConstraint, m_nLinearMotionX) == 0x568, "m_nLinearMotionX in CGenericConstraint should be at offset 0x568");
		static_assert(offsetof(CS2::server::CGenericConstraint, m_nLinearMotionY) == 0x56C, "m_nLinearMotionY in CGenericConstraint should be at offset 0x56C");
		static_assert(offsetof(CS2::server::CGenericConstraint, m_nLinearMotionZ) == 0x570, "m_nLinearMotionZ in CGenericConstraint should be at offset 0x570");
		static_assert(offsetof(CS2::server::CGenericConstraint, m_flLinearFrequencyX) == 0x574, "m_flLinearFrequencyX in CGenericConstraint should be at offset 0x574");
		static_assert(offsetof(CS2::server::CGenericConstraint, m_flLinearFrequencyY) == 0x578, "m_flLinearFrequencyY in CGenericConstraint should be at offset 0x578");
		static_assert(offsetof(CS2::server::CGenericConstraint, m_flLinearFrequencyZ) == 0x57C, "m_flLinearFrequencyZ in CGenericConstraint should be at offset 0x57C");
		static_assert(offsetof(CS2::server::CGenericConstraint, m_flLinearDampingRatioX) == 0x580, "m_flLinearDampingRatioX in CGenericConstraint should be at offset 0x580");
		static_assert(offsetof(CS2::server::CGenericConstraint, m_flLinearDampingRatioY) == 0x584, "m_flLinearDampingRatioY in CGenericConstraint should be at offset 0x584");
		static_assert(offsetof(CS2::server::CGenericConstraint, m_flLinearDampingRatioZ) == 0x588, "m_flLinearDampingRatioZ in CGenericConstraint should be at offset 0x588");
		static_assert(offsetof(CS2::server::CGenericConstraint, m_flMaxLinearImpulseX) == 0x58C, "m_flMaxLinearImpulseX in CGenericConstraint should be at offset 0x58C");
		static_assert(offsetof(CS2::server::CGenericConstraint, m_flMaxLinearImpulseY) == 0x590, "m_flMaxLinearImpulseY in CGenericConstraint should be at offset 0x590");
		static_assert(offsetof(CS2::server::CGenericConstraint, m_flMaxLinearImpulseZ) == 0x594, "m_flMaxLinearImpulseZ in CGenericConstraint should be at offset 0x594");
		static_assert(offsetof(CS2::server::CGenericConstraint, m_flBreakAfterTimeX) == 0x598, "m_flBreakAfterTimeX in CGenericConstraint should be at offset 0x598");
		static_assert(offsetof(CS2::server::CGenericConstraint, m_flBreakAfterTimeY) == 0x59C, "m_flBreakAfterTimeY in CGenericConstraint should be at offset 0x59C");
		static_assert(offsetof(CS2::server::CGenericConstraint, m_flBreakAfterTimeZ) == 0x5A0, "m_flBreakAfterTimeZ in CGenericConstraint should be at offset 0x5A0");
		static_assert(offsetof(CS2::server::CGenericConstraint, m_flBreakAfterTimeStartTimeX) == 0x5A4, "m_flBreakAfterTimeStartTimeX in CGenericConstraint should be at offset 0x5A4");
		static_assert(offsetof(CS2::server::CGenericConstraint, m_flBreakAfterTimeStartTimeY) == 0x5A8, "m_flBreakAfterTimeStartTimeY in CGenericConstraint should be at offset 0x5A8");
		static_assert(offsetof(CS2::server::CGenericConstraint, m_flBreakAfterTimeStartTimeZ) == 0x5AC, "m_flBreakAfterTimeStartTimeZ in CGenericConstraint should be at offset 0x5AC");
		static_assert(offsetof(CS2::server::CGenericConstraint, m_flBreakAfterTimeThresholdX) == 0x5B0, "m_flBreakAfterTimeThresholdX in CGenericConstraint should be at offset 0x5B0");
		static_assert(offsetof(CS2::server::CGenericConstraint, m_flBreakAfterTimeThresholdY) == 0x5B4, "m_flBreakAfterTimeThresholdY in CGenericConstraint should be at offset 0x5B4");
		static_assert(offsetof(CS2::server::CGenericConstraint, m_flBreakAfterTimeThresholdZ) == 0x5B8, "m_flBreakAfterTimeThresholdZ in CGenericConstraint should be at offset 0x5B8");
		static_assert(offsetof(CS2::server::CGenericConstraint, m_flNotifyForceX) == 0x5BC, "m_flNotifyForceX in CGenericConstraint should be at offset 0x5BC");
		static_assert(offsetof(CS2::server::CGenericConstraint, m_flNotifyForceY) == 0x5C0, "m_flNotifyForceY in CGenericConstraint should be at offset 0x5C0");
		static_assert(offsetof(CS2::server::CGenericConstraint, m_flNotifyForceZ) == 0x5C4, "m_flNotifyForceZ in CGenericConstraint should be at offset 0x5C4");
		static_assert(offsetof(CS2::server::CGenericConstraint, m_flNotifyForceMinTimeX) == 0x5C8, "m_flNotifyForceMinTimeX in CGenericConstraint should be at offset 0x5C8");
		static_assert(offsetof(CS2::server::CGenericConstraint, m_flNotifyForceMinTimeY) == 0x5CC, "m_flNotifyForceMinTimeY in CGenericConstraint should be at offset 0x5CC");
		static_assert(offsetof(CS2::server::CGenericConstraint, m_flNotifyForceMinTimeZ) == 0x5D0, "m_flNotifyForceMinTimeZ in CGenericConstraint should be at offset 0x5D0");
		static_assert(offsetof(CS2::server::CGenericConstraint, m_flNotifyForceLastTimeX) == 0x5D4, "m_flNotifyForceLastTimeX in CGenericConstraint should be at offset 0x5D4");
		static_assert(offsetof(CS2::server::CGenericConstraint, m_flNotifyForceLastTimeY) == 0x5D8, "m_flNotifyForceLastTimeY in CGenericConstraint should be at offset 0x5D8");
		static_assert(offsetof(CS2::server::CGenericConstraint, m_flNotifyForceLastTimeZ) == 0x5DC, "m_flNotifyForceLastTimeZ in CGenericConstraint should be at offset 0x5DC");
		static_assert(offsetof(CS2::server::CGenericConstraint, m_bAxisNotifiedX) == 0x5E0, "m_bAxisNotifiedX in CGenericConstraint should be at offset 0x5E0");
		static_assert(offsetof(CS2::server::CGenericConstraint, m_bAxisNotifiedY) == 0x5E1, "m_bAxisNotifiedY in CGenericConstraint should be at offset 0x5E1");
		static_assert(offsetof(CS2::server::CGenericConstraint, m_bAxisNotifiedZ) == 0x5E2, "m_bAxisNotifiedZ in CGenericConstraint should be at offset 0x5E2");
		static_assert(offsetof(CS2::server::CGenericConstraint, m_nAngularMotionX) == 0x5E4, "m_nAngularMotionX in CGenericConstraint should be at offset 0x5E4");
		static_assert(offsetof(CS2::server::CGenericConstraint, m_nAngularMotionY) == 0x5E8, "m_nAngularMotionY in CGenericConstraint should be at offset 0x5E8");
		static_assert(offsetof(CS2::server::CGenericConstraint, m_nAngularMotionZ) == 0x5EC, "m_nAngularMotionZ in CGenericConstraint should be at offset 0x5EC");
		static_assert(offsetof(CS2::server::CGenericConstraint, m_flAngularFrequencyX) == 0x5F0, "m_flAngularFrequencyX in CGenericConstraint should be at offset 0x5F0");
		static_assert(offsetof(CS2::server::CGenericConstraint, m_flAngularFrequencyY) == 0x5F4, "m_flAngularFrequencyY in CGenericConstraint should be at offset 0x5F4");
		static_assert(offsetof(CS2::server::CGenericConstraint, m_flAngularFrequencyZ) == 0x5F8, "m_flAngularFrequencyZ in CGenericConstraint should be at offset 0x5F8");
		static_assert(offsetof(CS2::server::CGenericConstraint, m_flAngularDampingRatioX) == 0x5FC, "m_flAngularDampingRatioX in CGenericConstraint should be at offset 0x5FC");
		static_assert(offsetof(CS2::server::CGenericConstraint, m_flAngularDampingRatioY) == 0x600, "m_flAngularDampingRatioY in CGenericConstraint should be at offset 0x600");
		static_assert(offsetof(CS2::server::CGenericConstraint, m_flAngularDampingRatioZ) == 0x604, "m_flAngularDampingRatioZ in CGenericConstraint should be at offset 0x604");
		static_assert(offsetof(CS2::server::CGenericConstraint, m_flMaxAngularImpulseX) == 0x608, "m_flMaxAngularImpulseX in CGenericConstraint should be at offset 0x608");
		static_assert(offsetof(CS2::server::CGenericConstraint, m_flMaxAngularImpulseY) == 0x60C, "m_flMaxAngularImpulseY in CGenericConstraint should be at offset 0x60C");
		static_assert(offsetof(CS2::server::CGenericConstraint, m_flMaxAngularImpulseZ) == 0x610, "m_flMaxAngularImpulseZ in CGenericConstraint should be at offset 0x610");
		static_assert(offsetof(CS2::server::CGenericConstraint, m_NotifyForceReachedX) == 0x618, "m_NotifyForceReachedX in CGenericConstraint should be at offset 0x618");
		static_assert(offsetof(CS2::server::CGenericConstraint, m_NotifyForceReachedY) == 0x640, "m_NotifyForceReachedY in CGenericConstraint should be at offset 0x640");
		static_assert(offsetof(CS2::server::CGenericConstraint, m_NotifyForceReachedZ) == 0x668, "m_NotifyForceReachedZ in CGenericConstraint should be at offset 0x668");
		static_assert(sizeof(CS2::server::CGenericConstraint) == 0x690, "CGenericConstraint size should be 0x690");
	}
}
