// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/server/CBaseEntity.hpp>



namespace CS2 {
	namespace server {
		class CCSPlayerPawn;
	}
}


using namespace GlobalTypes;
namespace CS2 {
	namespace server {
		class CPlayerPing : public CS2::server::CBaseEntity {
		public:
			S2_PAD(0x8);
			GlobalTypes::CHandle<server::CCSPlayerPawn> m_hPlayer; // 0x4f8 | Schema_Atomic | Size: 0x4
			// char  m_hPlayer[0x4]; // 0x4f8 | Schema_Atomic | Size: 0x4
			GlobalTypes::CHandle<server::CBaseEntity> m_hPingedEntity; // 0x4fc | Schema_Atomic | Size: 0x4
			// char  m_hPingedEntity[0x4]; // 0x4fc | Schema_Atomic | Size: 0x4
			int32_t m_iType; // 0x500 | Schema_Builtin | Size: 0x4
			bool m_bUrgent; // 0x504 | Schema_Builtin | Size: 0x1
			char m_szPlaceName[18]; // 0x505 | Schema_FixedArray | Size: 0x12
			S2_PAD(0x1); // End padding
		};
		static_assert(offsetof(CS2::server::CPlayerPing, m_hPlayer) == 0x4F8, "m_hPlayer in CPlayerPing should be at offset 0x4F8");
		static_assert(offsetof(CS2::server::CPlayerPing, m_hPingedEntity) == 0x4FC, "m_hPingedEntity in CPlayerPing should be at offset 0x4FC");
		static_assert(offsetof(CS2::server::CPlayerPing, m_iType) == 0x500, "m_iType in CPlayerPing should be at offset 0x500");
		static_assert(offsetof(CS2::server::CPlayerPing, m_bUrgent) == 0x504, "m_bUrgent in CPlayerPing should be at offset 0x504");
		static_assert(offsetof(CS2::server::CPlayerPing, m_szPlaceName) == 0x505, "m_szPlaceName in CPlayerPing should be at offset 0x505");
		static_assert(sizeof(CS2::server::CPlayerPing) == 0x518, "CPlayerPing size should be 0x518");
	}
}
