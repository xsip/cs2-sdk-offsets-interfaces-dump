// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>

#include <SDK/server/CModelPointEntity.hpp>



namespace CS2 {
	namespace server {
		class CEnvProjectedTexture : public CS2::server::CModelPointEntity {
		public:
			// server::CHandle< server::CBaseEntity > m_hTargetEntity; // 0x7e8 | Schema_Atomic | Size: 0x4
			char  m_hTargetEntity[0x4]; // 0x7e8 | Schema_Atomic | Size: 0x4
			bool m_bState; // 0x7ec | Schema_Builtin | Size: 0x1
			bool m_bAlwaysUpdate; // 0x7ed | Schema_Builtin | Size: 0x1
			S2_PAD(0x2);
			float32 m_flLightFOV; // 0x7f0 | Schema_Builtin | Size: 0x4
			bool m_bEnableShadows; // 0x7f4 | Schema_Builtin | Size: 0x1
			bool m_bSimpleProjection; // 0x7f5 | Schema_Builtin | Size: 0x1
			bool m_bLightOnlyTarget; // 0x7f6 | Schema_Builtin | Size: 0x1
			bool m_bLightWorld; // 0x7f7 | Schema_Builtin | Size: 0x1
			bool m_bCameraSpace; // 0x7f8 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			float32 m_flBrightnessScale; // 0x7fc | Schema_Builtin | Size: 0x4
			GlobalTypes::Color m_LightColor; // 0x800 | Schema_Atomic | Size: 0x4
			float32 m_flIntensity; // 0x804 | Schema_Builtin | Size: 0x4
			float32 m_flLinearAttenuation; // 0x808 | Schema_Builtin | Size: 0x4
			float32 m_flQuadraticAttenuation; // 0x80c | Schema_Builtin | Size: 0x4
			bool m_bVolumetric; // 0x810 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			float32 m_flNoiseStrength; // 0x814 | Schema_Builtin | Size: 0x4
			float32 m_flFlashlightTime; // 0x818 | Schema_Builtin | Size: 0x4
			uint32_t m_nNumPlanes; // 0x81c | Schema_Builtin | Size: 0x4
			float32 m_flPlaneOffset; // 0x820 | Schema_Builtin | Size: 0x4
			float32 m_flVolumetricIntensity; // 0x824 | Schema_Builtin | Size: 0x4
			float32 m_flColorTransitionTime; // 0x828 | Schema_Builtin | Size: 0x4
			float32 m_flAmbient; // 0x82c | Schema_Builtin | Size: 0x4
			char m_SpotlightTextureName[512]; // 0x830 | Schema_FixedArray | Size: 0x200
			int32_t m_nSpotlightTextureFrame; // 0xa30 | Schema_Builtin | Size: 0x4
			uint32_t m_nShadowQuality; // 0xa34 | Schema_Builtin | Size: 0x4
			float32 m_flNearZ; // 0xa38 | Schema_Builtin | Size: 0x4
			float32 m_flFarZ; // 0xa3c | Schema_Builtin | Size: 0x4
			float32 m_flProjectionSize; // 0xa40 | Schema_Builtin | Size: 0x4
			float32 m_flRotation; // 0xa44 | Schema_Builtin | Size: 0x4
			bool m_bFlipHorizontal; // 0xa48 | Schema_Builtin | Size: 0x1
			S2_PAD(0x7); // End padding
		};
		static_assert(offsetof(CS2::server::CEnvProjectedTexture, m_hTargetEntity) == 0x7E8, "m_hTargetEntity in CEnvProjectedTexture should be at offset 0x7E8");
		static_assert(offsetof(CS2::server::CEnvProjectedTexture, m_bState) == 0x7EC, "m_bState in CEnvProjectedTexture should be at offset 0x7EC");
		static_assert(offsetof(CS2::server::CEnvProjectedTexture, m_bAlwaysUpdate) == 0x7ED, "m_bAlwaysUpdate in CEnvProjectedTexture should be at offset 0x7ED");
		static_assert(offsetof(CS2::server::CEnvProjectedTexture, m_flLightFOV) == 0x7F0, "m_flLightFOV in CEnvProjectedTexture should be at offset 0x7F0");
		static_assert(offsetof(CS2::server::CEnvProjectedTexture, m_bEnableShadows) == 0x7F4, "m_bEnableShadows in CEnvProjectedTexture should be at offset 0x7F4");
		static_assert(offsetof(CS2::server::CEnvProjectedTexture, m_bSimpleProjection) == 0x7F5, "m_bSimpleProjection in CEnvProjectedTexture should be at offset 0x7F5");
		static_assert(offsetof(CS2::server::CEnvProjectedTexture, m_bLightOnlyTarget) == 0x7F6, "m_bLightOnlyTarget in CEnvProjectedTexture should be at offset 0x7F6");
		static_assert(offsetof(CS2::server::CEnvProjectedTexture, m_bLightWorld) == 0x7F7, "m_bLightWorld in CEnvProjectedTexture should be at offset 0x7F7");
		static_assert(offsetof(CS2::server::CEnvProjectedTexture, m_bCameraSpace) == 0x7F8, "m_bCameraSpace in CEnvProjectedTexture should be at offset 0x7F8");
		static_assert(offsetof(CS2::server::CEnvProjectedTexture, m_flBrightnessScale) == 0x7FC, "m_flBrightnessScale in CEnvProjectedTexture should be at offset 0x7FC");
		static_assert(offsetof(CS2::server::CEnvProjectedTexture, m_LightColor) == 0x800, "m_LightColor in CEnvProjectedTexture should be at offset 0x800");
		static_assert(offsetof(CS2::server::CEnvProjectedTexture, m_flIntensity) == 0x804, "m_flIntensity in CEnvProjectedTexture should be at offset 0x804");
		static_assert(offsetof(CS2::server::CEnvProjectedTexture, m_flLinearAttenuation) == 0x808, "m_flLinearAttenuation in CEnvProjectedTexture should be at offset 0x808");
		static_assert(offsetof(CS2::server::CEnvProjectedTexture, m_flQuadraticAttenuation) == 0x80C, "m_flQuadraticAttenuation in CEnvProjectedTexture should be at offset 0x80C");
		static_assert(offsetof(CS2::server::CEnvProjectedTexture, m_bVolumetric) == 0x810, "m_bVolumetric in CEnvProjectedTexture should be at offset 0x810");
		static_assert(offsetof(CS2::server::CEnvProjectedTexture, m_flNoiseStrength) == 0x814, "m_flNoiseStrength in CEnvProjectedTexture should be at offset 0x814");
		static_assert(offsetof(CS2::server::CEnvProjectedTexture, m_flFlashlightTime) == 0x818, "m_flFlashlightTime in CEnvProjectedTexture should be at offset 0x818");
		static_assert(offsetof(CS2::server::CEnvProjectedTexture, m_nNumPlanes) == 0x81C, "m_nNumPlanes in CEnvProjectedTexture should be at offset 0x81C");
		static_assert(offsetof(CS2::server::CEnvProjectedTexture, m_flPlaneOffset) == 0x820, "m_flPlaneOffset in CEnvProjectedTexture should be at offset 0x820");
		static_assert(offsetof(CS2::server::CEnvProjectedTexture, m_flVolumetricIntensity) == 0x824, "m_flVolumetricIntensity in CEnvProjectedTexture should be at offset 0x824");
		static_assert(offsetof(CS2::server::CEnvProjectedTexture, m_flColorTransitionTime) == 0x828, "m_flColorTransitionTime in CEnvProjectedTexture should be at offset 0x828");
		static_assert(offsetof(CS2::server::CEnvProjectedTexture, m_flAmbient) == 0x82C, "m_flAmbient in CEnvProjectedTexture should be at offset 0x82C");
		static_assert(offsetof(CS2::server::CEnvProjectedTexture, m_SpotlightTextureName) == 0x830, "m_SpotlightTextureName in CEnvProjectedTexture should be at offset 0x830");
		static_assert(offsetof(CS2::server::CEnvProjectedTexture, m_nSpotlightTextureFrame) == 0xA30, "m_nSpotlightTextureFrame in CEnvProjectedTexture should be at offset 0xA30");
		static_assert(offsetof(CS2::server::CEnvProjectedTexture, m_nShadowQuality) == 0xA34, "m_nShadowQuality in CEnvProjectedTexture should be at offset 0xA34");
		static_assert(offsetof(CS2::server::CEnvProjectedTexture, m_flNearZ) == 0xA38, "m_flNearZ in CEnvProjectedTexture should be at offset 0xA38");
		static_assert(offsetof(CS2::server::CEnvProjectedTexture, m_flFarZ) == 0xA3C, "m_flFarZ in CEnvProjectedTexture should be at offset 0xA3C");
		static_assert(offsetof(CS2::server::CEnvProjectedTexture, m_flProjectionSize) == 0xA40, "m_flProjectionSize in CEnvProjectedTexture should be at offset 0xA40");
		static_assert(offsetof(CS2::server::CEnvProjectedTexture, m_flRotation) == 0xA44, "m_flRotation in CEnvProjectedTexture should be at offset 0xA44");
		static_assert(offsetof(CS2::server::CEnvProjectedTexture, m_bFlipHorizontal) == 0xA48, "m_bFlipHorizontal in CEnvProjectedTexture should be at offset 0xA48");
		static_assert(sizeof(CS2::server::CEnvProjectedTexture) == 0xA50, "CEnvProjectedTexture size should be 0xA50");
	}
}
