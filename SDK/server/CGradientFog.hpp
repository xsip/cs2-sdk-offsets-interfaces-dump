// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/server/CBaseEntity.hpp>





using namespace GlobalTypes;
namespace CS2 {
	namespace server {
		class CGradientFog : public CS2::server::CBaseEntity {
		public:
			// GlobalTypes::CStrongHandle< resourcesystem::InfoForResourceTypeCTextureBase > m_hGradientFogTexture; // 0x4f0 | Schema_Atomic | Size: 0x8
			char  m_hGradientFogTexture[0x8]; // 0x4f0 | Schema_Atomic | Size: 0x8
			float32 m_flFogStartDistance; // 0x4f8 | Schema_Builtin | Size: 0x4
			float32 m_flFogEndDistance; // 0x4fc | Schema_Builtin | Size: 0x4
			bool m_bHeightFogEnabled; // 0x500 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			float32 m_flFogStartHeight; // 0x504 | Schema_Builtin | Size: 0x4
			float32 m_flFogEndHeight; // 0x508 | Schema_Builtin | Size: 0x4
			float32 m_flFarZ; // 0x50c | Schema_Builtin | Size: 0x4
			float32 m_flFogMaxOpacity; // 0x510 | Schema_Builtin | Size: 0x4
			float32 m_flFogFalloffExponent; // 0x514 | Schema_Builtin | Size: 0x4
			float32 m_flFogVerticalExponent; // 0x518 | Schema_Builtin | Size: 0x4
			GlobalTypes::Color m_fogColor; // 0x51c | Schema_Atomic | Size: 0x4
			float32 m_flFogStrength; // 0x520 | Schema_Builtin | Size: 0x4
			float32 m_flFadeTime; // 0x524 | Schema_Builtin | Size: 0x4
			bool m_bStartDisabled; // 0x528 | Schema_Builtin | Size: 0x1
			bool m_bIsEnabled; // 0x529 | Schema_Builtin | Size: 0x1
			bool m_bGradientFogNeedsTextures; // 0x52a | Schema_Builtin | Size: 0x1
			S2_PAD(0x5); // End padding
		};
		static_assert(offsetof(CS2::server::CGradientFog, m_hGradientFogTexture) == 0x4F0, "m_hGradientFogTexture in CGradientFog should be at offset 0x4F0");
		static_assert(offsetof(CS2::server::CGradientFog, m_flFogStartDistance) == 0x4F8, "m_flFogStartDistance in CGradientFog should be at offset 0x4F8");
		static_assert(offsetof(CS2::server::CGradientFog, m_flFogEndDistance) == 0x4FC, "m_flFogEndDistance in CGradientFog should be at offset 0x4FC");
		static_assert(offsetof(CS2::server::CGradientFog, m_bHeightFogEnabled) == 0x500, "m_bHeightFogEnabled in CGradientFog should be at offset 0x500");
		static_assert(offsetof(CS2::server::CGradientFog, m_flFogStartHeight) == 0x504, "m_flFogStartHeight in CGradientFog should be at offset 0x504");
		static_assert(offsetof(CS2::server::CGradientFog, m_flFogEndHeight) == 0x508, "m_flFogEndHeight in CGradientFog should be at offset 0x508");
		static_assert(offsetof(CS2::server::CGradientFog, m_flFarZ) == 0x50C, "m_flFarZ in CGradientFog should be at offset 0x50C");
		static_assert(offsetof(CS2::server::CGradientFog, m_flFogMaxOpacity) == 0x510, "m_flFogMaxOpacity in CGradientFog should be at offset 0x510");
		static_assert(offsetof(CS2::server::CGradientFog, m_flFogFalloffExponent) == 0x514, "m_flFogFalloffExponent in CGradientFog should be at offset 0x514");
		static_assert(offsetof(CS2::server::CGradientFog, m_flFogVerticalExponent) == 0x518, "m_flFogVerticalExponent in CGradientFog should be at offset 0x518");
		static_assert(offsetof(CS2::server::CGradientFog, m_fogColor) == 0x51C, "m_fogColor in CGradientFog should be at offset 0x51C");
		static_assert(offsetof(CS2::server::CGradientFog, m_flFogStrength) == 0x520, "m_flFogStrength in CGradientFog should be at offset 0x520");
		static_assert(offsetof(CS2::server::CGradientFog, m_flFadeTime) == 0x524, "m_flFadeTime in CGradientFog should be at offset 0x524");
		static_assert(offsetof(CS2::server::CGradientFog, m_bStartDisabled) == 0x528, "m_bStartDisabled in CGradientFog should be at offset 0x528");
		static_assert(offsetof(CS2::server::CGradientFog, m_bIsEnabled) == 0x529, "m_bIsEnabled in CGradientFog should be at offset 0x529");
		static_assert(offsetof(CS2::server::CGradientFog, m_bGradientFogNeedsTextures) == 0x52A, "m_bGradientFogNeedsTextures in CGradientFog should be at offset 0x52A");
		static_assert(sizeof(CS2::server::CGradientFog) == 0x530, "CGradientFog size should be 0x530");
	}
}
