// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/server/CBaseEntity.hpp>





using namespace GlobalTypes;
namespace CS2 {
	namespace server {
		class CEnvCombinedLightProbeVolume : public CS2::server::CBaseEntity {
		public:
			S2_PAD(0x1078);
			GlobalTypes::Color m_Entity_Color; // 0x1568 | Schema_Atomic | Size: 0x4
			float32 m_Entity_flBrightness; // 0x156c | Schema_Builtin | Size: 0x4
			// GlobalTypes::CStrongHandle< resourcesystem::InfoForResourceTypeCTextureBase > m_Entity_hCubemapTexture; // 0x1570 | Schema_Atomic | Size: 0x8
			char  m_Entity_hCubemapTexture[0x8]; // 0x1570 | Schema_Atomic | Size: 0x8
			bool m_Entity_bCustomCubemapTexture; // 0x1578 | Schema_Builtin | Size: 0x1
			S2_PAD(0x7);
			// GlobalTypes::CStrongHandle< resourcesystem::InfoForResourceTypeCTextureBase > m_Entity_hLightProbeTexture_AmbientCube; // 0x1580 | Schema_Atomic | Size: 0x8
			char  m_Entity_hLightProbeTexture_AmbientCube[0x8]; // 0x1580 | Schema_Atomic | Size: 0x8
			// GlobalTypes::CStrongHandle< resourcesystem::InfoForResourceTypeCTextureBase > m_Entity_hLightProbeTexture_SDF; // 0x1588 | Schema_Atomic | Size: 0x8
			char  m_Entity_hLightProbeTexture_SDF[0x8]; // 0x1588 | Schema_Atomic | Size: 0x8
			// GlobalTypes::CStrongHandle< resourcesystem::InfoForResourceTypeCTextureBase > m_Entity_hLightProbeTexture_SH2_DC; // 0x1590 | Schema_Atomic | Size: 0x8
			char  m_Entity_hLightProbeTexture_SH2_DC[0x8]; // 0x1590 | Schema_Atomic | Size: 0x8
			// GlobalTypes::CStrongHandle< resourcesystem::InfoForResourceTypeCTextureBase > m_Entity_hLightProbeTexture_SH2_R; // 0x1598 | Schema_Atomic | Size: 0x8
			char  m_Entity_hLightProbeTexture_SH2_R[0x8]; // 0x1598 | Schema_Atomic | Size: 0x8
			// GlobalTypes::CStrongHandle< resourcesystem::InfoForResourceTypeCTextureBase > m_Entity_hLightProbeTexture_SH2_G; // 0x15a0 | Schema_Atomic | Size: 0x8
			char  m_Entity_hLightProbeTexture_SH2_G[0x8]; // 0x15a0 | Schema_Atomic | Size: 0x8
			// GlobalTypes::CStrongHandle< resourcesystem::InfoForResourceTypeCTextureBase > m_Entity_hLightProbeTexture_SH2_B; // 0x15a8 | Schema_Atomic | Size: 0x8
			char  m_Entity_hLightProbeTexture_SH2_B[0x8]; // 0x15a8 | Schema_Atomic | Size: 0x8
			// GlobalTypes::CStrongHandle< resourcesystem::InfoForResourceTypeCTextureBase > m_Entity_hLightProbeDirectLightIndicesTexture; // 0x15b0 | Schema_Atomic | Size: 0x8
			char  m_Entity_hLightProbeDirectLightIndicesTexture[0x8]; // 0x15b0 | Schema_Atomic | Size: 0x8
			// GlobalTypes::CStrongHandle< resourcesystem::InfoForResourceTypeCTextureBase > m_Entity_hLightProbeDirectLightScalarsTexture; // 0x15b8 | Schema_Atomic | Size: 0x8
			char  m_Entity_hLightProbeDirectLightScalarsTexture[0x8]; // 0x15b8 | Schema_Atomic | Size: 0x8
			// GlobalTypes::CStrongHandle< resourcesystem::InfoForResourceTypeCTextureBase > m_Entity_hLightProbeDirectLightShadowsTexture; // 0x15c0 | Schema_Atomic | Size: 0x8
			char  m_Entity_hLightProbeDirectLightShadowsTexture[0x8]; // 0x15c0 | Schema_Atomic | Size: 0x8
			GlobalTypes::Vector m_Entity_vBoxMins; // 0x15c8 | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_Entity_vBoxMaxs; // 0x15d4 | Schema_Atomic | Size: 0xc
			bool m_Entity_bMoveable; // 0x15e0 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			int32_t m_Entity_nHandshake; // 0x15e4 | Schema_Builtin | Size: 0x4
			int32_t m_Entity_nEnvCubeMapArrayIndex; // 0x15e8 | Schema_Builtin | Size: 0x4
			int32_t m_Entity_nPriority; // 0x15ec | Schema_Builtin | Size: 0x4
			bool m_Entity_bStartDisabled; // 0x15f0 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			float32 m_Entity_flEdgeFadeDist; // 0x15f4 | Schema_Builtin | Size: 0x4
			GlobalTypes::Vector m_Entity_vEdgeFadeDists; // 0x15f8 | Schema_Atomic | Size: 0xc
			int32_t m_Entity_nLightProbeSizeX; // 0x1604 | Schema_Builtin | Size: 0x4
			int32_t m_Entity_nLightProbeSizeY; // 0x1608 | Schema_Builtin | Size: 0x4
			int32_t m_Entity_nLightProbeSizeZ; // 0x160c | Schema_Builtin | Size: 0x4
			int32_t m_Entity_nLightProbeAtlasX; // 0x1610 | Schema_Builtin | Size: 0x4
			int32_t m_Entity_nLightProbeAtlasY; // 0x1614 | Schema_Builtin | Size: 0x4
			int32_t m_Entity_nLightProbeAtlasZ; // 0x1618 | Schema_Builtin | Size: 0x4
			S2_PAD(0x15);
			bool m_Entity_bEnabled; // 0x1631 | Schema_Builtin | Size: 0x1
			S2_PAD(0x6); // End padding
		};
		static_assert(offsetof(CS2::server::CEnvCombinedLightProbeVolume, m_Entity_Color) == 0x1568, "m_Entity_Color in CEnvCombinedLightProbeVolume should be at offset 0x1568");
		static_assert(offsetof(CS2::server::CEnvCombinedLightProbeVolume, m_Entity_flBrightness) == 0x156C, "m_Entity_flBrightness in CEnvCombinedLightProbeVolume should be at offset 0x156C");
		static_assert(offsetof(CS2::server::CEnvCombinedLightProbeVolume, m_Entity_hCubemapTexture) == 0x1570, "m_Entity_hCubemapTexture in CEnvCombinedLightProbeVolume should be at offset 0x1570");
		static_assert(offsetof(CS2::server::CEnvCombinedLightProbeVolume, m_Entity_bCustomCubemapTexture) == 0x1578, "m_Entity_bCustomCubemapTexture in CEnvCombinedLightProbeVolume should be at offset 0x1578");
		static_assert(offsetof(CS2::server::CEnvCombinedLightProbeVolume, m_Entity_hLightProbeTexture_AmbientCube) == 0x1580, "m_Entity_hLightProbeTexture_AmbientCube in CEnvCombinedLightProbeVolume should be at offset 0x1580");
		static_assert(offsetof(CS2::server::CEnvCombinedLightProbeVolume, m_Entity_hLightProbeTexture_SDF) == 0x1588, "m_Entity_hLightProbeTexture_SDF in CEnvCombinedLightProbeVolume should be at offset 0x1588");
		static_assert(offsetof(CS2::server::CEnvCombinedLightProbeVolume, m_Entity_hLightProbeTexture_SH2_DC) == 0x1590, "m_Entity_hLightProbeTexture_SH2_DC in CEnvCombinedLightProbeVolume should be at offset 0x1590");
		static_assert(offsetof(CS2::server::CEnvCombinedLightProbeVolume, m_Entity_hLightProbeTexture_SH2_R) == 0x1598, "m_Entity_hLightProbeTexture_SH2_R in CEnvCombinedLightProbeVolume should be at offset 0x1598");
		static_assert(offsetof(CS2::server::CEnvCombinedLightProbeVolume, m_Entity_hLightProbeTexture_SH2_G) == 0x15A0, "m_Entity_hLightProbeTexture_SH2_G in CEnvCombinedLightProbeVolume should be at offset 0x15A0");
		static_assert(offsetof(CS2::server::CEnvCombinedLightProbeVolume, m_Entity_hLightProbeTexture_SH2_B) == 0x15A8, "m_Entity_hLightProbeTexture_SH2_B in CEnvCombinedLightProbeVolume should be at offset 0x15A8");
		static_assert(offsetof(CS2::server::CEnvCombinedLightProbeVolume, m_Entity_hLightProbeDirectLightIndicesTexture) == 0x15B0, "m_Entity_hLightProbeDirectLightIndicesTexture in CEnvCombinedLightProbeVolume should be at offset 0x15B0");
		static_assert(offsetof(CS2::server::CEnvCombinedLightProbeVolume, m_Entity_hLightProbeDirectLightScalarsTexture) == 0x15B8, "m_Entity_hLightProbeDirectLightScalarsTexture in CEnvCombinedLightProbeVolume should be at offset 0x15B8");
		static_assert(offsetof(CS2::server::CEnvCombinedLightProbeVolume, m_Entity_hLightProbeDirectLightShadowsTexture) == 0x15C0, "m_Entity_hLightProbeDirectLightShadowsTexture in CEnvCombinedLightProbeVolume should be at offset 0x15C0");
		static_assert(offsetof(CS2::server::CEnvCombinedLightProbeVolume, m_Entity_vBoxMins) == 0x15C8, "m_Entity_vBoxMins in CEnvCombinedLightProbeVolume should be at offset 0x15C8");
		static_assert(offsetof(CS2::server::CEnvCombinedLightProbeVolume, m_Entity_vBoxMaxs) == 0x15D4, "m_Entity_vBoxMaxs in CEnvCombinedLightProbeVolume should be at offset 0x15D4");
		static_assert(offsetof(CS2::server::CEnvCombinedLightProbeVolume, m_Entity_bMoveable) == 0x15E0, "m_Entity_bMoveable in CEnvCombinedLightProbeVolume should be at offset 0x15E0");
		static_assert(offsetof(CS2::server::CEnvCombinedLightProbeVolume, m_Entity_nHandshake) == 0x15E4, "m_Entity_nHandshake in CEnvCombinedLightProbeVolume should be at offset 0x15E4");
		static_assert(offsetof(CS2::server::CEnvCombinedLightProbeVolume, m_Entity_nEnvCubeMapArrayIndex) == 0x15E8, "m_Entity_nEnvCubeMapArrayIndex in CEnvCombinedLightProbeVolume should be at offset 0x15E8");
		static_assert(offsetof(CS2::server::CEnvCombinedLightProbeVolume, m_Entity_nPriority) == 0x15EC, "m_Entity_nPriority in CEnvCombinedLightProbeVolume should be at offset 0x15EC");
		static_assert(offsetof(CS2::server::CEnvCombinedLightProbeVolume, m_Entity_bStartDisabled) == 0x15F0, "m_Entity_bStartDisabled in CEnvCombinedLightProbeVolume should be at offset 0x15F0");
		static_assert(offsetof(CS2::server::CEnvCombinedLightProbeVolume, m_Entity_flEdgeFadeDist) == 0x15F4, "m_Entity_flEdgeFadeDist in CEnvCombinedLightProbeVolume should be at offset 0x15F4");
		static_assert(offsetof(CS2::server::CEnvCombinedLightProbeVolume, m_Entity_vEdgeFadeDists) == 0x15F8, "m_Entity_vEdgeFadeDists in CEnvCombinedLightProbeVolume should be at offset 0x15F8");
		static_assert(offsetof(CS2::server::CEnvCombinedLightProbeVolume, m_Entity_nLightProbeSizeX) == 0x1604, "m_Entity_nLightProbeSizeX in CEnvCombinedLightProbeVolume should be at offset 0x1604");
		static_assert(offsetof(CS2::server::CEnvCombinedLightProbeVolume, m_Entity_nLightProbeSizeY) == 0x1608, "m_Entity_nLightProbeSizeY in CEnvCombinedLightProbeVolume should be at offset 0x1608");
		static_assert(offsetof(CS2::server::CEnvCombinedLightProbeVolume, m_Entity_nLightProbeSizeZ) == 0x160C, "m_Entity_nLightProbeSizeZ in CEnvCombinedLightProbeVolume should be at offset 0x160C");
		static_assert(offsetof(CS2::server::CEnvCombinedLightProbeVolume, m_Entity_nLightProbeAtlasX) == 0x1610, "m_Entity_nLightProbeAtlasX in CEnvCombinedLightProbeVolume should be at offset 0x1610");
		static_assert(offsetof(CS2::server::CEnvCombinedLightProbeVolume, m_Entity_nLightProbeAtlasY) == 0x1614, "m_Entity_nLightProbeAtlasY in CEnvCombinedLightProbeVolume should be at offset 0x1614");
		static_assert(offsetof(CS2::server::CEnvCombinedLightProbeVolume, m_Entity_nLightProbeAtlasZ) == 0x1618, "m_Entity_nLightProbeAtlasZ in CEnvCombinedLightProbeVolume should be at offset 0x1618");
		static_assert(offsetof(CS2::server::CEnvCombinedLightProbeVolume, m_Entity_bEnabled) == 0x1631, "m_Entity_bEnabled in CEnvCombinedLightProbeVolume should be at offset 0x1631");
		static_assert(sizeof(CS2::server::CEnvCombinedLightProbeVolume) == 0x1638, "CEnvCombinedLightProbeVolume size should be 0x1638");
	}
}
