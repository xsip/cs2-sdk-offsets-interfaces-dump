// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/entity2/GameTime_t.hpp>



namespace CS2 {
	namespace server {
		class CPointCommentaryNode;
	}
}


using namespace GlobalTypes;
namespace CS2 {
	namespace server {
		class CCommentarySystem  {
		public:
			S2_PAD(0x11);
			bool m_bCommentaryConvarsChanging; // 0x11 | Schema_Builtin | Size: 0x1
			bool m_bCommentaryEnabledMidGame; // 0x12 | Schema_Builtin | Size: 0x1
			S2_PAD(0x1);
			entity2::GameTime_t m_flNextTeleportTime; // 0x14 | Schema_DeclaredClass | Size: 0x4
			int32_t m_iTeleportStage; // 0x18 | Schema_Builtin | Size: 0x4
			bool m_bCheatState; // 0x1c | Schema_Builtin | Size: 0x1
			bool m_bIsFirstSpawnGroupToLoad; // 0x1d | Schema_Builtin | Size: 0x1
			S2_PAD(0x1a);
			GlobalTypes::CHandle<server::CPointCommentaryNode> m_hCurrentNode; // 0x38 | Schema_Atomic | Size: 0x4
			// char  m_hCurrentNode[0x4]; // 0x38 | Schema_Atomic | Size: 0x4
			GlobalTypes::CHandle<server::CPointCommentaryNode> m_hActiveCommentaryNode; // 0x3c | Schema_Atomic | Size: 0x4
			// char  m_hActiveCommentaryNode[0x4]; // 0x3c | Schema_Atomic | Size: 0x4
			GlobalTypes::CHandle<server::CPointCommentaryNode> m_hLastCommentaryNode; // 0x40 | Schema_Atomic | Size: 0x4
			// char  m_hLastCommentaryNode[0x4]; // 0x40 | Schema_Atomic | Size: 0x4
			S2_PAD(0x4);
			// server::CUtlVector<GlobalTypes::CHandle<server::CPointCommentaryNode>> m_vecNodes; // 0x48 | Schema_Atomic | Size: 0x18
			char  m_vecNodes[0x18]; // 0x48 | Schema_Atomic | Size: 0x18
		};
		static_assert(offsetof(CS2::server::CCommentarySystem, m_bCommentaryConvarsChanging) == 0x11, "m_bCommentaryConvarsChanging in CCommentarySystem should be at offset 0x11");
		static_assert(offsetof(CS2::server::CCommentarySystem, m_bCommentaryEnabledMidGame) == 0x12, "m_bCommentaryEnabledMidGame in CCommentarySystem should be at offset 0x12");
		static_assert(offsetof(CS2::server::CCommentarySystem, m_flNextTeleportTime) == 0x14, "m_flNextTeleportTime in CCommentarySystem should be at offset 0x14");
		static_assert(offsetof(CS2::server::CCommentarySystem, m_iTeleportStage) == 0x18, "m_iTeleportStage in CCommentarySystem should be at offset 0x18");
		static_assert(offsetof(CS2::server::CCommentarySystem, m_bCheatState) == 0x1C, "m_bCheatState in CCommentarySystem should be at offset 0x1C");
		static_assert(offsetof(CS2::server::CCommentarySystem, m_bIsFirstSpawnGroupToLoad) == 0x1D, "m_bIsFirstSpawnGroupToLoad in CCommentarySystem should be at offset 0x1D");
		static_assert(offsetof(CS2::server::CCommentarySystem, m_hCurrentNode) == 0x38, "m_hCurrentNode in CCommentarySystem should be at offset 0x38");
		static_assert(offsetof(CS2::server::CCommentarySystem, m_hActiveCommentaryNode) == 0x3C, "m_hActiveCommentaryNode in CCommentarySystem should be at offset 0x3C");
		static_assert(offsetof(CS2::server::CCommentarySystem, m_hLastCommentaryNode) == 0x40, "m_hLastCommentaryNode in CCommentarySystem should be at offset 0x40");
		static_assert(offsetof(CS2::server::CCommentarySystem, m_vecNodes) == 0x48, "m_vecNodes in CCommentarySystem should be at offset 0x48");
		static_assert(sizeof(CS2::server::CCommentarySystem) == 0x60, "CCommentarySystem size should be 0x60");
	}
}
