// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif





namespace CS2 {
	namespace server {
		class CCSPlayerController;
		class CCSPlayerPawn;
	}
}
namespace CS2 {
	namespace server {
		class CBot  {
		public:
			S2_PAD(0x10);
			server::CCSPlayerController* m_pController; // 0x10 | Schema_Ptr | Size: 0x8
			server::CCSPlayerPawn* m_pPlayer; // 0x18 | Schema_Ptr | Size: 0x8
			bool m_bHasSpawned; // 0x20 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			uint32_t m_id; // 0x24 | Schema_Builtin | Size: 0x4
			S2_PAD(0x98);
			bool m_isRunning; // 0xc0 | Schema_Builtin | Size: 0x1
			bool m_isCrouching; // 0xc1 | Schema_Builtin | Size: 0x1
			S2_PAD(0x2);
			float32 m_forwardSpeed; // 0xc4 | Schema_Builtin | Size: 0x4
			float32 m_leftSpeed; // 0xc8 | Schema_Builtin | Size: 0x4
			float32 m_verticalSpeed; // 0xcc | Schema_Builtin | Size: 0x4
			uint64_t m_buttonFlags; // 0xd0 | Schema_Builtin | Size: 0x8
			float32 m_jumpTimestamp; // 0xd8 | Schema_Builtin | Size: 0x4
			GlobalTypes::Vector m_viewForward; // 0xdc | Schema_Atomic | Size: 0xc
			S2_PAD(0x10);
			int32_t m_postureStackIndex; // 0xf8 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4); // End padding
		};
		static_assert(offsetof(CS2::server::CBot, m_pController) == 0x10, "m_pController in CBot should be at offset 0x10");
		static_assert(offsetof(CS2::server::CBot, m_pPlayer) == 0x18, "m_pPlayer in CBot should be at offset 0x18");
		static_assert(offsetof(CS2::server::CBot, m_bHasSpawned) == 0x20, "m_bHasSpawned in CBot should be at offset 0x20");
		static_assert(offsetof(CS2::server::CBot, m_id) == 0x24, "m_id in CBot should be at offset 0x24");
		static_assert(offsetof(CS2::server::CBot, m_isRunning) == 0xC0, "m_isRunning in CBot should be at offset 0xC0");
		static_assert(offsetof(CS2::server::CBot, m_isCrouching) == 0xC1, "m_isCrouching in CBot should be at offset 0xC1");
		static_assert(offsetof(CS2::server::CBot, m_forwardSpeed) == 0xC4, "m_forwardSpeed in CBot should be at offset 0xC4");
		static_assert(offsetof(CS2::server::CBot, m_leftSpeed) == 0xC8, "m_leftSpeed in CBot should be at offset 0xC8");
		static_assert(offsetof(CS2::server::CBot, m_verticalSpeed) == 0xCC, "m_verticalSpeed in CBot should be at offset 0xCC");
		static_assert(offsetof(CS2::server::CBot, m_buttonFlags) == 0xD0, "m_buttonFlags in CBot should be at offset 0xD0");
		static_assert(offsetof(CS2::server::CBot, m_jumpTimestamp) == 0xD8, "m_jumpTimestamp in CBot should be at offset 0xD8");
		static_assert(offsetof(CS2::server::CBot, m_viewForward) == 0xDC, "m_viewForward in CBot should be at offset 0xDC");
		static_assert(offsetof(CS2::server::CBot, m_postureStackIndex) == 0xF8, "m_postureStackIndex in CBot should be at offset 0xF8");
		static_assert(sizeof(CS2::server::CBot) == 0x100, "CBot size should be 0x100");
	}
}
