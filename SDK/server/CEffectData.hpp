// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/modellib/AttachmentHandle_t.hpp>



namespace CS2 {
	namespace server {
		class CEffectData  {
		public:
			S2_PAD(0x8);
			GlobalTypes::VectorWS m_vOrigin; // 0x8 | Schema_Atomic | Size: 0xc
			GlobalTypes::VectorWS m_vStart; // 0x14 | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vNormal; // 0x20 | Schema_Atomic | Size: 0xc
			GlobalTypes::QAngle m_vAngles; // 0x2c | Schema_Atomic | Size: 0xc
			GlobalTypes::CEntityHandle m_hEntity; // 0x38 | Schema_Atomic | Size: 0x4
			GlobalTypes::CEntityHandle m_hOtherEntity; // 0x3c | Schema_Atomic | Size: 0x4
			float32 m_flScale; // 0x40 | Schema_Builtin | Size: 0x4
			float32 m_flMagnitude; // 0x44 | Schema_Builtin | Size: 0x4
			float32 m_flRadius; // 0x48 | Schema_Builtin | Size: 0x4
			GlobalTypes::CUtlStringToken m_nSurfaceProp; // 0x4c | Schema_Atomic | Size: 0x4
			// GlobalTypes::CWeakHandle< resourcesystem::InfoForResourceTypeIParticleSystemDefinition > m_nEffectIndex; // 0x50 | Schema_Atomic | Size: 0x8
			char  m_nEffectIndex[0x8]; // 0x50 | Schema_Atomic | Size: 0x8
			uint32_t m_nDamageType; // 0x58 | Schema_Builtin | Size: 0x4
			uint8_t m_nPenetrate; // 0x5c | Schema_Builtin | Size: 0x1
			S2_PAD(0x1);
			uint16_t m_nMaterial; // 0x5e | Schema_Builtin | Size: 0x2
			int16_t m_nHitBox; // 0x60 | Schema_Builtin | Size: 0x2
			uint8_t m_nColor; // 0x62 | Schema_Builtin | Size: 0x1
			uint8_t m_fFlags; // 0x63 | Schema_Builtin | Size: 0x1
			modellib::AttachmentHandle_t m_nAttachmentIndex; // 0x64 | Schema_DeclaredClass | Size: 0x1
			S2_PAD(0x3);
			GlobalTypes::CUtlStringToken m_nAttachmentName; // 0x68 | Schema_Atomic | Size: 0x4
			uint16_t m_iEffectName; // 0x6c | Schema_Builtin | Size: 0x2
			uint8_t m_nExplosionType; // 0x6e | Schema_Builtin | Size: 0x1
			S2_PAD(0x1); // End padding
		};
		static_assert(offsetof(CS2::server::CEffectData, m_vOrigin) == 0x8, "m_vOrigin in CEffectData should be at offset 0x8");
		static_assert(offsetof(CS2::server::CEffectData, m_vStart) == 0x14, "m_vStart in CEffectData should be at offset 0x14");
		static_assert(offsetof(CS2::server::CEffectData, m_vNormal) == 0x20, "m_vNormal in CEffectData should be at offset 0x20");
		static_assert(offsetof(CS2::server::CEffectData, m_vAngles) == 0x2C, "m_vAngles in CEffectData should be at offset 0x2C");
		static_assert(offsetof(CS2::server::CEffectData, m_hEntity) == 0x38, "m_hEntity in CEffectData should be at offset 0x38");
		static_assert(offsetof(CS2::server::CEffectData, m_hOtherEntity) == 0x3C, "m_hOtherEntity in CEffectData should be at offset 0x3C");
		static_assert(offsetof(CS2::server::CEffectData, m_flScale) == 0x40, "m_flScale in CEffectData should be at offset 0x40");
		static_assert(offsetof(CS2::server::CEffectData, m_flMagnitude) == 0x44, "m_flMagnitude in CEffectData should be at offset 0x44");
		static_assert(offsetof(CS2::server::CEffectData, m_flRadius) == 0x48, "m_flRadius in CEffectData should be at offset 0x48");
		static_assert(offsetof(CS2::server::CEffectData, m_nSurfaceProp) == 0x4C, "m_nSurfaceProp in CEffectData should be at offset 0x4C");
		static_assert(offsetof(CS2::server::CEffectData, m_nEffectIndex) == 0x50, "m_nEffectIndex in CEffectData should be at offset 0x50");
		static_assert(offsetof(CS2::server::CEffectData, m_nDamageType) == 0x58, "m_nDamageType in CEffectData should be at offset 0x58");
		static_assert(offsetof(CS2::server::CEffectData, m_nPenetrate) == 0x5C, "m_nPenetrate in CEffectData should be at offset 0x5C");
		static_assert(offsetof(CS2::server::CEffectData, m_nMaterial) == 0x5E, "m_nMaterial in CEffectData should be at offset 0x5E");
		static_assert(offsetof(CS2::server::CEffectData, m_nHitBox) == 0x60, "m_nHitBox in CEffectData should be at offset 0x60");
		static_assert(offsetof(CS2::server::CEffectData, m_nColor) == 0x62, "m_nColor in CEffectData should be at offset 0x62");
		static_assert(offsetof(CS2::server::CEffectData, m_fFlags) == 0x63, "m_fFlags in CEffectData should be at offset 0x63");
		static_assert(offsetof(CS2::server::CEffectData, m_nAttachmentIndex) == 0x64, "m_nAttachmentIndex in CEffectData should be at offset 0x64");
		static_assert(offsetof(CS2::server::CEffectData, m_nAttachmentName) == 0x68, "m_nAttachmentName in CEffectData should be at offset 0x68");
		static_assert(offsetof(CS2::server::CEffectData, m_iEffectName) == 0x6C, "m_iEffectName in CEffectData should be at offset 0x6C");
		static_assert(offsetof(CS2::server::CEffectData, m_nExplosionType) == 0x6E, "m_nExplosionType in CEffectData should be at offset 0x6E");
		static_assert(sizeof(CS2::server::CEffectData) == 0x70, "CEffectData size should be 0x70");
	}
}
