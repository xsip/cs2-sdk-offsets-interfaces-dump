// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/server/CPlayer_CameraServices.hpp>
#include <SDK/entity2/GameTime_t.hpp>





using namespace GlobalTypes;
namespace CS2 {
	namespace server {
		class CCSPlayerBase_CameraServices : public CS2::server::CPlayer_CameraServices {
		public:
			uint32_t m_iFOV; // 0x170 | Schema_Builtin | Size: 0x4
			uint32_t m_iFOVStart; // 0x174 | Schema_Builtin | Size: 0x4
			entity2::GameTime_t m_flFOVTime; // 0x178 | Schema_DeclaredClass | Size: 0x4
			float32 m_flFOVRate; // 0x17c | Schema_Builtin | Size: 0x4
			// server::CHandle< server::CBaseEntity > m_hZoomOwner; // 0x180 | Schema_Atomic | Size: 0x4
			char  m_hZoomOwner[0x4]; // 0x180 | Schema_Atomic | Size: 0x4
			S2_PAD(0x4);
			// server::CUtlVector< server.dll::CHandle< CBaseEntity > > m_hTriggerFogList; // 0x188 | Schema_Atomic | Size: 0x18
			char  m_hTriggerFogList[0x18]; // 0x188 | Schema_Atomic | Size: 0x18
			// server::CHandle< server::CBaseEntity > m_hLastFogTrigger; // 0x1a0 | Schema_Atomic | Size: 0x4
			char  m_hLastFogTrigger[0x4]; // 0x1a0 | Schema_Atomic | Size: 0x4
			S2_PAD(0x4); // End padding
		};
		static_assert(offsetof(CS2::server::CCSPlayerBase_CameraServices, m_iFOV) == 0x170, "m_iFOV in CCSPlayerBase_CameraServices should be at offset 0x170");
		static_assert(offsetof(CS2::server::CCSPlayerBase_CameraServices, m_iFOVStart) == 0x174, "m_iFOVStart in CCSPlayerBase_CameraServices should be at offset 0x174");
		static_assert(offsetof(CS2::server::CCSPlayerBase_CameraServices, m_flFOVTime) == 0x178, "m_flFOVTime in CCSPlayerBase_CameraServices should be at offset 0x178");
		static_assert(offsetof(CS2::server::CCSPlayerBase_CameraServices, m_flFOVRate) == 0x17C, "m_flFOVRate in CCSPlayerBase_CameraServices should be at offset 0x17C");
		static_assert(offsetof(CS2::server::CCSPlayerBase_CameraServices, m_hZoomOwner) == 0x180, "m_hZoomOwner in CCSPlayerBase_CameraServices should be at offset 0x180");
		static_assert(offsetof(CS2::server::CCSPlayerBase_CameraServices, m_hTriggerFogList) == 0x188, "m_hTriggerFogList in CCSPlayerBase_CameraServices should be at offset 0x188");
		static_assert(offsetof(CS2::server::CCSPlayerBase_CameraServices, m_hLastFogTrigger) == 0x1A0, "m_hLastFogTrigger in CCSPlayerBase_CameraServices should be at offset 0x1A0");
		static_assert(sizeof(CS2::server::CCSPlayerBase_CameraServices) == 0x1A8, "CCSPlayerBase_CameraServices size should be 0x1A8");
	}
}
