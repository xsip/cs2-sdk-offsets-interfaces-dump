// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/server/CBaseEntity.hpp>



namespace CS2 {
	namespace server {
		class CPointCamera : public CS2::server::CBaseEntity {
		public:
			float32 m_FOV; // 0x4f0 | Schema_Builtin | Size: 0x4
			float32 m_Resolution; // 0x4f4 | Schema_Builtin | Size: 0x4
			bool m_bFogEnable; // 0x4f8 | Schema_Builtin | Size: 0x1
			GlobalTypes::Color m_FogColor; // 0x4f9 | Schema_Atomic | Size: 0x4
			S2_PAD(0x3);
			float32 m_flFogStart; // 0x500 | Schema_Builtin | Size: 0x4
			float32 m_flFogEnd; // 0x504 | Schema_Builtin | Size: 0x4
			float32 m_flFogMaxDensity; // 0x508 | Schema_Builtin | Size: 0x4
			bool m_bActive; // 0x50c | Schema_Builtin | Size: 0x1
			bool m_bUseScreenAspectRatio; // 0x50d | Schema_Builtin | Size: 0x1
			S2_PAD(0x2);
			float32 m_flAspectRatio; // 0x510 | Schema_Builtin | Size: 0x4
			bool m_bNoSky; // 0x514 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			float32 m_fBrightness; // 0x518 | Schema_Builtin | Size: 0x4
			float32 m_flZFar; // 0x51c | Schema_Builtin | Size: 0x4
			float32 m_flZNear; // 0x520 | Schema_Builtin | Size: 0x4
			bool m_bCanHLTVUse; // 0x524 | Schema_Builtin | Size: 0x1
			bool m_bAlignWithParent; // 0x525 | Schema_Builtin | Size: 0x1
			bool m_bDofEnabled; // 0x526 | Schema_Builtin | Size: 0x1
			S2_PAD(0x1);
			float32 m_flDofNearBlurry; // 0x528 | Schema_Builtin | Size: 0x4
			float32 m_flDofNearCrisp; // 0x52c | Schema_Builtin | Size: 0x4
			float32 m_flDofFarCrisp; // 0x530 | Schema_Builtin | Size: 0x4
			float32 m_flDofFarBlurry; // 0x534 | Schema_Builtin | Size: 0x4
			float32 m_flDofTiltToGround; // 0x538 | Schema_Builtin | Size: 0x4
			float32 m_TargetFOV; // 0x53c | Schema_Builtin | Size: 0x4
			float32 m_DegreesPerSecond; // 0x540 | Schema_Builtin | Size: 0x4
			bool m_bIsOn; // 0x544 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			server::CPointCamera* m_pNext; // 0x548 | Schema_Ptr | Size: 0x8
		};
		static_assert(offsetof(CS2::server::CPointCamera, m_FOV) == 0x4F0, "m_FOV in CPointCamera should be at offset 0x4F0");
		static_assert(offsetof(CS2::server::CPointCamera, m_Resolution) == 0x4F4, "m_Resolution in CPointCamera should be at offset 0x4F4");
		static_assert(offsetof(CS2::server::CPointCamera, m_bFogEnable) == 0x4F8, "m_bFogEnable in CPointCamera should be at offset 0x4F8");
		static_assert(offsetof(CS2::server::CPointCamera, m_FogColor) == 0x4F9, "m_FogColor in CPointCamera should be at offset 0x4F9");
		static_assert(offsetof(CS2::server::CPointCamera, m_flFogStart) == 0x500, "m_flFogStart in CPointCamera should be at offset 0x500");
		static_assert(offsetof(CS2::server::CPointCamera, m_flFogEnd) == 0x504, "m_flFogEnd in CPointCamera should be at offset 0x504");
		static_assert(offsetof(CS2::server::CPointCamera, m_flFogMaxDensity) == 0x508, "m_flFogMaxDensity in CPointCamera should be at offset 0x508");
		static_assert(offsetof(CS2::server::CPointCamera, m_bActive) == 0x50C, "m_bActive in CPointCamera should be at offset 0x50C");
		static_assert(offsetof(CS2::server::CPointCamera, m_bUseScreenAspectRatio) == 0x50D, "m_bUseScreenAspectRatio in CPointCamera should be at offset 0x50D");
		static_assert(offsetof(CS2::server::CPointCamera, m_flAspectRatio) == 0x510, "m_flAspectRatio in CPointCamera should be at offset 0x510");
		static_assert(offsetof(CS2::server::CPointCamera, m_bNoSky) == 0x514, "m_bNoSky in CPointCamera should be at offset 0x514");
		static_assert(offsetof(CS2::server::CPointCamera, m_fBrightness) == 0x518, "m_fBrightness in CPointCamera should be at offset 0x518");
		static_assert(offsetof(CS2::server::CPointCamera, m_flZFar) == 0x51C, "m_flZFar in CPointCamera should be at offset 0x51C");
		static_assert(offsetof(CS2::server::CPointCamera, m_flZNear) == 0x520, "m_flZNear in CPointCamera should be at offset 0x520");
		static_assert(offsetof(CS2::server::CPointCamera, m_bCanHLTVUse) == 0x524, "m_bCanHLTVUse in CPointCamera should be at offset 0x524");
		static_assert(offsetof(CS2::server::CPointCamera, m_bAlignWithParent) == 0x525, "m_bAlignWithParent in CPointCamera should be at offset 0x525");
		static_assert(offsetof(CS2::server::CPointCamera, m_bDofEnabled) == 0x526, "m_bDofEnabled in CPointCamera should be at offset 0x526");
		static_assert(offsetof(CS2::server::CPointCamera, m_flDofNearBlurry) == 0x528, "m_flDofNearBlurry in CPointCamera should be at offset 0x528");
		static_assert(offsetof(CS2::server::CPointCamera, m_flDofNearCrisp) == 0x52C, "m_flDofNearCrisp in CPointCamera should be at offset 0x52C");
		static_assert(offsetof(CS2::server::CPointCamera, m_flDofFarCrisp) == 0x530, "m_flDofFarCrisp in CPointCamera should be at offset 0x530");
		static_assert(offsetof(CS2::server::CPointCamera, m_flDofFarBlurry) == 0x534, "m_flDofFarBlurry in CPointCamera should be at offset 0x534");
		static_assert(offsetof(CS2::server::CPointCamera, m_flDofTiltToGround) == 0x538, "m_flDofTiltToGround in CPointCamera should be at offset 0x538");
		static_assert(offsetof(CS2::server::CPointCamera, m_TargetFOV) == 0x53C, "m_TargetFOV in CPointCamera should be at offset 0x53C");
		static_assert(offsetof(CS2::server::CPointCamera, m_DegreesPerSecond) == 0x540, "m_DegreesPerSecond in CPointCamera should be at offset 0x540");
		static_assert(offsetof(CS2::server::CPointCamera, m_bIsOn) == 0x544, "m_bIsOn in CPointCamera should be at offset 0x544");
		static_assert(offsetof(CS2::server::CPointCamera, m_pNext) == 0x548, "m_pNext in CPointCamera should be at offset 0x548");
		static_assert(sizeof(CS2::server::CPointCamera) == 0x550, "CPointCamera size should be 0x550");
	}
}
