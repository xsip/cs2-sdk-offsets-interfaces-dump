// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>

#include <SDK/server/CDynamicProp.hpp>
#include <SDK/server/CAttributeContainer.hpp>
#include <SDK/server/CountdownTimer.hpp>
#include <SDK/server/ChickenActivity.hpp>
#include <SDK/entity2/GameTime_t.hpp>



namespace CS2 {
	namespace server {
		class CChicken : public CS2::server::CDynamicProp {
		public:
			S2_PAD(0x20);
			server::CAttributeContainer m_AttributeManager; // 0xd60 | Schema_DeclaredClass | Size: 0x2f8
			server::CountdownTimer m_updateTimer; // 0x1058 | Schema_DeclaredClass | Size: 0x18
			GlobalTypes::Vector m_stuckAnchor; // 0x1070 | Schema_Atomic | Size: 0xc
			S2_PAD(0x4);
			server::CountdownTimer m_stuckTimer; // 0x1080 | Schema_DeclaredClass | Size: 0x18
			server::CountdownTimer m_collisionStuckTimer; // 0x1098 | Schema_DeclaredClass | Size: 0x18
			bool m_isOnGround; // 0x10b0 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			GlobalTypes::Vector m_vFallVelocity; // 0x10b4 | Schema_Atomic | Size: 0xc
			server::ChickenActivity m_desiredActivity; // 0x10c0 | Schema_DeclaredEnum | Size: 0x4
			server::ChickenActivity m_currentActivity; // 0x10c4 | Schema_DeclaredEnum | Size: 0x4
			server::CountdownTimer m_activityTimer; // 0x10c8 | Schema_DeclaredClass | Size: 0x18
			float32 m_turnRate; // 0x10e0 | Schema_Builtin | Size: 0x4
			// server::CHandle< server::CBaseEntity > m_fleeFrom; // 0x10e4 | Schema_Atomic | Size: 0x4
			char  m_fleeFrom[0x4]; // 0x10e4 | Schema_Atomic | Size: 0x4
			server::CountdownTimer m_moveRateThrottleTimer; // 0x10e8 | Schema_DeclaredClass | Size: 0x18
			server::CountdownTimer m_startleTimer; // 0x1100 | Schema_DeclaredClass | Size: 0x18
			server::CountdownTimer m_vocalizeTimer; // 0x1118 | Schema_DeclaredClass | Size: 0x18
			entity2::GameTime_t m_flWhenZombified; // 0x1130 | Schema_DeclaredClass | Size: 0x4
			bool m_jumpedThisFrame; // 0x1134 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			// server::CHandle< server::CCSPlayerPawn > m_leader; // 0x1138 | Schema_Atomic | Size: 0x4
			char  m_leader[0x4]; // 0x1138 | Schema_Atomic | Size: 0x4
			S2_PAD(0x14);
			server::CountdownTimer m_reuseTimer; // 0x1150 | Schema_DeclaredClass | Size: 0x18
			bool m_hasBeenUsed; // 0x1168 | Schema_Builtin | Size: 0x1
			S2_PAD(0x7);
			server::CountdownTimer m_jumpTimer; // 0x1170 | Schema_DeclaredClass | Size: 0x18
			float32 m_flLastJumpTime; // 0x1188 | Schema_Builtin | Size: 0x4
			bool m_bInJump; // 0x118c | Schema_Builtin | Size: 0x1
			S2_PAD(0x200b);
			server::CountdownTimer m_repathTimer; // 0x3198 | Schema_DeclaredClass | Size: 0x18
			S2_PAD(0x80);
			GlobalTypes::Vector m_vecPathGoal; // 0x3230 | Schema_Atomic | Size: 0xc
			entity2::GameTime_t m_flActiveFollowStartTime; // 0x323c | Schema_DeclaredClass | Size: 0x4
			server::CountdownTimer m_followMinuteTimer; // 0x3240 | Schema_DeclaredClass | Size: 0x18
			S2_PAD(0x8);
			server::CountdownTimer m_BlockDirectionTimer; // 0x3260 | Schema_DeclaredClass | Size: 0x18
			S2_PAD(0x18); // End padding
		};
		static_assert(offsetof(CS2::server::CChicken, m_AttributeManager) == 0xD60, "m_AttributeManager in CChicken should be at offset 0xD60");
		static_assert(offsetof(CS2::server::CChicken, m_updateTimer) == 0x1058, "m_updateTimer in CChicken should be at offset 0x1058");
		static_assert(offsetof(CS2::server::CChicken, m_stuckAnchor) == 0x1070, "m_stuckAnchor in CChicken should be at offset 0x1070");
		static_assert(offsetof(CS2::server::CChicken, m_stuckTimer) == 0x1080, "m_stuckTimer in CChicken should be at offset 0x1080");
		static_assert(offsetof(CS2::server::CChicken, m_collisionStuckTimer) == 0x1098, "m_collisionStuckTimer in CChicken should be at offset 0x1098");
		static_assert(offsetof(CS2::server::CChicken, m_isOnGround) == 0x10B0, "m_isOnGround in CChicken should be at offset 0x10B0");
		static_assert(offsetof(CS2::server::CChicken, m_vFallVelocity) == 0x10B4, "m_vFallVelocity in CChicken should be at offset 0x10B4");
		static_assert(offsetof(CS2::server::CChicken, m_desiredActivity) == 0x10C0, "m_desiredActivity in CChicken should be at offset 0x10C0");
		static_assert(offsetof(CS2::server::CChicken, m_currentActivity) == 0x10C4, "m_currentActivity in CChicken should be at offset 0x10C4");
		static_assert(offsetof(CS2::server::CChicken, m_activityTimer) == 0x10C8, "m_activityTimer in CChicken should be at offset 0x10C8");
		static_assert(offsetof(CS2::server::CChicken, m_turnRate) == 0x10E0, "m_turnRate in CChicken should be at offset 0x10E0");
		static_assert(offsetof(CS2::server::CChicken, m_fleeFrom) == 0x10E4, "m_fleeFrom in CChicken should be at offset 0x10E4");
		static_assert(offsetof(CS2::server::CChicken, m_moveRateThrottleTimer) == 0x10E8, "m_moveRateThrottleTimer in CChicken should be at offset 0x10E8");
		static_assert(offsetof(CS2::server::CChicken, m_startleTimer) == 0x1100, "m_startleTimer in CChicken should be at offset 0x1100");
		static_assert(offsetof(CS2::server::CChicken, m_vocalizeTimer) == 0x1118, "m_vocalizeTimer in CChicken should be at offset 0x1118");
		static_assert(offsetof(CS2::server::CChicken, m_flWhenZombified) == 0x1130, "m_flWhenZombified in CChicken should be at offset 0x1130");
		static_assert(offsetof(CS2::server::CChicken, m_jumpedThisFrame) == 0x1134, "m_jumpedThisFrame in CChicken should be at offset 0x1134");
		static_assert(offsetof(CS2::server::CChicken, m_leader) == 0x1138, "m_leader in CChicken should be at offset 0x1138");
		static_assert(offsetof(CS2::server::CChicken, m_reuseTimer) == 0x1150, "m_reuseTimer in CChicken should be at offset 0x1150");
		static_assert(offsetof(CS2::server::CChicken, m_hasBeenUsed) == 0x1168, "m_hasBeenUsed in CChicken should be at offset 0x1168");
		static_assert(offsetof(CS2::server::CChicken, m_jumpTimer) == 0x1170, "m_jumpTimer in CChicken should be at offset 0x1170");
		static_assert(offsetof(CS2::server::CChicken, m_flLastJumpTime) == 0x1188, "m_flLastJumpTime in CChicken should be at offset 0x1188");
		static_assert(offsetof(CS2::server::CChicken, m_bInJump) == 0x118C, "m_bInJump in CChicken should be at offset 0x118C");
		static_assert(offsetof(CS2::server::CChicken, m_repathTimer) == 0x3198, "m_repathTimer in CChicken should be at offset 0x3198");
		static_assert(offsetof(CS2::server::CChicken, m_vecPathGoal) == 0x3230, "m_vecPathGoal in CChicken should be at offset 0x3230");
		static_assert(offsetof(CS2::server::CChicken, m_flActiveFollowStartTime) == 0x323C, "m_flActiveFollowStartTime in CChicken should be at offset 0x323C");
		static_assert(offsetof(CS2::server::CChicken, m_followMinuteTimer) == 0x3240, "m_followMinuteTimer in CChicken should be at offset 0x3240");
		static_assert(offsetof(CS2::server::CChicken, m_BlockDirectionTimer) == 0x3260, "m_BlockDirectionTimer in CChicken should be at offset 0x3260");
		static_assert(sizeof(CS2::server::CChicken) == 0x3290, "CChicken size should be 0x3290");
	}
}
