// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/client/EKillTypes_t.hpp>





using namespace GlobalTypes;
namespace CS2 {
	namespace server {
		class CDamageRecord  {
		public:
			S2_PAD(0x30);
			// server::CHandle< server::CCSPlayerPawn > m_PlayerDamager; // 0x30 | Schema_Atomic | Size: 0x4
			char  m_PlayerDamager[0x4]; // 0x30 | Schema_Atomic | Size: 0x4
			// server::CHandle< server::CCSPlayerPawn > m_PlayerRecipient; // 0x34 | Schema_Atomic | Size: 0x4
			char  m_PlayerRecipient[0x4]; // 0x34 | Schema_Atomic | Size: 0x4
			// server::CHandle< server::CCSPlayerController > m_hPlayerControllerDamager; // 0x38 | Schema_Atomic | Size: 0x4
			char  m_hPlayerControllerDamager[0x4]; // 0x38 | Schema_Atomic | Size: 0x4
			// server::CHandle< server::CCSPlayerController > m_hPlayerControllerRecipient; // 0x3c | Schema_Atomic | Size: 0x4
			char  m_hPlayerControllerRecipient[0x4]; // 0x3c | Schema_Atomic | Size: 0x4
			GlobalTypes::CUtlString m_szPlayerDamagerName; // 0x40 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlString m_szPlayerRecipientName; // 0x48 | Schema_Atomic | Size: 0x8
			uint64_t m_DamagerXuid; // 0x50 | Schema_Builtin | Size: 0x8
			uint64_t m_RecipientXuid; // 0x58 | Schema_Builtin | Size: 0x8
			float32 m_flBulletsDamage; // 0x60 | Schema_Builtin | Size: 0x4
			float32 m_flDamage; // 0x64 | Schema_Builtin | Size: 0x4
			float32 m_flActualHealthRemoved; // 0x68 | Schema_Builtin | Size: 0x4
			int32_t m_iNumHits; // 0x6c | Schema_Builtin | Size: 0x4
			int32_t m_iLastBulletUpdate; // 0x70 | Schema_Builtin | Size: 0x4
			bool m_bIsOtherEnemy; // 0x74 | Schema_Builtin | Size: 0x1
			client::EKillTypes_t m_killType; // 0x75 | Schema_DeclaredEnum | Size: 0x1
			S2_PAD(0x2); // End padding
		};
		static_assert(offsetof(CS2::server::CDamageRecord, m_PlayerDamager) == 0x30, "m_PlayerDamager in CDamageRecord should be at offset 0x30");
		static_assert(offsetof(CS2::server::CDamageRecord, m_PlayerRecipient) == 0x34, "m_PlayerRecipient in CDamageRecord should be at offset 0x34");
		static_assert(offsetof(CS2::server::CDamageRecord, m_hPlayerControllerDamager) == 0x38, "m_hPlayerControllerDamager in CDamageRecord should be at offset 0x38");
		static_assert(offsetof(CS2::server::CDamageRecord, m_hPlayerControllerRecipient) == 0x3C, "m_hPlayerControllerRecipient in CDamageRecord should be at offset 0x3C");
		static_assert(offsetof(CS2::server::CDamageRecord, m_szPlayerDamagerName) == 0x40, "m_szPlayerDamagerName in CDamageRecord should be at offset 0x40");
		static_assert(offsetof(CS2::server::CDamageRecord, m_szPlayerRecipientName) == 0x48, "m_szPlayerRecipientName in CDamageRecord should be at offset 0x48");
		static_assert(offsetof(CS2::server::CDamageRecord, m_DamagerXuid) == 0x50, "m_DamagerXuid in CDamageRecord should be at offset 0x50");
		static_assert(offsetof(CS2::server::CDamageRecord, m_RecipientXuid) == 0x58, "m_RecipientXuid in CDamageRecord should be at offset 0x58");
		static_assert(offsetof(CS2::server::CDamageRecord, m_flBulletsDamage) == 0x60, "m_flBulletsDamage in CDamageRecord should be at offset 0x60");
		static_assert(offsetof(CS2::server::CDamageRecord, m_flDamage) == 0x64, "m_flDamage in CDamageRecord should be at offset 0x64");
		static_assert(offsetof(CS2::server::CDamageRecord, m_flActualHealthRemoved) == 0x68, "m_flActualHealthRemoved in CDamageRecord should be at offset 0x68");
		static_assert(offsetof(CS2::server::CDamageRecord, m_iNumHits) == 0x6C, "m_iNumHits in CDamageRecord should be at offset 0x6C");
		static_assert(offsetof(CS2::server::CDamageRecord, m_iLastBulletUpdate) == 0x70, "m_iLastBulletUpdate in CDamageRecord should be at offset 0x70");
		static_assert(offsetof(CS2::server::CDamageRecord, m_bIsOtherEnemy) == 0x74, "m_bIsOtherEnemy in CDamageRecord should be at offset 0x74");
		static_assert(offsetof(CS2::server::CDamageRecord, m_killType) == 0x75, "m_killType in CDamageRecord should be at offset 0x75");
		static_assert(sizeof(CS2::server::CDamageRecord) == 0x78, "CDamageRecord size should be 0x78");
	}
}
