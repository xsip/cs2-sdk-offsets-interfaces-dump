// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif







using namespace GlobalTypes;
namespace CS2 {
	namespace server {
		class VPhysicsCollisionAttribute_t  {
		public:
			S2_PAD(0x8);
			uint64_t m_nInteractsAs; // 0x8 | Schema_Builtin | Size: 0x8
			uint64_t m_nInteractsWith; // 0x10 | Schema_Builtin | Size: 0x8
			uint64_t m_nInteractsExclude; // 0x18 | Schema_Builtin | Size: 0x8
			uint32_t m_nEntityId; // 0x20 | Schema_Builtin | Size: 0x4
			uint32_t m_nOwnerId; // 0x24 | Schema_Builtin | Size: 0x4
			uint16_t m_nHierarchyId; // 0x28 | Schema_Builtin | Size: 0x2
			uint8_t m_nCollisionGroup; // 0x2a | Schema_Builtin | Size: 0x1
			uint8_t m_nCollisionFunctionMask; // 0x2b | Schema_Builtin | Size: 0x1
			S2_PAD(0x4); // End padding
		};
		static_assert(offsetof(CS2::server::VPhysicsCollisionAttribute_t, m_nInteractsAs) == 0x8, "m_nInteractsAs in VPhysicsCollisionAttribute_t should be at offset 0x8");
		static_assert(offsetof(CS2::server::VPhysicsCollisionAttribute_t, m_nInteractsWith) == 0x10, "m_nInteractsWith in VPhysicsCollisionAttribute_t should be at offset 0x10");
		static_assert(offsetof(CS2::server::VPhysicsCollisionAttribute_t, m_nInteractsExclude) == 0x18, "m_nInteractsExclude in VPhysicsCollisionAttribute_t should be at offset 0x18");
		static_assert(offsetof(CS2::server::VPhysicsCollisionAttribute_t, m_nEntityId) == 0x20, "m_nEntityId in VPhysicsCollisionAttribute_t should be at offset 0x20");
		static_assert(offsetof(CS2::server::VPhysicsCollisionAttribute_t, m_nOwnerId) == 0x24, "m_nOwnerId in VPhysicsCollisionAttribute_t should be at offset 0x24");
		static_assert(offsetof(CS2::server::VPhysicsCollisionAttribute_t, m_nHierarchyId) == 0x28, "m_nHierarchyId in VPhysicsCollisionAttribute_t should be at offset 0x28");
		static_assert(offsetof(CS2::server::VPhysicsCollisionAttribute_t, m_nCollisionGroup) == 0x2A, "m_nCollisionGroup in VPhysicsCollisionAttribute_t should be at offset 0x2A");
		static_assert(offsetof(CS2::server::VPhysicsCollisionAttribute_t, m_nCollisionFunctionMask) == 0x2B, "m_nCollisionFunctionMask in VPhysicsCollisionAttribute_t should be at offset 0x2B");
		static_assert(sizeof(CS2::server::VPhysicsCollisionAttribute_t) == 0x30, "VPhysicsCollisionAttribute_t size should be 0x30");
	}
}
