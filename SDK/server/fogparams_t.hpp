// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/entity2/GameTime_t.hpp>





using namespace GlobalTypes;
namespace CS2 {
	namespace server {
		class fogparams_t  {
		public:
			S2_PAD(0x8);
			GlobalTypes::Vector dirPrimary; // 0x8 | Schema_Atomic | Size: 0xc
			GlobalTypes::Color colorPrimary; // 0x14 | Schema_Atomic | Size: 0x4
			GlobalTypes::Color colorSecondary; // 0x18 | Schema_Atomic | Size: 0x4
			GlobalTypes::Color colorPrimaryLerpTo; // 0x1c | Schema_Atomic | Size: 0x4
			GlobalTypes::Color colorSecondaryLerpTo; // 0x20 | Schema_Atomic | Size: 0x4
			float32 start; // 0x24 | Schema_Builtin | Size: 0x4
			float32 end; // 0x28 | Schema_Builtin | Size: 0x4
			float32 farz; // 0x2c | Schema_Builtin | Size: 0x4
			float32 maxdensity; // 0x30 | Schema_Builtin | Size: 0x4
			float32 exponent; // 0x34 | Schema_Builtin | Size: 0x4
			float32 HDRColorScale; // 0x38 | Schema_Builtin | Size: 0x4
			float32 skyboxFogFactor; // 0x3c | Schema_Builtin | Size: 0x4
			float32 skyboxFogFactorLerpTo; // 0x40 | Schema_Builtin | Size: 0x4
			float32 startLerpTo; // 0x44 | Schema_Builtin | Size: 0x4
			float32 endLerpTo; // 0x48 | Schema_Builtin | Size: 0x4
			float32 maxdensityLerpTo; // 0x4c | Schema_Builtin | Size: 0x4
			entity2::GameTime_t lerptime; // 0x50 | Schema_DeclaredClass | Size: 0x4
			float32 duration; // 0x54 | Schema_Builtin | Size: 0x4
			float32 blendtobackground; // 0x58 | Schema_Builtin | Size: 0x4
			float32 scattering; // 0x5c | Schema_Builtin | Size: 0x4
			float32 locallightscale; // 0x60 | Schema_Builtin | Size: 0x4
			bool enable; // 0x64 | Schema_Builtin | Size: 0x1
			bool blend; // 0x65 | Schema_Builtin | Size: 0x1
			bool m_bPadding2; // 0x66 | Schema_Builtin | Size: 0x1
			bool m_bPadding; // 0x67 | Schema_Builtin | Size: 0x1
		};
		static_assert(offsetof(CS2::server::fogparams_t, dirPrimary) == 0x8, "dirPrimary in fogparams_t should be at offset 0x8");
		static_assert(offsetof(CS2::server::fogparams_t, colorPrimary) == 0x14, "colorPrimary in fogparams_t should be at offset 0x14");
		static_assert(offsetof(CS2::server::fogparams_t, colorSecondary) == 0x18, "colorSecondary in fogparams_t should be at offset 0x18");
		static_assert(offsetof(CS2::server::fogparams_t, colorPrimaryLerpTo) == 0x1C, "colorPrimaryLerpTo in fogparams_t should be at offset 0x1C");
		static_assert(offsetof(CS2::server::fogparams_t, colorSecondaryLerpTo) == 0x20, "colorSecondaryLerpTo in fogparams_t should be at offset 0x20");
		static_assert(offsetof(CS2::server::fogparams_t, start) == 0x24, "start in fogparams_t should be at offset 0x24");
		static_assert(offsetof(CS2::server::fogparams_t, end) == 0x28, "end in fogparams_t should be at offset 0x28");
		static_assert(offsetof(CS2::server::fogparams_t, farz) == 0x2C, "farz in fogparams_t should be at offset 0x2C");
		static_assert(offsetof(CS2::server::fogparams_t, maxdensity) == 0x30, "maxdensity in fogparams_t should be at offset 0x30");
		static_assert(offsetof(CS2::server::fogparams_t, exponent) == 0x34, "exponent in fogparams_t should be at offset 0x34");
		static_assert(offsetof(CS2::server::fogparams_t, HDRColorScale) == 0x38, "HDRColorScale in fogparams_t should be at offset 0x38");
		static_assert(offsetof(CS2::server::fogparams_t, skyboxFogFactor) == 0x3C, "skyboxFogFactor in fogparams_t should be at offset 0x3C");
		static_assert(offsetof(CS2::server::fogparams_t, skyboxFogFactorLerpTo) == 0x40, "skyboxFogFactorLerpTo in fogparams_t should be at offset 0x40");
		static_assert(offsetof(CS2::server::fogparams_t, startLerpTo) == 0x44, "startLerpTo in fogparams_t should be at offset 0x44");
		static_assert(offsetof(CS2::server::fogparams_t, endLerpTo) == 0x48, "endLerpTo in fogparams_t should be at offset 0x48");
		static_assert(offsetof(CS2::server::fogparams_t, maxdensityLerpTo) == 0x4C, "maxdensityLerpTo in fogparams_t should be at offset 0x4C");
		static_assert(offsetof(CS2::server::fogparams_t, lerptime) == 0x50, "lerptime in fogparams_t should be at offset 0x50");
		static_assert(offsetof(CS2::server::fogparams_t, duration) == 0x54, "duration in fogparams_t should be at offset 0x54");
		static_assert(offsetof(CS2::server::fogparams_t, blendtobackground) == 0x58, "blendtobackground in fogparams_t should be at offset 0x58");
		static_assert(offsetof(CS2::server::fogparams_t, scattering) == 0x5C, "scattering in fogparams_t should be at offset 0x5C");
		static_assert(offsetof(CS2::server::fogparams_t, locallightscale) == 0x60, "locallightscale in fogparams_t should be at offset 0x60");
		static_assert(offsetof(CS2::server::fogparams_t, enable) == 0x64, "enable in fogparams_t should be at offset 0x64");
		static_assert(offsetof(CS2::server::fogparams_t, blend) == 0x65, "blend in fogparams_t should be at offset 0x65");
		static_assert(offsetof(CS2::server::fogparams_t, m_bPadding2) == 0x66, "m_bPadding2 in fogparams_t should be at offset 0x66");
		static_assert(offsetof(CS2::server::fogparams_t, m_bPadding) == 0x67, "m_bPadding in fogparams_t should be at offset 0x67");
		static_assert(sizeof(CS2::server::fogparams_t) == 0x68, "fogparams_t size should be 0x68");
	}
}
