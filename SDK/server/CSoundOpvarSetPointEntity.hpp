// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>

#include <SDK/server/CSoundOpvarSetPointBase.hpp>
#include <SDK/entity2/CEntityIOOutput.hpp>



namespace CS2 {
	namespace server {
		class CSoundOpvarSetPointEntity : public CS2::server::CSoundOpvarSetPointBase {
		public:
			entity2::CEntityIOOutput m_OnEnter; // 0x598 | Schema_DeclaredClass | Size: 0x28
			entity2::CEntityIOOutput m_OnExit; // 0x5c0 | Schema_DeclaredClass | Size: 0x28
			bool m_bAutoDisable; // 0x5e8 | Schema_Builtin | Size: 0x1
			S2_PAD(0x43);
			float32 m_flDistanceMin; // 0x62c | Schema_Builtin | Size: 0x4
			float32 m_flDistanceMax; // 0x630 | Schema_Builtin | Size: 0x4
			float32 m_flDistanceMapMin; // 0x634 | Schema_Builtin | Size: 0x4
			float32 m_flDistanceMapMax; // 0x638 | Schema_Builtin | Size: 0x4
			float32 m_flOcclusionRadius; // 0x63c | Schema_Builtin | Size: 0x4
			float32 m_flOcclusionMin; // 0x640 | Schema_Builtin | Size: 0x4
			float32 m_flOcclusionMax; // 0x644 | Schema_Builtin | Size: 0x4
			float32 m_flValSetOnDisable; // 0x648 | Schema_Builtin | Size: 0x4
			bool m_bSetValueOnDisable; // 0x64c | Schema_Builtin | Size: 0x1
			bool m_bReloading; // 0x64d | Schema_Builtin | Size: 0x1
			S2_PAD(0x2);
			int32_t m_nSimulationMode; // 0x650 | Schema_Builtin | Size: 0x4
			int32_t m_nVisibilitySamples; // 0x654 | Schema_Builtin | Size: 0x4
			GlobalTypes::Vector m_vDynamicProxyPoint; // 0x658 | Schema_Atomic | Size: 0xc
			float32 m_flDynamicMaximumOcclusion; // 0x664 | Schema_Builtin | Size: 0x4
			GlobalTypes::CEntityHandle m_hDynamicEntity; // 0x668 | Schema_Atomic | Size: 0x4
			S2_PAD(0x4);
			GlobalTypes::CUtlSymbolLarge m_iszDynamicEntityName; // 0x670 | Schema_Atomic | Size: 0x8
			float32 m_flPathingDistanceNormFactor; // 0x678 | Schema_Builtin | Size: 0x4
			GlobalTypes::Vector m_vPathingSourcePos; // 0x67c | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vPathingListenerPos; // 0x688 | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vPathingDirection; // 0x694 | Schema_Atomic | Size: 0xc
			int32_t m_nPathingSourceIndex; // 0x6a0 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4); // End padding
		};
		static_assert(offsetof(CS2::server::CSoundOpvarSetPointEntity, m_OnEnter) == 0x598, "m_OnEnter in CSoundOpvarSetPointEntity should be at offset 0x598");
		static_assert(offsetof(CS2::server::CSoundOpvarSetPointEntity, m_OnExit) == 0x5C0, "m_OnExit in CSoundOpvarSetPointEntity should be at offset 0x5C0");
		static_assert(offsetof(CS2::server::CSoundOpvarSetPointEntity, m_bAutoDisable) == 0x5E8, "m_bAutoDisable in CSoundOpvarSetPointEntity should be at offset 0x5E8");
		static_assert(offsetof(CS2::server::CSoundOpvarSetPointEntity, m_flDistanceMin) == 0x62C, "m_flDistanceMin in CSoundOpvarSetPointEntity should be at offset 0x62C");
		static_assert(offsetof(CS2::server::CSoundOpvarSetPointEntity, m_flDistanceMax) == 0x630, "m_flDistanceMax in CSoundOpvarSetPointEntity should be at offset 0x630");
		static_assert(offsetof(CS2::server::CSoundOpvarSetPointEntity, m_flDistanceMapMin) == 0x634, "m_flDistanceMapMin in CSoundOpvarSetPointEntity should be at offset 0x634");
		static_assert(offsetof(CS2::server::CSoundOpvarSetPointEntity, m_flDistanceMapMax) == 0x638, "m_flDistanceMapMax in CSoundOpvarSetPointEntity should be at offset 0x638");
		static_assert(offsetof(CS2::server::CSoundOpvarSetPointEntity, m_flOcclusionRadius) == 0x63C, "m_flOcclusionRadius in CSoundOpvarSetPointEntity should be at offset 0x63C");
		static_assert(offsetof(CS2::server::CSoundOpvarSetPointEntity, m_flOcclusionMin) == 0x640, "m_flOcclusionMin in CSoundOpvarSetPointEntity should be at offset 0x640");
		static_assert(offsetof(CS2::server::CSoundOpvarSetPointEntity, m_flOcclusionMax) == 0x644, "m_flOcclusionMax in CSoundOpvarSetPointEntity should be at offset 0x644");
		static_assert(offsetof(CS2::server::CSoundOpvarSetPointEntity, m_flValSetOnDisable) == 0x648, "m_flValSetOnDisable in CSoundOpvarSetPointEntity should be at offset 0x648");
		static_assert(offsetof(CS2::server::CSoundOpvarSetPointEntity, m_bSetValueOnDisable) == 0x64C, "m_bSetValueOnDisable in CSoundOpvarSetPointEntity should be at offset 0x64C");
		static_assert(offsetof(CS2::server::CSoundOpvarSetPointEntity, m_bReloading) == 0x64D, "m_bReloading in CSoundOpvarSetPointEntity should be at offset 0x64D");
		static_assert(offsetof(CS2::server::CSoundOpvarSetPointEntity, m_nSimulationMode) == 0x650, "m_nSimulationMode in CSoundOpvarSetPointEntity should be at offset 0x650");
		static_assert(offsetof(CS2::server::CSoundOpvarSetPointEntity, m_nVisibilitySamples) == 0x654, "m_nVisibilitySamples in CSoundOpvarSetPointEntity should be at offset 0x654");
		static_assert(offsetof(CS2::server::CSoundOpvarSetPointEntity, m_vDynamicProxyPoint) == 0x658, "m_vDynamicProxyPoint in CSoundOpvarSetPointEntity should be at offset 0x658");
		static_assert(offsetof(CS2::server::CSoundOpvarSetPointEntity, m_flDynamicMaximumOcclusion) == 0x664, "m_flDynamicMaximumOcclusion in CSoundOpvarSetPointEntity should be at offset 0x664");
		static_assert(offsetof(CS2::server::CSoundOpvarSetPointEntity, m_hDynamicEntity) == 0x668, "m_hDynamicEntity in CSoundOpvarSetPointEntity should be at offset 0x668");
		static_assert(offsetof(CS2::server::CSoundOpvarSetPointEntity, m_iszDynamicEntityName) == 0x670, "m_iszDynamicEntityName in CSoundOpvarSetPointEntity should be at offset 0x670");
		static_assert(offsetof(CS2::server::CSoundOpvarSetPointEntity, m_flPathingDistanceNormFactor) == 0x678, "m_flPathingDistanceNormFactor in CSoundOpvarSetPointEntity should be at offset 0x678");
		static_assert(offsetof(CS2::server::CSoundOpvarSetPointEntity, m_vPathingSourcePos) == 0x67C, "m_vPathingSourcePos in CSoundOpvarSetPointEntity should be at offset 0x67C");
		static_assert(offsetof(CS2::server::CSoundOpvarSetPointEntity, m_vPathingListenerPos) == 0x688, "m_vPathingListenerPos in CSoundOpvarSetPointEntity should be at offset 0x688");
		static_assert(offsetof(CS2::server::CSoundOpvarSetPointEntity, m_vPathingDirection) == 0x694, "m_vPathingDirection in CSoundOpvarSetPointEntity should be at offset 0x694");
		static_assert(offsetof(CS2::server::CSoundOpvarSetPointEntity, m_nPathingSourceIndex) == 0x6A0, "m_nPathingSourceIndex in CSoundOpvarSetPointEntity should be at offset 0x6A0");
		static_assert(sizeof(CS2::server::CSoundOpvarSetPointEntity) == 0x6A8, "CSoundOpvarSetPointEntity size should be 0x6A8");
	}
}
