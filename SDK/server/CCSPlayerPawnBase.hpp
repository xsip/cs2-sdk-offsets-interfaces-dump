// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/server/CBasePlayerPawn.hpp>
#include <SDK/server/CTouchExpansionComponent.hpp>
#include <SDK/entity2/GameTime_t.hpp>
#include <SDK/client/CSPlayerState.hpp>



namespace CS2 {
	namespace server {
		class CCSPlayer_PingServices;
	}
}


using namespace GlobalTypes;
namespace CS2 {
	namespace server {
		class CCSPlayerPawnBase : public CS2::server::CBasePlayerPawn {
		public:
			S2_PAD(0x10);
			server::CTouchExpansionComponent m_CTouchExpansionComponent; // 0xda0 | Schema_DeclaredClass | Size: 0x50
			server::CCSPlayer_PingServices* m_pPingServices; // 0xdf0 | Schema_Ptr | Size: 0x8
			entity2::GameTime_t m_blindUntilTime; // 0xdf8 | Schema_DeclaredClass | Size: 0x4
			entity2::GameTime_t m_blindStartTime; // 0xdfc | Schema_DeclaredClass | Size: 0x4
			client::CSPlayerState m_iPlayerState; // 0xe00 | Schema_DeclaredEnum | Size: 0x4
			S2_PAD(0xac);
			bool m_bRespawning; // 0xeb0 | Schema_Builtin | Size: 0x1
			bool m_bHasMovedSinceSpawn; // 0xeb1 | Schema_Builtin | Size: 0x1
			S2_PAD(0x2);
			int32_t m_iNumSpawns; // 0xeb4 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4);
			float32 m_flIdleTimeSinceLastAction; // 0xebc | Schema_Builtin | Size: 0x4
			float32 m_fNextRadarUpdateTime; // 0xec0 | Schema_Builtin | Size: 0x4
			float32 m_flFlashDuration; // 0xec4 | Schema_Builtin | Size: 0x4
			float32 m_flFlashMaxAlpha; // 0xec8 | Schema_Builtin | Size: 0x4
			float32 m_flProgressBarStartTime; // 0xecc | Schema_Builtin | Size: 0x4
			int32_t m_iProgressBarDuration; // 0xed0 | Schema_Builtin | Size: 0x4
			// server::CHandle< server::CCSPlayerController > m_hOriginalController; // 0xed4 | Schema_Atomic | Size: 0x4
			char  m_hOriginalController[0x4]; // 0xed4 | Schema_Atomic | Size: 0x4
			S2_PAD(0x8); // End padding
		};
		static_assert(offsetof(CS2::server::CCSPlayerPawnBase, m_CTouchExpansionComponent) == 0xDA0, "m_CTouchExpansionComponent in CCSPlayerPawnBase should be at offset 0xDA0");
		static_assert(offsetof(CS2::server::CCSPlayerPawnBase, m_pPingServices) == 0xDF0, "m_pPingServices in CCSPlayerPawnBase should be at offset 0xDF0");
		static_assert(offsetof(CS2::server::CCSPlayerPawnBase, m_blindUntilTime) == 0xDF8, "m_blindUntilTime in CCSPlayerPawnBase should be at offset 0xDF8");
		static_assert(offsetof(CS2::server::CCSPlayerPawnBase, m_blindStartTime) == 0xDFC, "m_blindStartTime in CCSPlayerPawnBase should be at offset 0xDFC");
		static_assert(offsetof(CS2::server::CCSPlayerPawnBase, m_iPlayerState) == 0xE00, "m_iPlayerState in CCSPlayerPawnBase should be at offset 0xE00");
		static_assert(offsetof(CS2::server::CCSPlayerPawnBase, m_bRespawning) == 0xEB0, "m_bRespawning in CCSPlayerPawnBase should be at offset 0xEB0");
		static_assert(offsetof(CS2::server::CCSPlayerPawnBase, m_bHasMovedSinceSpawn) == 0xEB1, "m_bHasMovedSinceSpawn in CCSPlayerPawnBase should be at offset 0xEB1");
		static_assert(offsetof(CS2::server::CCSPlayerPawnBase, m_iNumSpawns) == 0xEB4, "m_iNumSpawns in CCSPlayerPawnBase should be at offset 0xEB4");
		static_assert(offsetof(CS2::server::CCSPlayerPawnBase, m_flIdleTimeSinceLastAction) == 0xEBC, "m_flIdleTimeSinceLastAction in CCSPlayerPawnBase should be at offset 0xEBC");
		static_assert(offsetof(CS2::server::CCSPlayerPawnBase, m_fNextRadarUpdateTime) == 0xEC0, "m_fNextRadarUpdateTime in CCSPlayerPawnBase should be at offset 0xEC0");
		static_assert(offsetof(CS2::server::CCSPlayerPawnBase, m_flFlashDuration) == 0xEC4, "m_flFlashDuration in CCSPlayerPawnBase should be at offset 0xEC4");
		static_assert(offsetof(CS2::server::CCSPlayerPawnBase, m_flFlashMaxAlpha) == 0xEC8, "m_flFlashMaxAlpha in CCSPlayerPawnBase should be at offset 0xEC8");
		static_assert(offsetof(CS2::server::CCSPlayerPawnBase, m_flProgressBarStartTime) == 0xECC, "m_flProgressBarStartTime in CCSPlayerPawnBase should be at offset 0xECC");
		static_assert(offsetof(CS2::server::CCSPlayerPawnBase, m_iProgressBarDuration) == 0xED0, "m_iProgressBarDuration in CCSPlayerPawnBase should be at offset 0xED0");
		static_assert(offsetof(CS2::server::CCSPlayerPawnBase, m_hOriginalController) == 0xED4, "m_hOriginalController in CCSPlayerPawnBase should be at offset 0xED4");
		static_assert(sizeof(CS2::server::CCSPlayerPawnBase) == 0xEE0, "CCSPlayerPawnBase size should be 0xEE0");
	}
}
