// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>




namespace CS2 {
	namespace server {
		class CAnimGraphNetworkedVariables  {
		public:
			S2_PAD(0x8);
			// GlobalTypes::CNetworkUtlVectorBase< uint32 > m_PredNetBoolVariables; // 0x8 | Schema_Atomic | Size: 0x18
			char  m_PredNetBoolVariables[0x18]; // 0x8 | Schema_Atomic | Size: 0x18
			// GlobalTypes::CNetworkUtlVectorBase< uint8 > m_PredNetByteVariables; // 0x20 | Schema_Atomic | Size: 0x18
			char  m_PredNetByteVariables[0x18]; // 0x20 | Schema_Atomic | Size: 0x18
			// GlobalTypes::CNetworkUtlVectorBase< uint16 > m_PredNetUInt16Variables; // 0x38 | Schema_Atomic | Size: 0x18
			char  m_PredNetUInt16Variables[0x18]; // 0x38 | Schema_Atomic | Size: 0x18
			// GlobalTypes::CNetworkUtlVectorBase< int32 > m_PredNetIntVariables; // 0x50 | Schema_Atomic | Size: 0x18
			char  m_PredNetIntVariables[0x18]; // 0x50 | Schema_Atomic | Size: 0x18
			// GlobalTypes::CNetworkUtlVectorBase< uint32 > m_PredNetUInt32Variables; // 0x68 | Schema_Atomic | Size: 0x18
			char  m_PredNetUInt32Variables[0x18]; // 0x68 | Schema_Atomic | Size: 0x18
			// GlobalTypes::CNetworkUtlVectorBase< uint64 > m_PredNetUInt64Variables; // 0x80 | Schema_Atomic | Size: 0x18
			char  m_PredNetUInt64Variables[0x18]; // 0x80 | Schema_Atomic | Size: 0x18
			// GlobalTypes::CNetworkUtlVectorBase< float32 > m_PredNetFloatVariables; // 0x98 | Schema_Atomic | Size: 0x18
			char  m_PredNetFloatVariables[0x18]; // 0x98 | Schema_Atomic | Size: 0x18
			// GlobalTypes::CNetworkUtlGlobalTypes::VectorBase< Vector > m_PredNetVectorVariables; // 0xb0 | Schema_Atomic | Size: 0x18
			char  m_PredNetVectorVariables[0x18]; // 0xb0 | Schema_Atomic | Size: 0x18
			// GlobalTypes::CNetworkUtlVectorBase< GlobalTypes::Quaternion > m_PredNetQuaternionVariables; // 0xc8 | Schema_Atomic | Size: 0x18
			char  m_PredNetQuaternionVariables[0x18]; // 0xc8 | Schema_Atomic | Size: 0x18
			// GlobalTypes::CNetworkUtlVectorBase< GlobalTypes::CGlobalSymbol > m_PredNetGlobalSymbolVariables; // 0xe0 | Schema_Atomic | Size: 0x18
			char  m_PredNetGlobalSymbolVariables[0x18]; // 0xe0 | Schema_Atomic | Size: 0x18
			// GlobalTypes::CNetworkUtlVectorBase< uint32 > m_OwnerOnlyPredNetBoolVariables; // 0xf8 | Schema_Atomic | Size: 0x18
			char  m_OwnerOnlyPredNetBoolVariables[0x18]; // 0xf8 | Schema_Atomic | Size: 0x18
			// GlobalTypes::CNetworkUtlVectorBase< uint8 > m_OwnerOnlyPredNetByteVariables; // 0x110 | Schema_Atomic | Size: 0x18
			char  m_OwnerOnlyPredNetByteVariables[0x18]; // 0x110 | Schema_Atomic | Size: 0x18
			// GlobalTypes::CNetworkUtlVectorBase< uint16 > m_OwnerOnlyPredNetUInt16Variables; // 0x128 | Schema_Atomic | Size: 0x18
			char  m_OwnerOnlyPredNetUInt16Variables[0x18]; // 0x128 | Schema_Atomic | Size: 0x18
			// GlobalTypes::CNetworkUtlVectorBase< int32 > m_OwnerOnlyPredNetIntVariables; // 0x140 | Schema_Atomic | Size: 0x18
			char  m_OwnerOnlyPredNetIntVariables[0x18]; // 0x140 | Schema_Atomic | Size: 0x18
			// GlobalTypes::CNetworkUtlVectorBase< uint32 > m_OwnerOnlyPredNetUInt32Variables; // 0x158 | Schema_Atomic | Size: 0x18
			char  m_OwnerOnlyPredNetUInt32Variables[0x18]; // 0x158 | Schema_Atomic | Size: 0x18
			// GlobalTypes::CNetworkUtlVectorBase< uint64 > m_OwnerOnlyPredNetUInt64Variables; // 0x170 | Schema_Atomic | Size: 0x18
			char  m_OwnerOnlyPredNetUInt64Variables[0x18]; // 0x170 | Schema_Atomic | Size: 0x18
			// GlobalTypes::CNetworkUtlVectorBase< float32 > m_OwnerOnlyPredNetFloatVariables; // 0x188 | Schema_Atomic | Size: 0x18
			char  m_OwnerOnlyPredNetFloatVariables[0x18]; // 0x188 | Schema_Atomic | Size: 0x18
			// GlobalTypes::CNetworkUtlGlobalTypes::VectorBase< Vector > m_OwnerOnlyPredNetVectorVariables; // 0x1a0 | Schema_Atomic | Size: 0x18
			char  m_OwnerOnlyPredNetVectorVariables[0x18]; // 0x1a0 | Schema_Atomic | Size: 0x18
			// GlobalTypes::CNetworkUtlVectorBase< GlobalTypes::Quaternion > m_OwnerOnlyPredNetQuaternionVariables; // 0x1b8 | Schema_Atomic | Size: 0x18
			char  m_OwnerOnlyPredNetQuaternionVariables[0x18]; // 0x1b8 | Schema_Atomic | Size: 0x18
			// GlobalTypes::CNetworkUtlVectorBase< GlobalTypes::CGlobalSymbol > m_OwnerOnlyPredNetGlobalSymbolVariables; // 0x1d0 | Schema_Atomic | Size: 0x18
			char  m_OwnerOnlyPredNetGlobalSymbolVariables[0x18]; // 0x1d0 | Schema_Atomic | Size: 0x18
			int32_t m_nBoolVariablesCount; // 0x1e8 | Schema_Builtin | Size: 0x4
			int32_t m_nOwnerOnlyBoolVariablesCount; // 0x1ec | Schema_Builtin | Size: 0x4
			int32_t m_nRandomSeedOffset; // 0x1f0 | Schema_Builtin | Size: 0x4
			float32 m_flLastTeleportTime; // 0x1f4 | Schema_Builtin | Size: 0x4
			S2_PAD(0x10); // End padding
		};
		static_assert(offsetof(CS2::server::CAnimGraphNetworkedVariables, m_PredNetBoolVariables) == 0x8, "m_PredNetBoolVariables in CAnimGraphNetworkedVariables should be at offset 0x8");
		static_assert(offsetof(CS2::server::CAnimGraphNetworkedVariables, m_PredNetByteVariables) == 0x20, "m_PredNetByteVariables in CAnimGraphNetworkedVariables should be at offset 0x20");
		static_assert(offsetof(CS2::server::CAnimGraphNetworkedVariables, m_PredNetUInt16Variables) == 0x38, "m_PredNetUInt16Variables in CAnimGraphNetworkedVariables should be at offset 0x38");
		static_assert(offsetof(CS2::server::CAnimGraphNetworkedVariables, m_PredNetIntVariables) == 0x50, "m_PredNetIntVariables in CAnimGraphNetworkedVariables should be at offset 0x50");
		static_assert(offsetof(CS2::server::CAnimGraphNetworkedVariables, m_PredNetUInt32Variables) == 0x68, "m_PredNetUInt32Variables in CAnimGraphNetworkedVariables should be at offset 0x68");
		static_assert(offsetof(CS2::server::CAnimGraphNetworkedVariables, m_PredNetUInt64Variables) == 0x80, "m_PredNetUInt64Variables in CAnimGraphNetworkedVariables should be at offset 0x80");
		static_assert(offsetof(CS2::server::CAnimGraphNetworkedVariables, m_PredNetFloatVariables) == 0x98, "m_PredNetFloatVariables in CAnimGraphNetworkedVariables should be at offset 0x98");
		static_assert(offsetof(CS2::server::CAnimGraphNetworkedVariables, m_PredNetVectorVariables) == 0xB0, "m_PredNetVectorVariables in CAnimGraphNetworkedVariables should be at offset 0xB0");
		static_assert(offsetof(CS2::server::CAnimGraphNetworkedVariables, m_PredNetQuaternionVariables) == 0xC8, "m_PredNetQuaternionVariables in CAnimGraphNetworkedVariables should be at offset 0xC8");
		static_assert(offsetof(CS2::server::CAnimGraphNetworkedVariables, m_PredNetGlobalSymbolVariables) == 0xE0, "m_PredNetGlobalSymbolVariables in CAnimGraphNetworkedVariables should be at offset 0xE0");
		static_assert(offsetof(CS2::server::CAnimGraphNetworkedVariables, m_OwnerOnlyPredNetBoolVariables) == 0xF8, "m_OwnerOnlyPredNetBoolVariables in CAnimGraphNetworkedVariables should be at offset 0xF8");
		static_assert(offsetof(CS2::server::CAnimGraphNetworkedVariables, m_OwnerOnlyPredNetByteVariables) == 0x110, "m_OwnerOnlyPredNetByteVariables in CAnimGraphNetworkedVariables should be at offset 0x110");
		static_assert(offsetof(CS2::server::CAnimGraphNetworkedVariables, m_OwnerOnlyPredNetUInt16Variables) == 0x128, "m_OwnerOnlyPredNetUInt16Variables in CAnimGraphNetworkedVariables should be at offset 0x128");
		static_assert(offsetof(CS2::server::CAnimGraphNetworkedVariables, m_OwnerOnlyPredNetIntVariables) == 0x140, "m_OwnerOnlyPredNetIntVariables in CAnimGraphNetworkedVariables should be at offset 0x140");
		static_assert(offsetof(CS2::server::CAnimGraphNetworkedVariables, m_OwnerOnlyPredNetUInt32Variables) == 0x158, "m_OwnerOnlyPredNetUInt32Variables in CAnimGraphNetworkedVariables should be at offset 0x158");
		static_assert(offsetof(CS2::server::CAnimGraphNetworkedVariables, m_OwnerOnlyPredNetUInt64Variables) == 0x170, "m_OwnerOnlyPredNetUInt64Variables in CAnimGraphNetworkedVariables should be at offset 0x170");
		static_assert(offsetof(CS2::server::CAnimGraphNetworkedVariables, m_OwnerOnlyPredNetFloatVariables) == 0x188, "m_OwnerOnlyPredNetFloatVariables in CAnimGraphNetworkedVariables should be at offset 0x188");
		static_assert(offsetof(CS2::server::CAnimGraphNetworkedVariables, m_OwnerOnlyPredNetVectorVariables) == 0x1A0, "m_OwnerOnlyPredNetVectorVariables in CAnimGraphNetworkedVariables should be at offset 0x1A0");
		static_assert(offsetof(CS2::server::CAnimGraphNetworkedVariables, m_OwnerOnlyPredNetQuaternionVariables) == 0x1B8, "m_OwnerOnlyPredNetQuaternionVariables in CAnimGraphNetworkedVariables should be at offset 0x1B8");
		static_assert(offsetof(CS2::server::CAnimGraphNetworkedVariables, m_OwnerOnlyPredNetGlobalSymbolVariables) == 0x1D0, "m_OwnerOnlyPredNetGlobalSymbolVariables in CAnimGraphNetworkedVariables should be at offset 0x1D0");
		static_assert(offsetof(CS2::server::CAnimGraphNetworkedVariables, m_nBoolVariablesCount) == 0x1E8, "m_nBoolVariablesCount in CAnimGraphNetworkedVariables should be at offset 0x1E8");
		static_assert(offsetof(CS2::server::CAnimGraphNetworkedVariables, m_nOwnerOnlyBoolVariablesCount) == 0x1EC, "m_nOwnerOnlyBoolVariablesCount in CAnimGraphNetworkedVariables should be at offset 0x1EC");
		static_assert(offsetof(CS2::server::CAnimGraphNetworkedVariables, m_nRandomSeedOffset) == 0x1F0, "m_nRandomSeedOffset in CAnimGraphNetworkedVariables should be at offset 0x1F0");
		static_assert(offsetof(CS2::server::CAnimGraphNetworkedVariables, m_flLastTeleportTime) == 0x1F4, "m_flLastTeleportTime in CAnimGraphNetworkedVariables should be at offset 0x1F4");
		static_assert(sizeof(CS2::server::CAnimGraphNetworkedVariables) == 0x208, "CAnimGraphNetworkedVariables size should be 0x208");
	}
}
