// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/entity2/GameTime_t.hpp>
#include <SDK/client/ForcedCrouchState_t.hpp>





using namespace GlobalTypes;
namespace CS2 {
	namespace server {
		class CGameScriptedMoveData  {
		public:
			GlobalTypes::Vector m_vAccumulatedRootMotion; // 0x0 | Schema_Atomic | Size: 0xc
			GlobalTypes::QAngle m_angAccumulatedRootMotionRotation; // 0xc | Schema_Atomic | Size: 0xc
			GlobalTypes::VectorWS m_vSrc; // 0x18 | Schema_Atomic | Size: 0xc
			GlobalTypes::QAngle m_angSrc; // 0x24 | Schema_Atomic | Size: 0xc
			GlobalTypes::QAngle m_angCurrent; // 0x30 | Schema_Atomic | Size: 0xc
			float32 m_flLockedSpeed; // 0x3c | Schema_Builtin | Size: 0x4
			float32 m_flAngRate; // 0x40 | Schema_Builtin | Size: 0x4
			float32 m_flDuration; // 0x44 | Schema_Builtin | Size: 0x4
			entity2::GameTime_t m_flStartTime; // 0x48 | Schema_DeclaredClass | Size: 0x4
			bool m_bActive; // 0x4c | Schema_Builtin | Size: 0x1
			bool m_bTeleportOnEnd; // 0x4d | Schema_Builtin | Size: 0x1
			bool m_bIgnoreRotation; // 0x4e | Schema_Builtin | Size: 0x1
			bool m_bSuccess; // 0x4f | Schema_Builtin | Size: 0x1
			client::ForcedCrouchState_t m_nForcedCrouchState; // 0x50 | Schema_DeclaredEnum | Size: 0x4
			bool m_bIgnoreCollisions; // 0x54 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			GlobalTypes::Vector m_vDest; // 0x58 | Schema_Atomic | Size: 0xc
			GlobalTypes::QAngle m_angDst; // 0x64 | Schema_Atomic | Size: 0xc
			// server::CHandle< server::CBaseEntity > m_hDestEntity; // 0x70 | Schema_Atomic | Size: 0x4
			char  m_hDestEntity[0x4]; // 0x70 | Schema_Atomic | Size: 0x4
		};
		static_assert(offsetof(CS2::server::CGameScriptedMoveData, m_vAccumulatedRootMotion) == 0x0, "m_vAccumulatedRootMotion in CGameScriptedMoveData should be at offset 0x0");
		static_assert(offsetof(CS2::server::CGameScriptedMoveData, m_angAccumulatedRootMotionRotation) == 0xC, "m_angAccumulatedRootMotionRotation in CGameScriptedMoveData should be at offset 0xC");
		static_assert(offsetof(CS2::server::CGameScriptedMoveData, m_vSrc) == 0x18, "m_vSrc in CGameScriptedMoveData should be at offset 0x18");
		static_assert(offsetof(CS2::server::CGameScriptedMoveData, m_angSrc) == 0x24, "m_angSrc in CGameScriptedMoveData should be at offset 0x24");
		static_assert(offsetof(CS2::server::CGameScriptedMoveData, m_angCurrent) == 0x30, "m_angCurrent in CGameScriptedMoveData should be at offset 0x30");
		static_assert(offsetof(CS2::server::CGameScriptedMoveData, m_flLockedSpeed) == 0x3C, "m_flLockedSpeed in CGameScriptedMoveData should be at offset 0x3C");
		static_assert(offsetof(CS2::server::CGameScriptedMoveData, m_flAngRate) == 0x40, "m_flAngRate in CGameScriptedMoveData should be at offset 0x40");
		static_assert(offsetof(CS2::server::CGameScriptedMoveData, m_flDuration) == 0x44, "m_flDuration in CGameScriptedMoveData should be at offset 0x44");
		static_assert(offsetof(CS2::server::CGameScriptedMoveData, m_flStartTime) == 0x48, "m_flStartTime in CGameScriptedMoveData should be at offset 0x48");
		static_assert(offsetof(CS2::server::CGameScriptedMoveData, m_bActive) == 0x4C, "m_bActive in CGameScriptedMoveData should be at offset 0x4C");
		static_assert(offsetof(CS2::server::CGameScriptedMoveData, m_bTeleportOnEnd) == 0x4D, "m_bTeleportOnEnd in CGameScriptedMoveData should be at offset 0x4D");
		static_assert(offsetof(CS2::server::CGameScriptedMoveData, m_bIgnoreRotation) == 0x4E, "m_bIgnoreRotation in CGameScriptedMoveData should be at offset 0x4E");
		static_assert(offsetof(CS2::server::CGameScriptedMoveData, m_bSuccess) == 0x4F, "m_bSuccess in CGameScriptedMoveData should be at offset 0x4F");
		static_assert(offsetof(CS2::server::CGameScriptedMoveData, m_nForcedCrouchState) == 0x50, "m_nForcedCrouchState in CGameScriptedMoveData should be at offset 0x50");
		static_assert(offsetof(CS2::server::CGameScriptedMoveData, m_bIgnoreCollisions) == 0x54, "m_bIgnoreCollisions in CGameScriptedMoveData should be at offset 0x54");
		static_assert(offsetof(CS2::server::CGameScriptedMoveData, m_vDest) == 0x58, "m_vDest in CGameScriptedMoveData should be at offset 0x58");
		static_assert(offsetof(CS2::server::CGameScriptedMoveData, m_angDst) == 0x64, "m_angDst in CGameScriptedMoveData should be at offset 0x64");
		static_assert(offsetof(CS2::server::CGameScriptedMoveData, m_hDestEntity) == 0x70, "m_hDestEntity in CGameScriptedMoveData should be at offset 0x70");
		static_assert(sizeof(CS2::server::CGameScriptedMoveData) == 0x74, "CGameScriptedMoveData size should be 0x74");
	}
}
