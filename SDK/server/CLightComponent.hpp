// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>

#include <SDK/entity2/CEntityComponent.hpp>
#include <SDK/entity2/CNetworkVarChainer.hpp>
#include <SDK/entity2/GameTime_t.hpp>



namespace CS2 {
	namespace server {
		class CLightComponent : public CS2::entity2::CEntityComponent {
		public:
			S2_PAD(0x28);
			entity2::CNetworkVarChainer __m_pChainEntity; // 0x30 | Schema_DeclaredClass | Size: 0x28
			S2_PAD(0x15);
			GlobalTypes::Color m_Color; // 0x6d | Schema_Atomic | Size: 0x4
			GlobalTypes::Color m_SecondaryColor; // 0x71 | Schema_Atomic | Size: 0x4
			S2_PAD(0x3);
			float32 m_flBrightness; // 0x78 | Schema_Builtin | Size: 0x4
			float32 m_flBrightnessScale; // 0x7c | Schema_Builtin | Size: 0x4
			float32 m_flBrightnessMult; // 0x80 | Schema_Builtin | Size: 0x4
			float32 m_flRange; // 0x84 | Schema_Builtin | Size: 0x4
			float32 m_flFalloff; // 0x88 | Schema_Builtin | Size: 0x4
			float32 m_flAttenuation0; // 0x8c | Schema_Builtin | Size: 0x4
			float32 m_flAttenuation1; // 0x90 | Schema_Builtin | Size: 0x4
			float32 m_flAttenuation2; // 0x94 | Schema_Builtin | Size: 0x4
			float32 m_flTheta; // 0x98 | Schema_Builtin | Size: 0x4
			float32 m_flPhi; // 0x9c | Schema_Builtin | Size: 0x4
			// GlobalTypes::CStrongHandle< resourcesystem::InfoForResourceTypeCTextureBase > m_hLightCookie; // 0xa0 | Schema_Atomic | Size: 0x8
			char  m_hLightCookie[0x8]; // 0xa0 | Schema_Atomic | Size: 0x8
			int32_t m_nCascades; // 0xa8 | Schema_Builtin | Size: 0x4
			int32_t m_nCastShadows; // 0xac | Schema_Builtin | Size: 0x4
			int32_t m_nShadowWidth; // 0xb0 | Schema_Builtin | Size: 0x4
			int32_t m_nShadowHeight; // 0xb4 | Schema_Builtin | Size: 0x4
			bool m_bRenderDiffuse; // 0xb8 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			int32_t m_nRenderSpecular; // 0xbc | Schema_Builtin | Size: 0x4
			bool m_bRenderTransmissive; // 0xc0 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			float32 m_flOrthoLightWidth; // 0xc4 | Schema_Builtin | Size: 0x4
			float32 m_flOrthoLightHeight; // 0xc8 | Schema_Builtin | Size: 0x4
			int32_t m_nStyle; // 0xcc | Schema_Builtin | Size: 0x4
			GlobalTypes::CUtlString m_Pattern; // 0xd0 | Schema_Atomic | Size: 0x8
			int32_t m_nCascadeRenderStaticObjects; // 0xd8 | Schema_Builtin | Size: 0x4
			float32 m_flShadowCascadeCrossFade; // 0xdc | Schema_Builtin | Size: 0x4
			float32 m_flShadowCascadeDistanceFade; // 0xe0 | Schema_Builtin | Size: 0x4
			float32 m_flShadowCascadeDistance0; // 0xe4 | Schema_Builtin | Size: 0x4
			float32 m_flShadowCascadeDistance1; // 0xe8 | Schema_Builtin | Size: 0x4
			float32 m_flShadowCascadeDistance2; // 0xec | Schema_Builtin | Size: 0x4
			float32 m_flShadowCascadeDistance3; // 0xf0 | Schema_Builtin | Size: 0x4
			int32_t m_nShadowCascadeResolution0; // 0xf4 | Schema_Builtin | Size: 0x4
			int32_t m_nShadowCascadeResolution1; // 0xf8 | Schema_Builtin | Size: 0x4
			int32_t m_nShadowCascadeResolution2; // 0xfc | Schema_Builtin | Size: 0x4
			int32_t m_nShadowCascadeResolution3; // 0x100 | Schema_Builtin | Size: 0x4
			bool m_bUsesBakedShadowing; // 0x104 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			int32_t m_nShadowPriority; // 0x108 | Schema_Builtin | Size: 0x4
			int32_t m_nBakedShadowIndex; // 0x10c | Schema_Builtin | Size: 0x4
			int32_t m_nLightPathUniqueId; // 0x110 | Schema_Builtin | Size: 0x4
			int32_t m_nLightMapUniqueId; // 0x114 | Schema_Builtin | Size: 0x4
			bool m_bRenderToCubemaps; // 0x118 | Schema_Builtin | Size: 0x1
			bool m_bAllowSSTGeneration; // 0x119 | Schema_Builtin | Size: 0x1
			S2_PAD(0x2);
			int32_t m_nDirectLight; // 0x11c | Schema_Builtin | Size: 0x4
			int32_t m_nIndirectLight; // 0x120 | Schema_Builtin | Size: 0x4
			float32 m_flFadeMinDist; // 0x124 | Schema_Builtin | Size: 0x4
			float32 m_flFadeMaxDist; // 0x128 | Schema_Builtin | Size: 0x4
			float32 m_flShadowFadeMinDist; // 0x12c | Schema_Builtin | Size: 0x4
			float32 m_flShadowFadeMaxDist; // 0x130 | Schema_Builtin | Size: 0x4
			bool m_bEnabled; // 0x134 | Schema_Builtin | Size: 0x1
			bool m_bFlicker; // 0x135 | Schema_Builtin | Size: 0x1
			bool m_bPrecomputedFieldsValid; // 0x136 | Schema_Builtin | Size: 0x1
			S2_PAD(0x1);
			GlobalTypes::Vector m_vPrecomputedBoundsMins; // 0x138 | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vPrecomputedBoundsMaxs; // 0x144 | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vPrecomputedOBBOrigin; // 0x150 | Schema_Atomic | Size: 0xc
			GlobalTypes::QAngle m_vPrecomputedOBBAngles; // 0x15c | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vPrecomputedOBBExtent; // 0x168 | Schema_Atomic | Size: 0xc
			float32 m_flPrecomputedMaxRange; // 0x174 | Schema_Builtin | Size: 0x4
			int32_t m_nFogLightingMode; // 0x178 | Schema_Builtin | Size: 0x4
			float32 m_flFogContributionStength; // 0x17c | Schema_Builtin | Size: 0x4
			float32 m_flNearClipPlane; // 0x180 | Schema_Builtin | Size: 0x4
			GlobalTypes::Color m_SkyColor; // 0x184 | Schema_Atomic | Size: 0x4
			float32 m_flSkyIntensity; // 0x188 | Schema_Builtin | Size: 0x4
			GlobalTypes::Color m_SkyAmbientBounce; // 0x18c | Schema_Atomic | Size: 0x4
			bool m_bUseSecondaryColor; // 0x190 | Schema_Builtin | Size: 0x1
			bool m_bMixedShadows; // 0x191 | Schema_Builtin | Size: 0x1
			S2_PAD(0x2);
			entity2::GameTime_t m_flLightStyleStartTime; // 0x194 | Schema_DeclaredClass | Size: 0x4
			float32 m_flCapsuleLength; // 0x198 | Schema_Builtin | Size: 0x4
			float32 m_flMinRoughness; // 0x19c | Schema_Builtin | Size: 0x4
			S2_PAD(0x10);
			bool m_bPvsModifyEntity; // 0x1b0 | Schema_Builtin | Size: 0x1
			S2_PAD(0x7); // End padding
		};
		static_assert(offsetof(CS2::server::CLightComponent, __m_pChainEntity) == 0x30, "__m_pChainEntity in CLightComponent should be at offset 0x30");
		static_assert(offsetof(CS2::server::CLightComponent, m_Color) == 0x6D, "m_Color in CLightComponent should be at offset 0x6D");
		static_assert(offsetof(CS2::server::CLightComponent, m_SecondaryColor) == 0x71, "m_SecondaryColor in CLightComponent should be at offset 0x71");
		static_assert(offsetof(CS2::server::CLightComponent, m_flBrightness) == 0x78, "m_flBrightness in CLightComponent should be at offset 0x78");
		static_assert(offsetof(CS2::server::CLightComponent, m_flBrightnessScale) == 0x7C, "m_flBrightnessScale in CLightComponent should be at offset 0x7C");
		static_assert(offsetof(CS2::server::CLightComponent, m_flBrightnessMult) == 0x80, "m_flBrightnessMult in CLightComponent should be at offset 0x80");
		static_assert(offsetof(CS2::server::CLightComponent, m_flRange) == 0x84, "m_flRange in CLightComponent should be at offset 0x84");
		static_assert(offsetof(CS2::server::CLightComponent, m_flFalloff) == 0x88, "m_flFalloff in CLightComponent should be at offset 0x88");
		static_assert(offsetof(CS2::server::CLightComponent, m_flAttenuation0) == 0x8C, "m_flAttenuation0 in CLightComponent should be at offset 0x8C");
		static_assert(offsetof(CS2::server::CLightComponent, m_flAttenuation1) == 0x90, "m_flAttenuation1 in CLightComponent should be at offset 0x90");
		static_assert(offsetof(CS2::server::CLightComponent, m_flAttenuation2) == 0x94, "m_flAttenuation2 in CLightComponent should be at offset 0x94");
		static_assert(offsetof(CS2::server::CLightComponent, m_flTheta) == 0x98, "m_flTheta in CLightComponent should be at offset 0x98");
		static_assert(offsetof(CS2::server::CLightComponent, m_flPhi) == 0x9C, "m_flPhi in CLightComponent should be at offset 0x9C");
		static_assert(offsetof(CS2::server::CLightComponent, m_hLightCookie) == 0xA0, "m_hLightCookie in CLightComponent should be at offset 0xA0");
		static_assert(offsetof(CS2::server::CLightComponent, m_nCascades) == 0xA8, "m_nCascades in CLightComponent should be at offset 0xA8");
		static_assert(offsetof(CS2::server::CLightComponent, m_nCastShadows) == 0xAC, "m_nCastShadows in CLightComponent should be at offset 0xAC");
		static_assert(offsetof(CS2::server::CLightComponent, m_nShadowWidth) == 0xB0, "m_nShadowWidth in CLightComponent should be at offset 0xB0");
		static_assert(offsetof(CS2::server::CLightComponent, m_nShadowHeight) == 0xB4, "m_nShadowHeight in CLightComponent should be at offset 0xB4");
		static_assert(offsetof(CS2::server::CLightComponent, m_bRenderDiffuse) == 0xB8, "m_bRenderDiffuse in CLightComponent should be at offset 0xB8");
		static_assert(offsetof(CS2::server::CLightComponent, m_nRenderSpecular) == 0xBC, "m_nRenderSpecular in CLightComponent should be at offset 0xBC");
		static_assert(offsetof(CS2::server::CLightComponent, m_bRenderTransmissive) == 0xC0, "m_bRenderTransmissive in CLightComponent should be at offset 0xC0");
		static_assert(offsetof(CS2::server::CLightComponent, m_flOrthoLightWidth) == 0xC4, "m_flOrthoLightWidth in CLightComponent should be at offset 0xC4");
		static_assert(offsetof(CS2::server::CLightComponent, m_flOrthoLightHeight) == 0xC8, "m_flOrthoLightHeight in CLightComponent should be at offset 0xC8");
		static_assert(offsetof(CS2::server::CLightComponent, m_nStyle) == 0xCC, "m_nStyle in CLightComponent should be at offset 0xCC");
		static_assert(offsetof(CS2::server::CLightComponent, m_Pattern) == 0xD0, "m_Pattern in CLightComponent should be at offset 0xD0");
		static_assert(offsetof(CS2::server::CLightComponent, m_nCascadeRenderStaticObjects) == 0xD8, "m_nCascadeRenderStaticObjects in CLightComponent should be at offset 0xD8");
		static_assert(offsetof(CS2::server::CLightComponent, m_flShadowCascadeCrossFade) == 0xDC, "m_flShadowCascadeCrossFade in CLightComponent should be at offset 0xDC");
		static_assert(offsetof(CS2::server::CLightComponent, m_flShadowCascadeDistanceFade) == 0xE0, "m_flShadowCascadeDistanceFade in CLightComponent should be at offset 0xE0");
		static_assert(offsetof(CS2::server::CLightComponent, m_flShadowCascadeDistance0) == 0xE4, "m_flShadowCascadeDistance0 in CLightComponent should be at offset 0xE4");
		static_assert(offsetof(CS2::server::CLightComponent, m_flShadowCascadeDistance1) == 0xE8, "m_flShadowCascadeDistance1 in CLightComponent should be at offset 0xE8");
		static_assert(offsetof(CS2::server::CLightComponent, m_flShadowCascadeDistance2) == 0xEC, "m_flShadowCascadeDistance2 in CLightComponent should be at offset 0xEC");
		static_assert(offsetof(CS2::server::CLightComponent, m_flShadowCascadeDistance3) == 0xF0, "m_flShadowCascadeDistance3 in CLightComponent should be at offset 0xF0");
		static_assert(offsetof(CS2::server::CLightComponent, m_nShadowCascadeResolution0) == 0xF4, "m_nShadowCascadeResolution0 in CLightComponent should be at offset 0xF4");
		static_assert(offsetof(CS2::server::CLightComponent, m_nShadowCascadeResolution1) == 0xF8, "m_nShadowCascadeResolution1 in CLightComponent should be at offset 0xF8");
		static_assert(offsetof(CS2::server::CLightComponent, m_nShadowCascadeResolution2) == 0xFC, "m_nShadowCascadeResolution2 in CLightComponent should be at offset 0xFC");
		static_assert(offsetof(CS2::server::CLightComponent, m_nShadowCascadeResolution3) == 0x100, "m_nShadowCascadeResolution3 in CLightComponent should be at offset 0x100");
		static_assert(offsetof(CS2::server::CLightComponent, m_bUsesBakedShadowing) == 0x104, "m_bUsesBakedShadowing in CLightComponent should be at offset 0x104");
		static_assert(offsetof(CS2::server::CLightComponent, m_nShadowPriority) == 0x108, "m_nShadowPriority in CLightComponent should be at offset 0x108");
		static_assert(offsetof(CS2::server::CLightComponent, m_nBakedShadowIndex) == 0x10C, "m_nBakedShadowIndex in CLightComponent should be at offset 0x10C");
		static_assert(offsetof(CS2::server::CLightComponent, m_nLightPathUniqueId) == 0x110, "m_nLightPathUniqueId in CLightComponent should be at offset 0x110");
		static_assert(offsetof(CS2::server::CLightComponent, m_nLightMapUniqueId) == 0x114, "m_nLightMapUniqueId in CLightComponent should be at offset 0x114");
		static_assert(offsetof(CS2::server::CLightComponent, m_bRenderToCubemaps) == 0x118, "m_bRenderToCubemaps in CLightComponent should be at offset 0x118");
		static_assert(offsetof(CS2::server::CLightComponent, m_bAllowSSTGeneration) == 0x119, "m_bAllowSSTGeneration in CLightComponent should be at offset 0x119");
		static_assert(offsetof(CS2::server::CLightComponent, m_nDirectLight) == 0x11C, "m_nDirectLight in CLightComponent should be at offset 0x11C");
		static_assert(offsetof(CS2::server::CLightComponent, m_nIndirectLight) == 0x120, "m_nIndirectLight in CLightComponent should be at offset 0x120");
		static_assert(offsetof(CS2::server::CLightComponent, m_flFadeMinDist) == 0x124, "m_flFadeMinDist in CLightComponent should be at offset 0x124");
		static_assert(offsetof(CS2::server::CLightComponent, m_flFadeMaxDist) == 0x128, "m_flFadeMaxDist in CLightComponent should be at offset 0x128");
		static_assert(offsetof(CS2::server::CLightComponent, m_flShadowFadeMinDist) == 0x12C, "m_flShadowFadeMinDist in CLightComponent should be at offset 0x12C");
		static_assert(offsetof(CS2::server::CLightComponent, m_flShadowFadeMaxDist) == 0x130, "m_flShadowFadeMaxDist in CLightComponent should be at offset 0x130");
		static_assert(offsetof(CS2::server::CLightComponent, m_bEnabled) == 0x134, "m_bEnabled in CLightComponent should be at offset 0x134");
		static_assert(offsetof(CS2::server::CLightComponent, m_bFlicker) == 0x135, "m_bFlicker in CLightComponent should be at offset 0x135");
		static_assert(offsetof(CS2::server::CLightComponent, m_bPrecomputedFieldsValid) == 0x136, "m_bPrecomputedFieldsValid in CLightComponent should be at offset 0x136");
		static_assert(offsetof(CS2::server::CLightComponent, m_vPrecomputedBoundsMins) == 0x138, "m_vPrecomputedBoundsMins in CLightComponent should be at offset 0x138");
		static_assert(offsetof(CS2::server::CLightComponent, m_vPrecomputedBoundsMaxs) == 0x144, "m_vPrecomputedBoundsMaxs in CLightComponent should be at offset 0x144");
		static_assert(offsetof(CS2::server::CLightComponent, m_vPrecomputedOBBOrigin) == 0x150, "m_vPrecomputedOBBOrigin in CLightComponent should be at offset 0x150");
		static_assert(offsetof(CS2::server::CLightComponent, m_vPrecomputedOBBAngles) == 0x15C, "m_vPrecomputedOBBAngles in CLightComponent should be at offset 0x15C");
		static_assert(offsetof(CS2::server::CLightComponent, m_vPrecomputedOBBExtent) == 0x168, "m_vPrecomputedOBBExtent in CLightComponent should be at offset 0x168");
		static_assert(offsetof(CS2::server::CLightComponent, m_flPrecomputedMaxRange) == 0x174, "m_flPrecomputedMaxRange in CLightComponent should be at offset 0x174");
		static_assert(offsetof(CS2::server::CLightComponent, m_nFogLightingMode) == 0x178, "m_nFogLightingMode in CLightComponent should be at offset 0x178");
		static_assert(offsetof(CS2::server::CLightComponent, m_flFogContributionStength) == 0x17C, "m_flFogContributionStength in CLightComponent should be at offset 0x17C");
		static_assert(offsetof(CS2::server::CLightComponent, m_flNearClipPlane) == 0x180, "m_flNearClipPlane in CLightComponent should be at offset 0x180");
		static_assert(offsetof(CS2::server::CLightComponent, m_SkyColor) == 0x184, "m_SkyColor in CLightComponent should be at offset 0x184");
		static_assert(offsetof(CS2::server::CLightComponent, m_flSkyIntensity) == 0x188, "m_flSkyIntensity in CLightComponent should be at offset 0x188");
		static_assert(offsetof(CS2::server::CLightComponent, m_SkyAmbientBounce) == 0x18C, "m_SkyAmbientBounce in CLightComponent should be at offset 0x18C");
		static_assert(offsetof(CS2::server::CLightComponent, m_bUseSecondaryColor) == 0x190, "m_bUseSecondaryColor in CLightComponent should be at offset 0x190");
		static_assert(offsetof(CS2::server::CLightComponent, m_bMixedShadows) == 0x191, "m_bMixedShadows in CLightComponent should be at offset 0x191");
		static_assert(offsetof(CS2::server::CLightComponent, m_flLightStyleStartTime) == 0x194, "m_flLightStyleStartTime in CLightComponent should be at offset 0x194");
		static_assert(offsetof(CS2::server::CLightComponent, m_flCapsuleLength) == 0x198, "m_flCapsuleLength in CLightComponent should be at offset 0x198");
		static_assert(offsetof(CS2::server::CLightComponent, m_flMinRoughness) == 0x19C, "m_flMinRoughness in CLightComponent should be at offset 0x19C");
		static_assert(offsetof(CS2::server::CLightComponent, m_bPvsModifyEntity) == 0x1B0, "m_bPvsModifyEntity in CLightComponent should be at offset 0x1B0");
		static_assert(sizeof(CS2::server::CLightComponent) == 0x1B8, "CLightComponent size should be 0x1B8");
	}
}
