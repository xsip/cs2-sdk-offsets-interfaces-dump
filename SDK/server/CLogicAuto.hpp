// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/server/CBaseEntity.hpp>
#include <SDK/entity2/CEntityIOOutput.hpp>



namespace CS2 {
	namespace server {
		class CLogicAuto : public CS2::server::CBaseEntity {
		public:
			entity2::CEntityIOOutput m_OnMapSpawn; // 0x4f0 | Schema_DeclaredClass | Size: 0x28
			entity2::CEntityIOOutput m_OnDemoMapSpawn; // 0x518 | Schema_DeclaredClass | Size: 0x28
			entity2::CEntityIOOutput m_OnNewGame; // 0x540 | Schema_DeclaredClass | Size: 0x28
			entity2::CEntityIOOutput m_OnLoadGame; // 0x568 | Schema_DeclaredClass | Size: 0x28
			entity2::CEntityIOOutput m_OnMapTransition; // 0x590 | Schema_DeclaredClass | Size: 0x28
			entity2::CEntityIOOutput m_OnBackgroundMap; // 0x5b8 | Schema_DeclaredClass | Size: 0x28
			entity2::CEntityIOOutput m_OnMultiNewMap; // 0x5e0 | Schema_DeclaredClass | Size: 0x28
			entity2::CEntityIOOutput m_OnMultiNewRound; // 0x608 | Schema_DeclaredClass | Size: 0x28
			entity2::CEntityIOOutput m_OnVREnabled; // 0x630 | Schema_DeclaredClass | Size: 0x28
			entity2::CEntityIOOutput m_OnVRNotEnabled; // 0x658 | Schema_DeclaredClass | Size: 0x28
			GlobalTypes::CUtlSymbolLarge m_globalstate; // 0x680 | Schema_Atomic | Size: 0x8
		};
		static_assert(offsetof(CS2::server::CLogicAuto, m_OnMapSpawn) == 0x4F0, "m_OnMapSpawn in CLogicAuto should be at offset 0x4F0");
		static_assert(offsetof(CS2::server::CLogicAuto, m_OnDemoMapSpawn) == 0x518, "m_OnDemoMapSpawn in CLogicAuto should be at offset 0x518");
		static_assert(offsetof(CS2::server::CLogicAuto, m_OnNewGame) == 0x540, "m_OnNewGame in CLogicAuto should be at offset 0x540");
		static_assert(offsetof(CS2::server::CLogicAuto, m_OnLoadGame) == 0x568, "m_OnLoadGame in CLogicAuto should be at offset 0x568");
		static_assert(offsetof(CS2::server::CLogicAuto, m_OnMapTransition) == 0x590, "m_OnMapTransition in CLogicAuto should be at offset 0x590");
		static_assert(offsetof(CS2::server::CLogicAuto, m_OnBackgroundMap) == 0x5B8, "m_OnBackgroundMap in CLogicAuto should be at offset 0x5B8");
		static_assert(offsetof(CS2::server::CLogicAuto, m_OnMultiNewMap) == 0x5E0, "m_OnMultiNewMap in CLogicAuto should be at offset 0x5E0");
		static_assert(offsetof(CS2::server::CLogicAuto, m_OnMultiNewRound) == 0x608, "m_OnMultiNewRound in CLogicAuto should be at offset 0x608");
		static_assert(offsetof(CS2::server::CLogicAuto, m_OnVREnabled) == 0x630, "m_OnVREnabled in CLogicAuto should be at offset 0x630");
		static_assert(offsetof(CS2::server::CLogicAuto, m_OnVRNotEnabled) == 0x658, "m_OnVRNotEnabled in CLogicAuto should be at offset 0x658");
		static_assert(offsetof(CS2::server::CLogicAuto, m_globalstate) == 0x680, "m_globalstate in CLogicAuto should be at offset 0x680");
		static_assert(sizeof(CS2::server::CLogicAuto) == 0x688, "CLogicAuto size should be 0x688");
	}
}
