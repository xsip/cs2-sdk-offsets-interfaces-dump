// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/server/IntervalTimer.hpp>
#include <SDK/client/TimelineCompression_t.hpp>



namespace CS2 {
	namespace server {
		class CTimeline : public CS2::server::IntervalTimer {
		public:
			float32 m_flValues[64]; // 0x10 | Schema_FixedArray | Size: 0x100
			int32_t m_nValueCounts[64]; // 0x110 | Schema_FixedArray | Size: 0x100
			int32_t m_nBucketCount; // 0x210 | Schema_Builtin | Size: 0x4
			float32 m_flInterval; // 0x214 | Schema_Builtin | Size: 0x4
			float32 m_flFinalValue; // 0x218 | Schema_Builtin | Size: 0x4
			client::TimelineCompression_t m_nCompressionType; // 0x21c | Schema_DeclaredEnum | Size: 0x4
			bool m_bStopped; // 0x220 | Schema_Builtin | Size: 0x1
			S2_PAD(0x7); // End padding
		};
		static_assert(offsetof(CS2::server::CTimeline, m_flValues) == 0x10, "m_flValues in CTimeline should be at offset 0x10");
		static_assert(offsetof(CS2::server::CTimeline, m_nValueCounts) == 0x110, "m_nValueCounts in CTimeline should be at offset 0x110");
		static_assert(offsetof(CS2::server::CTimeline, m_nBucketCount) == 0x210, "m_nBucketCount in CTimeline should be at offset 0x210");
		static_assert(offsetof(CS2::server::CTimeline, m_flInterval) == 0x214, "m_flInterval in CTimeline should be at offset 0x214");
		static_assert(offsetof(CS2::server::CTimeline, m_flFinalValue) == 0x218, "m_flFinalValue in CTimeline should be at offset 0x218");
		static_assert(offsetof(CS2::server::CTimeline, m_nCompressionType) == 0x21C, "m_nCompressionType in CTimeline should be at offset 0x21C");
		static_assert(offsetof(CS2::server::CTimeline, m_bStopped) == 0x220, "m_bStopped in CTimeline should be at offset 0x220");
		static_assert(sizeof(CS2::server::CTimeline) == 0x228, "CTimeline size should be 0x228");
	}
}
