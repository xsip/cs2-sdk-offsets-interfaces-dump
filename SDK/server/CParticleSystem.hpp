// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>

#include <SDK/server/CBaseModelEntity.hpp>
#include <SDK/entity2/GameTime_t.hpp>



namespace CS2 {
	namespace server {
		class CParticleSystem : public CS2::server::CBaseModelEntity {
		public:
			char m_szSnapshotFileName[512]; // 0x7f0 | Schema_FixedArray | Size: 0x200
			bool m_bActive; // 0x9f0 | Schema_Builtin | Size: 0x1
			bool m_bFrozen; // 0x9f1 | Schema_Builtin | Size: 0x1
			S2_PAD(0x2);
			float32 m_flFreezeTransitionDuration; // 0x9f4 | Schema_Builtin | Size: 0x4
			int32_t m_nStopType; // 0x9f8 | Schema_Builtin | Size: 0x4
			bool m_bAnimateDuringGameplayPause; // 0x9fc | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			// GlobalTypes::CStrongHandle< resourcesystem::InfoForResourceTypeIParticleSystemDefinition > m_iEffectIndex; // 0xa00 | Schema_Atomic | Size: 0x8
			char  m_iEffectIndex[0x8]; // 0xa00 | Schema_Atomic | Size: 0x8
			entity2::GameTime_t m_flStartTime; // 0xa08 | Schema_DeclaredClass | Size: 0x4
			float32 m_flPreSimTime; // 0xa0c | Schema_Builtin | Size: 0x4
			GlobalTypes::Vector m_vServerControlPoints[4]; // 0xa10 | Schema_FixedArray | Size: 0x30
			uint8_t m_iServerControlPointAssignments[4]; // 0xa40 | Schema_FixedArray | Size: 0x4
			// server::CHandle< CBaseEntity > m_hControlPointEnts[64]; // 0xa44 | Schema_FixedArray | Size: 0x100
			char  m_hControlPointEnts[0x4]; // 0xa44 | Schema_FixedArray | Size: 0x4
			bool m_bNoSave; // 0xb44 | Schema_Builtin | Size: 0x1
			bool m_bNoFreeze; // 0xb45 | Schema_Builtin | Size: 0x1
			bool m_bNoRamp; // 0xb46 | Schema_Builtin | Size: 0x1
			bool m_bStartActive; // 0xb47 | Schema_Builtin | Size: 0x1
			GlobalTypes::CUtlSymbolLarge m_iszEffectName; // 0xb48 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlSymbolLarge m_iszControlPointNames[64]; // 0xb50 | Schema_FixedArray | Size: 0x200
			int32_t m_nDataCP; // 0xd50 | Schema_Builtin | Size: 0x4
			GlobalTypes::Vector m_vecDataCPValue; // 0xd54 | Schema_Atomic | Size: 0xc
			int32_t m_nTintCP; // 0xd60 | Schema_Builtin | Size: 0x4
			GlobalTypes::Color m_clrTint; // 0xd64 | Schema_Atomic | Size: 0x4
		};
		static_assert(offsetof(CS2::server::CParticleSystem, m_szSnapshotFileName) == 0x7F0, "m_szSnapshotFileName in CParticleSystem should be at offset 0x7F0");
		static_assert(offsetof(CS2::server::CParticleSystem, m_bActive) == 0x9F0, "m_bActive in CParticleSystem should be at offset 0x9F0");
		static_assert(offsetof(CS2::server::CParticleSystem, m_bFrozen) == 0x9F1, "m_bFrozen in CParticleSystem should be at offset 0x9F1");
		static_assert(offsetof(CS2::server::CParticleSystem, m_flFreezeTransitionDuration) == 0x9F4, "m_flFreezeTransitionDuration in CParticleSystem should be at offset 0x9F4");
		static_assert(offsetof(CS2::server::CParticleSystem, m_nStopType) == 0x9F8, "m_nStopType in CParticleSystem should be at offset 0x9F8");
		static_assert(offsetof(CS2::server::CParticleSystem, m_bAnimateDuringGameplayPause) == 0x9FC, "m_bAnimateDuringGameplayPause in CParticleSystem should be at offset 0x9FC");
		static_assert(offsetof(CS2::server::CParticleSystem, m_iEffectIndex) == 0xA00, "m_iEffectIndex in CParticleSystem should be at offset 0xA00");
		static_assert(offsetof(CS2::server::CParticleSystem, m_flStartTime) == 0xA08, "m_flStartTime in CParticleSystem should be at offset 0xA08");
		static_assert(offsetof(CS2::server::CParticleSystem, m_flPreSimTime) == 0xA0C, "m_flPreSimTime in CParticleSystem should be at offset 0xA0C");
		static_assert(offsetof(CS2::server::CParticleSystem, m_vServerControlPoints) == 0xA10, "m_vServerControlPoints in CParticleSystem should be at offset 0xA10");
		static_assert(offsetof(CS2::server::CParticleSystem, m_iServerControlPointAssignments) == 0xA40, "m_iServerControlPointAssignments in CParticleSystem should be at offset 0xA40");
		static_assert(offsetof(CS2::server::CParticleSystem, m_hControlPointEnts) == 0xA44, "m_hControlPointEnts in CParticleSystem should be at offset 0xA44");
		static_assert(offsetof(CS2::server::CParticleSystem, m_bNoSave) == 0xB44, "m_bNoSave in CParticleSystem should be at offset 0xB44");
		static_assert(offsetof(CS2::server::CParticleSystem, m_bNoFreeze) == 0xB45, "m_bNoFreeze in CParticleSystem should be at offset 0xB45");
		static_assert(offsetof(CS2::server::CParticleSystem, m_bNoRamp) == 0xB46, "m_bNoRamp in CParticleSystem should be at offset 0xB46");
		static_assert(offsetof(CS2::server::CParticleSystem, m_bStartActive) == 0xB47, "m_bStartActive in CParticleSystem should be at offset 0xB47");
		static_assert(offsetof(CS2::server::CParticleSystem, m_iszEffectName) == 0xB48, "m_iszEffectName in CParticleSystem should be at offset 0xB48");
		static_assert(offsetof(CS2::server::CParticleSystem, m_iszControlPointNames) == 0xB50, "m_iszControlPointNames in CParticleSystem should be at offset 0xB50");
		static_assert(offsetof(CS2::server::CParticleSystem, m_nDataCP) == 0xD50, "m_nDataCP in CParticleSystem should be at offset 0xD50");
		static_assert(offsetof(CS2::server::CParticleSystem, m_vecDataCPValue) == 0xD54, "m_vecDataCPValue in CParticleSystem should be at offset 0xD54");
		static_assert(offsetof(CS2::server::CParticleSystem, m_nTintCP) == 0xD60, "m_nTintCP in CParticleSystem should be at offset 0xD60");
		static_assert(offsetof(CS2::server::CParticleSystem, m_clrTint) == 0xD64, "m_clrTint in CParticleSystem should be at offset 0xD64");
		static_assert(sizeof(CS2::server::CParticleSystem) == 0xD68, "CParticleSystem size should be 0xD68");
	}
}
