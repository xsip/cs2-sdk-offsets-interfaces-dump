// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/server/CPointEntity.hpp>
#include <SDK/entity2/GameTime_t.hpp>
#include <SDK/entity2/CEntityIOOutput.hpp>



namespace CS2 {
	namespace server {
		class CBaseEntity;
	}
}


using namespace GlobalTypes;
namespace CS2 {
	namespace server {
		class CPointAngleSensor : public CS2::server::CPointEntity {
		public:
			bool m_bDisabled; // 0x4f0 | Schema_Builtin | Size: 0x1
			S2_PAD(0x7);
			GlobalTypes::CUtlSymbolLarge m_nLookAtName; // 0x4f8 | Schema_Atomic | Size: 0x8
			GlobalTypes::CHandle<server::CBaseEntity> m_hTargetEntity; // 0x500 | Schema_Atomic | Size: 0x4
			// char  m_hTargetEntity[0x4]; // 0x500 | Schema_Atomic | Size: 0x4
			GlobalTypes::CHandle<server::CBaseEntity> m_hLookAtEntity; // 0x504 | Schema_Atomic | Size: 0x4
			// char  m_hLookAtEntity[0x4]; // 0x504 | Schema_Atomic | Size: 0x4
			float32 m_flDuration; // 0x508 | Schema_Builtin | Size: 0x4
			float32 m_flDotTolerance; // 0x50c | Schema_Builtin | Size: 0x4
			entity2::GameTime_t m_flFacingTime; // 0x510 | Schema_DeclaredClass | Size: 0x4
			bool m_bFired; // 0x514 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			entity2::CEntityIOOutput m_OnFacingLookat; // 0x518 | Schema_DeclaredClass | Size: 0x28
			entity2::CEntityIOOutput m_OnNotFacingLookat; // 0x540 | Schema_DeclaredClass | Size: 0x28
			// GlobalTypes::CEntityOutputTemplate<GlobalTypes::Vector> m_TargetDir; // 0x568 | Schema_Atomic | Size: 0x28
			char  m_TargetDir[0x28]; // 0x568 | Schema_Atomic | Size: 0x28
			// GlobalTypes::CEntityOutputTemplate< float32 > m_FacingPercentage; // 0x590 | Schema_Atomic | Size: 0x28
			char  m_FacingPercentage[0x28]; // 0x590 | Schema_Atomic | Size: 0x28
		};
		static_assert(offsetof(CS2::server::CPointAngleSensor, m_bDisabled) == 0x4F0, "m_bDisabled in CPointAngleSensor should be at offset 0x4F0");
		static_assert(offsetof(CS2::server::CPointAngleSensor, m_nLookAtName) == 0x4F8, "m_nLookAtName in CPointAngleSensor should be at offset 0x4F8");
		static_assert(offsetof(CS2::server::CPointAngleSensor, m_hTargetEntity) == 0x500, "m_hTargetEntity in CPointAngleSensor should be at offset 0x500");
		static_assert(offsetof(CS2::server::CPointAngleSensor, m_hLookAtEntity) == 0x504, "m_hLookAtEntity in CPointAngleSensor should be at offset 0x504");
		static_assert(offsetof(CS2::server::CPointAngleSensor, m_flDuration) == 0x508, "m_flDuration in CPointAngleSensor should be at offset 0x508");
		static_assert(offsetof(CS2::server::CPointAngleSensor, m_flDotTolerance) == 0x50C, "m_flDotTolerance in CPointAngleSensor should be at offset 0x50C");
		static_assert(offsetof(CS2::server::CPointAngleSensor, m_flFacingTime) == 0x510, "m_flFacingTime in CPointAngleSensor should be at offset 0x510");
		static_assert(offsetof(CS2::server::CPointAngleSensor, m_bFired) == 0x514, "m_bFired in CPointAngleSensor should be at offset 0x514");
		static_assert(offsetof(CS2::server::CPointAngleSensor, m_OnFacingLookat) == 0x518, "m_OnFacingLookat in CPointAngleSensor should be at offset 0x518");
		static_assert(offsetof(CS2::server::CPointAngleSensor, m_OnNotFacingLookat) == 0x540, "m_OnNotFacingLookat in CPointAngleSensor should be at offset 0x540");
		static_assert(offsetof(CS2::server::CPointAngleSensor, m_TargetDir) == 0x568, "m_TargetDir in CPointAngleSensor should be at offset 0x568");
		static_assert(offsetof(CS2::server::CPointAngleSensor, m_FacingPercentage) == 0x590, "m_FacingPercentage in CPointAngleSensor should be at offset 0x590");
		static_assert(sizeof(CS2::server::CPointAngleSensor) == 0x5B8, "CPointAngleSensor size should be 0x5B8");
	}
}
