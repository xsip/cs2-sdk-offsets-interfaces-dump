// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>

#include <SDK/server/CBaseCombatCharacter.hpp>
#include <SDK/server/sky3dparams_t.hpp>
#include <SDK/entity2/GameTime_t.hpp>



namespace CS2 {
	namespace server {
		class CPlayer_WeaponServices;
		class CPlayer_ItemServices;
		class CPlayer_AutoaimServices;
		class CPlayer_ObserverServices;
		class CPlayer_WaterServices;
		class CPlayer_UseServices;
		class CPlayer_FlashlightServices;
		class CPlayer_CameraServices;
		class CPlayer_MovementServices;
		class CAI_Expresser;
	}
}
namespace CS2 {
	namespace server {
		class CBasePlayerPawn : public CS2::server::CBaseCombatCharacter {
		public:
			server::CPlayer_WeaponServices* m_pWeaponServices; // 0xbe0 | Schema_Ptr | Size: 0x8
			server::CPlayer_ItemServices* m_pItemServices; // 0xbe8 | Schema_Ptr | Size: 0x8
			server::CPlayer_AutoaimServices* m_pAutoaimServices; // 0xbf0 | Schema_Ptr | Size: 0x8
			server::CPlayer_ObserverServices* m_pObserverServices; // 0xbf8 | Schema_Ptr | Size: 0x8
			server::CPlayer_WaterServices* m_pWaterServices; // 0xc00 | Schema_Ptr | Size: 0x8
			server::CPlayer_UseServices* m_pUseServices; // 0xc08 | Schema_Ptr | Size: 0x8
			server::CPlayer_FlashlightServices* m_pFlashlightServices; // 0xc10 | Schema_Ptr | Size: 0x8
			server::CPlayer_CameraServices* m_pCameraServices; // 0xc18 | Schema_Ptr | Size: 0x8
			server::CPlayer_MovementServices* m_pMovementServices; // 0xc20 | Schema_Ptr | Size: 0x8
			S2_PAD(0x8);
			// server::CUtlVectorEmbeddedNetworkVar< server::ViewAngleServerChange_t > m_ServerViewAngleChanges; // 0xc30 | Schema_Atomic | Size: 0x68
			char  m_ServerViewAngleChanges[0x68]; // 0xc30 | Schema_Atomic | Size: 0x68
			GlobalTypes::QAngle v_angle; // 0xc98 | Schema_Atomic | Size: 0xc
			GlobalTypes::QAngle v_anglePrevious; // 0xca4 | Schema_Atomic | Size: 0xc
			uint32_t m_iHideHUD; // 0xcb0 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4);
			server::sky3dparams_t m_skybox3d; // 0xcb8 | Schema_DeclaredClass | Size: 0x90
			entity2::GameTime_t m_fTimeLastHurt; // 0xd48 | Schema_DeclaredClass | Size: 0x4
			entity2::GameTime_t m_flDeathTime; // 0xd4c | Schema_DeclaredClass | Size: 0x4
			entity2::GameTime_t m_fNextSuicideTime; // 0xd50 | Schema_DeclaredClass | Size: 0x4
			bool m_fInitHUD; // 0xd54 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			server::CAI_Expresser* m_pExpresser; // 0xd58 | Schema_Ptr | Size: 0x8
			// server::CHandle< server::CBasePlayerController > m_hController; // 0xd60 | Schema_Atomic | Size: 0x4
			char  m_hController[0x4]; // 0xd60 | Schema_Atomic | Size: 0x4
			// server::CHandle< server::CBasePlayerController > m_hDefaultController; // 0xd64 | Schema_Atomic | Size: 0x4
			char  m_hDefaultController[0x4]; // 0xd64 | Schema_Atomic | Size: 0x4
			S2_PAD(0x4);
			float32 m_fHltvReplayDelay; // 0xd6c | Schema_Builtin | Size: 0x4
			float32 m_fHltvReplayEnd; // 0xd70 | Schema_Builtin | Size: 0x4
			GlobalTypes::CEntityIndex m_iHltvReplayEntity; // 0xd74 | Schema_Atomic | Size: 0x4
			// GlobalTypes::CUtlVector< client::sndopvarlatchdata_t > m_sndOpvarLatchData; // 0xd78 | Schema_Atomic | Size: 0x18
			char  m_sndOpvarLatchData[0x18]; // 0xd78 | Schema_Atomic | Size: 0x18
		};
		static_assert(offsetof(CS2::server::CBasePlayerPawn, m_pWeaponServices) == 0xBE0, "m_pWeaponServices in CBasePlayerPawn should be at offset 0xBE0");
		static_assert(offsetof(CS2::server::CBasePlayerPawn, m_pItemServices) == 0xBE8, "m_pItemServices in CBasePlayerPawn should be at offset 0xBE8");
		static_assert(offsetof(CS2::server::CBasePlayerPawn, m_pAutoaimServices) == 0xBF0, "m_pAutoaimServices in CBasePlayerPawn should be at offset 0xBF0");
		static_assert(offsetof(CS2::server::CBasePlayerPawn, m_pObserverServices) == 0xBF8, "m_pObserverServices in CBasePlayerPawn should be at offset 0xBF8");
		static_assert(offsetof(CS2::server::CBasePlayerPawn, m_pWaterServices) == 0xC00, "m_pWaterServices in CBasePlayerPawn should be at offset 0xC00");
		static_assert(offsetof(CS2::server::CBasePlayerPawn, m_pUseServices) == 0xC08, "m_pUseServices in CBasePlayerPawn should be at offset 0xC08");
		static_assert(offsetof(CS2::server::CBasePlayerPawn, m_pFlashlightServices) == 0xC10, "m_pFlashlightServices in CBasePlayerPawn should be at offset 0xC10");
		static_assert(offsetof(CS2::server::CBasePlayerPawn, m_pCameraServices) == 0xC18, "m_pCameraServices in CBasePlayerPawn should be at offset 0xC18");
		static_assert(offsetof(CS2::server::CBasePlayerPawn, m_pMovementServices) == 0xC20, "m_pMovementServices in CBasePlayerPawn should be at offset 0xC20");
		static_assert(offsetof(CS2::server::CBasePlayerPawn, m_ServerViewAngleChanges) == 0xC30, "m_ServerViewAngleChanges in CBasePlayerPawn should be at offset 0xC30");
		static_assert(offsetof(CS2::server::CBasePlayerPawn, v_angle) == 0xC98, "v_angle in CBasePlayerPawn should be at offset 0xC98");
		static_assert(offsetof(CS2::server::CBasePlayerPawn, v_anglePrevious) == 0xCA4, "v_anglePrevious in CBasePlayerPawn should be at offset 0xCA4");
		static_assert(offsetof(CS2::server::CBasePlayerPawn, m_iHideHUD) == 0xCB0, "m_iHideHUD in CBasePlayerPawn should be at offset 0xCB0");
		static_assert(offsetof(CS2::server::CBasePlayerPawn, m_skybox3d) == 0xCB8, "m_skybox3d in CBasePlayerPawn should be at offset 0xCB8");
		static_assert(offsetof(CS2::server::CBasePlayerPawn, m_fTimeLastHurt) == 0xD48, "m_fTimeLastHurt in CBasePlayerPawn should be at offset 0xD48");
		static_assert(offsetof(CS2::server::CBasePlayerPawn, m_flDeathTime) == 0xD4C, "m_flDeathTime in CBasePlayerPawn should be at offset 0xD4C");
		static_assert(offsetof(CS2::server::CBasePlayerPawn, m_fNextSuicideTime) == 0xD50, "m_fNextSuicideTime in CBasePlayerPawn should be at offset 0xD50");
		static_assert(offsetof(CS2::server::CBasePlayerPawn, m_fInitHUD) == 0xD54, "m_fInitHUD in CBasePlayerPawn should be at offset 0xD54");
		static_assert(offsetof(CS2::server::CBasePlayerPawn, m_pExpresser) == 0xD58, "m_pExpresser in CBasePlayerPawn should be at offset 0xD58");
		static_assert(offsetof(CS2::server::CBasePlayerPawn, m_hController) == 0xD60, "m_hController in CBasePlayerPawn should be at offset 0xD60");
		static_assert(offsetof(CS2::server::CBasePlayerPawn, m_hDefaultController) == 0xD64, "m_hDefaultController in CBasePlayerPawn should be at offset 0xD64");
		static_assert(offsetof(CS2::server::CBasePlayerPawn, m_fHltvReplayDelay) == 0xD6C, "m_fHltvReplayDelay in CBasePlayerPawn should be at offset 0xD6C");
		static_assert(offsetof(CS2::server::CBasePlayerPawn, m_fHltvReplayEnd) == 0xD70, "m_fHltvReplayEnd in CBasePlayerPawn should be at offset 0xD70");
		static_assert(offsetof(CS2::server::CBasePlayerPawn, m_iHltvReplayEntity) == 0xD74, "m_iHltvReplayEntity in CBasePlayerPawn should be at offset 0xD74");
		static_assert(offsetof(CS2::server::CBasePlayerPawn, m_sndOpvarLatchData) == 0xD78, "m_sndOpvarLatchData in CBasePlayerPawn should be at offset 0xD78");
		static_assert(sizeof(CS2::server::CBasePlayerPawn) == 0xD90, "CBasePlayerPawn size should be 0xD90");
	}
}
