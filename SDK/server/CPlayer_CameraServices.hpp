// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/client/CPlayerPawnComponent.hpp>
#include <SDK/entity2/GameTick_t.hpp>
#include <SDK/server/fogplayerparams_t.hpp>
#include <SDK/server/audioparams_t.hpp>





using namespace GlobalTypes;
namespace CS2 {
	namespace server {
		class CPlayer_CameraServices : public CS2::client::CPlayerPawnComponent {
		public:
			GlobalTypes::QAngle m_vecCsViewPunchAngle; // 0x40 | Schema_Atomic | Size: 0xc
			entity2::GameTick_t m_nCsViewPunchAngleTick; // 0x4c | Schema_DeclaredClass | Size: 0x4
			float32 m_flCsViewPunchAngleTickRatio; // 0x50 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4);
			server::fogplayerparams_t m_PlayerFog; // 0x58 | Schema_DeclaredClass | Size: 0x40
			// server::CHandle< server::CColorCorrection > m_hColorCorrectionCtrl; // 0x98 | Schema_Atomic | Size: 0x4
			char  m_hColorCorrectionCtrl[0x4]; // 0x98 | Schema_Atomic | Size: 0x4
			// server::CHandle< server::CBaseEntity > m_hViewEntity; // 0x9c | Schema_Atomic | Size: 0x4
			char  m_hViewEntity[0x4]; // 0x9c | Schema_Atomic | Size: 0x4
			// server::CHandle< server::CTonemapController2 > m_hTonemapController; // 0xa0 | Schema_Atomic | Size: 0x4
			char  m_hTonemapController[0x4]; // 0xa0 | Schema_Atomic | Size: 0x4
			S2_PAD(0x4);
			server::audioparams_t m_audio; // 0xa8 | Schema_DeclaredClass | Size: 0x78
			// server::CNetworkUtlVectorBase< server.dll::CHandle< CPostProcessingVolume > > m_PostProcessingVolumes; // 0x120 | Schema_Atomic | Size: 0x18
			char  m_PostProcessingVolumes[0x18]; // 0x120 | Schema_Atomic | Size: 0x18
			float32 m_flOldPlayerZ; // 0x138 | Schema_Builtin | Size: 0x4
			float32 m_flOldPlayerViewOffsetZ; // 0x13c | Schema_Builtin | Size: 0x4
			S2_PAD(0x18);
			// server::CUtlVector< server.dll::CHandle< CEnvSoundscapeTriggerable > > m_hTriggerSoundscapeList; // 0x158 | Schema_Atomic | Size: 0x18
			char  m_hTriggerSoundscapeList[0x18]; // 0x158 | Schema_Atomic | Size: 0x18
		};
		static_assert(offsetof(CS2::server::CPlayer_CameraServices, m_vecCsViewPunchAngle) == 0x40, "m_vecCsViewPunchAngle in CPlayer_CameraServices should be at offset 0x40");
		static_assert(offsetof(CS2::server::CPlayer_CameraServices, m_nCsViewPunchAngleTick) == 0x4C, "m_nCsViewPunchAngleTick in CPlayer_CameraServices should be at offset 0x4C");
		static_assert(offsetof(CS2::server::CPlayer_CameraServices, m_flCsViewPunchAngleTickRatio) == 0x50, "m_flCsViewPunchAngleTickRatio in CPlayer_CameraServices should be at offset 0x50");
		static_assert(offsetof(CS2::server::CPlayer_CameraServices, m_PlayerFog) == 0x58, "m_PlayerFog in CPlayer_CameraServices should be at offset 0x58");
		static_assert(offsetof(CS2::server::CPlayer_CameraServices, m_hColorCorrectionCtrl) == 0x98, "m_hColorCorrectionCtrl in CPlayer_CameraServices should be at offset 0x98");
		static_assert(offsetof(CS2::server::CPlayer_CameraServices, m_hViewEntity) == 0x9C, "m_hViewEntity in CPlayer_CameraServices should be at offset 0x9C");
		static_assert(offsetof(CS2::server::CPlayer_CameraServices, m_hTonemapController) == 0xA0, "m_hTonemapController in CPlayer_CameraServices should be at offset 0xA0");
		static_assert(offsetof(CS2::server::CPlayer_CameraServices, m_audio) == 0xA8, "m_audio in CPlayer_CameraServices should be at offset 0xA8");
		static_assert(offsetof(CS2::server::CPlayer_CameraServices, m_PostProcessingVolumes) == 0x120, "m_PostProcessingVolumes in CPlayer_CameraServices should be at offset 0x120");
		static_assert(offsetof(CS2::server::CPlayer_CameraServices, m_flOldPlayerZ) == 0x138, "m_flOldPlayerZ in CPlayer_CameraServices should be at offset 0x138");
		static_assert(offsetof(CS2::server::CPlayer_CameraServices, m_flOldPlayerViewOffsetZ) == 0x13C, "m_flOldPlayerViewOffsetZ in CPlayer_CameraServices should be at offset 0x13C");
		static_assert(offsetof(CS2::server::CPlayer_CameraServices, m_hTriggerSoundscapeList) == 0x158, "m_hTriggerSoundscapeList in CPlayer_CameraServices should be at offset 0x158");
		static_assert(sizeof(CS2::server::CPlayer_CameraServices) == 0x170, "CPlayer_CameraServices size should be 0x170");
	}
}
