// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>

#include <SDK/server/CBaseModelEntity.hpp>
#include <SDK/server/PhysicsRagdollPose_t.hpp>



namespace CS2 {
	namespace client {
		class IChoreoServices;
	}
}
namespace CS2 {
	namespace server {
		class CBaseAnimGraph : public CS2::server::CBaseModelEntity {
		public:
			S2_PAD(0x80);
			bool m_bInitiallyPopulateInterpHistory; // 0x870 | Schema_Builtin | Size: 0x1
			S2_PAD(0x7);
			client::IChoreoServices* m_pChoreoServices; // 0x878 | Schema_Ptr | Size: 0x8
			bool m_bAnimGraphUpdateEnabled; // 0x880 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			float32 m_flMaxSlopeDistance; // 0x884 | Schema_Builtin | Size: 0x4
			GlobalTypes::Vector m_vLastSlopeCheckPos; // 0x888 | Schema_Atomic | Size: 0xc
			bool m_bAnimationUpdateScheduled; // 0x894 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			GlobalTypes::Vector m_vecForce; // 0x898 | Schema_Atomic | Size: 0xc
			int32_t m_nForceBone; // 0x8a4 | Schema_Builtin | Size: 0x4
			S2_PAD(0x10);
			server::PhysicsRagdollPose_t m_RagdollPose; // 0x8b8 | Schema_DeclaredClass | Size: 0x28
			bool m_bRagdollEnabled; // 0x8e0 | Schema_Builtin | Size: 0x1
			bool m_bRagdollClientSide; // 0x8e1 | Schema_Builtin | Size: 0x1
			S2_PAD(0x19e); // End padding
		};
		static_assert(offsetof(CS2::server::CBaseAnimGraph, m_bInitiallyPopulateInterpHistory) == 0x870, "m_bInitiallyPopulateInterpHistory in CBaseAnimGraph should be at offset 0x870");
		static_assert(offsetof(CS2::server::CBaseAnimGraph, m_pChoreoServices) == 0x878, "m_pChoreoServices in CBaseAnimGraph should be at offset 0x878");
		static_assert(offsetof(CS2::server::CBaseAnimGraph, m_bAnimGraphUpdateEnabled) == 0x880, "m_bAnimGraphUpdateEnabled in CBaseAnimGraph should be at offset 0x880");
		static_assert(offsetof(CS2::server::CBaseAnimGraph, m_flMaxSlopeDistance) == 0x884, "m_flMaxSlopeDistance in CBaseAnimGraph should be at offset 0x884");
		static_assert(offsetof(CS2::server::CBaseAnimGraph, m_vLastSlopeCheckPos) == 0x888, "m_vLastSlopeCheckPos in CBaseAnimGraph should be at offset 0x888");
		static_assert(offsetof(CS2::server::CBaseAnimGraph, m_bAnimationUpdateScheduled) == 0x894, "m_bAnimationUpdateScheduled in CBaseAnimGraph should be at offset 0x894");
		static_assert(offsetof(CS2::server::CBaseAnimGraph, m_vecForce) == 0x898, "m_vecForce in CBaseAnimGraph should be at offset 0x898");
		static_assert(offsetof(CS2::server::CBaseAnimGraph, m_nForceBone) == 0x8A4, "m_nForceBone in CBaseAnimGraph should be at offset 0x8A4");
		static_assert(offsetof(CS2::server::CBaseAnimGraph, m_RagdollPose) == 0x8B8, "m_RagdollPose in CBaseAnimGraph should be at offset 0x8B8");
		static_assert(offsetof(CS2::server::CBaseAnimGraph, m_bRagdollEnabled) == 0x8E0, "m_bRagdollEnabled in CBaseAnimGraph should be at offset 0x8E0");
		static_assert(offsetof(CS2::server::CBaseAnimGraph, m_bRagdollClientSide) == 0x8E1, "m_bRagdollClientSide in CBaseAnimGraph should be at offset 0x8E1");
		static_assert(sizeof(CS2::server::CBaseAnimGraph) == 0xA80, "CBaseAnimGraph size should be 0xA80");
	}
}
