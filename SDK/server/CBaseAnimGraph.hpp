// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/server/CBaseModelEntity.hpp>
#include <SDK/server/PhysicsRagdollPose_t.hpp>



namespace CS2 {
	namespace client {
		class IChoreoServices;
	}
}
namespace CS2 {
	namespace server {
		class CBaseAnimGraph : public CS2::server::CBaseModelEntity {
		public:
			S2_PAD(0x80);
			bool m_bInitiallyPopulateInterpHistory; // 0x858 | Schema_Builtin | Size: 0x1
			S2_PAD(0x7);
			client::IChoreoServices* m_pChoreoServices; // 0x860 | Schema_Ptr | Size: 0x8
			bool m_bAnimGraphUpdateEnabled; // 0x868 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			float32 m_flMaxSlopeDistance; // 0x86c | Schema_Builtin | Size: 0x4
			GlobalTypes::VectorWS m_vLastSlopeCheckPos; // 0x870 | Schema_Atomic | Size: 0xc
			bool m_bAnimationUpdateScheduled; // 0x87c | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			GlobalTypes::Vector m_vecForce; // 0x880 | Schema_Atomic | Size: 0xc
			int32_t m_nForceBone; // 0x88c | Schema_Builtin | Size: 0x4
			S2_PAD(0x10);
			server::PhysicsRagdollPose_t m_RagdollPose; // 0x8a0 | Schema_DeclaredClass | Size: 0x28
			bool m_bRagdollEnabled; // 0x8c8 | Schema_Builtin | Size: 0x1
			bool m_bRagdollClientSide; // 0x8c9 | Schema_Builtin | Size: 0x1
			S2_PAD(0x6);
			GlobalTypes::CTransform m_xParentedRagdollRootInEntitySpace; // 0x8d0 | Schema_Atomic | Size: 0x20
			S2_PAD(0x1a0); // End padding
		};
		static_assert(offsetof(CS2::server::CBaseAnimGraph, m_bInitiallyPopulateInterpHistory) == 0x858, "m_bInitiallyPopulateInterpHistory in CBaseAnimGraph should be at offset 0x858");
		static_assert(offsetof(CS2::server::CBaseAnimGraph, m_pChoreoServices) == 0x860, "m_pChoreoServices in CBaseAnimGraph should be at offset 0x860");
		static_assert(offsetof(CS2::server::CBaseAnimGraph, m_bAnimGraphUpdateEnabled) == 0x868, "m_bAnimGraphUpdateEnabled in CBaseAnimGraph should be at offset 0x868");
		static_assert(offsetof(CS2::server::CBaseAnimGraph, m_flMaxSlopeDistance) == 0x86C, "m_flMaxSlopeDistance in CBaseAnimGraph should be at offset 0x86C");
		static_assert(offsetof(CS2::server::CBaseAnimGraph, m_vLastSlopeCheckPos) == 0x870, "m_vLastSlopeCheckPos in CBaseAnimGraph should be at offset 0x870");
		static_assert(offsetof(CS2::server::CBaseAnimGraph, m_bAnimationUpdateScheduled) == 0x87C, "m_bAnimationUpdateScheduled in CBaseAnimGraph should be at offset 0x87C");
		static_assert(offsetof(CS2::server::CBaseAnimGraph, m_vecForce) == 0x880, "m_vecForce in CBaseAnimGraph should be at offset 0x880");
		static_assert(offsetof(CS2::server::CBaseAnimGraph, m_nForceBone) == 0x88C, "m_nForceBone in CBaseAnimGraph should be at offset 0x88C");
		static_assert(offsetof(CS2::server::CBaseAnimGraph, m_RagdollPose) == 0x8A0, "m_RagdollPose in CBaseAnimGraph should be at offset 0x8A0");
		static_assert(offsetof(CS2::server::CBaseAnimGraph, m_bRagdollEnabled) == 0x8C8, "m_bRagdollEnabled in CBaseAnimGraph should be at offset 0x8C8");
		static_assert(offsetof(CS2::server::CBaseAnimGraph, m_bRagdollClientSide) == 0x8C9, "m_bRagdollClientSide in CBaseAnimGraph should be at offset 0x8C9");
		static_assert(offsetof(CS2::server::CBaseAnimGraph, m_xParentedRagdollRootInEntitySpace) == 0x8D0, "m_xParentedRagdollRootInEntitySpace in CBaseAnimGraph should be at offset 0x8D0");
		static_assert(sizeof(CS2::server::CBaseAnimGraph) == 0xA90, "CBaseAnimGraph size should be 0xA90");
	}
}
