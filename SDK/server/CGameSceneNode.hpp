// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/server/CGameSceneNodeHandle.hpp>
#include <SDK/client/CNetworkOriginCellCoordQuantizedVector.hpp>



namespace CS2 {
	namespace entity2 {
		class CEntityInstance;
	}
}


using namespace GlobalTypes;
namespace CS2 {
	namespace server {
		class CGameSceneNode  {
		public:
			S2_PAD(0x10);
			GlobalTypes::CTransformWS m_nodeToWorld; // 0x10 | Schema_Atomic | Size: 0x20
			entity2::CEntityInstance* m_pOwner; // 0x30 | Schema_Ptr | Size: 0x8
			server::CGameSceneNode* m_pParent; // 0x38 | Schema_Ptr | Size: 0x8
			server::CGameSceneNode* m_pChild; // 0x40 | Schema_Ptr | Size: 0x8
			server::CGameSceneNode* m_pNextSibling; // 0x48 | Schema_Ptr | Size: 0x8
			S2_PAD(0x28);
			server::CGameSceneNodeHandle m_hParent; // 0x78 | Schema_DeclaredClass | Size: 0x10
			client::CNetworkOriginCellCoordQuantizedVector m_vecOrigin; // 0x88 | Schema_DeclaredClass | Size: 0x30
			S2_PAD(0x8);
			GlobalTypes::QAngle m_angRotation; // 0xc0 | Schema_Atomic | Size: 0xc
			float32 m_flScale; // 0xcc | Schema_Builtin | Size: 0x4
			GlobalTypes::VectorWS m_vecAbsOrigin; // 0xd0 | Schema_Atomic | Size: 0xc
			GlobalTypes::QAngle m_angAbsRotation; // 0xdc | Schema_Atomic | Size: 0xc
			float32 m_flAbsScale; // 0xe8 | Schema_Builtin | Size: 0x4
			int16_t m_nParentAttachmentOrBone; // 0xec | Schema_Builtin | Size: 0x2
			bool m_bDebugAbsOriginChanges; // 0xee | Schema_Builtin | Size: 0x1
			bool m_bDormant; // 0xef | Schema_Builtin | Size: 0x1
			bool m_bForceParentToBeNetworked; // 0xf0 | Schema_Builtin | Size: 0x1
			S2_PAD(0x2);
			uint8_t m_nHierarchicalDepth; // 0xf3 | Schema_Builtin | Size: 0x1
			uint8_t m_nHierarchyType; // 0xf4 | Schema_Builtin | Size: 0x1
			uint8_t m_nDoNotSetAnimTimeInInvalidatePhysicsCount; // 0xf5 | Schema_Builtin | Size: 0x1
			S2_PAD(0x2);
			GlobalTypes::CUtlStringToken m_name; // 0xf8 | Schema_Atomic | Size: 0x4
			S2_PAD(0x3c);
			GlobalTypes::CUtlStringToken m_hierarchyAttachName; // 0x138 | Schema_Atomic | Size: 0x4
			float32 m_flZOffset; // 0x13c | Schema_Builtin | Size: 0x4
			float32 m_flClientLocalScale; // 0x140 | Schema_Builtin | Size: 0x4
			GlobalTypes::Vector m_vRenderOrigin; // 0x144 | Schema_Atomic | Size: 0xc
			S2_PAD(0x10); // End padding
		};
		static_assert(offsetof(CS2::server::CGameSceneNode, m_nodeToWorld) == 0x10, "m_nodeToWorld in CGameSceneNode should be at offset 0x10");
		static_assert(offsetof(CS2::server::CGameSceneNode, m_pOwner) == 0x30, "m_pOwner in CGameSceneNode should be at offset 0x30");
		static_assert(offsetof(CS2::server::CGameSceneNode, m_pParent) == 0x38, "m_pParent in CGameSceneNode should be at offset 0x38");
		static_assert(offsetof(CS2::server::CGameSceneNode, m_pChild) == 0x40, "m_pChild in CGameSceneNode should be at offset 0x40");
		static_assert(offsetof(CS2::server::CGameSceneNode, m_pNextSibling) == 0x48, "m_pNextSibling in CGameSceneNode should be at offset 0x48");
		static_assert(offsetof(CS2::server::CGameSceneNode, m_hParent) == 0x78, "m_hParent in CGameSceneNode should be at offset 0x78");
		static_assert(offsetof(CS2::server::CGameSceneNode, m_vecOrigin) == 0x88, "m_vecOrigin in CGameSceneNode should be at offset 0x88");
		static_assert(offsetof(CS2::server::CGameSceneNode, m_angRotation) == 0xC0, "m_angRotation in CGameSceneNode should be at offset 0xC0");
		static_assert(offsetof(CS2::server::CGameSceneNode, m_flScale) == 0xCC, "m_flScale in CGameSceneNode should be at offset 0xCC");
		static_assert(offsetof(CS2::server::CGameSceneNode, m_vecAbsOrigin) == 0xD0, "m_vecAbsOrigin in CGameSceneNode should be at offset 0xD0");
		static_assert(offsetof(CS2::server::CGameSceneNode, m_angAbsRotation) == 0xDC, "m_angAbsRotation in CGameSceneNode should be at offset 0xDC");
		static_assert(offsetof(CS2::server::CGameSceneNode, m_flAbsScale) == 0xE8, "m_flAbsScale in CGameSceneNode should be at offset 0xE8");
		static_assert(offsetof(CS2::server::CGameSceneNode, m_nParentAttachmentOrBone) == 0xEC, "m_nParentAttachmentOrBone in CGameSceneNode should be at offset 0xEC");
		static_assert(offsetof(CS2::server::CGameSceneNode, m_bDebugAbsOriginChanges) == 0xEE, "m_bDebugAbsOriginChanges in CGameSceneNode should be at offset 0xEE");
		static_assert(offsetof(CS2::server::CGameSceneNode, m_bDormant) == 0xEF, "m_bDormant in CGameSceneNode should be at offset 0xEF");
		static_assert(offsetof(CS2::server::CGameSceneNode, m_bForceParentToBeNetworked) == 0xF0, "m_bForceParentToBeNetworked in CGameSceneNode should be at offset 0xF0");
		static_assert(offsetof(CS2::server::CGameSceneNode, m_nHierarchicalDepth) == 0xF3, "m_nHierarchicalDepth in CGameSceneNode should be at offset 0xF3");
		static_assert(offsetof(CS2::server::CGameSceneNode, m_nHierarchyType) == 0xF4, "m_nHierarchyType in CGameSceneNode should be at offset 0xF4");
		static_assert(offsetof(CS2::server::CGameSceneNode, m_nDoNotSetAnimTimeInInvalidatePhysicsCount) == 0xF5, "m_nDoNotSetAnimTimeInInvalidatePhysicsCount in CGameSceneNode should be at offset 0xF5");
		static_assert(offsetof(CS2::server::CGameSceneNode, m_name) == 0xF8, "m_name in CGameSceneNode should be at offset 0xF8");
		static_assert(offsetof(CS2::server::CGameSceneNode, m_hierarchyAttachName) == 0x138, "m_hierarchyAttachName in CGameSceneNode should be at offset 0x138");
		static_assert(offsetof(CS2::server::CGameSceneNode, m_flZOffset) == 0x13C, "m_flZOffset in CGameSceneNode should be at offset 0x13C");
		static_assert(offsetof(CS2::server::CGameSceneNode, m_flClientLocalScale) == 0x140, "m_flClientLocalScale in CGameSceneNode should be at offset 0x140");
		static_assert(offsetof(CS2::server::CGameSceneNode, m_vRenderOrigin) == 0x144, "m_vRenderOrigin in CGameSceneNode should be at offset 0x144");
		static_assert(sizeof(CS2::server::CGameSceneNode) == 0x160, "CGameSceneNode size should be 0x160");
	}
}
