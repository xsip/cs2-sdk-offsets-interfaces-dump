// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>

#include <SDK/server/CHostageExpresserShim.hpp>
#include <SDK/entity2/CEntityIOOutput.hpp>
#include <SDK/server/EntitySpottedState_t.hpp>
#include <SDK/server/CountdownTimer.hpp>
#include <SDK/entity2/GameTime_t.hpp>



namespace CS2 {
	namespace server {
		class CHostage : public CS2::server::CHostageExpresserShim {
		public:
			S2_PAD(0x10);
			entity2::CEntityIOOutput m_OnHostageBeginGrab; // 0xbf0 | Schema_DeclaredClass | Size: 0x28
			entity2::CEntityIOOutput m_OnFirstPickedUp; // 0xc18 | Schema_DeclaredClass | Size: 0x28
			entity2::CEntityIOOutput m_OnDroppedNotRescued; // 0xc40 | Schema_DeclaredClass | Size: 0x28
			entity2::CEntityIOOutput m_OnRescued; // 0xc68 | Schema_DeclaredClass | Size: 0x28
			server::EntitySpottedState_t m_entitySpottedState; // 0xc90 | Schema_DeclaredClass | Size: 0x18
			int32_t m_nSpotRules; // 0xca8 | Schema_Builtin | Size: 0x4
			uint32_t m_uiHostageSpawnExclusionGroupMask; // 0xcac | Schema_Builtin | Size: 0x4
			uint32_t m_nHostageSpawnRandomFactor; // 0xcb0 | Schema_Builtin | Size: 0x4
			bool m_bRemove; // 0xcb4 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			GlobalTypes::Vector m_vel; // 0xcb8 | Schema_Atomic | Size: 0xc
			bool m_isRescued; // 0xcc4 | Schema_Builtin | Size: 0x1
			bool m_jumpedThisFrame; // 0xcc5 | Schema_Builtin | Size: 0x1
			S2_PAD(0x2);
			int32_t m_nHostageState; // 0xcc8 | Schema_Builtin | Size: 0x4
			// server::CHandle< server::CBaseEntity > m_leader; // 0xccc | Schema_Atomic | Size: 0x4
			char  m_leader[0x4]; // 0xccc | Schema_Atomic | Size: 0x4
			// server::CHandle< server::CCSPlayerPawnBase > m_lastLeader; // 0xcd0 | Schema_Atomic | Size: 0x4
			char  m_lastLeader[0x4]; // 0xcd0 | Schema_Atomic | Size: 0x4
			S2_PAD(0x4);
			server::CountdownTimer m_reuseTimer; // 0xcd8 | Schema_DeclaredClass | Size: 0x18
			bool m_hasBeenUsed; // 0xcf0 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			GlobalTypes::Vector m_accel; // 0xcf4 | Schema_Atomic | Size: 0xc
			bool m_isRunning; // 0xd00 | Schema_Builtin | Size: 0x1
			bool m_isCrouching; // 0xd01 | Schema_Builtin | Size: 0x1
			S2_PAD(0x6);
			server::CountdownTimer m_jumpTimer; // 0xd08 | Schema_DeclaredClass | Size: 0x18
			bool m_isWaitingForLeader; // 0xd20 | Schema_Builtin | Size: 0x1
			S2_PAD(0x200f);
			server::CountdownTimer m_repathTimer; // 0x2d30 | Schema_DeclaredClass | Size: 0x18
			server::CountdownTimer m_inhibitDoorTimer; // 0x2d48 | Schema_DeclaredClass | Size: 0x18
			S2_PAD(0x78);
			server::CountdownTimer m_inhibitObstacleAvoidanceTimer; // 0x2dd8 | Schema_DeclaredClass | Size: 0x18
			S2_PAD(0x8);
			server::CountdownTimer m_wiggleTimer; // 0x2df8 | Schema_DeclaredClass | Size: 0x18
			S2_PAD(0x4);
			bool m_isAdjusted; // 0x2e14 | Schema_Builtin | Size: 0x1
			bool m_bHandsHaveBeenCut; // 0x2e15 | Schema_Builtin | Size: 0x1
			S2_PAD(0x2);
			// server::CHandle< server::CCSPlayerPawn > m_hHostageGrabber; // 0x2e18 | Schema_Atomic | Size: 0x4
			char  m_hHostageGrabber[0x4]; // 0x2e18 | Schema_Atomic | Size: 0x4
			entity2::GameTime_t m_fLastGrabTime; // 0x2e1c | Schema_DeclaredClass | Size: 0x4
			GlobalTypes::Vector m_vecPositionWhenStartedDroppingToGround; // 0x2e20 | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vecGrabbedPos; // 0x2e2c | Schema_Atomic | Size: 0xc
			entity2::GameTime_t m_flRescueStartTime; // 0x2e38 | Schema_DeclaredClass | Size: 0x4
			entity2::GameTime_t m_flGrabSuccessTime; // 0x2e3c | Schema_DeclaredClass | Size: 0x4
			entity2::GameTime_t m_flDropStartTime; // 0x2e40 | Schema_DeclaredClass | Size: 0x4
			int32_t m_nApproachRewardPayouts; // 0x2e44 | Schema_Builtin | Size: 0x4
			int32_t m_nPickupEventCount; // 0x2e48 | Schema_Builtin | Size: 0x4
			GlobalTypes::Vector m_vecSpawnGroundPos; // 0x2e4c | Schema_Atomic | Size: 0xc
			S2_PAD(0x2c);
			GlobalTypes::Vector m_vecHostageResetPosition; // 0x2e84 | Schema_Atomic | Size: 0xc
		};
		static_assert(offsetof(CS2::server::CHostage, m_OnHostageBeginGrab) == 0xBF0, "m_OnHostageBeginGrab in CHostage should be at offset 0xBF0");
		static_assert(offsetof(CS2::server::CHostage, m_OnFirstPickedUp) == 0xC18, "m_OnFirstPickedUp in CHostage should be at offset 0xC18");
		static_assert(offsetof(CS2::server::CHostage, m_OnDroppedNotRescued) == 0xC40, "m_OnDroppedNotRescued in CHostage should be at offset 0xC40");
		static_assert(offsetof(CS2::server::CHostage, m_OnRescued) == 0xC68, "m_OnRescued in CHostage should be at offset 0xC68");
		static_assert(offsetof(CS2::server::CHostage, m_entitySpottedState) == 0xC90, "m_entitySpottedState in CHostage should be at offset 0xC90");
		static_assert(offsetof(CS2::server::CHostage, m_nSpotRules) == 0xCA8, "m_nSpotRules in CHostage should be at offset 0xCA8");
		static_assert(offsetof(CS2::server::CHostage, m_uiHostageSpawnExclusionGroupMask) == 0xCAC, "m_uiHostageSpawnExclusionGroupMask in CHostage should be at offset 0xCAC");
		static_assert(offsetof(CS2::server::CHostage, m_nHostageSpawnRandomFactor) == 0xCB0, "m_nHostageSpawnRandomFactor in CHostage should be at offset 0xCB0");
		static_assert(offsetof(CS2::server::CHostage, m_bRemove) == 0xCB4, "m_bRemove in CHostage should be at offset 0xCB4");
		static_assert(offsetof(CS2::server::CHostage, m_vel) == 0xCB8, "m_vel in CHostage should be at offset 0xCB8");
		static_assert(offsetof(CS2::server::CHostage, m_isRescued) == 0xCC4, "m_isRescued in CHostage should be at offset 0xCC4");
		static_assert(offsetof(CS2::server::CHostage, m_jumpedThisFrame) == 0xCC5, "m_jumpedThisFrame in CHostage should be at offset 0xCC5");
		static_assert(offsetof(CS2::server::CHostage, m_nHostageState) == 0xCC8, "m_nHostageState in CHostage should be at offset 0xCC8");
		static_assert(offsetof(CS2::server::CHostage, m_leader) == 0xCCC, "m_leader in CHostage should be at offset 0xCCC");
		static_assert(offsetof(CS2::server::CHostage, m_lastLeader) == 0xCD0, "m_lastLeader in CHostage should be at offset 0xCD0");
		static_assert(offsetof(CS2::server::CHostage, m_reuseTimer) == 0xCD8, "m_reuseTimer in CHostage should be at offset 0xCD8");
		static_assert(offsetof(CS2::server::CHostage, m_hasBeenUsed) == 0xCF0, "m_hasBeenUsed in CHostage should be at offset 0xCF0");
		static_assert(offsetof(CS2::server::CHostage, m_accel) == 0xCF4, "m_accel in CHostage should be at offset 0xCF4");
		static_assert(offsetof(CS2::server::CHostage, m_isRunning) == 0xD00, "m_isRunning in CHostage should be at offset 0xD00");
		static_assert(offsetof(CS2::server::CHostage, m_isCrouching) == 0xD01, "m_isCrouching in CHostage should be at offset 0xD01");
		static_assert(offsetof(CS2::server::CHostage, m_jumpTimer) == 0xD08, "m_jumpTimer in CHostage should be at offset 0xD08");
		static_assert(offsetof(CS2::server::CHostage, m_isWaitingForLeader) == 0xD20, "m_isWaitingForLeader in CHostage should be at offset 0xD20");
		static_assert(offsetof(CS2::server::CHostage, m_repathTimer) == 0x2D30, "m_repathTimer in CHostage should be at offset 0x2D30");
		static_assert(offsetof(CS2::server::CHostage, m_inhibitDoorTimer) == 0x2D48, "m_inhibitDoorTimer in CHostage should be at offset 0x2D48");
		static_assert(offsetof(CS2::server::CHostage, m_inhibitObstacleAvoidanceTimer) == 0x2DD8, "m_inhibitObstacleAvoidanceTimer in CHostage should be at offset 0x2DD8");
		static_assert(offsetof(CS2::server::CHostage, m_wiggleTimer) == 0x2DF8, "m_wiggleTimer in CHostage should be at offset 0x2DF8");
		static_assert(offsetof(CS2::server::CHostage, m_isAdjusted) == 0x2E14, "m_isAdjusted in CHostage should be at offset 0x2E14");
		static_assert(offsetof(CS2::server::CHostage, m_bHandsHaveBeenCut) == 0x2E15, "m_bHandsHaveBeenCut in CHostage should be at offset 0x2E15");
		static_assert(offsetof(CS2::server::CHostage, m_hHostageGrabber) == 0x2E18, "m_hHostageGrabber in CHostage should be at offset 0x2E18");
		static_assert(offsetof(CS2::server::CHostage, m_fLastGrabTime) == 0x2E1C, "m_fLastGrabTime in CHostage should be at offset 0x2E1C");
		static_assert(offsetof(CS2::server::CHostage, m_vecPositionWhenStartedDroppingToGround) == 0x2E20, "m_vecPositionWhenStartedDroppingToGround in CHostage should be at offset 0x2E20");
		static_assert(offsetof(CS2::server::CHostage, m_vecGrabbedPos) == 0x2E2C, "m_vecGrabbedPos in CHostage should be at offset 0x2E2C");
		static_assert(offsetof(CS2::server::CHostage, m_flRescueStartTime) == 0x2E38, "m_flRescueStartTime in CHostage should be at offset 0x2E38");
		static_assert(offsetof(CS2::server::CHostage, m_flGrabSuccessTime) == 0x2E3C, "m_flGrabSuccessTime in CHostage should be at offset 0x2E3C");
		static_assert(offsetof(CS2::server::CHostage, m_flDropStartTime) == 0x2E40, "m_flDropStartTime in CHostage should be at offset 0x2E40");
		static_assert(offsetof(CS2::server::CHostage, m_nApproachRewardPayouts) == 0x2E44, "m_nApproachRewardPayouts in CHostage should be at offset 0x2E44");
		static_assert(offsetof(CS2::server::CHostage, m_nPickupEventCount) == 0x2E48, "m_nPickupEventCount in CHostage should be at offset 0x2E48");
		static_assert(offsetof(CS2::server::CHostage, m_vecSpawnGroundPos) == 0x2E4C, "m_vecSpawnGroundPos in CHostage should be at offset 0x2E4C");
		static_assert(offsetof(CS2::server::CHostage, m_vecHostageResetPosition) == 0x2E84, "m_vecHostageResetPosition in CHostage should be at offset 0x2E84");
		static_assert(sizeof(CS2::server::CHostage) == 0x2E90, "CHostage size should be 0x2E90");
	}
}
