// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/server/CMarkupVolumeTagged.hpp>





using namespace GlobalTypes;
namespace CS2 {
	namespace server {
		class CMarkupVolumeWithRef : public CS2::server::CMarkupVolumeTagged {
		public:
			S2_PAD(0x8);
			bool m_bUseRef; // 0x820 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			GlobalTypes::Vector m_vRefPosEntitySpace; // 0x824 | Schema_Atomic | Size: 0xc
			GlobalTypes::VectorWS m_vRefPosWorldSpace; // 0x830 | Schema_Atomic | Size: 0xc
			float32 m_flRefDot; // 0x83c | Schema_Builtin | Size: 0x4
		};
		static_assert(offsetof(CS2::server::CMarkupVolumeWithRef, m_bUseRef) == 0x820, "m_bUseRef in CMarkupVolumeWithRef should be at offset 0x820");
		static_assert(offsetof(CS2::server::CMarkupVolumeWithRef, m_vRefPosEntitySpace) == 0x824, "m_vRefPosEntitySpace in CMarkupVolumeWithRef should be at offset 0x824");
		static_assert(offsetof(CS2::server::CMarkupVolumeWithRef, m_vRefPosWorldSpace) == 0x830, "m_vRefPosWorldSpace in CMarkupVolumeWithRef should be at offset 0x830");
		static_assert(offsetof(CS2::server::CMarkupVolumeWithRef, m_flRefDot) == 0x83C, "m_flRefDot in CMarkupVolumeWithRef should be at offset 0x83C");
		static_assert(sizeof(CS2::server::CMarkupVolumeWithRef) == 0x840, "CMarkupVolumeWithRef size should be 0x840");
	}
}
