// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/server/CLogicalEntity.hpp>



namespace CS2 {
	namespace server {
		class CBaseEntity;
	}
}


using namespace GlobalTypes;
namespace CS2 {
	namespace server {
		class CLogicMeasureMovement : public CS2::server::CLogicalEntity {
		public:
			GlobalTypes::CUtlSymbolLarge m_strMeasureTarget; // 0x4f0 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlSymbolLarge m_strMeasureReference; // 0x4f8 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlSymbolLarge m_strTargetReference; // 0x500 | Schema_Atomic | Size: 0x8
			GlobalTypes::CHandle<server::CBaseEntity> m_hMeasureTarget; // 0x508 | Schema_Atomic | Size: 0x4
			// char  m_hMeasureTarget[0x4]; // 0x508 | Schema_Atomic | Size: 0x4
			GlobalTypes::CHandle<server::CBaseEntity> m_hMeasureReference; // 0x50c | Schema_Atomic | Size: 0x4
			// char  m_hMeasureReference[0x4]; // 0x50c | Schema_Atomic | Size: 0x4
			GlobalTypes::CHandle<server::CBaseEntity> m_hTarget; // 0x510 | Schema_Atomic | Size: 0x4
			// char  m_hTarget[0x4]; // 0x510 | Schema_Atomic | Size: 0x4
			GlobalTypes::CHandle<server::CBaseEntity> m_hTargetReference; // 0x514 | Schema_Atomic | Size: 0x4
			// char  m_hTargetReference[0x4]; // 0x514 | Schema_Atomic | Size: 0x4
			float32 m_flScale; // 0x518 | Schema_Builtin | Size: 0x4
			int32_t m_nMeasureType; // 0x51c | Schema_Builtin | Size: 0x4
		};
		static_assert(offsetof(CS2::server::CLogicMeasureMovement, m_strMeasureTarget) == 0x4F0, "m_strMeasureTarget in CLogicMeasureMovement should be at offset 0x4F0");
		static_assert(offsetof(CS2::server::CLogicMeasureMovement, m_strMeasureReference) == 0x4F8, "m_strMeasureReference in CLogicMeasureMovement should be at offset 0x4F8");
		static_assert(offsetof(CS2::server::CLogicMeasureMovement, m_strTargetReference) == 0x500, "m_strTargetReference in CLogicMeasureMovement should be at offset 0x500");
		static_assert(offsetof(CS2::server::CLogicMeasureMovement, m_hMeasureTarget) == 0x508, "m_hMeasureTarget in CLogicMeasureMovement should be at offset 0x508");
		static_assert(offsetof(CS2::server::CLogicMeasureMovement, m_hMeasureReference) == 0x50C, "m_hMeasureReference in CLogicMeasureMovement should be at offset 0x50C");
		static_assert(offsetof(CS2::server::CLogicMeasureMovement, m_hTarget) == 0x510, "m_hTarget in CLogicMeasureMovement should be at offset 0x510");
		static_assert(offsetof(CS2::server::CLogicMeasureMovement, m_hTargetReference) == 0x514, "m_hTargetReference in CLogicMeasureMovement should be at offset 0x514");
		static_assert(offsetof(CS2::server::CLogicMeasureMovement, m_flScale) == 0x518, "m_flScale in CLogicMeasureMovement should be at offset 0x518");
		static_assert(offsetof(CS2::server::CLogicMeasureMovement, m_nMeasureType) == 0x51C, "m_nMeasureType in CLogicMeasureMovement should be at offset 0x51C");
		static_assert(sizeof(CS2::server::CLogicMeasureMovement) == 0x520, "CLogicMeasureMovement size should be 0x520");
	}
}
