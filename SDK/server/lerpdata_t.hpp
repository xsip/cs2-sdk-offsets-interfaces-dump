// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/client/MoveType_t.hpp>
#include <SDK/entity2/GameTime_t.hpp>
#include <SDK/client/ParticleIndex_t.hpp>



namespace CS2 {
	namespace server {
		class CBaseEntity;
	}
}


using namespace GlobalTypes;
namespace CS2 {
	namespace server {
		class lerpdata_t  {
		public:
			GlobalTypes::CHandle<server::CBaseEntity> m_hEnt; // 0x0 | Schema_Atomic | Size: 0x4
			// char  m_hEnt[0x4]; // 0x0 | Schema_Atomic | Size: 0x4
			client::MoveType_t m_MoveType; // 0x4 | Schema_DeclaredEnum | Size: 0x1
			S2_PAD(0x3);
			entity2::GameTime_t m_flStartTime; // 0x8 | Schema_DeclaredClass | Size: 0x4
			GlobalTypes::Vector m_vecStartOrigin; // 0xc | Schema_Atomic | Size: 0xc
			S2_PAD(0x8);
			GlobalTypes::Quaternion m_qStartRot; // 0x20 | Schema_Atomic | Size: 0x10
			client::ParticleIndex_t m_nFXIndex; // 0x30 | Schema_DeclaredClass | Size: 0x4
			S2_PAD(0x1c); // End padding
		};
		static_assert(offsetof(CS2::server::lerpdata_t, m_hEnt) == 0x0, "m_hEnt in lerpdata_t should be at offset 0x0");
		static_assert(offsetof(CS2::server::lerpdata_t, m_MoveType) == 0x4, "m_MoveType in lerpdata_t should be at offset 0x4");
		static_assert(offsetof(CS2::server::lerpdata_t, m_flStartTime) == 0x8, "m_flStartTime in lerpdata_t should be at offset 0x8");
		static_assert(offsetof(CS2::server::lerpdata_t, m_vecStartOrigin) == 0xC, "m_vecStartOrigin in lerpdata_t should be at offset 0xC");
		static_assert(offsetof(CS2::server::lerpdata_t, m_qStartRot) == 0x20, "m_qStartRot in lerpdata_t should be at offset 0x20");
		static_assert(offsetof(CS2::server::lerpdata_t, m_nFXIndex) == 0x30, "m_nFXIndex in lerpdata_t should be at offset 0x30");
		static_assert(sizeof(CS2::server::lerpdata_t) == 0x50, "lerpdata_t size should be 0x50");
	}
}
