// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/server/RelativeLocationType_t.hpp>





using namespace GlobalTypes;
namespace CS2 {
	namespace server {
		class CRelativeLocation  {
		public:
			S2_PAD(0x18);
			server::RelativeLocationType_t m_Type; // 0x18 | Schema_DeclaredEnum | Size: 0x1
			S2_PAD(0x3);
			GlobalTypes::Vector m_vRelativeOffset; // 0x1c | Schema_Atomic | Size: 0xc
			GlobalTypes::VectorWS m_vWorldSpacePos; // 0x28 | Schema_Atomic | Size: 0xc
			// server::CHandle< server::CBaseEntity > m_hEntity; // 0x34 | Schema_Atomic | Size: 0x4
			char  m_hEntity[0x4]; // 0x34 | Schema_Atomic | Size: 0x4
		};
		static_assert(offsetof(CS2::server::CRelativeLocation, m_Type) == 0x18, "m_Type in CRelativeLocation should be at offset 0x18");
		static_assert(offsetof(CS2::server::CRelativeLocation, m_vRelativeOffset) == 0x1C, "m_vRelativeOffset in CRelativeLocation should be at offset 0x1C");
		static_assert(offsetof(CS2::server::CRelativeLocation, m_vWorldSpacePos) == 0x28, "m_vWorldSpacePos in CRelativeLocation should be at offset 0x28");
		static_assert(offsetof(CS2::server::CRelativeLocation, m_hEntity) == 0x34, "m_hEntity in CRelativeLocation should be at offset 0x34");
		static_assert(sizeof(CS2::server::CRelativeLocation) == 0x38, "CRelativeLocation size should be 0x38");
	}
}
