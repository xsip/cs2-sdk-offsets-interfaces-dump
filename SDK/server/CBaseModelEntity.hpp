// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>

#include <SDK/server/CBaseEntity.hpp>
#include <SDK/server/CHitboxComponent.hpp>
#include <SDK/client/HitGroup_t.hpp>
#include <SDK/entity2/GameTime_t.hpp>
#include <SDK/entity2/CEntityIOOutput.hpp>
#include <SDK/client/RenderMode_t.hpp>
#include <SDK/client/RenderFx_t.hpp>
#include <SDK/server/CCollisionProperty.hpp>
#include <SDK/server/CGlowProperty.hpp>
#include <SDK/client/DecalMode_t.hpp>
#include <SDK/client/CNetworkViewOffsetVector.hpp>



namespace CS2 {
	namespace server {
		class CRenderComponent;
		class CDestructiblePartsComponent;
	}
}
namespace CS2 {
	namespace server {
		class CBaseModelEntity : public CS2::server::CBaseEntity {
		public:
			server::CRenderComponent* m_CRenderComponent; // 0x4f0 | Schema_Ptr | Size: 0x8
			server::CHitboxComponent m_CHitboxComponent; // 0x4f8 | Schema_DeclaredClass | Size: 0x28
			client::HitGroup_t m_nDestructiblePartInitialStateDestructed0; // 0x520 | Schema_DeclaredEnum | Size: 0x4
			client::HitGroup_t m_nDestructiblePartInitialStateDestructed1; // 0x524 | Schema_DeclaredEnum | Size: 0x4
			client::HitGroup_t m_nDestructiblePartInitialStateDestructed2; // 0x528 | Schema_DeclaredEnum | Size: 0x4
			client::HitGroup_t m_nDestructiblePartInitialStateDestructed3; // 0x52c | Schema_DeclaredEnum | Size: 0x4
			client::HitGroup_t m_nDestructiblePartInitialStateDestructed4; // 0x530 | Schema_DeclaredEnum | Size: 0x4
			int32_t m_nDestructiblePartInitialStateDestructed0_PartIndex; // 0x534 | Schema_Builtin | Size: 0x4
			int32_t m_nDestructiblePartInitialStateDestructed1_PartIndex; // 0x538 | Schema_Builtin | Size: 0x4
			int32_t m_nDestructiblePartInitialStateDestructed2_PartIndex; // 0x53c | Schema_Builtin | Size: 0x4
			int32_t m_nDestructiblePartInitialStateDestructed3_PartIndex; // 0x540 | Schema_Builtin | Size: 0x4
			int32_t m_nDestructiblePartInitialStateDestructed4_PartIndex; // 0x544 | Schema_Builtin | Size: 0x4
			server::CDestructiblePartsComponent* m_pDestructiblePartsSystemComponent; // 0x548 | Schema_Ptr | Size: 0x8
			client::HitGroup_t m_LastHitGroup; // 0x550 | Schema_DeclaredEnum | Size: 0x4
			S2_PAD(0x4);
			GlobalTypes::CGlobalSymbol m_sLastDamageSourceName; // 0x558 | Schema_Atomic | Size: 0x8
			GlobalTypes::Vector m_vLastDamagePosition; // 0x560 | Schema_Atomic | Size: 0xc
			entity2::GameTime_t m_flDissolveStartTime; // 0x56c | Schema_DeclaredClass | Size: 0x4
			entity2::CEntityIOOutput m_OnIgnite; // 0x570 | Schema_DeclaredClass | Size: 0x28
			client::RenderMode_t m_nRenderMode; // 0x598 | Schema_DeclaredEnum | Size: 0x1
			client::RenderFx_t m_nRenderFX; // 0x599 | Schema_DeclaredEnum | Size: 0x1
			bool m_bAllowFadeInView; // 0x59a | Schema_Builtin | Size: 0x1
			S2_PAD(0x1d);
			GlobalTypes::Color m_clrRender; // 0x5b8 | Schema_Atomic | Size: 0x4
			S2_PAD(0x4);
			// server::CUtlVectorEmbeddedNetworkVar< server::EntityRenderAttribute_t > m_vecRenderAttributes; // 0x5c0 | Schema_Atomic | Size: 0x68
			char  m_vecRenderAttributes[0x68]; // 0x5c0 | Schema_Atomic | Size: 0x68
			bool m_bRenderToCubemaps; // 0x628 | Schema_Builtin | Size: 0x1
			bool m_bNoInterpolate; // 0x629 | Schema_Builtin | Size: 0x1
			S2_PAD(0x6);
			server::CCollisionProperty m_Collision; // 0x630 | Schema_DeclaredClass | Size: 0xb0
			server::CGlowProperty m_Glow; // 0x6e0 | Schema_DeclaredClass | Size: 0x58
			float32 m_flGlowBackfaceMult; // 0x738 | Schema_Builtin | Size: 0x4
			float32 m_fadeMinDist; // 0x73c | Schema_Builtin | Size: 0x4
			float32 m_fadeMaxDist; // 0x740 | Schema_Builtin | Size: 0x4
			float32 m_flFadeScale; // 0x744 | Schema_Builtin | Size: 0x4
			float32 m_flShadowStrength; // 0x748 | Schema_Builtin | Size: 0x4
			uint8_t m_nObjectCulling; // 0x74c | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			int32_t m_nAddDecal; // 0x750 | Schema_Builtin | Size: 0x4
			GlobalTypes::Vector m_vDecalPosition; // 0x754 | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vDecalForwardAxis; // 0x760 | Schema_Atomic | Size: 0xc
			float32 m_flDecalHealBloodRate; // 0x76c | Schema_Builtin | Size: 0x4
			float32 m_flDecalHealHeightRate; // 0x770 | Schema_Builtin | Size: 0x4
			client::DecalMode_t m_nDecalMode; // 0x774 | Schema_DeclaredEnum | Size: 0x1
			client::DecalMode_t m_nRequiredDecalMode; // 0x775 | Schema_DeclaredEnum | Size: 0x1
			S2_PAD(0x2);
			// server::CNetworkUtlVectorBase< server.dll::CHandle< CBaseModelEntity > > m_ConfigEntitiesToPropagateMaterialDecalsTo; // 0x778 | Schema_Atomic | Size: 0x18
			char  m_ConfigEntitiesToPropagateMaterialDecalsTo[0x18]; // 0x778 | Schema_Atomic | Size: 0x18
			S2_PAD(0x28);
			client::CNetworkViewOffsetVector m_vecViewOffset; // 0x7b8 | Schema_DeclaredClass | Size: 0x28
			S2_PAD(0x8);
			uint32_t m_bvDisabledHitGroups[1]; // 0x7e8 | Schema_FixedArray | Size: 0x4
			S2_PAD(0x4); // End padding
		};
		static_assert(offsetof(CS2::server::CBaseModelEntity, m_CRenderComponent) == 0x4F0, "m_CRenderComponent in CBaseModelEntity should be at offset 0x4F0");
		static_assert(offsetof(CS2::server::CBaseModelEntity, m_CHitboxComponent) == 0x4F8, "m_CHitboxComponent in CBaseModelEntity should be at offset 0x4F8");
		static_assert(offsetof(CS2::server::CBaseModelEntity, m_nDestructiblePartInitialStateDestructed0) == 0x520, "m_nDestructiblePartInitialStateDestructed0 in CBaseModelEntity should be at offset 0x520");
		static_assert(offsetof(CS2::server::CBaseModelEntity, m_nDestructiblePartInitialStateDestructed1) == 0x524, "m_nDestructiblePartInitialStateDestructed1 in CBaseModelEntity should be at offset 0x524");
		static_assert(offsetof(CS2::server::CBaseModelEntity, m_nDestructiblePartInitialStateDestructed2) == 0x528, "m_nDestructiblePartInitialStateDestructed2 in CBaseModelEntity should be at offset 0x528");
		static_assert(offsetof(CS2::server::CBaseModelEntity, m_nDestructiblePartInitialStateDestructed3) == 0x52C, "m_nDestructiblePartInitialStateDestructed3 in CBaseModelEntity should be at offset 0x52C");
		static_assert(offsetof(CS2::server::CBaseModelEntity, m_nDestructiblePartInitialStateDestructed4) == 0x530, "m_nDestructiblePartInitialStateDestructed4 in CBaseModelEntity should be at offset 0x530");
		static_assert(offsetof(CS2::server::CBaseModelEntity, m_nDestructiblePartInitialStateDestructed0_PartIndex) == 0x534, "m_nDestructiblePartInitialStateDestructed0_PartIndex in CBaseModelEntity should be at offset 0x534");
		static_assert(offsetof(CS2::server::CBaseModelEntity, m_nDestructiblePartInitialStateDestructed1_PartIndex) == 0x538, "m_nDestructiblePartInitialStateDestructed1_PartIndex in CBaseModelEntity should be at offset 0x538");
		static_assert(offsetof(CS2::server::CBaseModelEntity, m_nDestructiblePartInitialStateDestructed2_PartIndex) == 0x53C, "m_nDestructiblePartInitialStateDestructed2_PartIndex in CBaseModelEntity should be at offset 0x53C");
		static_assert(offsetof(CS2::server::CBaseModelEntity, m_nDestructiblePartInitialStateDestructed3_PartIndex) == 0x540, "m_nDestructiblePartInitialStateDestructed3_PartIndex in CBaseModelEntity should be at offset 0x540");
		static_assert(offsetof(CS2::server::CBaseModelEntity, m_nDestructiblePartInitialStateDestructed4_PartIndex) == 0x544, "m_nDestructiblePartInitialStateDestructed4_PartIndex in CBaseModelEntity should be at offset 0x544");
		static_assert(offsetof(CS2::server::CBaseModelEntity, m_pDestructiblePartsSystemComponent) == 0x548, "m_pDestructiblePartsSystemComponent in CBaseModelEntity should be at offset 0x548");
		static_assert(offsetof(CS2::server::CBaseModelEntity, m_LastHitGroup) == 0x550, "m_LastHitGroup in CBaseModelEntity should be at offset 0x550");
		static_assert(offsetof(CS2::server::CBaseModelEntity, m_sLastDamageSourceName) == 0x558, "m_sLastDamageSourceName in CBaseModelEntity should be at offset 0x558");
		static_assert(offsetof(CS2::server::CBaseModelEntity, m_vLastDamagePosition) == 0x560, "m_vLastDamagePosition in CBaseModelEntity should be at offset 0x560");
		static_assert(offsetof(CS2::server::CBaseModelEntity, m_flDissolveStartTime) == 0x56C, "m_flDissolveStartTime in CBaseModelEntity should be at offset 0x56C");
		static_assert(offsetof(CS2::server::CBaseModelEntity, m_OnIgnite) == 0x570, "m_OnIgnite in CBaseModelEntity should be at offset 0x570");
		static_assert(offsetof(CS2::server::CBaseModelEntity, m_nRenderMode) == 0x598, "m_nRenderMode in CBaseModelEntity should be at offset 0x598");
		static_assert(offsetof(CS2::server::CBaseModelEntity, m_nRenderFX) == 0x599, "m_nRenderFX in CBaseModelEntity should be at offset 0x599");
		static_assert(offsetof(CS2::server::CBaseModelEntity, m_bAllowFadeInView) == 0x59A, "m_bAllowFadeInView in CBaseModelEntity should be at offset 0x59A");
		static_assert(offsetof(CS2::server::CBaseModelEntity, m_clrRender) == 0x5B8, "m_clrRender in CBaseModelEntity should be at offset 0x5B8");
		static_assert(offsetof(CS2::server::CBaseModelEntity, m_vecRenderAttributes) == 0x5C0, "m_vecRenderAttributes in CBaseModelEntity should be at offset 0x5C0");
		static_assert(offsetof(CS2::server::CBaseModelEntity, m_bRenderToCubemaps) == 0x628, "m_bRenderToCubemaps in CBaseModelEntity should be at offset 0x628");
		static_assert(offsetof(CS2::server::CBaseModelEntity, m_bNoInterpolate) == 0x629, "m_bNoInterpolate in CBaseModelEntity should be at offset 0x629");
		static_assert(offsetof(CS2::server::CBaseModelEntity, m_Collision) == 0x630, "m_Collision in CBaseModelEntity should be at offset 0x630");
		static_assert(offsetof(CS2::server::CBaseModelEntity, m_Glow) == 0x6E0, "m_Glow in CBaseModelEntity should be at offset 0x6E0");
		static_assert(offsetof(CS2::server::CBaseModelEntity, m_flGlowBackfaceMult) == 0x738, "m_flGlowBackfaceMult in CBaseModelEntity should be at offset 0x738");
		static_assert(offsetof(CS2::server::CBaseModelEntity, m_fadeMinDist) == 0x73C, "m_fadeMinDist in CBaseModelEntity should be at offset 0x73C");
		static_assert(offsetof(CS2::server::CBaseModelEntity, m_fadeMaxDist) == 0x740, "m_fadeMaxDist in CBaseModelEntity should be at offset 0x740");
		static_assert(offsetof(CS2::server::CBaseModelEntity, m_flFadeScale) == 0x744, "m_flFadeScale in CBaseModelEntity should be at offset 0x744");
		static_assert(offsetof(CS2::server::CBaseModelEntity, m_flShadowStrength) == 0x748, "m_flShadowStrength in CBaseModelEntity should be at offset 0x748");
		static_assert(offsetof(CS2::server::CBaseModelEntity, m_nObjectCulling) == 0x74C, "m_nObjectCulling in CBaseModelEntity should be at offset 0x74C");
		static_assert(offsetof(CS2::server::CBaseModelEntity, m_nAddDecal) == 0x750, "m_nAddDecal in CBaseModelEntity should be at offset 0x750");
		static_assert(offsetof(CS2::server::CBaseModelEntity, m_vDecalPosition) == 0x754, "m_vDecalPosition in CBaseModelEntity should be at offset 0x754");
		static_assert(offsetof(CS2::server::CBaseModelEntity, m_vDecalForwardAxis) == 0x760, "m_vDecalForwardAxis in CBaseModelEntity should be at offset 0x760");
		static_assert(offsetof(CS2::server::CBaseModelEntity, m_flDecalHealBloodRate) == 0x76C, "m_flDecalHealBloodRate in CBaseModelEntity should be at offset 0x76C");
		static_assert(offsetof(CS2::server::CBaseModelEntity, m_flDecalHealHeightRate) == 0x770, "m_flDecalHealHeightRate in CBaseModelEntity should be at offset 0x770");
		static_assert(offsetof(CS2::server::CBaseModelEntity, m_nDecalMode) == 0x774, "m_nDecalMode in CBaseModelEntity should be at offset 0x774");
		static_assert(offsetof(CS2::server::CBaseModelEntity, m_nRequiredDecalMode) == 0x775, "m_nRequiredDecalMode in CBaseModelEntity should be at offset 0x775");
		static_assert(offsetof(CS2::server::CBaseModelEntity, m_ConfigEntitiesToPropagateMaterialDecalsTo) == 0x778, "m_ConfigEntitiesToPropagateMaterialDecalsTo in CBaseModelEntity should be at offset 0x778");
		static_assert(offsetof(CS2::server::CBaseModelEntity, m_vecViewOffset) == 0x7B8, "m_vecViewOffset in CBaseModelEntity should be at offset 0x7B8");
		static_assert(offsetof(CS2::server::CBaseModelEntity, m_bvDisabledHitGroups) == 0x7E8, "m_bvDisabledHitGroups in CBaseModelEntity should be at offset 0x7E8");
		static_assert(sizeof(CS2::server::CBaseModelEntity) == 0x7F0, "CBaseModelEntity size should be 0x7F0");
	}
}
