// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/client/ShardSolid_t.hpp>



namespace CS2 {
	namespace server {
		class shard_model_desc_t  {
		public:
			S2_PAD(0x8);
			int32_t m_nModelID; // 0x8 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4);
			// GlobalTypes::CStrongHandle< resourcesystem::InfoForResourceTypeIMaterial2 > m_hMaterialBase; // 0x10 | Schema_Atomic | Size: 0x8
			char  m_hMaterialBase[0x8]; // 0x10 | Schema_Atomic | Size: 0x8
			// GlobalTypes::CStrongHandle< resourcesystem::InfoForResourceTypeIMaterial2 > m_hMaterialDamageOverlay; // 0x18 | Schema_Atomic | Size: 0x8
			char  m_hMaterialDamageOverlay[0x8]; // 0x18 | Schema_Atomic | Size: 0x8
			client::ShardSolid_t m_solid; // 0x20 | Schema_DeclaredEnum | Size: 0x1
			S2_PAD(0x3);
			GlobalTypes::Vector2D m_vecPanelSize; // 0x24 | Schema_Atomic | Size: 0x8
			GlobalTypes::Vector2D m_vecStressPositionA; // 0x2c | Schema_Atomic | Size: 0x8
			GlobalTypes::Vector2D m_vecStressPositionB; // 0x34 | Schema_Atomic | Size: 0x8
			S2_PAD(0x4);
			// GlobalTypes::CNetworkUtlVectorBase< GlobalTypes::Vector2D > m_vecPanelVertices; // 0x40 | Schema_Atomic | Size: 0x18
			char  m_vecPanelVertices[0x18]; // 0x40 | Schema_Atomic | Size: 0x18
			// GlobalTypes::CNetworkUtlVectorBase< GlobalTypes::Vector4D > m_vInitialPanelVertices; // 0x58 | Schema_Atomic | Size: 0x18
			char  m_vInitialPanelVertices[0x18]; // 0x58 | Schema_Atomic | Size: 0x18
			float32 m_flGlassHalfThickness; // 0x70 | Schema_Builtin | Size: 0x4
			bool m_bHasParent; // 0x74 | Schema_Builtin | Size: 0x1
			bool m_bParentFrozen; // 0x75 | Schema_Builtin | Size: 0x1
			S2_PAD(0x2);
			GlobalTypes::CUtlStringToken m_SurfacePropStringToken; // 0x78 | Schema_Atomic | Size: 0x4
			S2_PAD(0x4); // End padding
		};
		static_assert(offsetof(CS2::server::shard_model_desc_t, m_nModelID) == 0x8, "m_nModelID in shard_model_desc_t should be at offset 0x8");
		static_assert(offsetof(CS2::server::shard_model_desc_t, m_hMaterialBase) == 0x10, "m_hMaterialBase in shard_model_desc_t should be at offset 0x10");
		static_assert(offsetof(CS2::server::shard_model_desc_t, m_hMaterialDamageOverlay) == 0x18, "m_hMaterialDamageOverlay in shard_model_desc_t should be at offset 0x18");
		static_assert(offsetof(CS2::server::shard_model_desc_t, m_solid) == 0x20, "m_solid in shard_model_desc_t should be at offset 0x20");
		static_assert(offsetof(CS2::server::shard_model_desc_t, m_vecPanelSize) == 0x24, "m_vecPanelSize in shard_model_desc_t should be at offset 0x24");
		static_assert(offsetof(CS2::server::shard_model_desc_t, m_vecStressPositionA) == 0x2C, "m_vecStressPositionA in shard_model_desc_t should be at offset 0x2C");
		static_assert(offsetof(CS2::server::shard_model_desc_t, m_vecStressPositionB) == 0x34, "m_vecStressPositionB in shard_model_desc_t should be at offset 0x34");
		static_assert(offsetof(CS2::server::shard_model_desc_t, m_vecPanelVertices) == 0x40, "m_vecPanelVertices in shard_model_desc_t should be at offset 0x40");
		static_assert(offsetof(CS2::server::shard_model_desc_t, m_vInitialPanelVertices) == 0x58, "m_vInitialPanelVertices in shard_model_desc_t should be at offset 0x58");
		static_assert(offsetof(CS2::server::shard_model_desc_t, m_flGlassHalfThickness) == 0x70, "m_flGlassHalfThickness in shard_model_desc_t should be at offset 0x70");
		static_assert(offsetof(CS2::server::shard_model_desc_t, m_bHasParent) == 0x74, "m_bHasParent in shard_model_desc_t should be at offset 0x74");
		static_assert(offsetof(CS2::server::shard_model_desc_t, m_bParentFrozen) == 0x75, "m_bParentFrozen in shard_model_desc_t should be at offset 0x75");
		static_assert(offsetof(CS2::server::shard_model_desc_t, m_SurfacePropStringToken) == 0x78, "m_SurfacePropStringToken in shard_model_desc_t should be at offset 0x78");
		static_assert(sizeof(CS2::server::shard_model_desc_t) == 0x80, "shard_model_desc_t size should be 0x80");
	}
}
