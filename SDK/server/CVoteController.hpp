// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/server/CBaseEntity.hpp>
#include <SDK/server/CountdownTimer.hpp>



namespace CS2 {
	namespace server {
		class CBaseIssue;
	}
}


using namespace GlobalTypes;
namespace CS2 {
	namespace server {
		class CVoteController : public CS2::server::CBaseEntity {
		public:
			int32_t m_iActiveIssueIndex; // 0x4f0 | Schema_Builtin | Size: 0x4
			int32_t m_iOnlyTeamToVote; // 0x4f4 | Schema_Builtin | Size: 0x4
			int32_t m_nVoteOptionCount[5]; // 0x4f8 | Schema_FixedArray | Size: 0x14
			int32_t m_nPotentialVotes; // 0x50c | Schema_Builtin | Size: 0x4
			bool m_bIsYesNoVote; // 0x510 | Schema_Builtin | Size: 0x1
			S2_PAD(0x7);
			server::CountdownTimer m_acceptingVotesTimer; // 0x518 | Schema_DeclaredClass | Size: 0x18
			server::CountdownTimer m_executeCommandTimer; // 0x530 | Schema_DeclaredClass | Size: 0x18
			server::CountdownTimer m_resetVoteTimer; // 0x548 | Schema_DeclaredClass | Size: 0x18
			int32_t m_nVotesCast[64]; // 0x560 | Schema_FixedArray | Size: 0x100
			GlobalTypes::CPlayerSlot m_playerHoldingVote; // 0x660 | Schema_Atomic | Size: 0x4
			GlobalTypes::CPlayerSlot m_playerOverrideForVote; // 0x664 | Schema_Atomic | Size: 0x4
			int32_t m_nHighestCountIndex; // 0x668 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4);
			GlobalTypes::CUtlVector< server::CBaseIssue* > m_potentialIssues; // 0x670 | Schema_Atomic | Size: 0x18
			// char  m_potentialIssues[0x18]; // 0x670 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector< char* > m_VoteOptions; // 0x688 | Schema_Atomic | Size: 0x18
			// char  m_VoteOptions[0x18]; // 0x688 | Schema_Atomic | Size: 0x18
		};
		static_assert(offsetof(CS2::server::CVoteController, m_iActiveIssueIndex) == 0x4F0, "m_iActiveIssueIndex in CVoteController should be at offset 0x4F0");
		static_assert(offsetof(CS2::server::CVoteController, m_iOnlyTeamToVote) == 0x4F4, "m_iOnlyTeamToVote in CVoteController should be at offset 0x4F4");
		static_assert(offsetof(CS2::server::CVoteController, m_nVoteOptionCount) == 0x4F8, "m_nVoteOptionCount in CVoteController should be at offset 0x4F8");
		static_assert(offsetof(CS2::server::CVoteController, m_nPotentialVotes) == 0x50C, "m_nPotentialVotes in CVoteController should be at offset 0x50C");
		static_assert(offsetof(CS2::server::CVoteController, m_bIsYesNoVote) == 0x510, "m_bIsYesNoVote in CVoteController should be at offset 0x510");
		static_assert(offsetof(CS2::server::CVoteController, m_acceptingVotesTimer) == 0x518, "m_acceptingVotesTimer in CVoteController should be at offset 0x518");
		static_assert(offsetof(CS2::server::CVoteController, m_executeCommandTimer) == 0x530, "m_executeCommandTimer in CVoteController should be at offset 0x530");
		static_assert(offsetof(CS2::server::CVoteController, m_resetVoteTimer) == 0x548, "m_resetVoteTimer in CVoteController should be at offset 0x548");
		static_assert(offsetof(CS2::server::CVoteController, m_nVotesCast) == 0x560, "m_nVotesCast in CVoteController should be at offset 0x560");
		static_assert(offsetof(CS2::server::CVoteController, m_playerHoldingVote) == 0x660, "m_playerHoldingVote in CVoteController should be at offset 0x660");
		static_assert(offsetof(CS2::server::CVoteController, m_playerOverrideForVote) == 0x664, "m_playerOverrideForVote in CVoteController should be at offset 0x664");
		static_assert(offsetof(CS2::server::CVoteController, m_nHighestCountIndex) == 0x668, "m_nHighestCountIndex in CVoteController should be at offset 0x668");
		static_assert(offsetof(CS2::server::CVoteController, m_potentialIssues) == 0x670, "m_potentialIssues in CVoteController should be at offset 0x670");
		static_assert(offsetof(CS2::server::CVoteController, m_VoteOptions) == 0x688, "m_VoteOptions in CVoteController should be at offset 0x688");
		static_assert(sizeof(CS2::server::CVoteController) == 0x6A0, "CVoteController size should be 0x6A0");
	}
}
