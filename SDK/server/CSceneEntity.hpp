// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/server/CPointEntity.hpp>
#include <SDK/entity2/CEntityIOOutput.hpp>
#include <SDK/server/SceneOnPlayerDeath_t.hpp>



namespace CS2 {
	namespace server {
		class CSceneEntity : public CS2::server::CPointEntity {
		public:
			S2_PAD(0x8);
			GlobalTypes::CUtlSymbolLarge m_iszSceneFile; // 0x4f8 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlSymbolLarge m_iszResumeSceneFile; // 0x500 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlSymbolLarge m_iszTarget1; // 0x508 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlSymbolLarge m_iszTarget2; // 0x510 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlSymbolLarge m_iszTarget3; // 0x518 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlSymbolLarge m_iszTarget4; // 0x520 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlSymbolLarge m_iszTarget5; // 0x528 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlSymbolLarge m_iszTarget6; // 0x530 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlSymbolLarge m_iszTarget7; // 0x538 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlSymbolLarge m_iszTarget8; // 0x540 | Schema_Atomic | Size: 0x8
			// server::CHandle< server::CBaseEntity > m_hTarget1; // 0x548 | Schema_Atomic | Size: 0x4
			char  m_hTarget1[0x4]; // 0x548 | Schema_Atomic | Size: 0x4
			// server::CHandle< server::CBaseEntity > m_hTarget2; // 0x54c | Schema_Atomic | Size: 0x4
			char  m_hTarget2[0x4]; // 0x54c | Schema_Atomic | Size: 0x4
			// server::CHandle< server::CBaseEntity > m_hTarget3; // 0x550 | Schema_Atomic | Size: 0x4
			char  m_hTarget3[0x4]; // 0x550 | Schema_Atomic | Size: 0x4
			// server::CHandle< server::CBaseEntity > m_hTarget4; // 0x554 | Schema_Atomic | Size: 0x4
			char  m_hTarget4[0x4]; // 0x554 | Schema_Atomic | Size: 0x4
			// server::CHandle< server::CBaseEntity > m_hTarget5; // 0x558 | Schema_Atomic | Size: 0x4
			char  m_hTarget5[0x4]; // 0x558 | Schema_Atomic | Size: 0x4
			// server::CHandle< server::CBaseEntity > m_hTarget6; // 0x55c | Schema_Atomic | Size: 0x4
			char  m_hTarget6[0x4]; // 0x55c | Schema_Atomic | Size: 0x4
			// server::CHandle< server::CBaseEntity > m_hTarget7; // 0x560 | Schema_Atomic | Size: 0x4
			char  m_hTarget7[0x4]; // 0x560 | Schema_Atomic | Size: 0x4
			// server::CHandle< server::CBaseEntity > m_hTarget8; // 0x564 | Schema_Atomic | Size: 0x4
			char  m_hTarget8[0x4]; // 0x564 | Schema_Atomic | Size: 0x4
			GlobalTypes::CUtlSymbolLarge m_sTargetAttachment; // 0x568 | Schema_Atomic | Size: 0x8
			bool m_bIsPlayingBack; // 0x570 | Schema_Builtin | Size: 0x1
			bool m_bPaused; // 0x571 | Schema_Builtin | Size: 0x1
			bool m_bMultiplayer; // 0x572 | Schema_Builtin | Size: 0x1
			bool m_bAutogenerated; // 0x573 | Schema_Builtin | Size: 0x1
			float32 m_flForceClientTime; // 0x574 | Schema_Builtin | Size: 0x4
			float32 m_flCurrentTime; // 0x578 | Schema_Builtin | Size: 0x4
			float32 m_flFrameTime; // 0x57c | Schema_Builtin | Size: 0x4
			bool m_bCancelAtNextInterrupt; // 0x580 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			float32 m_fPitch; // 0x584 | Schema_Builtin | Size: 0x4
			bool m_bAutomated; // 0x588 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			int32_t m_nAutomatedAction; // 0x58c | Schema_Builtin | Size: 0x4
			float32 m_flAutomationDelay; // 0x590 | Schema_Builtin | Size: 0x4
			float32 m_flAutomationTime; // 0x594 | Schema_Builtin | Size: 0x4
			int32_t m_nSpeechPriority; // 0x598 | Schema_Builtin | Size: 0x4
			// server::CHandle< server::CBaseEntity > m_hWaitingForThisResumeScene; // 0x59c | Schema_Atomic | Size: 0x4
			char  m_hWaitingForThisResumeScene[0x4]; // 0x59c | Schema_Atomic | Size: 0x4
			bool m_bWaitingForResumeScene; // 0x5a0 | Schema_Builtin | Size: 0x1
			bool m_bPausedViaInput; // 0x5a1 | Schema_Builtin | Size: 0x1
			bool m_bPauseAtNextInterrupt; // 0x5a2 | Schema_Builtin | Size: 0x1
			bool m_bWaitingForActor; // 0x5a3 | Schema_Builtin | Size: 0x1
			bool m_bWaitingForInterrupt; // 0x5a4 | Schema_Builtin | Size: 0x1
			bool m_bInterruptedActorsScenes; // 0x5a5 | Schema_Builtin | Size: 0x1
			bool m_bBreakOnNonIdle; // 0x5a6 | Schema_Builtin | Size: 0x1
			bool m_bSceneFinished; // 0x5a7 | Schema_Builtin | Size: 0x1
			// server::CNetworkUtlVectorBase< server.dll::CHandle< CBaseFlex > > m_hActorList; // 0x5a8 | Schema_Atomic | Size: 0x18
			char  m_hActorList[0x18]; // 0x5a8 | Schema_Atomic | Size: 0x18
			// server::CUtlVector< server.dll::CHandle< CBaseEntity > > m_hRemoveActorList; // 0x5c0 | Schema_Atomic | Size: 0x18
			char  m_hRemoveActorList[0x18]; // 0x5c0 | Schema_Atomic | Size: 0x18
			S2_PAD(0x30);
			int32_t m_nSceneFlushCounter; // 0x608 | Schema_Builtin | Size: 0x4
			uint16_t m_nSceneStringIndex; // 0x60c | Schema_Builtin | Size: 0x2
			S2_PAD(0x2);
			entity2::CEntityIOOutput m_OnStart; // 0x610 | Schema_DeclaredClass | Size: 0x28
			entity2::CEntityIOOutput m_OnCompletion; // 0x638 | Schema_DeclaredClass | Size: 0x28
			entity2::CEntityIOOutput m_OnCanceled; // 0x660 | Schema_DeclaredClass | Size: 0x28
			entity2::CEntityIOOutput m_OnPaused; // 0x688 | Schema_DeclaredClass | Size: 0x28
			entity2::CEntityIOOutput m_OnResumed; // 0x6b0 | Schema_DeclaredClass | Size: 0x28
			entity2::CEntityIOOutput m_OnTrigger[16]; // 0x6d8 | Schema_FixedArray | Size: 0x2800
			// server::CHandle< server::CSceneEntity > m_hInterruptScene; // 0x9e8 | Schema_Atomic | Size: 0x4
			char  m_hInterruptScene[0x4]; // 0x9e8 | Schema_Atomic | Size: 0x4
			int32_t m_nInterruptCount; // 0x9ec | Schema_Builtin | Size: 0x4
			bool m_bSceneMissing; // 0x9f0 | Schema_Builtin | Size: 0x1
			bool m_bInterrupted; // 0x9f1 | Schema_Builtin | Size: 0x1
			bool m_bCompletedEarly; // 0x9f2 | Schema_Builtin | Size: 0x1
			bool m_bInterruptSceneFinished; // 0x9f3 | Schema_Builtin | Size: 0x1
			bool m_bRestoring; // 0x9f4 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			// server::CUtlVector< server.dll::CHandle< CSceneEntity > > m_hNotifySceneCompletion; // 0x9f8 | Schema_Atomic | Size: 0x18
			char  m_hNotifySceneCompletion[0x18]; // 0x9f8 | Schema_Atomic | Size: 0x18
			// server::CUtlVector< server.dll::CHandle< CSceneListManager > > m_hListManagers; // 0xa10 | Schema_Atomic | Size: 0x18
			char  m_hListManagers[0x18]; // 0xa10 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlSymbolLarge m_iszSoundName; // 0xa28 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlSymbolLarge m_iszSequenceName; // 0xa30 | Schema_Atomic | Size: 0x8
			// server::CHandle< server::CBaseFlex > m_hActor; // 0xa38 | Schema_Atomic | Size: 0x4
			char  m_hActor[0x4]; // 0xa38 | Schema_Atomic | Size: 0x4
			// server::CHandle< server::CBaseEntity > m_hActivator; // 0xa3c | Schema_Atomic | Size: 0x4
			char  m_hActivator[0x4]; // 0xa3c | Schema_Atomic | Size: 0x4
			int32_t m_BusyActor; // 0xa40 | Schema_Builtin | Size: 0x4
			server::SceneOnPlayerDeath_t m_iPlayerDeathBehavior; // 0xa44 | Schema_DeclaredEnum | Size: 0x4
			S2_PAD(0x8); // End padding
		};
		static_assert(offsetof(CS2::server::CSceneEntity, m_iszSceneFile) == 0x4F8, "m_iszSceneFile in CSceneEntity should be at offset 0x4F8");
		static_assert(offsetof(CS2::server::CSceneEntity, m_iszResumeSceneFile) == 0x500, "m_iszResumeSceneFile in CSceneEntity should be at offset 0x500");
		static_assert(offsetof(CS2::server::CSceneEntity, m_iszTarget1) == 0x508, "m_iszTarget1 in CSceneEntity should be at offset 0x508");
		static_assert(offsetof(CS2::server::CSceneEntity, m_iszTarget2) == 0x510, "m_iszTarget2 in CSceneEntity should be at offset 0x510");
		static_assert(offsetof(CS2::server::CSceneEntity, m_iszTarget3) == 0x518, "m_iszTarget3 in CSceneEntity should be at offset 0x518");
		static_assert(offsetof(CS2::server::CSceneEntity, m_iszTarget4) == 0x520, "m_iszTarget4 in CSceneEntity should be at offset 0x520");
		static_assert(offsetof(CS2::server::CSceneEntity, m_iszTarget5) == 0x528, "m_iszTarget5 in CSceneEntity should be at offset 0x528");
		static_assert(offsetof(CS2::server::CSceneEntity, m_iszTarget6) == 0x530, "m_iszTarget6 in CSceneEntity should be at offset 0x530");
		static_assert(offsetof(CS2::server::CSceneEntity, m_iszTarget7) == 0x538, "m_iszTarget7 in CSceneEntity should be at offset 0x538");
		static_assert(offsetof(CS2::server::CSceneEntity, m_iszTarget8) == 0x540, "m_iszTarget8 in CSceneEntity should be at offset 0x540");
		static_assert(offsetof(CS2::server::CSceneEntity, m_hTarget1) == 0x548, "m_hTarget1 in CSceneEntity should be at offset 0x548");
		static_assert(offsetof(CS2::server::CSceneEntity, m_hTarget2) == 0x54C, "m_hTarget2 in CSceneEntity should be at offset 0x54C");
		static_assert(offsetof(CS2::server::CSceneEntity, m_hTarget3) == 0x550, "m_hTarget3 in CSceneEntity should be at offset 0x550");
		static_assert(offsetof(CS2::server::CSceneEntity, m_hTarget4) == 0x554, "m_hTarget4 in CSceneEntity should be at offset 0x554");
		static_assert(offsetof(CS2::server::CSceneEntity, m_hTarget5) == 0x558, "m_hTarget5 in CSceneEntity should be at offset 0x558");
		static_assert(offsetof(CS2::server::CSceneEntity, m_hTarget6) == 0x55C, "m_hTarget6 in CSceneEntity should be at offset 0x55C");
		static_assert(offsetof(CS2::server::CSceneEntity, m_hTarget7) == 0x560, "m_hTarget7 in CSceneEntity should be at offset 0x560");
		static_assert(offsetof(CS2::server::CSceneEntity, m_hTarget8) == 0x564, "m_hTarget8 in CSceneEntity should be at offset 0x564");
		static_assert(offsetof(CS2::server::CSceneEntity, m_sTargetAttachment) == 0x568, "m_sTargetAttachment in CSceneEntity should be at offset 0x568");
		static_assert(offsetof(CS2::server::CSceneEntity, m_bIsPlayingBack) == 0x570, "m_bIsPlayingBack in CSceneEntity should be at offset 0x570");
		static_assert(offsetof(CS2::server::CSceneEntity, m_bPaused) == 0x571, "m_bPaused in CSceneEntity should be at offset 0x571");
		static_assert(offsetof(CS2::server::CSceneEntity, m_bMultiplayer) == 0x572, "m_bMultiplayer in CSceneEntity should be at offset 0x572");
		static_assert(offsetof(CS2::server::CSceneEntity, m_bAutogenerated) == 0x573, "m_bAutogenerated in CSceneEntity should be at offset 0x573");
		static_assert(offsetof(CS2::server::CSceneEntity, m_flForceClientTime) == 0x574, "m_flForceClientTime in CSceneEntity should be at offset 0x574");
		static_assert(offsetof(CS2::server::CSceneEntity, m_flCurrentTime) == 0x578, "m_flCurrentTime in CSceneEntity should be at offset 0x578");
		static_assert(offsetof(CS2::server::CSceneEntity, m_flFrameTime) == 0x57C, "m_flFrameTime in CSceneEntity should be at offset 0x57C");
		static_assert(offsetof(CS2::server::CSceneEntity, m_bCancelAtNextInterrupt) == 0x580, "m_bCancelAtNextInterrupt in CSceneEntity should be at offset 0x580");
		static_assert(offsetof(CS2::server::CSceneEntity, m_fPitch) == 0x584, "m_fPitch in CSceneEntity should be at offset 0x584");
		static_assert(offsetof(CS2::server::CSceneEntity, m_bAutomated) == 0x588, "m_bAutomated in CSceneEntity should be at offset 0x588");
		static_assert(offsetof(CS2::server::CSceneEntity, m_nAutomatedAction) == 0x58C, "m_nAutomatedAction in CSceneEntity should be at offset 0x58C");
		static_assert(offsetof(CS2::server::CSceneEntity, m_flAutomationDelay) == 0x590, "m_flAutomationDelay in CSceneEntity should be at offset 0x590");
		static_assert(offsetof(CS2::server::CSceneEntity, m_flAutomationTime) == 0x594, "m_flAutomationTime in CSceneEntity should be at offset 0x594");
		static_assert(offsetof(CS2::server::CSceneEntity, m_nSpeechPriority) == 0x598, "m_nSpeechPriority in CSceneEntity should be at offset 0x598");
		static_assert(offsetof(CS2::server::CSceneEntity, m_hWaitingForThisResumeScene) == 0x59C, "m_hWaitingForThisResumeScene in CSceneEntity should be at offset 0x59C");
		static_assert(offsetof(CS2::server::CSceneEntity, m_bWaitingForResumeScene) == 0x5A0, "m_bWaitingForResumeScene in CSceneEntity should be at offset 0x5A0");
		static_assert(offsetof(CS2::server::CSceneEntity, m_bPausedViaInput) == 0x5A1, "m_bPausedViaInput in CSceneEntity should be at offset 0x5A1");
		static_assert(offsetof(CS2::server::CSceneEntity, m_bPauseAtNextInterrupt) == 0x5A2, "m_bPauseAtNextInterrupt in CSceneEntity should be at offset 0x5A2");
		static_assert(offsetof(CS2::server::CSceneEntity, m_bWaitingForActor) == 0x5A3, "m_bWaitingForActor in CSceneEntity should be at offset 0x5A3");
		static_assert(offsetof(CS2::server::CSceneEntity, m_bWaitingForInterrupt) == 0x5A4, "m_bWaitingForInterrupt in CSceneEntity should be at offset 0x5A4");
		static_assert(offsetof(CS2::server::CSceneEntity, m_bInterruptedActorsScenes) == 0x5A5, "m_bInterruptedActorsScenes in CSceneEntity should be at offset 0x5A5");
		static_assert(offsetof(CS2::server::CSceneEntity, m_bBreakOnNonIdle) == 0x5A6, "m_bBreakOnNonIdle in CSceneEntity should be at offset 0x5A6");
		static_assert(offsetof(CS2::server::CSceneEntity, m_bSceneFinished) == 0x5A7, "m_bSceneFinished in CSceneEntity should be at offset 0x5A7");
		static_assert(offsetof(CS2::server::CSceneEntity, m_hActorList) == 0x5A8, "m_hActorList in CSceneEntity should be at offset 0x5A8");
		static_assert(offsetof(CS2::server::CSceneEntity, m_hRemoveActorList) == 0x5C0, "m_hRemoveActorList in CSceneEntity should be at offset 0x5C0");
		static_assert(offsetof(CS2::server::CSceneEntity, m_nSceneFlushCounter) == 0x608, "m_nSceneFlushCounter in CSceneEntity should be at offset 0x608");
		static_assert(offsetof(CS2::server::CSceneEntity, m_nSceneStringIndex) == 0x60C, "m_nSceneStringIndex in CSceneEntity should be at offset 0x60C");
		static_assert(offsetof(CS2::server::CSceneEntity, m_OnStart) == 0x610, "m_OnStart in CSceneEntity should be at offset 0x610");
		static_assert(offsetof(CS2::server::CSceneEntity, m_OnCompletion) == 0x638, "m_OnCompletion in CSceneEntity should be at offset 0x638");
		static_assert(offsetof(CS2::server::CSceneEntity, m_OnCanceled) == 0x660, "m_OnCanceled in CSceneEntity should be at offset 0x660");
		static_assert(offsetof(CS2::server::CSceneEntity, m_OnPaused) == 0x688, "m_OnPaused in CSceneEntity should be at offset 0x688");
		static_assert(offsetof(CS2::server::CSceneEntity, m_OnResumed) == 0x6B0, "m_OnResumed in CSceneEntity should be at offset 0x6B0");
		static_assert(offsetof(CS2::server::CSceneEntity, m_OnTrigger) == 0x6D8, "m_OnTrigger in CSceneEntity should be at offset 0x6D8");
		static_assert(offsetof(CS2::server::CSceneEntity, m_hInterruptScene) == 0x9E8, "m_hInterruptScene in CSceneEntity should be at offset 0x9E8");
		static_assert(offsetof(CS2::server::CSceneEntity, m_nInterruptCount) == 0x9EC, "m_nInterruptCount in CSceneEntity should be at offset 0x9EC");
		static_assert(offsetof(CS2::server::CSceneEntity, m_bSceneMissing) == 0x9F0, "m_bSceneMissing in CSceneEntity should be at offset 0x9F0");
		static_assert(offsetof(CS2::server::CSceneEntity, m_bInterrupted) == 0x9F1, "m_bInterrupted in CSceneEntity should be at offset 0x9F1");
		static_assert(offsetof(CS2::server::CSceneEntity, m_bCompletedEarly) == 0x9F2, "m_bCompletedEarly in CSceneEntity should be at offset 0x9F2");
		static_assert(offsetof(CS2::server::CSceneEntity, m_bInterruptSceneFinished) == 0x9F3, "m_bInterruptSceneFinished in CSceneEntity should be at offset 0x9F3");
		static_assert(offsetof(CS2::server::CSceneEntity, m_bRestoring) == 0x9F4, "m_bRestoring in CSceneEntity should be at offset 0x9F4");
		static_assert(offsetof(CS2::server::CSceneEntity, m_hNotifySceneCompletion) == 0x9F8, "m_hNotifySceneCompletion in CSceneEntity should be at offset 0x9F8");
		static_assert(offsetof(CS2::server::CSceneEntity, m_hListManagers) == 0xA10, "m_hListManagers in CSceneEntity should be at offset 0xA10");
		static_assert(offsetof(CS2::server::CSceneEntity, m_iszSoundName) == 0xA28, "m_iszSoundName in CSceneEntity should be at offset 0xA28");
		static_assert(offsetof(CS2::server::CSceneEntity, m_iszSequenceName) == 0xA30, "m_iszSequenceName in CSceneEntity should be at offset 0xA30");
		static_assert(offsetof(CS2::server::CSceneEntity, m_hActor) == 0xA38, "m_hActor in CSceneEntity should be at offset 0xA38");
		static_assert(offsetof(CS2::server::CSceneEntity, m_hActivator) == 0xA3C, "m_hActivator in CSceneEntity should be at offset 0xA3C");
		static_assert(offsetof(CS2::server::CSceneEntity, m_BusyActor) == 0xA40, "m_BusyActor in CSceneEntity should be at offset 0xA40");
		static_assert(offsetof(CS2::server::CSceneEntity, m_iPlayerDeathBehavior) == 0xA44, "m_iPlayerDeathBehavior in CSceneEntity should be at offset 0xA44");
		static_assert(sizeof(CS2::server::CSceneEntity) == 0xA50, "CSceneEntity size should be 0xA50");
	}
}
