// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/particles/CParticleFunctionForce.hpp>
#include <SDK/particleslib/CPerParticleFloatInput.hpp>
#include <SDK/particleslib/CPerParticleVecInput.hpp>





using namespace GlobalTypes;
namespace CS2 {
	namespace particles {
		class C_OP_PerParticleForce : public CS2::particles::CParticleFunctionForce {
		public:
			particleslib::CPerParticleFloatInput m_flForceScale; // 0x1e0 | Schema_DeclaredClass | Size: 0x170
			particleslib::CPerParticleVecInput m_vForce; // 0x350 | Schema_DeclaredClass | Size: 0x6b8
			int32_t m_nCP; // 0xa08 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4); // End padding
		};
		static_assert(offsetof(CS2::particles::C_OP_PerParticleForce, m_flForceScale) == 0x1E0, "m_flForceScale in C_OP_PerParticleForce should be at offset 0x1E0");
		static_assert(offsetof(CS2::particles::C_OP_PerParticleForce, m_vForce) == 0x350, "m_vForce in C_OP_PerParticleForce should be at offset 0x350");
		static_assert(offsetof(CS2::particles::C_OP_PerParticleForce, m_nCP) == 0xA08, "m_nCP in C_OP_PerParticleForce should be at offset 0xA08");
		static_assert(sizeof(CS2::particles::C_OP_PerParticleForce) == 0xA10, "C_OP_PerParticleForce size should be 0xA10");
	}
}
