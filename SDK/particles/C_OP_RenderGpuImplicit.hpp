// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/particles/CParticleFunctionRenderer.hpp>
#include <SDK/particleslib/CParticleCollectionRendererFloatInput.hpp>





using namespace GlobalTypes;
namespace CS2 {
	namespace particles {
		class C_OP_RenderGpuImplicit : public CS2::particles::CParticleFunctionRenderer {
		public:
			bool m_bUsePerParticleRadius; // 0x220 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			uint32_t m_nVertexCountKb; // 0x224 | Schema_Builtin | Size: 0x4
			uint32_t m_nIndexCountKb; // 0x228 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4);
			particleslib::CParticleCollectionRendererFloatInput m_fGridSize; // 0x230 | Schema_DeclaredClass | Size: 0x170
			particleslib::CParticleCollectionRendererFloatInput m_fRadiusScale; // 0x3a0 | Schema_DeclaredClass | Size: 0x170
			particleslib::CParticleCollectionRendererFloatInput m_fIsosurfaceThreshold; // 0x510 | Schema_DeclaredClass | Size: 0x170
			int32_t m_nScaleCP; // 0x680 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4);
			// GlobalTypes::CStrongHandle<resourcesystem::InfoForResourceTypeIMaterial2> m_hMaterial; // 0x688 | Schema_Atomic | Size: 0x8
			char  m_hMaterial[0x8]; // 0x688 | Schema_Atomic | Size: 0x8
		};
		static_assert(offsetof(CS2::particles::C_OP_RenderGpuImplicit, m_bUsePerParticleRadius) == 0x220, "m_bUsePerParticleRadius in C_OP_RenderGpuImplicit should be at offset 0x220");
		static_assert(offsetof(CS2::particles::C_OP_RenderGpuImplicit, m_nVertexCountKb) == 0x224, "m_nVertexCountKb in C_OP_RenderGpuImplicit should be at offset 0x224");
		static_assert(offsetof(CS2::particles::C_OP_RenderGpuImplicit, m_nIndexCountKb) == 0x228, "m_nIndexCountKb in C_OP_RenderGpuImplicit should be at offset 0x228");
		static_assert(offsetof(CS2::particles::C_OP_RenderGpuImplicit, m_fGridSize) == 0x230, "m_fGridSize in C_OP_RenderGpuImplicit should be at offset 0x230");
		static_assert(offsetof(CS2::particles::C_OP_RenderGpuImplicit, m_fRadiusScale) == 0x3A0, "m_fRadiusScale in C_OP_RenderGpuImplicit should be at offset 0x3A0");
		static_assert(offsetof(CS2::particles::C_OP_RenderGpuImplicit, m_fIsosurfaceThreshold) == 0x510, "m_fIsosurfaceThreshold in C_OP_RenderGpuImplicit should be at offset 0x510");
		static_assert(offsetof(CS2::particles::C_OP_RenderGpuImplicit, m_nScaleCP) == 0x680, "m_nScaleCP in C_OP_RenderGpuImplicit should be at offset 0x680");
		static_assert(offsetof(CS2::particles::C_OP_RenderGpuImplicit, m_hMaterial) == 0x688, "m_hMaterial in C_OP_RenderGpuImplicit should be at offset 0x688");
		static_assert(sizeof(CS2::particles::C_OP_RenderGpuImplicit) == 0x690, "C_OP_RenderGpuImplicit size should be 0x690");
	}
}
