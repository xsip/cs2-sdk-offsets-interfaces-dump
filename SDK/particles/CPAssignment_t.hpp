// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/particleslib/CPerParticleVecInput.hpp>
#include <SDK/particles/ParticleOrientationSetMode_t.hpp>



namespace CS2 {
	namespace particles {
		class CPAssignment_t  {
		public:
			int32_t m_nCPNumber; // 0x0 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4);
			particleslib::CPerParticleVecInput m_Pos; // 0x8 | Schema_DeclaredClass | Size: 0x6b8
			particles::ParticleOrientationSetMode_t m_nOrientationMode; // 0x6c0 | Schema_DeclaredEnum | Size: 0x4
			S2_PAD(0x4); // End padding
		};
		static_assert(offsetof(CS2::particles::CPAssignment_t, m_nCPNumber) == 0x0, "m_nCPNumber in CPAssignment_t should be at offset 0x0");
		static_assert(offsetof(CS2::particles::CPAssignment_t, m_Pos) == 0x8, "m_Pos in CPAssignment_t should be at offset 0x8");
		static_assert(offsetof(CS2::particles::CPAssignment_t, m_nOrientationMode) == 0x6C0, "m_nOrientationMode in CPAssignment_t should be at offset 0x6C0");
		static_assert(sizeof(CS2::particles::CPAssignment_t) == 0x6C8, "CPAssignment_t size should be 0x6C8");
	}
}
