// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>

#include <SDK/particles/CParticleFunctionInitializer.hpp>
#include <SDK/particles/ParticleTraceSet_t.hpp>



namespace CS2 {
	namespace particles {
		class C_INIT_InitialRepulsionVelocity : public CS2::particles::CParticleFunctionInitializer {
		public:
			char m_CollisionGroupName[128]; // 0x1d8 | Schema_FixedArray | Size: 0x80
			particles::ParticleTraceSet_t m_nTraceSet; // 0x258 | Schema_DeclaredEnum | Size: 0x4
			GlobalTypes::Vector m_vecOutputMin; // 0x25c | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vecOutputMax; // 0x268 | Schema_Atomic | Size: 0xc
			int32_t m_nControlPointNumber; // 0x274 | Schema_Builtin | Size: 0x4
			bool m_bPerParticle; // 0x278 | Schema_Builtin | Size: 0x1
			bool m_bTranslate; // 0x279 | Schema_Builtin | Size: 0x1
			bool m_bProportional; // 0x27a | Schema_Builtin | Size: 0x1
			S2_PAD(0x1);
			float32 m_flTraceLength; // 0x27c | Schema_Builtin | Size: 0x4
			bool m_bPerParticleTR; // 0x280 | Schema_Builtin | Size: 0x1
			bool m_bInherit; // 0x281 | Schema_Builtin | Size: 0x1
			S2_PAD(0x2);
			int32_t m_nChildCP; // 0x284 | Schema_Builtin | Size: 0x4
			int32_t m_nChildGroupID; // 0x288 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4); // End padding
		};
		static_assert(offsetof(CS2::particles::C_INIT_InitialRepulsionVelocity, m_CollisionGroupName) == 0x1D8, "m_CollisionGroupName in C_INIT_InitialRepulsionVelocity should be at offset 0x1D8");
		static_assert(offsetof(CS2::particles::C_INIT_InitialRepulsionVelocity, m_nTraceSet) == 0x258, "m_nTraceSet in C_INIT_InitialRepulsionVelocity should be at offset 0x258");
		static_assert(offsetof(CS2::particles::C_INIT_InitialRepulsionVelocity, m_vecOutputMin) == 0x25C, "m_vecOutputMin in C_INIT_InitialRepulsionVelocity should be at offset 0x25C");
		static_assert(offsetof(CS2::particles::C_INIT_InitialRepulsionVelocity, m_vecOutputMax) == 0x268, "m_vecOutputMax in C_INIT_InitialRepulsionVelocity should be at offset 0x268");
		static_assert(offsetof(CS2::particles::C_INIT_InitialRepulsionVelocity, m_nControlPointNumber) == 0x274, "m_nControlPointNumber in C_INIT_InitialRepulsionVelocity should be at offset 0x274");
		static_assert(offsetof(CS2::particles::C_INIT_InitialRepulsionVelocity, m_bPerParticle) == 0x278, "m_bPerParticle in C_INIT_InitialRepulsionVelocity should be at offset 0x278");
		static_assert(offsetof(CS2::particles::C_INIT_InitialRepulsionVelocity, m_bTranslate) == 0x279, "m_bTranslate in C_INIT_InitialRepulsionVelocity should be at offset 0x279");
		static_assert(offsetof(CS2::particles::C_INIT_InitialRepulsionVelocity, m_bProportional) == 0x27A, "m_bProportional in C_INIT_InitialRepulsionVelocity should be at offset 0x27A");
		static_assert(offsetof(CS2::particles::C_INIT_InitialRepulsionVelocity, m_flTraceLength) == 0x27C, "m_flTraceLength in C_INIT_InitialRepulsionVelocity should be at offset 0x27C");
		static_assert(offsetof(CS2::particles::C_INIT_InitialRepulsionVelocity, m_bPerParticleTR) == 0x280, "m_bPerParticleTR in C_INIT_InitialRepulsionVelocity should be at offset 0x280");
		static_assert(offsetof(CS2::particles::C_INIT_InitialRepulsionVelocity, m_bInherit) == 0x281, "m_bInherit in C_INIT_InitialRepulsionVelocity should be at offset 0x281");
		static_assert(offsetof(CS2::particles::C_INIT_InitialRepulsionVelocity, m_nChildCP) == 0x284, "m_nChildCP in C_INIT_InitialRepulsionVelocity should be at offset 0x284");
		static_assert(offsetof(CS2::particles::C_INIT_InitialRepulsionVelocity, m_nChildGroupID) == 0x288, "m_nChildGroupID in C_INIT_InitialRepulsionVelocity should be at offset 0x288");
		static_assert(sizeof(CS2::particles::C_INIT_InitialRepulsionVelocity) == 0x290, "C_INIT_InitialRepulsionVelocity size should be 0x290");
	}
}
