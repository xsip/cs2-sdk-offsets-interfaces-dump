// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/particles/CParticleFunctionRenderer.hpp>
#include <SDK/particleslib/CParticleCollectionFloatInput.hpp>
#include <SDK/particleslib/CParticleCollectionVecInput.hpp>
#include <SDK/particles/ParticleColorBlendType_t.hpp>
#include <SDK/particles/TextureRepetitionMode_t.hpp>
#include <SDK/particleslib/CParticleTransformInput.hpp>





using namespace GlobalTypes;
namespace CS2 {
	namespace particles {
		class C_OP_RenderCables : public CS2::particles::CParticleFunctionRenderer {
		public:
			particleslib::CParticleCollectionFloatInput m_flRadiusScale; // 0x220 | Schema_DeclaredClass | Size: 0x170
			particleslib::CParticleCollectionFloatInput m_flAlphaScale; // 0x390 | Schema_DeclaredClass | Size: 0x170
			particleslib::CParticleCollectionVecInput m_vecColorScale; // 0x500 | Schema_DeclaredClass | Size: 0x6b8
			particles::ParticleColorBlendType_t m_nColorBlendType; // 0xbb8 | Schema_DeclaredEnum | Size: 0x4
			S2_PAD(0x4);
			// GlobalTypes::CStrongHandle< resourcesystem::InfoForResourceTypeIMaterial2 > m_hMaterial; // 0xbc0 | Schema_Atomic | Size: 0x8
			char  m_hMaterial[0x8]; // 0xbc0 | Schema_Atomic | Size: 0x8
			particles::TextureRepetitionMode_t m_nTextureRepetitionMode; // 0xbc8 | Schema_DeclaredEnum | Size: 0x4
			S2_PAD(0x4);
			particleslib::CParticleCollectionFloatInput m_flTextureRepeatsPerSegment; // 0xbd0 | Schema_DeclaredClass | Size: 0x170
			particleslib::CParticleCollectionFloatInput m_flTextureRepeatsCircumference; // 0xd40 | Schema_DeclaredClass | Size: 0x170
			particleslib::CParticleCollectionFloatInput m_flColorMapOffsetV; // 0xeb0 | Schema_DeclaredClass | Size: 0x170
			particleslib::CParticleCollectionFloatInput m_flColorMapOffsetU; // 0x1020 | Schema_DeclaredClass | Size: 0x170
			particleslib::CParticleCollectionFloatInput m_flNormalMapOffsetV; // 0x1190 | Schema_DeclaredClass | Size: 0x170
			particleslib::CParticleCollectionFloatInput m_flNormalMapOffsetU; // 0x1300 | Schema_DeclaredClass | Size: 0x170
			bool m_bDrawCableCaps; // 0x1470 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			float32 m_flCapRoundness; // 0x1474 | Schema_Builtin | Size: 0x4
			float32 m_flCapOffsetAmount; // 0x1478 | Schema_Builtin | Size: 0x4
			float32 m_flTessScale; // 0x147c | Schema_Builtin | Size: 0x4
			int32_t m_nMinTesselation; // 0x1480 | Schema_Builtin | Size: 0x4
			int32_t m_nMaxTesselation; // 0x1484 | Schema_Builtin | Size: 0x4
			int32_t m_nRoundness; // 0x1488 | Schema_Builtin | Size: 0x4
			bool m_nForceRoundnessFixed; // 0x148c | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			particleslib::CParticleTransformInput m_LightingTransform; // 0x1490 | Schema_DeclaredClass | Size: 0x68
			// GlobalTypes::CUtlLeanVector< particles::FloatInputMaterialVariable_t > m_MaterialFloatVars; // 0x14f8 | Schema_Atomic | Size: 0x10
			char  m_MaterialFloatVars[0x10]; // 0x14f8 | Schema_Atomic | Size: 0x10
			S2_PAD(0x10);
			// GlobalTypes::CUtlLeanVector< particles::VecInputMaterialVariable_t > m_MaterialVecVars; // 0x1518 | Schema_Atomic | Size: 0x10
			char  m_MaterialVecVars[0x10]; // 0x1518 | Schema_Atomic | Size: 0x10
			S2_PAD(0x10); // End padding
		};
		static_assert(offsetof(CS2::particles::C_OP_RenderCables, m_flRadiusScale) == 0x220, "m_flRadiusScale in C_OP_RenderCables should be at offset 0x220");
		static_assert(offsetof(CS2::particles::C_OP_RenderCables, m_flAlphaScale) == 0x390, "m_flAlphaScale in C_OP_RenderCables should be at offset 0x390");
		static_assert(offsetof(CS2::particles::C_OP_RenderCables, m_vecColorScale) == 0x500, "m_vecColorScale in C_OP_RenderCables should be at offset 0x500");
		static_assert(offsetof(CS2::particles::C_OP_RenderCables, m_nColorBlendType) == 0xBB8, "m_nColorBlendType in C_OP_RenderCables should be at offset 0xBB8");
		static_assert(offsetof(CS2::particles::C_OP_RenderCables, m_hMaterial) == 0xBC0, "m_hMaterial in C_OP_RenderCables should be at offset 0xBC0");
		static_assert(offsetof(CS2::particles::C_OP_RenderCables, m_nTextureRepetitionMode) == 0xBC8, "m_nTextureRepetitionMode in C_OP_RenderCables should be at offset 0xBC8");
		static_assert(offsetof(CS2::particles::C_OP_RenderCables, m_flTextureRepeatsPerSegment) == 0xBD0, "m_flTextureRepeatsPerSegment in C_OP_RenderCables should be at offset 0xBD0");
		static_assert(offsetof(CS2::particles::C_OP_RenderCables, m_flTextureRepeatsCircumference) == 0xD40, "m_flTextureRepeatsCircumference in C_OP_RenderCables should be at offset 0xD40");
		static_assert(offsetof(CS2::particles::C_OP_RenderCables, m_flColorMapOffsetV) == 0xEB0, "m_flColorMapOffsetV in C_OP_RenderCables should be at offset 0xEB0");
		static_assert(offsetof(CS2::particles::C_OP_RenderCables, m_flColorMapOffsetU) == 0x1020, "m_flColorMapOffsetU in C_OP_RenderCables should be at offset 0x1020");
		static_assert(offsetof(CS2::particles::C_OP_RenderCables, m_flNormalMapOffsetV) == 0x1190, "m_flNormalMapOffsetV in C_OP_RenderCables should be at offset 0x1190");
		static_assert(offsetof(CS2::particles::C_OP_RenderCables, m_flNormalMapOffsetU) == 0x1300, "m_flNormalMapOffsetU in C_OP_RenderCables should be at offset 0x1300");
		static_assert(offsetof(CS2::particles::C_OP_RenderCables, m_bDrawCableCaps) == 0x1470, "m_bDrawCableCaps in C_OP_RenderCables should be at offset 0x1470");
		static_assert(offsetof(CS2::particles::C_OP_RenderCables, m_flCapRoundness) == 0x1474, "m_flCapRoundness in C_OP_RenderCables should be at offset 0x1474");
		static_assert(offsetof(CS2::particles::C_OP_RenderCables, m_flCapOffsetAmount) == 0x1478, "m_flCapOffsetAmount in C_OP_RenderCables should be at offset 0x1478");
		static_assert(offsetof(CS2::particles::C_OP_RenderCables, m_flTessScale) == 0x147C, "m_flTessScale in C_OP_RenderCables should be at offset 0x147C");
		static_assert(offsetof(CS2::particles::C_OP_RenderCables, m_nMinTesselation) == 0x1480, "m_nMinTesselation in C_OP_RenderCables should be at offset 0x1480");
		static_assert(offsetof(CS2::particles::C_OP_RenderCables, m_nMaxTesselation) == 0x1484, "m_nMaxTesselation in C_OP_RenderCables should be at offset 0x1484");
		static_assert(offsetof(CS2::particles::C_OP_RenderCables, m_nRoundness) == 0x1488, "m_nRoundness in C_OP_RenderCables should be at offset 0x1488");
		static_assert(offsetof(CS2::particles::C_OP_RenderCables, m_nForceRoundnessFixed) == 0x148C, "m_nForceRoundnessFixed in C_OP_RenderCables should be at offset 0x148C");
		static_assert(offsetof(CS2::particles::C_OP_RenderCables, m_LightingTransform) == 0x1490, "m_LightingTransform in C_OP_RenderCables should be at offset 0x1490");
		static_assert(offsetof(CS2::particles::C_OP_RenderCables, m_MaterialFloatVars) == 0x14F8, "m_MaterialFloatVars in C_OP_RenderCables should be at offset 0x14F8");
		static_assert(offsetof(CS2::particles::C_OP_RenderCables, m_MaterialVecVars) == 0x1518, "m_MaterialVecVars in C_OP_RenderCables should be at offset 0x1518");
		static_assert(sizeof(CS2::particles::C_OP_RenderCables) == 0x1538, "C_OP_RenderCables size should be 0x1538");
	}
}
