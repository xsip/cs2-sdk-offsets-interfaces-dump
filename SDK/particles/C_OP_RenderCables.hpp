// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>

#include <SDK/particles/CParticleFunctionRenderer.hpp>
#include <SDK/particleslib/CParticleCollectionFloatInput.hpp>
#include <SDK/particleslib/CParticleCollectionVecInput.hpp>
#include <SDK/particles/ParticleColorBlendType_t.hpp>
#include <SDK/particles/TextureRepetitionMode_t.hpp>
#include <SDK/particleslib/CParticleTransformInput.hpp>



namespace CS2 {
	namespace particles {
		class C_OP_RenderCables : public CS2::particles::CParticleFunctionRenderer {
		public:
			particleslib::CParticleCollectionFloatInput m_flRadiusScale; // 0x210 | Schema_DeclaredClass | Size: 0x160
			particleslib::CParticleCollectionFloatInput m_flAlphaScale; // 0x370 | Schema_DeclaredClass | Size: 0x160
			particleslib::CParticleCollectionVecInput m_vecColorScale; // 0x4d0 | Schema_DeclaredClass | Size: 0x678
			particles::ParticleColorBlendType_t m_nColorBlendType; // 0xb48 | Schema_DeclaredEnum | Size: 0x4
			S2_PAD(0x4);
			// GlobalTypes::CStrongHandle< resourcesystem::InfoForResourceTypeIMaterial2 > m_hMaterial; // 0xb50 | Schema_Atomic | Size: 0x8
			char  m_hMaterial[0x8]; // 0xb50 | Schema_Atomic | Size: 0x8
			particles::TextureRepetitionMode_t m_nTextureRepetitionMode; // 0xb58 | Schema_DeclaredEnum | Size: 0x4
			S2_PAD(0x4);
			particleslib::CParticleCollectionFloatInput m_flTextureRepeatsPerSegment; // 0xb60 | Schema_DeclaredClass | Size: 0x160
			particleslib::CParticleCollectionFloatInput m_flTextureRepeatsCircumference; // 0xcc0 | Schema_DeclaredClass | Size: 0x160
			particleslib::CParticleCollectionFloatInput m_flColorMapOffsetV; // 0xe20 | Schema_DeclaredClass | Size: 0x160
			particleslib::CParticleCollectionFloatInput m_flColorMapOffsetU; // 0xf80 | Schema_DeclaredClass | Size: 0x160
			particleslib::CParticleCollectionFloatInput m_flNormalMapOffsetV; // 0x10e0 | Schema_DeclaredClass | Size: 0x160
			particleslib::CParticleCollectionFloatInput m_flNormalMapOffsetU; // 0x1240 | Schema_DeclaredClass | Size: 0x160
			bool m_bDrawCableCaps; // 0x13a0 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			float32 m_flCapRoundness; // 0x13a4 | Schema_Builtin | Size: 0x4
			float32 m_flCapOffsetAmount; // 0x13a8 | Schema_Builtin | Size: 0x4
			float32 m_flTessScale; // 0x13ac | Schema_Builtin | Size: 0x4
			int32_t m_nMinTesselation; // 0x13b0 | Schema_Builtin | Size: 0x4
			int32_t m_nMaxTesselation; // 0x13b4 | Schema_Builtin | Size: 0x4
			int32_t m_nRoundness; // 0x13b8 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4);
			particleslib::CParticleTransformInput m_LightingTransform; // 0x13c0 | Schema_DeclaredClass | Size: 0x68
			// GlobalTypes::CUtlLeanVector< particles::FloatInputMaterialVariable_t > m_MaterialFloatVars; // 0x1428 | Schema_Atomic | Size: 0x10
			char  m_MaterialFloatVars[0x10]; // 0x1428 | Schema_Atomic | Size: 0x10
			S2_PAD(0x10);
			// GlobalTypes::CUtlLeanVector< particles::VecInputMaterialVariable_t > m_MaterialVecVars; // 0x1448 | Schema_Atomic | Size: 0x10
			char  m_MaterialVecVars[0x10]; // 0x1448 | Schema_Atomic | Size: 0x10
			S2_PAD(0x10); // End padding
		};
		static_assert(offsetof(CS2::particles::C_OP_RenderCables, m_flRadiusScale) == 0x210, "m_flRadiusScale in C_OP_RenderCables should be at offset 0x210");
		static_assert(offsetof(CS2::particles::C_OP_RenderCables, m_flAlphaScale) == 0x370, "m_flAlphaScale in C_OP_RenderCables should be at offset 0x370");
		static_assert(offsetof(CS2::particles::C_OP_RenderCables, m_vecColorScale) == 0x4D0, "m_vecColorScale in C_OP_RenderCables should be at offset 0x4D0");
		static_assert(offsetof(CS2::particles::C_OP_RenderCables, m_nColorBlendType) == 0xB48, "m_nColorBlendType in C_OP_RenderCables should be at offset 0xB48");
		static_assert(offsetof(CS2::particles::C_OP_RenderCables, m_hMaterial) == 0xB50, "m_hMaterial in C_OP_RenderCables should be at offset 0xB50");
		static_assert(offsetof(CS2::particles::C_OP_RenderCables, m_nTextureRepetitionMode) == 0xB58, "m_nTextureRepetitionMode in C_OP_RenderCables should be at offset 0xB58");
		static_assert(offsetof(CS2::particles::C_OP_RenderCables, m_flTextureRepeatsPerSegment) == 0xB60, "m_flTextureRepeatsPerSegment in C_OP_RenderCables should be at offset 0xB60");
		static_assert(offsetof(CS2::particles::C_OP_RenderCables, m_flTextureRepeatsCircumference) == 0xCC0, "m_flTextureRepeatsCircumference in C_OP_RenderCables should be at offset 0xCC0");
		static_assert(offsetof(CS2::particles::C_OP_RenderCables, m_flColorMapOffsetV) == 0xE20, "m_flColorMapOffsetV in C_OP_RenderCables should be at offset 0xE20");
		static_assert(offsetof(CS2::particles::C_OP_RenderCables, m_flColorMapOffsetU) == 0xF80, "m_flColorMapOffsetU in C_OP_RenderCables should be at offset 0xF80");
		static_assert(offsetof(CS2::particles::C_OP_RenderCables, m_flNormalMapOffsetV) == 0x10E0, "m_flNormalMapOffsetV in C_OP_RenderCables should be at offset 0x10E0");
		static_assert(offsetof(CS2::particles::C_OP_RenderCables, m_flNormalMapOffsetU) == 0x1240, "m_flNormalMapOffsetU in C_OP_RenderCables should be at offset 0x1240");
		static_assert(offsetof(CS2::particles::C_OP_RenderCables, m_bDrawCableCaps) == 0x13A0, "m_bDrawCableCaps in C_OP_RenderCables should be at offset 0x13A0");
		static_assert(offsetof(CS2::particles::C_OP_RenderCables, m_flCapRoundness) == 0x13A4, "m_flCapRoundness in C_OP_RenderCables should be at offset 0x13A4");
		static_assert(offsetof(CS2::particles::C_OP_RenderCables, m_flCapOffsetAmount) == 0x13A8, "m_flCapOffsetAmount in C_OP_RenderCables should be at offset 0x13A8");
		static_assert(offsetof(CS2::particles::C_OP_RenderCables, m_flTessScale) == 0x13AC, "m_flTessScale in C_OP_RenderCables should be at offset 0x13AC");
		static_assert(offsetof(CS2::particles::C_OP_RenderCables, m_nMinTesselation) == 0x13B0, "m_nMinTesselation in C_OP_RenderCables should be at offset 0x13B0");
		static_assert(offsetof(CS2::particles::C_OP_RenderCables, m_nMaxTesselation) == 0x13B4, "m_nMaxTesselation in C_OP_RenderCables should be at offset 0x13B4");
		static_assert(offsetof(CS2::particles::C_OP_RenderCables, m_nRoundness) == 0x13B8, "m_nRoundness in C_OP_RenderCables should be at offset 0x13B8");
		static_assert(offsetof(CS2::particles::C_OP_RenderCables, m_LightingTransform) == 0x13C0, "m_LightingTransform in C_OP_RenderCables should be at offset 0x13C0");
		static_assert(offsetof(CS2::particles::C_OP_RenderCables, m_MaterialFloatVars) == 0x1428, "m_MaterialFloatVars in C_OP_RenderCables should be at offset 0x1428");
		static_assert(offsetof(CS2::particles::C_OP_RenderCables, m_MaterialVecVars) == 0x1448, "m_MaterialVecVars in C_OP_RenderCables should be at offset 0x1448");
		static_assert(sizeof(CS2::particles::C_OP_RenderCables) == 0x1468, "C_OP_RenderCables size should be 0x1468");
	}
}
