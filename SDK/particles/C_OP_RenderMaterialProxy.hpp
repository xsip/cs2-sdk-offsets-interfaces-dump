// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/particles/CParticleFunctionRenderer.hpp>
#include <SDK/particles/MaterialProxyType_t.hpp>
#include <SDK/particleslib/CParticleCollectionFloatInput.hpp>
#include <SDK/particleslib/CParticleCollectionVecInput.hpp>
#include <SDK/particleslib/CPerParticleFloatInput.hpp>
#include <SDK/particles/ParticleColorBlendType_t.hpp>



namespace CS2 {
	namespace particles {
		class MaterialVariable_t;
	}
}
namespace CS2 {
	namespace particles {
		class C_OP_RenderMaterialProxy : public CS2::particles::CParticleFunctionRenderer {
		public:
			int32_t m_nMaterialControlPoint; // 0x220 | Schema_Builtin | Size: 0x4
			particles::MaterialProxyType_t m_nProxyType; // 0x224 | Schema_DeclaredEnum | Size: 0x4
			GlobalTypes::CUtlVector< particles::MaterialVariable_t > m_MaterialVars; // 0x228 | Schema_Atomic | Size: 0x18
			// char  m_MaterialVars[0x18]; // 0x228 | Schema_Atomic | Size: 0x18
			// GlobalTypes::CUtlVector< particles::MaterialVariable_t > m_MaterialVars; // 0x228 | Schema_Atomic | Size: 0x18
			// GlobalTypes::CStrongHandle< resourcesystem::InfoForResourceTypeIMaterial2 > m_hOverrideMaterial; // 0x240 | Schema_Atomic | Size: 0x8
			char  m_hOverrideMaterial[0x8]; // 0x240 | Schema_Atomic | Size: 0x8
			particleslib::CParticleCollectionFloatInput m_flMaterialOverrideEnabled; // 0x248 | Schema_DeclaredClass | Size: 0x170
			particleslib::CParticleCollectionVecInput m_vecColorScale; // 0x3b8 | Schema_DeclaredClass | Size: 0x6b8
			particleslib::CPerParticleFloatInput m_flAlpha; // 0xa70 | Schema_DeclaredClass | Size: 0x170
			particles::ParticleColorBlendType_t m_nColorBlendType; // 0xbe0 | Schema_DeclaredEnum | Size: 0x4
			S2_PAD(0x1c); // End padding
		};
		static_assert(offsetof(CS2::particles::C_OP_RenderMaterialProxy, m_nMaterialControlPoint) == 0x220, "m_nMaterialControlPoint in C_OP_RenderMaterialProxy should be at offset 0x220");
		static_assert(offsetof(CS2::particles::C_OP_RenderMaterialProxy, m_nProxyType) == 0x224, "m_nProxyType in C_OP_RenderMaterialProxy should be at offset 0x224");
		static_assert(offsetof(CS2::particles::C_OP_RenderMaterialProxy, m_MaterialVars) == 0x228, "m_MaterialVars in C_OP_RenderMaterialProxy should be at offset 0x228");
		static_assert(offsetof(CS2::particles::C_OP_RenderMaterialProxy, m_hOverrideMaterial) == 0x240, "m_hOverrideMaterial in C_OP_RenderMaterialProxy should be at offset 0x240");
		static_assert(offsetof(CS2::particles::C_OP_RenderMaterialProxy, m_flMaterialOverrideEnabled) == 0x248, "m_flMaterialOverrideEnabled in C_OP_RenderMaterialProxy should be at offset 0x248");
		static_assert(offsetof(CS2::particles::C_OP_RenderMaterialProxy, m_vecColorScale) == 0x3B8, "m_vecColorScale in C_OP_RenderMaterialProxy should be at offset 0x3B8");
		static_assert(offsetof(CS2::particles::C_OP_RenderMaterialProxy, m_flAlpha) == 0xA70, "m_flAlpha in C_OP_RenderMaterialProxy should be at offset 0xA70");
		static_assert(offsetof(CS2::particles::C_OP_RenderMaterialProxy, m_nColorBlendType) == 0xBE0, "m_nColorBlendType in C_OP_RenderMaterialProxy should be at offset 0xBE0");
		static_assert(sizeof(CS2::particles::C_OP_RenderMaterialProxy) == 0xC00, "C_OP_RenderMaterialProxy size should be 0xC00");
	}
}
