// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/particles/ParticlePreviewState_t.hpp>



namespace CS2 {
	namespace particles {
		class ParticleControlPointDriver_t;
	}
}


using namespace GlobalTypes;
namespace CS2 {
	namespace particles {
		class ParticleControlPointConfiguration_t  {
		public:
			GlobalTypes::CUtlString m_name; // 0x0 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlVector<particles::ParticleControlPointDriver_t> m_drivers; // 0x8 | Schema_Atomic | Size: 0x18
			// char  m_drivers[0x18]; // 0x8 | Schema_Atomic | Size: 0x18
			particles::ParticlePreviewState_t m_previewState; // 0x20 | Schema_DeclaredClass | Size: 0x68
		};
		static_assert(offsetof(CS2::particles::ParticleControlPointConfiguration_t, m_name) == 0x0, "m_name in ParticleControlPointConfiguration_t should be at offset 0x0");
		static_assert(offsetof(CS2::particles::ParticleControlPointConfiguration_t, m_drivers) == 0x8, "m_drivers in ParticleControlPointConfiguration_t should be at offset 0x8");
		static_assert(offsetof(CS2::particles::ParticleControlPointConfiguration_t, m_previewState) == 0x20, "m_previewState in ParticleControlPointConfiguration_t should be at offset 0x20");
		static_assert(sizeof(CS2::particles::ParticleControlPointConfiguration_t) == 0x88, "ParticleControlPointConfiguration_t size should be 0x88");
	}
}
