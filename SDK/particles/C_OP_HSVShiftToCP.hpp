// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/particles/CParticleFunctionPreEmission.hpp>





using namespace GlobalTypes;
namespace CS2 {
	namespace particles {
		class C_OP_HSVShiftToCP : public CS2::particles::CParticleFunctionPreEmission {
		public:
			int32_t m_nColorCP; // 0x1d8 | Schema_Builtin | Size: 0x4
			int32_t m_nColorGemEnableCP; // 0x1dc | Schema_Builtin | Size: 0x4
			int32_t m_nOutputCP; // 0x1e0 | Schema_Builtin | Size: 0x4
			GlobalTypes::Color m_DefaultHSVColor; // 0x1e4 | Schema_Atomic | Size: 0x4
			S2_PAD(0x10); // End padding
		};
		static_assert(offsetof(CS2::particles::C_OP_HSVShiftToCP, m_nColorCP) == 0x1D8, "m_nColorCP in C_OP_HSVShiftToCP should be at offset 0x1D8");
		static_assert(offsetof(CS2::particles::C_OP_HSVShiftToCP, m_nColorGemEnableCP) == 0x1DC, "m_nColorGemEnableCP in C_OP_HSVShiftToCP should be at offset 0x1DC");
		static_assert(offsetof(CS2::particles::C_OP_HSVShiftToCP, m_nOutputCP) == 0x1E0, "m_nOutputCP in C_OP_HSVShiftToCP should be at offset 0x1E0");
		static_assert(offsetof(CS2::particles::C_OP_HSVShiftToCP, m_DefaultHSVColor) == 0x1E4, "m_DefaultHSVColor in C_OP_HSVShiftToCP should be at offset 0x1E4");
		static_assert(sizeof(CS2::particles::C_OP_HSVShiftToCP) == 0x1F8, "C_OP_HSVShiftToCP size should be 0x1F8");
	}
}
