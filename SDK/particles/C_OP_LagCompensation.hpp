// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>

#include <SDK/particles/CParticleFunctionOperator.hpp>



namespace CS2 {
	namespace particles {
		class C_OP_LagCompensation : public CS2::particles::CParticleFunctionOperator {
		public:
			int32_t m_nDesiredVelocityCP; // 0x1d0 | Schema_Builtin | Size: 0x4
			int32_t m_nLatencyCP; // 0x1d4 | Schema_Builtin | Size: 0x4
			int32_t m_nLatencyCPField; // 0x1d8 | Schema_Builtin | Size: 0x4
			int32_t m_nDesiredVelocityCPField; // 0x1dc | Schema_Builtin | Size: 0x4
		};
		static_assert(offsetof(CS2::particles::C_OP_LagCompensation, m_nDesiredVelocityCP) == 0x1D0, "m_nDesiredVelocityCP in C_OP_LagCompensation should be at offset 0x1D0");
		static_assert(offsetof(CS2::particles::C_OP_LagCompensation, m_nLatencyCP) == 0x1D4, "m_nLatencyCP in C_OP_LagCompensation should be at offset 0x1D4");
		static_assert(offsetof(CS2::particles::C_OP_LagCompensation, m_nLatencyCPField) == 0x1D8, "m_nLatencyCPField in C_OP_LagCompensation should be at offset 0x1D8");
		static_assert(offsetof(CS2::particles::C_OP_LagCompensation, m_nDesiredVelocityCPField) == 0x1DC, "m_nDesiredVelocityCPField in C_OP_LagCompensation should be at offset 0x1DC");
		static_assert(sizeof(CS2::particles::C_OP_LagCompensation) == 0x1E0, "C_OP_LagCompensation size should be 0x1E0");
	}
}
