// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>

#include <SDK/particleslib/CParticleCollectionRendererFloatInput.hpp>
#include <SDK/particles/SpriteCardPerParticleScale_t.hpp>



namespace CS2 {
	namespace particles {
		class TextureControls_t  {
		public:
			particleslib::CParticleCollectionRendererFloatInput m_flFinalTextureScaleU; // 0x0 | Schema_DeclaredClass | Size: 0x160
			particleslib::CParticleCollectionRendererFloatInput m_flFinalTextureScaleV; // 0x160 | Schema_DeclaredClass | Size: 0x160
			particleslib::CParticleCollectionRendererFloatInput m_flFinalTextureOffsetU; // 0x2c0 | Schema_DeclaredClass | Size: 0x160
			particleslib::CParticleCollectionRendererFloatInput m_flFinalTextureOffsetV; // 0x420 | Schema_DeclaredClass | Size: 0x160
			particleslib::CParticleCollectionRendererFloatInput m_flFinalTextureUVRotation; // 0x580 | Schema_DeclaredClass | Size: 0x160
			particleslib::CParticleCollectionRendererFloatInput m_flZoomScale; // 0x6e0 | Schema_DeclaredClass | Size: 0x160
			particleslib::CParticleCollectionRendererFloatInput m_flDistortion; // 0x840 | Schema_DeclaredClass | Size: 0x160
			bool m_bRandomizeOffsets; // 0x9a0 | Schema_Builtin | Size: 0x1
			bool m_bClampUVs; // 0x9a1 | Schema_Builtin | Size: 0x1
			S2_PAD(0x2);
			particles::SpriteCardPerParticleScale_t m_nPerParticleBlend; // 0x9a4 | Schema_DeclaredEnum | Size: 0x4
			particles::SpriteCardPerParticleScale_t m_nPerParticleScale; // 0x9a8 | Schema_DeclaredEnum | Size: 0x4
			particles::SpriteCardPerParticleScale_t m_nPerParticleOffsetU; // 0x9ac | Schema_DeclaredEnum | Size: 0x4
			particles::SpriteCardPerParticleScale_t m_nPerParticleOffsetV; // 0x9b0 | Schema_DeclaredEnum | Size: 0x4
			particles::SpriteCardPerParticleScale_t m_nPerParticleRotation; // 0x9b4 | Schema_DeclaredEnum | Size: 0x4
			particles::SpriteCardPerParticleScale_t m_nPerParticleZoom; // 0x9b8 | Schema_DeclaredEnum | Size: 0x4
			particles::SpriteCardPerParticleScale_t m_nPerParticleDistortion; // 0x9bc | Schema_DeclaredEnum | Size: 0x4
		};
		static_assert(offsetof(CS2::particles::TextureControls_t, m_flFinalTextureScaleU) == 0x0, "m_flFinalTextureScaleU in TextureControls_t should be at offset 0x0");
		static_assert(offsetof(CS2::particles::TextureControls_t, m_flFinalTextureScaleV) == 0x160, "m_flFinalTextureScaleV in TextureControls_t should be at offset 0x160");
		static_assert(offsetof(CS2::particles::TextureControls_t, m_flFinalTextureOffsetU) == 0x2C0, "m_flFinalTextureOffsetU in TextureControls_t should be at offset 0x2C0");
		static_assert(offsetof(CS2::particles::TextureControls_t, m_flFinalTextureOffsetV) == 0x420, "m_flFinalTextureOffsetV in TextureControls_t should be at offset 0x420");
		static_assert(offsetof(CS2::particles::TextureControls_t, m_flFinalTextureUVRotation) == 0x580, "m_flFinalTextureUVRotation in TextureControls_t should be at offset 0x580");
		static_assert(offsetof(CS2::particles::TextureControls_t, m_flZoomScale) == 0x6E0, "m_flZoomScale in TextureControls_t should be at offset 0x6E0");
		static_assert(offsetof(CS2::particles::TextureControls_t, m_flDistortion) == 0x840, "m_flDistortion in TextureControls_t should be at offset 0x840");
		static_assert(offsetof(CS2::particles::TextureControls_t, m_bRandomizeOffsets) == 0x9A0, "m_bRandomizeOffsets in TextureControls_t should be at offset 0x9A0");
		static_assert(offsetof(CS2::particles::TextureControls_t, m_bClampUVs) == 0x9A1, "m_bClampUVs in TextureControls_t should be at offset 0x9A1");
		static_assert(offsetof(CS2::particles::TextureControls_t, m_nPerParticleBlend) == 0x9A4, "m_nPerParticleBlend in TextureControls_t should be at offset 0x9A4");
		static_assert(offsetof(CS2::particles::TextureControls_t, m_nPerParticleScale) == 0x9A8, "m_nPerParticleScale in TextureControls_t should be at offset 0x9A8");
		static_assert(offsetof(CS2::particles::TextureControls_t, m_nPerParticleOffsetU) == 0x9AC, "m_nPerParticleOffsetU in TextureControls_t should be at offset 0x9AC");
		static_assert(offsetof(CS2::particles::TextureControls_t, m_nPerParticleOffsetV) == 0x9B0, "m_nPerParticleOffsetV in TextureControls_t should be at offset 0x9B0");
		static_assert(offsetof(CS2::particles::TextureControls_t, m_nPerParticleRotation) == 0x9B4, "m_nPerParticleRotation in TextureControls_t should be at offset 0x9B4");
		static_assert(offsetof(CS2::particles::TextureControls_t, m_nPerParticleZoom) == 0x9B8, "m_nPerParticleZoom in TextureControls_t should be at offset 0x9B8");
		static_assert(offsetof(CS2::particles::TextureControls_t, m_nPerParticleDistortion) == 0x9BC, "m_nPerParticleDistortion in TextureControls_t should be at offset 0x9BC");
		static_assert(sizeof(CS2::particles::TextureControls_t) == 0x9C0, "TextureControls_t size should be 0x9C0");
	}
}
