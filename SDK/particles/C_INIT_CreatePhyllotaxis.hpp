// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>

#include <SDK/particles/CParticleFunctionInitializer.hpp>



namespace CS2 {
	namespace particles {
		class C_INIT_CreatePhyllotaxis : public CS2::particles::CParticleFunctionInitializer {
		public:
			int32_t m_nControlPointNumber; // 0x1d8 | Schema_Builtin | Size: 0x4
			int32_t m_nScaleCP; // 0x1dc | Schema_Builtin | Size: 0x4
			int32_t m_nComponent; // 0x1e0 | Schema_Builtin | Size: 0x4
			float32 m_fRadCentCore; // 0x1e4 | Schema_Builtin | Size: 0x4
			float32 m_fRadPerPoint; // 0x1e8 | Schema_Builtin | Size: 0x4
			float32 m_fRadPerPointTo; // 0x1ec | Schema_Builtin | Size: 0x4
			float32 m_fpointAngle; // 0x1f0 | Schema_Builtin | Size: 0x4
			float32 m_fsizeOverall; // 0x1f4 | Schema_Builtin | Size: 0x4
			float32 m_fRadBias; // 0x1f8 | Schema_Builtin | Size: 0x4
			float32 m_fMinRad; // 0x1fc | Schema_Builtin | Size: 0x4
			float32 m_fDistBias; // 0x200 | Schema_Builtin | Size: 0x4
			bool m_bUseLocalCoords; // 0x204 | Schema_Builtin | Size: 0x1
			bool m_bUseWithContEmit; // 0x205 | Schema_Builtin | Size: 0x1
			bool m_bUseOrigRadius; // 0x206 | Schema_Builtin | Size: 0x1
			S2_PAD(0x1); // End padding
		};
		static_assert(offsetof(CS2::particles::C_INIT_CreatePhyllotaxis, m_nControlPointNumber) == 0x1D8, "m_nControlPointNumber in C_INIT_CreatePhyllotaxis should be at offset 0x1D8");
		static_assert(offsetof(CS2::particles::C_INIT_CreatePhyllotaxis, m_nScaleCP) == 0x1DC, "m_nScaleCP in C_INIT_CreatePhyllotaxis should be at offset 0x1DC");
		static_assert(offsetof(CS2::particles::C_INIT_CreatePhyllotaxis, m_nComponent) == 0x1E0, "m_nComponent in C_INIT_CreatePhyllotaxis should be at offset 0x1E0");
		static_assert(offsetof(CS2::particles::C_INIT_CreatePhyllotaxis, m_fRadCentCore) == 0x1E4, "m_fRadCentCore in C_INIT_CreatePhyllotaxis should be at offset 0x1E4");
		static_assert(offsetof(CS2::particles::C_INIT_CreatePhyllotaxis, m_fRadPerPoint) == 0x1E8, "m_fRadPerPoint in C_INIT_CreatePhyllotaxis should be at offset 0x1E8");
		static_assert(offsetof(CS2::particles::C_INIT_CreatePhyllotaxis, m_fRadPerPointTo) == 0x1EC, "m_fRadPerPointTo in C_INIT_CreatePhyllotaxis should be at offset 0x1EC");
		static_assert(offsetof(CS2::particles::C_INIT_CreatePhyllotaxis, m_fpointAngle) == 0x1F0, "m_fpointAngle in C_INIT_CreatePhyllotaxis should be at offset 0x1F0");
		static_assert(offsetof(CS2::particles::C_INIT_CreatePhyllotaxis, m_fsizeOverall) == 0x1F4, "m_fsizeOverall in C_INIT_CreatePhyllotaxis should be at offset 0x1F4");
		static_assert(offsetof(CS2::particles::C_INIT_CreatePhyllotaxis, m_fRadBias) == 0x1F8, "m_fRadBias in C_INIT_CreatePhyllotaxis should be at offset 0x1F8");
		static_assert(offsetof(CS2::particles::C_INIT_CreatePhyllotaxis, m_fMinRad) == 0x1FC, "m_fMinRad in C_INIT_CreatePhyllotaxis should be at offset 0x1FC");
		static_assert(offsetof(CS2::particles::C_INIT_CreatePhyllotaxis, m_fDistBias) == 0x200, "m_fDistBias in C_INIT_CreatePhyllotaxis should be at offset 0x200");
		static_assert(offsetof(CS2::particles::C_INIT_CreatePhyllotaxis, m_bUseLocalCoords) == 0x204, "m_bUseLocalCoords in C_INIT_CreatePhyllotaxis should be at offset 0x204");
		static_assert(offsetof(CS2::particles::C_INIT_CreatePhyllotaxis, m_bUseWithContEmit) == 0x205, "m_bUseWithContEmit in C_INIT_CreatePhyllotaxis should be at offset 0x205");
		static_assert(offsetof(CS2::particles::C_INIT_CreatePhyllotaxis, m_bUseOrigRadius) == 0x206, "m_bUseOrigRadius in C_INIT_CreatePhyllotaxis should be at offset 0x206");
		static_assert(sizeof(CS2::particles::C_INIT_CreatePhyllotaxis) == 0x208, "C_INIT_CreatePhyllotaxis size should be 0x208");
	}
}
