// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/particles/CParticleFunctionPreEmission.hpp>





using namespace GlobalTypes;
namespace CS2 {
	namespace particles {
		class C_OP_SetControlPointPositions : public CS2::particles::CParticleFunctionPreEmission {
		public:
			bool m_bUseWorldLocation; // 0x1d8 | Schema_Builtin | Size: 0x1
			bool m_bOrient; // 0x1d9 | Schema_Builtin | Size: 0x1
			bool m_bSetOnce; // 0x1da | Schema_Builtin | Size: 0x1
			S2_PAD(0x1);
			int32_t m_nCP1; // 0x1dc | Schema_Builtin | Size: 0x4
			int32_t m_nCP2; // 0x1e0 | Schema_Builtin | Size: 0x4
			int32_t m_nCP3; // 0x1e4 | Schema_Builtin | Size: 0x4
			int32_t m_nCP4; // 0x1e8 | Schema_Builtin | Size: 0x4
			GlobalTypes::Vector m_vecCP1Pos; // 0x1ec | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vecCP2Pos; // 0x1f8 | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vecCP3Pos; // 0x204 | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vecCP4Pos; // 0x210 | Schema_Atomic | Size: 0xc
			int32_t m_nHeadLocation; // 0x21c | Schema_Builtin | Size: 0x4
		};
		static_assert(offsetof(CS2::particles::C_OP_SetControlPointPositions, m_bUseWorldLocation) == 0x1D8, "m_bUseWorldLocation in C_OP_SetControlPointPositions should be at offset 0x1D8");
		static_assert(offsetof(CS2::particles::C_OP_SetControlPointPositions, m_bOrient) == 0x1D9, "m_bOrient in C_OP_SetControlPointPositions should be at offset 0x1D9");
		static_assert(offsetof(CS2::particles::C_OP_SetControlPointPositions, m_bSetOnce) == 0x1DA, "m_bSetOnce in C_OP_SetControlPointPositions should be at offset 0x1DA");
		static_assert(offsetof(CS2::particles::C_OP_SetControlPointPositions, m_nCP1) == 0x1DC, "m_nCP1 in C_OP_SetControlPointPositions should be at offset 0x1DC");
		static_assert(offsetof(CS2::particles::C_OP_SetControlPointPositions, m_nCP2) == 0x1E0, "m_nCP2 in C_OP_SetControlPointPositions should be at offset 0x1E0");
		static_assert(offsetof(CS2::particles::C_OP_SetControlPointPositions, m_nCP3) == 0x1E4, "m_nCP3 in C_OP_SetControlPointPositions should be at offset 0x1E4");
		static_assert(offsetof(CS2::particles::C_OP_SetControlPointPositions, m_nCP4) == 0x1E8, "m_nCP4 in C_OP_SetControlPointPositions should be at offset 0x1E8");
		static_assert(offsetof(CS2::particles::C_OP_SetControlPointPositions, m_vecCP1Pos) == 0x1EC, "m_vecCP1Pos in C_OP_SetControlPointPositions should be at offset 0x1EC");
		static_assert(offsetof(CS2::particles::C_OP_SetControlPointPositions, m_vecCP2Pos) == 0x1F8, "m_vecCP2Pos in C_OP_SetControlPointPositions should be at offset 0x1F8");
		static_assert(offsetof(CS2::particles::C_OP_SetControlPointPositions, m_vecCP3Pos) == 0x204, "m_vecCP3Pos in C_OP_SetControlPointPositions should be at offset 0x204");
		static_assert(offsetof(CS2::particles::C_OP_SetControlPointPositions, m_vecCP4Pos) == 0x210, "m_vecCP4Pos in C_OP_SetControlPointPositions should be at offset 0x210");
		static_assert(offsetof(CS2::particles::C_OP_SetControlPointPositions, m_nHeadLocation) == 0x21C, "m_nHeadLocation in C_OP_SetControlPointPositions should be at offset 0x21C");
		static_assert(sizeof(CS2::particles::C_OP_SetControlPointPositions) == 0x220, "C_OP_SetControlPointPositions size should be 0x220");
	}
}
