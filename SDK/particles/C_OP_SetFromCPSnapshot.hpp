// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>

#include <SDK/particles/CParticleFunctionOperator.hpp>
#include <SDK/particles/ParticleAttributeIndex_t.hpp>
#include <SDK/particleslib/CParticleCollectionFloatInput.hpp>
#include <SDK/particleslib/CPerParticleFloatInput.hpp>



namespace CS2 {
	namespace particles {
		class C_OP_SetFromCPSnapshot : public CS2::particles::CParticleFunctionOperator {
		public:
			int32_t m_nControlPointNumber; // 0x1d0 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4);
			GlobalTypes::CUtlString m_strSnapshotSubset; // 0x1d8 | Schema_Atomic | Size: 0x8
			particles::ParticleAttributeIndex_t m_nAttributeToRead; // 0x1e0 | Schema_DeclaredClass | Size: 0x4
			particles::ParticleAttributeIndex_t m_nAttributeToWrite; // 0x1e4 | Schema_DeclaredClass | Size: 0x4
			int32_t m_nLocalSpaceCP; // 0x1e8 | Schema_Builtin | Size: 0x4
			bool m_bRandom; // 0x1ec | Schema_Builtin | Size: 0x1
			bool m_bReverse; // 0x1ed | Schema_Builtin | Size: 0x1
			S2_PAD(0x2);
			int32_t m_nRandomSeed; // 0x1f0 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4);
			particleslib::CParticleCollectionFloatInput m_nSnapShotStartPoint; // 0x1f8 | Schema_DeclaredClass | Size: 0x170
			particleslib::CParticleCollectionFloatInput m_nSnapShotIncrement; // 0x368 | Schema_DeclaredClass | Size: 0x170
			particleslib::CPerParticleFloatInput m_flInterpolation; // 0x4d8 | Schema_DeclaredClass | Size: 0x170
			bool m_bSubSample; // 0x648 | Schema_Builtin | Size: 0x1
			bool m_bPrev; // 0x649 | Schema_Builtin | Size: 0x1
			S2_PAD(0x6); // End padding
		};
		static_assert(offsetof(CS2::particles::C_OP_SetFromCPSnapshot, m_nControlPointNumber) == 0x1D0, "m_nControlPointNumber in C_OP_SetFromCPSnapshot should be at offset 0x1D0");
		static_assert(offsetof(CS2::particles::C_OP_SetFromCPSnapshot, m_strSnapshotSubset) == 0x1D8, "m_strSnapshotSubset in C_OP_SetFromCPSnapshot should be at offset 0x1D8");
		static_assert(offsetof(CS2::particles::C_OP_SetFromCPSnapshot, m_nAttributeToRead) == 0x1E0, "m_nAttributeToRead in C_OP_SetFromCPSnapshot should be at offset 0x1E0");
		static_assert(offsetof(CS2::particles::C_OP_SetFromCPSnapshot, m_nAttributeToWrite) == 0x1E4, "m_nAttributeToWrite in C_OP_SetFromCPSnapshot should be at offset 0x1E4");
		static_assert(offsetof(CS2::particles::C_OP_SetFromCPSnapshot, m_nLocalSpaceCP) == 0x1E8, "m_nLocalSpaceCP in C_OP_SetFromCPSnapshot should be at offset 0x1E8");
		static_assert(offsetof(CS2::particles::C_OP_SetFromCPSnapshot, m_bRandom) == 0x1EC, "m_bRandom in C_OP_SetFromCPSnapshot should be at offset 0x1EC");
		static_assert(offsetof(CS2::particles::C_OP_SetFromCPSnapshot, m_bReverse) == 0x1ED, "m_bReverse in C_OP_SetFromCPSnapshot should be at offset 0x1ED");
		static_assert(offsetof(CS2::particles::C_OP_SetFromCPSnapshot, m_nRandomSeed) == 0x1F0, "m_nRandomSeed in C_OP_SetFromCPSnapshot should be at offset 0x1F0");
		static_assert(offsetof(CS2::particles::C_OP_SetFromCPSnapshot, m_nSnapShotStartPoint) == 0x1F8, "m_nSnapShotStartPoint in C_OP_SetFromCPSnapshot should be at offset 0x1F8");
		static_assert(offsetof(CS2::particles::C_OP_SetFromCPSnapshot, m_nSnapShotIncrement) == 0x368, "m_nSnapShotIncrement in C_OP_SetFromCPSnapshot should be at offset 0x368");
		static_assert(offsetof(CS2::particles::C_OP_SetFromCPSnapshot, m_flInterpolation) == 0x4D8, "m_flInterpolation in C_OP_SetFromCPSnapshot should be at offset 0x4D8");
		static_assert(offsetof(CS2::particles::C_OP_SetFromCPSnapshot, m_bSubSample) == 0x648, "m_bSubSample in C_OP_SetFromCPSnapshot should be at offset 0x648");
		static_assert(offsetof(CS2::particles::C_OP_SetFromCPSnapshot, m_bPrev) == 0x649, "m_bPrev in C_OP_SetFromCPSnapshot should be at offset 0x649");
		static_assert(sizeof(CS2::particles::C_OP_SetFromCPSnapshot) == 0x650, "C_OP_SetFromCPSnapshot size should be 0x650");
	}
}
