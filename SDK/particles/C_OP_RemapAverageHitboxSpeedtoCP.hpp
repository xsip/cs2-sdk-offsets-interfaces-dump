// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/particles/CParticleFunctionPreEmission.hpp>
#include <SDK/particles/ParticleHitboxDataSelection_t.hpp>
#include <SDK/particleslib/CParticleCollectionFloatInput.hpp>
#include <SDK/particleslib/CParticleCollectionVecInput.hpp>





using namespace GlobalTypes;
namespace CS2 {
	namespace particles {
		class C_OP_RemapAverageHitboxSpeedtoCP : public CS2::particles::CParticleFunctionPreEmission {
		public:
			int32_t m_nInControlPointNumber; // 0x1d8 | Schema_Builtin | Size: 0x4
			int32_t m_nOutControlPointNumber; // 0x1dc | Schema_Builtin | Size: 0x4
			int32_t m_nField; // 0x1e0 | Schema_Builtin | Size: 0x4
			particles::ParticleHitboxDataSelection_t m_nHitboxDataType; // 0x1e4 | Schema_DeclaredEnum | Size: 0x4
			particleslib::CParticleCollectionFloatInput m_flInputMin; // 0x1e8 | Schema_DeclaredClass | Size: 0x170
			particleslib::CParticleCollectionFloatInput m_flInputMax; // 0x358 | Schema_DeclaredClass | Size: 0x170
			particleslib::CParticleCollectionFloatInput m_flOutputMin; // 0x4c8 | Schema_DeclaredClass | Size: 0x170
			particleslib::CParticleCollectionFloatInput m_flOutputMax; // 0x638 | Schema_DeclaredClass | Size: 0x170
			int32_t m_nHeightControlPointNumber; // 0x7a8 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4);
			particleslib::CParticleCollectionVecInput m_vecComparisonVelocity; // 0x7b0 | Schema_DeclaredClass | Size: 0x6b8
			char m_HitboxSetName[128]; // 0xe68 | Schema_FixedArray | Size: 0x80
		};
		static_assert(offsetof(CS2::particles::C_OP_RemapAverageHitboxSpeedtoCP, m_nInControlPointNumber) == 0x1D8, "m_nInControlPointNumber in C_OP_RemapAverageHitboxSpeedtoCP should be at offset 0x1D8");
		static_assert(offsetof(CS2::particles::C_OP_RemapAverageHitboxSpeedtoCP, m_nOutControlPointNumber) == 0x1DC, "m_nOutControlPointNumber in C_OP_RemapAverageHitboxSpeedtoCP should be at offset 0x1DC");
		static_assert(offsetof(CS2::particles::C_OP_RemapAverageHitboxSpeedtoCP, m_nField) == 0x1E0, "m_nField in C_OP_RemapAverageHitboxSpeedtoCP should be at offset 0x1E0");
		static_assert(offsetof(CS2::particles::C_OP_RemapAverageHitboxSpeedtoCP, m_nHitboxDataType) == 0x1E4, "m_nHitboxDataType in C_OP_RemapAverageHitboxSpeedtoCP should be at offset 0x1E4");
		static_assert(offsetof(CS2::particles::C_OP_RemapAverageHitboxSpeedtoCP, m_flInputMin) == 0x1E8, "m_flInputMin in C_OP_RemapAverageHitboxSpeedtoCP should be at offset 0x1E8");
		static_assert(offsetof(CS2::particles::C_OP_RemapAverageHitboxSpeedtoCP, m_flInputMax) == 0x358, "m_flInputMax in C_OP_RemapAverageHitboxSpeedtoCP should be at offset 0x358");
		static_assert(offsetof(CS2::particles::C_OP_RemapAverageHitboxSpeedtoCP, m_flOutputMin) == 0x4C8, "m_flOutputMin in C_OP_RemapAverageHitboxSpeedtoCP should be at offset 0x4C8");
		static_assert(offsetof(CS2::particles::C_OP_RemapAverageHitboxSpeedtoCP, m_flOutputMax) == 0x638, "m_flOutputMax in C_OP_RemapAverageHitboxSpeedtoCP should be at offset 0x638");
		static_assert(offsetof(CS2::particles::C_OP_RemapAverageHitboxSpeedtoCP, m_nHeightControlPointNumber) == 0x7A8, "m_nHeightControlPointNumber in C_OP_RemapAverageHitboxSpeedtoCP should be at offset 0x7A8");
		static_assert(offsetof(CS2::particles::C_OP_RemapAverageHitboxSpeedtoCP, m_vecComparisonVelocity) == 0x7B0, "m_vecComparisonVelocity in C_OP_RemapAverageHitboxSpeedtoCP should be at offset 0x7B0");
		static_assert(offsetof(CS2::particles::C_OP_RemapAverageHitboxSpeedtoCP, m_HitboxSetName) == 0xE68, "m_HitboxSetName in C_OP_RemapAverageHitboxSpeedtoCP should be at offset 0xE68");
		static_assert(sizeof(CS2::particles::C_OP_RemapAverageHitboxSpeedtoCP) == 0xEE8, "C_OP_RemapAverageHitboxSpeedtoCP size should be 0xEE8");
	}
}
