// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>

#include <SDK/particles/CParticleFunctionPreEmission.hpp>
#include <SDK/particleslib/CParticleCollectionFloatInput.hpp>



namespace CS2 {
	namespace particles {
		class C_OP_QuantizeCPComponent : public CS2::particles::CParticleFunctionPreEmission {
		public:
			particleslib::CParticleCollectionFloatInput m_flInputValue; // 0x1d8 | Schema_DeclaredClass | Size: 0x170
			int32_t m_nCPOutput; // 0x348 | Schema_Builtin | Size: 0x4
			int32_t m_nOutVectorField; // 0x34c | Schema_Builtin | Size: 0x4
			particleslib::CParticleCollectionFloatInput m_flQuantizeValue; // 0x350 | Schema_DeclaredClass | Size: 0x170
		};
		static_assert(offsetof(CS2::particles::C_OP_QuantizeCPComponent, m_flInputValue) == 0x1D8, "m_flInputValue in C_OP_QuantizeCPComponent should be at offset 0x1D8");
		static_assert(offsetof(CS2::particles::C_OP_QuantizeCPComponent, m_nCPOutput) == 0x348, "m_nCPOutput in C_OP_QuantizeCPComponent should be at offset 0x348");
		static_assert(offsetof(CS2::particles::C_OP_QuantizeCPComponent, m_nOutVectorField) == 0x34C, "m_nOutVectorField in C_OP_QuantizeCPComponent should be at offset 0x34C");
		static_assert(offsetof(CS2::particles::C_OP_QuantizeCPComponent, m_flQuantizeValue) == 0x350, "m_flQuantizeValue in C_OP_QuantizeCPComponent should be at offset 0x350");
		static_assert(sizeof(CS2::particles::C_OP_QuantizeCPComponent) == 0x4C0, "C_OP_QuantizeCPComponent size should be 0x4C0");
	}
}
