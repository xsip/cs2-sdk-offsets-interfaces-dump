// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>

#include <SDK/particles/CParticleFunctionInitializer.hpp>
#include <SDK/particleslib/CPerParticleVecInput.hpp>
#include <SDK/particleslib/CPerParticleFloatInput.hpp>
#include <SDK/particleslib/CParticleTransformInput.hpp>



namespace CS2 {
	namespace particles {
		class C_INIT_InitialVelocityNoise : public CS2::particles::CParticleFunctionInitializer {
		public:
			GlobalTypes::Vector m_vecAbsVal; // 0x1d8 | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vecAbsValInv; // 0x1e4 | Schema_Atomic | Size: 0xc
			particleslib::CPerParticleVecInput m_vecOffsetLoc; // 0x1f0 | Schema_DeclaredClass | Size: 0x6b8
			particleslib::CPerParticleFloatInput m_flOffset; // 0x8a8 | Schema_DeclaredClass | Size: 0x170
			particleslib::CPerParticleVecInput m_vecOutputMin; // 0xa18 | Schema_DeclaredClass | Size: 0x6b8
			particleslib::CPerParticleVecInput m_vecOutputMax; // 0x10d0 | Schema_DeclaredClass | Size: 0x6b8
			particleslib::CPerParticleFloatInput m_flNoiseScale; // 0x1788 | Schema_DeclaredClass | Size: 0x170
			particleslib::CPerParticleFloatInput m_flNoiseScaleLoc; // 0x18f8 | Schema_DeclaredClass | Size: 0x170
			particleslib::CParticleTransformInput m_TransformInput; // 0x1a68 | Schema_DeclaredClass | Size: 0x68
			bool m_bIgnoreDt; // 0x1ad0 | Schema_Builtin | Size: 0x1
			S2_PAD(0x7); // End padding
		};
		static_assert(offsetof(CS2::particles::C_INIT_InitialVelocityNoise, m_vecAbsVal) == 0x1D8, "m_vecAbsVal in C_INIT_InitialVelocityNoise should be at offset 0x1D8");
		static_assert(offsetof(CS2::particles::C_INIT_InitialVelocityNoise, m_vecAbsValInv) == 0x1E4, "m_vecAbsValInv in C_INIT_InitialVelocityNoise should be at offset 0x1E4");
		static_assert(offsetof(CS2::particles::C_INIT_InitialVelocityNoise, m_vecOffsetLoc) == 0x1F0, "m_vecOffsetLoc in C_INIT_InitialVelocityNoise should be at offset 0x1F0");
		static_assert(offsetof(CS2::particles::C_INIT_InitialVelocityNoise, m_flOffset) == 0x8A8, "m_flOffset in C_INIT_InitialVelocityNoise should be at offset 0x8A8");
		static_assert(offsetof(CS2::particles::C_INIT_InitialVelocityNoise, m_vecOutputMin) == 0xA18, "m_vecOutputMin in C_INIT_InitialVelocityNoise should be at offset 0xA18");
		static_assert(offsetof(CS2::particles::C_INIT_InitialVelocityNoise, m_vecOutputMax) == 0x10D0, "m_vecOutputMax in C_INIT_InitialVelocityNoise should be at offset 0x10D0");
		static_assert(offsetof(CS2::particles::C_INIT_InitialVelocityNoise, m_flNoiseScale) == 0x1788, "m_flNoiseScale in C_INIT_InitialVelocityNoise should be at offset 0x1788");
		static_assert(offsetof(CS2::particles::C_INIT_InitialVelocityNoise, m_flNoiseScaleLoc) == 0x18F8, "m_flNoiseScaleLoc in C_INIT_InitialVelocityNoise should be at offset 0x18F8");
		static_assert(offsetof(CS2::particles::C_INIT_InitialVelocityNoise, m_TransformInput) == 0x1A68, "m_TransformInput in C_INIT_InitialVelocityNoise should be at offset 0x1A68");
		static_assert(offsetof(CS2::particles::C_INIT_InitialVelocityNoise, m_bIgnoreDt) == 0x1AD0, "m_bIgnoreDt in C_INIT_InitialVelocityNoise should be at offset 0x1AD0");
		static_assert(sizeof(CS2::particles::C_INIT_InitialVelocityNoise) == 0x1AD8, "C_INIT_InitialVelocityNoise size should be 0x1AD8");
	}
}
