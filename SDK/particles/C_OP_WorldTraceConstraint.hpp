// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>

#include <SDK/particles/CParticleFunctionConstraint.hpp>
#include <SDK/particles/ParticleCollisionMode_t.hpp>
#include <SDK/particles/ParticleTraceSet_t.hpp>
#include <SDK/particleslib/CPerParticleFloatInput.hpp>
#include <SDK/particles/ParticleAttributeIndex_t.hpp>



namespace CS2 {
	namespace particles {
		class C_OP_WorldTraceConstraint : public CS2::particles::CParticleFunctionConstraint {
		public:
			int32_t m_nCP; // 0x1c0 | Schema_Builtin | Size: 0x4
			GlobalTypes::Vector m_vecCpOffset; // 0x1c4 | Schema_Atomic | Size: 0xc
			particles::ParticleCollisionMode_t m_nCollisionMode; // 0x1d0 | Schema_DeclaredEnum | Size: 0x4
			particles::ParticleCollisionMode_t m_nCollisionModeMin; // 0x1d4 | Schema_DeclaredEnum | Size: 0x4
			particles::ParticleTraceSet_t m_nTraceSet; // 0x1d8 | Schema_DeclaredEnum | Size: 0x4
			char m_CollisionGroupName[128]; // 0x1dc | Schema_FixedArray | Size: 0x80
			bool m_bWorldOnly; // 0x25c | Schema_Builtin | Size: 0x1
			bool m_bBrushOnly; // 0x25d | Schema_Builtin | Size: 0x1
			bool m_bIncludeWater; // 0x25e | Schema_Builtin | Size: 0x1
			S2_PAD(0x1);
			int32_t m_nIgnoreCP; // 0x260 | Schema_Builtin | Size: 0x4
			float32 m_flCpMovementTolerance; // 0x264 | Schema_Builtin | Size: 0x4
			float32 m_flRetestRate; // 0x268 | Schema_Builtin | Size: 0x4
			float32 m_flTraceTolerance; // 0x26c | Schema_Builtin | Size: 0x4
			float32 m_flCollisionConfirmationSpeed; // 0x270 | Schema_Builtin | Size: 0x4
			float32 m_nMaxTracesPerFrame; // 0x274 | Schema_Builtin | Size: 0x4
			particleslib::CPerParticleFloatInput m_flRadiusScale; // 0x278 | Schema_DeclaredClass | Size: 0x160
			particleslib::CPerParticleFloatInput m_flBounceAmount; // 0x3d8 | Schema_DeclaredClass | Size: 0x160
			particleslib::CPerParticleFloatInput m_flSlideAmount; // 0x538 | Schema_DeclaredClass | Size: 0x160
			particleslib::CPerParticleFloatInput m_flRandomDirScale; // 0x698 | Schema_DeclaredClass | Size: 0x160
			bool m_bDecayBounce; // 0x7f8 | Schema_Builtin | Size: 0x1
			bool m_bKillonContact; // 0x7f9 | Schema_Builtin | Size: 0x1
			S2_PAD(0x2);
			float32 m_flMinSpeed; // 0x7fc | Schema_Builtin | Size: 0x4
			bool m_bSetNormal; // 0x800 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			particles::ParticleAttributeIndex_t m_nStickOnCollisionField; // 0x804 | Schema_DeclaredClass | Size: 0x4
			particleslib::CPerParticleFloatInput m_flStopSpeed; // 0x808 | Schema_DeclaredClass | Size: 0x160
			particles::ParticleAttributeIndex_t m_nEntityStickDataField; // 0x968 | Schema_DeclaredClass | Size: 0x4
			particles::ParticleAttributeIndex_t m_nEntityStickNormalField; // 0x96c | Schema_DeclaredClass | Size: 0x4
		};
		static_assert(offsetof(CS2::particles::C_OP_WorldTraceConstraint, m_nCP) == 0x1C0, "m_nCP in C_OP_WorldTraceConstraint should be at offset 0x1C0");
		static_assert(offsetof(CS2::particles::C_OP_WorldTraceConstraint, m_vecCpOffset) == 0x1C4, "m_vecCpOffset in C_OP_WorldTraceConstraint should be at offset 0x1C4");
		static_assert(offsetof(CS2::particles::C_OP_WorldTraceConstraint, m_nCollisionMode) == 0x1D0, "m_nCollisionMode in C_OP_WorldTraceConstraint should be at offset 0x1D0");
		static_assert(offsetof(CS2::particles::C_OP_WorldTraceConstraint, m_nCollisionModeMin) == 0x1D4, "m_nCollisionModeMin in C_OP_WorldTraceConstraint should be at offset 0x1D4");
		static_assert(offsetof(CS2::particles::C_OP_WorldTraceConstraint, m_nTraceSet) == 0x1D8, "m_nTraceSet in C_OP_WorldTraceConstraint should be at offset 0x1D8");
		static_assert(offsetof(CS2::particles::C_OP_WorldTraceConstraint, m_CollisionGroupName) == 0x1DC, "m_CollisionGroupName in C_OP_WorldTraceConstraint should be at offset 0x1DC");
		static_assert(offsetof(CS2::particles::C_OP_WorldTraceConstraint, m_bWorldOnly) == 0x25C, "m_bWorldOnly in C_OP_WorldTraceConstraint should be at offset 0x25C");
		static_assert(offsetof(CS2::particles::C_OP_WorldTraceConstraint, m_bBrushOnly) == 0x25D, "m_bBrushOnly in C_OP_WorldTraceConstraint should be at offset 0x25D");
		static_assert(offsetof(CS2::particles::C_OP_WorldTraceConstraint, m_bIncludeWater) == 0x25E, "m_bIncludeWater in C_OP_WorldTraceConstraint should be at offset 0x25E");
		static_assert(offsetof(CS2::particles::C_OP_WorldTraceConstraint, m_nIgnoreCP) == 0x260, "m_nIgnoreCP in C_OP_WorldTraceConstraint should be at offset 0x260");
		static_assert(offsetof(CS2::particles::C_OP_WorldTraceConstraint, m_flCpMovementTolerance) == 0x264, "m_flCpMovementTolerance in C_OP_WorldTraceConstraint should be at offset 0x264");
		static_assert(offsetof(CS2::particles::C_OP_WorldTraceConstraint, m_flRetestRate) == 0x268, "m_flRetestRate in C_OP_WorldTraceConstraint should be at offset 0x268");
		static_assert(offsetof(CS2::particles::C_OP_WorldTraceConstraint, m_flTraceTolerance) == 0x26C, "m_flTraceTolerance in C_OP_WorldTraceConstraint should be at offset 0x26C");
		static_assert(offsetof(CS2::particles::C_OP_WorldTraceConstraint, m_flCollisionConfirmationSpeed) == 0x270, "m_flCollisionConfirmationSpeed in C_OP_WorldTraceConstraint should be at offset 0x270");
		static_assert(offsetof(CS2::particles::C_OP_WorldTraceConstraint, m_nMaxTracesPerFrame) == 0x274, "m_nMaxTracesPerFrame in C_OP_WorldTraceConstraint should be at offset 0x274");
		static_assert(offsetof(CS2::particles::C_OP_WorldTraceConstraint, m_flRadiusScale) == 0x278, "m_flRadiusScale in C_OP_WorldTraceConstraint should be at offset 0x278");
		static_assert(offsetof(CS2::particles::C_OP_WorldTraceConstraint, m_flBounceAmount) == 0x3D8, "m_flBounceAmount in C_OP_WorldTraceConstraint should be at offset 0x3D8");
		static_assert(offsetof(CS2::particles::C_OP_WorldTraceConstraint, m_flSlideAmount) == 0x538, "m_flSlideAmount in C_OP_WorldTraceConstraint should be at offset 0x538");
		static_assert(offsetof(CS2::particles::C_OP_WorldTraceConstraint, m_flRandomDirScale) == 0x698, "m_flRandomDirScale in C_OP_WorldTraceConstraint should be at offset 0x698");
		static_assert(offsetof(CS2::particles::C_OP_WorldTraceConstraint, m_bDecayBounce) == 0x7F8, "m_bDecayBounce in C_OP_WorldTraceConstraint should be at offset 0x7F8");
		static_assert(offsetof(CS2::particles::C_OP_WorldTraceConstraint, m_bKillonContact) == 0x7F9, "m_bKillonContact in C_OP_WorldTraceConstraint should be at offset 0x7F9");
		static_assert(offsetof(CS2::particles::C_OP_WorldTraceConstraint, m_flMinSpeed) == 0x7FC, "m_flMinSpeed in C_OP_WorldTraceConstraint should be at offset 0x7FC");
		static_assert(offsetof(CS2::particles::C_OP_WorldTraceConstraint, m_bSetNormal) == 0x800, "m_bSetNormal in C_OP_WorldTraceConstraint should be at offset 0x800");
		static_assert(offsetof(CS2::particles::C_OP_WorldTraceConstraint, m_nStickOnCollisionField) == 0x804, "m_nStickOnCollisionField in C_OP_WorldTraceConstraint should be at offset 0x804");
		static_assert(offsetof(CS2::particles::C_OP_WorldTraceConstraint, m_flStopSpeed) == 0x808, "m_flStopSpeed in C_OP_WorldTraceConstraint should be at offset 0x808");
		static_assert(offsetof(CS2::particles::C_OP_WorldTraceConstraint, m_nEntityStickDataField) == 0x968, "m_nEntityStickDataField in C_OP_WorldTraceConstraint should be at offset 0x968");
		static_assert(offsetof(CS2::particles::C_OP_WorldTraceConstraint, m_nEntityStickNormalField) == 0x96C, "m_nEntityStickNormalField in C_OP_WorldTraceConstraint should be at offset 0x96C");
		static_assert(sizeof(CS2::particles::C_OP_WorldTraceConstraint) == 0x970, "C_OP_WorldTraceConstraint size should be 0x970");
	}
}
