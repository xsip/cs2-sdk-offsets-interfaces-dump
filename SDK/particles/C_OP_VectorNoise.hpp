// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/particles/CParticleFunctionOperator.hpp>
#include <SDK/particles/ParticleAttributeIndex_t.hpp>





using namespace GlobalTypes;
namespace CS2 {
	namespace particles {
		class C_OP_VectorNoise : public CS2::particles::CParticleFunctionOperator {
		public:
			particles::ParticleAttributeIndex_t m_nFieldOutput; // 0x1d0 | Schema_DeclaredClass | Size: 0x4
			GlobalTypes::Vector m_vecOutputMin; // 0x1d4 | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vecOutputMax; // 0x1e0 | Schema_Atomic | Size: 0xc
			float32 m_fl4NoiseScale; // 0x1ec | Schema_Builtin | Size: 0x4
			bool m_bAdditive; // 0x1f0 | Schema_Builtin | Size: 0x1
			bool m_bOffset; // 0x1f1 | Schema_Builtin | Size: 0x1
			S2_PAD(0x2);
			float32 m_flNoiseAnimationTimeScale; // 0x1f4 | Schema_Builtin | Size: 0x4
		};
		static_assert(offsetof(CS2::particles::C_OP_VectorNoise, m_nFieldOutput) == 0x1D0, "m_nFieldOutput in C_OP_VectorNoise should be at offset 0x1D0");
		static_assert(offsetof(CS2::particles::C_OP_VectorNoise, m_vecOutputMin) == 0x1D4, "m_vecOutputMin in C_OP_VectorNoise should be at offset 0x1D4");
		static_assert(offsetof(CS2::particles::C_OP_VectorNoise, m_vecOutputMax) == 0x1E0, "m_vecOutputMax in C_OP_VectorNoise should be at offset 0x1E0");
		static_assert(offsetof(CS2::particles::C_OP_VectorNoise, m_fl4NoiseScale) == 0x1EC, "m_fl4NoiseScale in C_OP_VectorNoise should be at offset 0x1EC");
		static_assert(offsetof(CS2::particles::C_OP_VectorNoise, m_bAdditive) == 0x1F0, "m_bAdditive in C_OP_VectorNoise should be at offset 0x1F0");
		static_assert(offsetof(CS2::particles::C_OP_VectorNoise, m_bOffset) == 0x1F1, "m_bOffset in C_OP_VectorNoise should be at offset 0x1F1");
		static_assert(offsetof(CS2::particles::C_OP_VectorNoise, m_flNoiseAnimationTimeScale) == 0x1F4, "m_flNoiseAnimationTimeScale in C_OP_VectorNoise should be at offset 0x1F4");
		static_assert(sizeof(CS2::particles::C_OP_VectorNoise) == 0x1F8, "C_OP_VectorNoise size should be 0x1F8");
	}
}
