// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/particles/ParticleDetailLevel_t.hpp>



namespace CS2 {
	namespace particles {
		class ParticleChildrenInfo_t  {
		public:
			// GlobalTypes::CStrongHandle< resourcesystem::InfoForResourceTypeIParticleSystemDefinition > m_ChildRef; // 0x0 | Schema_Atomic | Size: 0x8
			char  m_ChildRef[0x8]; // 0x0 | Schema_Atomic | Size: 0x8
			float32 m_flDelay; // 0x8 | Schema_Builtin | Size: 0x4
			bool m_bEndCap; // 0xc | Schema_Builtin | Size: 0x1
			bool m_bDisableChild; // 0xd | Schema_Builtin | Size: 0x1
			S2_PAD(0x2);
			particles::ParticleDetailLevel_t m_nDetailLevel; // 0x10 | Schema_DeclaredEnum | Size: 0x4
			S2_PAD(0xc); // End padding
		};
		static_assert(offsetof(CS2::particles::ParticleChildrenInfo_t, m_ChildRef) == 0x0, "m_ChildRef in ParticleChildrenInfo_t should be at offset 0x0");
		static_assert(offsetof(CS2::particles::ParticleChildrenInfo_t, m_flDelay) == 0x8, "m_flDelay in ParticleChildrenInfo_t should be at offset 0x8");
		static_assert(offsetof(CS2::particles::ParticleChildrenInfo_t, m_bEndCap) == 0xC, "m_bEndCap in ParticleChildrenInfo_t should be at offset 0xC");
		static_assert(offsetof(CS2::particles::ParticleChildrenInfo_t, m_bDisableChild) == 0xD, "m_bDisableChild in ParticleChildrenInfo_t should be at offset 0xD");
		static_assert(offsetof(CS2::particles::ParticleChildrenInfo_t, m_nDetailLevel) == 0x10, "m_nDetailLevel in ParticleChildrenInfo_t should be at offset 0x10");
		static_assert(sizeof(CS2::particles::ParticleChildrenInfo_t) == 0x20, "ParticleChildrenInfo_t size should be 0x20");
	}
}
