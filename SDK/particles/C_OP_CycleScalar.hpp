// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>

#include <SDK/particles/CParticleFunctionOperator.hpp>
#include <SDK/particles/ParticleAttributeIndex_t.hpp>
#include <SDK/particles/ParticleSetMethod_t.hpp>



namespace CS2 {
	namespace particles {
		class C_OP_CycleScalar : public CS2::particles::CParticleFunctionOperator {
		public:
			particles::ParticleAttributeIndex_t m_nDestField; // 0x1d0 | Schema_DeclaredClass | Size: 0x4
			float32 m_flStartValue; // 0x1d4 | Schema_Builtin | Size: 0x4
			float32 m_flEndValue; // 0x1d8 | Schema_Builtin | Size: 0x4
			float32 m_flCycleTime; // 0x1dc | Schema_Builtin | Size: 0x4
			bool m_bDoNotRepeatCycle; // 0x1e0 | Schema_Builtin | Size: 0x1
			bool m_bSynchronizeParticles; // 0x1e1 | Schema_Builtin | Size: 0x1
			S2_PAD(0x2);
			int32_t m_nCPScale; // 0x1e4 | Schema_Builtin | Size: 0x4
			int32_t m_nCPFieldMin; // 0x1e8 | Schema_Builtin | Size: 0x4
			int32_t m_nCPFieldMax; // 0x1ec | Schema_Builtin | Size: 0x4
			particles::ParticleSetMethod_t m_nSetMethod; // 0x1f0 | Schema_DeclaredEnum | Size: 0x4
			S2_PAD(0x4); // End padding
		};
		static_assert(offsetof(CS2::particles::C_OP_CycleScalar, m_nDestField) == 0x1D0, "m_nDestField in C_OP_CycleScalar should be at offset 0x1D0");
		static_assert(offsetof(CS2::particles::C_OP_CycleScalar, m_flStartValue) == 0x1D4, "m_flStartValue in C_OP_CycleScalar should be at offset 0x1D4");
		static_assert(offsetof(CS2::particles::C_OP_CycleScalar, m_flEndValue) == 0x1D8, "m_flEndValue in C_OP_CycleScalar should be at offset 0x1D8");
		static_assert(offsetof(CS2::particles::C_OP_CycleScalar, m_flCycleTime) == 0x1DC, "m_flCycleTime in C_OP_CycleScalar should be at offset 0x1DC");
		static_assert(offsetof(CS2::particles::C_OP_CycleScalar, m_bDoNotRepeatCycle) == 0x1E0, "m_bDoNotRepeatCycle in C_OP_CycleScalar should be at offset 0x1E0");
		static_assert(offsetof(CS2::particles::C_OP_CycleScalar, m_bSynchronizeParticles) == 0x1E1, "m_bSynchronizeParticles in C_OP_CycleScalar should be at offset 0x1E1");
		static_assert(offsetof(CS2::particles::C_OP_CycleScalar, m_nCPScale) == 0x1E4, "m_nCPScale in C_OP_CycleScalar should be at offset 0x1E4");
		static_assert(offsetof(CS2::particles::C_OP_CycleScalar, m_nCPFieldMin) == 0x1E8, "m_nCPFieldMin in C_OP_CycleScalar should be at offset 0x1E8");
		static_assert(offsetof(CS2::particles::C_OP_CycleScalar, m_nCPFieldMax) == 0x1EC, "m_nCPFieldMax in C_OP_CycleScalar should be at offset 0x1EC");
		static_assert(offsetof(CS2::particles::C_OP_CycleScalar, m_nSetMethod) == 0x1F0, "m_nSetMethod in C_OP_CycleScalar should be at offset 0x1F0");
		static_assert(sizeof(CS2::particles::C_OP_CycleScalar) == 0x1F8, "C_OP_CycleScalar size should be 0x1F8");
	}
}
