// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/particles/CParticleFunctionInitializer.hpp>





using namespace GlobalTypes;
namespace CS2 {
	namespace particles {
		class C_INIT_CreateFromPlaneCache : public CS2::particles::CParticleFunctionInitializer {
		public:
			GlobalTypes::Vector m_vecOffsetMin; // 0x1d8 | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vecOffsetMax; // 0x1e4 | Schema_Atomic | Size: 0xc
			S2_PAD(0x1);
			bool m_bUseNormal; // 0x1f1 | Schema_Builtin | Size: 0x1
			S2_PAD(0x6); // End padding
		};
		static_assert(offsetof(CS2::particles::C_INIT_CreateFromPlaneCache, m_vecOffsetMin) == 0x1D8, "m_vecOffsetMin in C_INIT_CreateFromPlaneCache should be at offset 0x1D8");
		static_assert(offsetof(CS2::particles::C_INIT_CreateFromPlaneCache, m_vecOffsetMax) == 0x1E4, "m_vecOffsetMax in C_INIT_CreateFromPlaneCache should be at offset 0x1E4");
		static_assert(offsetof(CS2::particles::C_INIT_CreateFromPlaneCache, m_bUseNormal) == 0x1F1, "m_bUseNormal in C_INIT_CreateFromPlaneCache should be at offset 0x1F1");
		static_assert(sizeof(CS2::particles::C_INIT_CreateFromPlaneCache) == 0x1F8, "C_INIT_CreateFromPlaneCache size should be 0x1F8");
	}
}
