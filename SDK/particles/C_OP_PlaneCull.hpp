// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/particles/CParticleFunctionOperator.hpp>



namespace CS2 {
	namespace particles {
		class C_OP_PlaneCull : public CS2::particles::CParticleFunctionOperator {
		public:
			int32_t m_nPlaneControlPoint; // 0x1d0 | Schema_Builtin | Size: 0x4
			GlobalTypes::Vector m_vecPlaneDirection; // 0x1d4 | Schema_Atomic | Size: 0xc
			bool m_bLocalSpace; // 0x1e0 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			float32 m_flPlaneOffset; // 0x1e4 | Schema_Builtin | Size: 0x4
		};
		static_assert(offsetof(CS2::particles::C_OP_PlaneCull, m_nPlaneControlPoint) == 0x1D0, "m_nPlaneControlPoint in C_OP_PlaneCull should be at offset 0x1D0");
		static_assert(offsetof(CS2::particles::C_OP_PlaneCull, m_vecPlaneDirection) == 0x1D4, "m_vecPlaneDirection in C_OP_PlaneCull should be at offset 0x1D4");
		static_assert(offsetof(CS2::particles::C_OP_PlaneCull, m_bLocalSpace) == 0x1E0, "m_bLocalSpace in C_OP_PlaneCull should be at offset 0x1E0");
		static_assert(offsetof(CS2::particles::C_OP_PlaneCull, m_flPlaneOffset) == 0x1E4, "m_flPlaneOffset in C_OP_PlaneCull should be at offset 0x1E4");
		static_assert(sizeof(CS2::particles::C_OP_PlaneCull) == 0x1E8, "C_OP_PlaneCull size should be 0x1E8");
	}
}
