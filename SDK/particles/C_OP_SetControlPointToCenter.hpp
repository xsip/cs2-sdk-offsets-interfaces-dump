// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/particles/CParticleFunctionPreEmission.hpp>
#include <SDK/particles/ParticleParentSetMode_t.hpp>





using namespace GlobalTypes;
namespace CS2 {
	namespace particles {
		class C_OP_SetControlPointToCenter : public CS2::particles::CParticleFunctionPreEmission {
		public:
			int32_t m_nCP1; // 0x1d8 | Schema_Builtin | Size: 0x4
			GlobalTypes::Vector m_vecCP1Pos; // 0x1dc | Schema_Atomic | Size: 0xc
			bool m_bUseAvgParticlePos; // 0x1e8 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			particles::ParticleParentSetMode_t m_nSetParent; // 0x1ec | Schema_DeclaredEnum | Size: 0x4
		};
		static_assert(offsetof(CS2::particles::C_OP_SetControlPointToCenter, m_nCP1) == 0x1D8, "m_nCP1 in C_OP_SetControlPointToCenter should be at offset 0x1D8");
		static_assert(offsetof(CS2::particles::C_OP_SetControlPointToCenter, m_vecCP1Pos) == 0x1DC, "m_vecCP1Pos in C_OP_SetControlPointToCenter should be at offset 0x1DC");
		static_assert(offsetof(CS2::particles::C_OP_SetControlPointToCenter, m_bUseAvgParticlePos) == 0x1E8, "m_bUseAvgParticlePos in C_OP_SetControlPointToCenter should be at offset 0x1E8");
		static_assert(offsetof(CS2::particles::C_OP_SetControlPointToCenter, m_nSetParent) == 0x1EC, "m_nSetParent in C_OP_SetControlPointToCenter should be at offset 0x1EC");
		static_assert(sizeof(CS2::particles::C_OP_SetControlPointToCenter) == 0x1F0, "C_OP_SetControlPointToCenter size should be 0x1F0");
	}
}
