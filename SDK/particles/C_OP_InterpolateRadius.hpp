// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>

#include <SDK/particles/CParticleFunctionOperator.hpp>



namespace CS2 {
	namespace particles {
		class C_OP_InterpolateRadius : public CS2::particles::CParticleFunctionOperator {
		public:
			float32 m_flStartTime; // 0x1c0 | Schema_Builtin | Size: 0x4
			float32 m_flEndTime; // 0x1c4 | Schema_Builtin | Size: 0x4
			float32 m_flStartScale; // 0x1c8 | Schema_Builtin | Size: 0x4
			float32 m_flEndScale; // 0x1cc | Schema_Builtin | Size: 0x4
			bool m_bEaseInAndOut; // 0x1d0 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			float32 m_flBias; // 0x1d4 | Schema_Builtin | Size: 0x4
			S2_PAD(0x38); // End padding
		};
		static_assert(offsetof(CS2::particles::C_OP_InterpolateRadius, m_flStartTime) == 0x1C0, "m_flStartTime in C_OP_InterpolateRadius should be at offset 0x1C0");
		static_assert(offsetof(CS2::particles::C_OP_InterpolateRadius, m_flEndTime) == 0x1C4, "m_flEndTime in C_OP_InterpolateRadius should be at offset 0x1C4");
		static_assert(offsetof(CS2::particles::C_OP_InterpolateRadius, m_flStartScale) == 0x1C8, "m_flStartScale in C_OP_InterpolateRadius should be at offset 0x1C8");
		static_assert(offsetof(CS2::particles::C_OP_InterpolateRadius, m_flEndScale) == 0x1CC, "m_flEndScale in C_OP_InterpolateRadius should be at offset 0x1CC");
		static_assert(offsetof(CS2::particles::C_OP_InterpolateRadius, m_bEaseInAndOut) == 0x1D0, "m_bEaseInAndOut in C_OP_InterpolateRadius should be at offset 0x1D0");
		static_assert(offsetof(CS2::particles::C_OP_InterpolateRadius, m_flBias) == 0x1D4, "m_flBias in C_OP_InterpolateRadius should be at offset 0x1D4");
		static_assert(sizeof(CS2::particles::C_OP_InterpolateRadius) == 0x210, "C_OP_InterpolateRadius size should be 0x210");
	}
}
