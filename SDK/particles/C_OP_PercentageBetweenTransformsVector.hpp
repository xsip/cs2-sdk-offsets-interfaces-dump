// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>

#include <SDK/particles/CParticleFunctionOperator.hpp>
#include <SDK/particles/ParticleAttributeIndex_t.hpp>
#include <SDK/particleslib/CParticleTransformInput.hpp>
#include <SDK/particles/ParticleSetMethod_t.hpp>



namespace CS2 {
	namespace particles {
		class C_OP_PercentageBetweenTransformsVector : public CS2::particles::CParticleFunctionOperator {
		public:
			particles::ParticleAttributeIndex_t m_nFieldOutput; // 0x1c0 | Schema_DeclaredClass | Size: 0x4
			float32 m_flInputMin; // 0x1c4 | Schema_Builtin | Size: 0x4
			float32 m_flInputMax; // 0x1c8 | Schema_Builtin | Size: 0x4
			GlobalTypes::Vector m_vecOutputMin; // 0x1cc | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vecOutputMax; // 0x1d8 | Schema_Atomic | Size: 0xc
			S2_PAD(0x4);
			particleslib::CParticleTransformInput m_TransformStart; // 0x1e8 | Schema_DeclaredClass | Size: 0x68
			particleslib::CParticleTransformInput m_TransformEnd; // 0x250 | Schema_DeclaredClass | Size: 0x68
			particles::ParticleSetMethod_t m_nSetMethod; // 0x2b8 | Schema_DeclaredEnum | Size: 0x4
			bool m_bActiveRange; // 0x2bc | Schema_Builtin | Size: 0x1
			bool m_bRadialCheck; // 0x2bd | Schema_Builtin | Size: 0x1
			S2_PAD(0x2); // End padding
		};
		static_assert(offsetof(CS2::particles::C_OP_PercentageBetweenTransformsVector, m_nFieldOutput) == 0x1C0, "m_nFieldOutput in C_OP_PercentageBetweenTransformsVector should be at offset 0x1C0");
		static_assert(offsetof(CS2::particles::C_OP_PercentageBetweenTransformsVector, m_flInputMin) == 0x1C4, "m_flInputMin in C_OP_PercentageBetweenTransformsVector should be at offset 0x1C4");
		static_assert(offsetof(CS2::particles::C_OP_PercentageBetweenTransformsVector, m_flInputMax) == 0x1C8, "m_flInputMax in C_OP_PercentageBetweenTransformsVector should be at offset 0x1C8");
		static_assert(offsetof(CS2::particles::C_OP_PercentageBetweenTransformsVector, m_vecOutputMin) == 0x1CC, "m_vecOutputMin in C_OP_PercentageBetweenTransformsVector should be at offset 0x1CC");
		static_assert(offsetof(CS2::particles::C_OP_PercentageBetweenTransformsVector, m_vecOutputMax) == 0x1D8, "m_vecOutputMax in C_OP_PercentageBetweenTransformsVector should be at offset 0x1D8");
		static_assert(offsetof(CS2::particles::C_OP_PercentageBetweenTransformsVector, m_TransformStart) == 0x1E8, "m_TransformStart in C_OP_PercentageBetweenTransformsVector should be at offset 0x1E8");
		static_assert(offsetof(CS2::particles::C_OP_PercentageBetweenTransformsVector, m_TransformEnd) == 0x250, "m_TransformEnd in C_OP_PercentageBetweenTransformsVector should be at offset 0x250");
		static_assert(offsetof(CS2::particles::C_OP_PercentageBetweenTransformsVector, m_nSetMethod) == 0x2B8, "m_nSetMethod in C_OP_PercentageBetweenTransformsVector should be at offset 0x2B8");
		static_assert(offsetof(CS2::particles::C_OP_PercentageBetweenTransformsVector, m_bActiveRange) == 0x2BC, "m_bActiveRange in C_OP_PercentageBetweenTransformsVector should be at offset 0x2BC");
		static_assert(offsetof(CS2::particles::C_OP_PercentageBetweenTransformsVector, m_bRadialCheck) == 0x2BD, "m_bRadialCheck in C_OP_PercentageBetweenTransformsVector should be at offset 0x2BD");
		static_assert(sizeof(CS2::particles::C_OP_PercentageBetweenTransformsVector) == 0x2C0, "C_OP_PercentageBetweenTransformsVector size should be 0x2C0");
	}
}
