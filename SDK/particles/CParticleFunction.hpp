// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/particleslib/CParticleCollectionFloatInput.hpp>
#include <SDK/particles/ParticleEndcapMode_t.hpp>



namespace CS2 {
	namespace particles {
		class CParticleFunction  {
		public:
			S2_PAD(0x8);
			particleslib::CParticleCollectionFloatInput m_flOpStrength; // 0x8 | Schema_DeclaredClass | Size: 0x170
			particles::ParticleEndcapMode_t m_nOpEndCapState; // 0x178 | Schema_DeclaredEnum | Size: 0x4
			float32 m_flOpStartFadeInTime; // 0x17c | Schema_Builtin | Size: 0x4
			float32 m_flOpEndFadeInTime; // 0x180 | Schema_Builtin | Size: 0x4
			float32 m_flOpStartFadeOutTime; // 0x184 | Schema_Builtin | Size: 0x4
			float32 m_flOpEndFadeOutTime; // 0x188 | Schema_Builtin | Size: 0x4
			float32 m_flOpFadeOscillatePeriod; // 0x18c | Schema_Builtin | Size: 0x4
			bool m_bNormalizeToStopTime; // 0x190 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			float32 m_flOpTimeOffsetMin; // 0x194 | Schema_Builtin | Size: 0x4
			float32 m_flOpTimeOffsetMax; // 0x198 | Schema_Builtin | Size: 0x4
			int32_t m_nOpTimeOffsetSeed; // 0x19c | Schema_Builtin | Size: 0x4
			int32_t m_nOpTimeScaleSeed; // 0x1a0 | Schema_Builtin | Size: 0x4
			float32 m_flOpTimeScaleMin; // 0x1a4 | Schema_Builtin | Size: 0x4
			float32 m_flOpTimeScaleMax; // 0x1a8 | Schema_Builtin | Size: 0x4
			S2_PAD(0x2);
			bool m_bDisableOperator; // 0x1ae | Schema_Builtin | Size: 0x1
			S2_PAD(0x1);
			GlobalTypes::CUtlString m_Notes; // 0x1b0 | Schema_Atomic | Size: 0x8
			S2_PAD(0x18); // End padding
		};
		static_assert(offsetof(CS2::particles::CParticleFunction, m_flOpStrength) == 0x8, "m_flOpStrength in CParticleFunction should be at offset 0x8");
		static_assert(offsetof(CS2::particles::CParticleFunction, m_nOpEndCapState) == 0x178, "m_nOpEndCapState in CParticleFunction should be at offset 0x178");
		static_assert(offsetof(CS2::particles::CParticleFunction, m_flOpStartFadeInTime) == 0x17C, "m_flOpStartFadeInTime in CParticleFunction should be at offset 0x17C");
		static_assert(offsetof(CS2::particles::CParticleFunction, m_flOpEndFadeInTime) == 0x180, "m_flOpEndFadeInTime in CParticleFunction should be at offset 0x180");
		static_assert(offsetof(CS2::particles::CParticleFunction, m_flOpStartFadeOutTime) == 0x184, "m_flOpStartFadeOutTime in CParticleFunction should be at offset 0x184");
		static_assert(offsetof(CS2::particles::CParticleFunction, m_flOpEndFadeOutTime) == 0x188, "m_flOpEndFadeOutTime in CParticleFunction should be at offset 0x188");
		static_assert(offsetof(CS2::particles::CParticleFunction, m_flOpFadeOscillatePeriod) == 0x18C, "m_flOpFadeOscillatePeriod in CParticleFunction should be at offset 0x18C");
		static_assert(offsetof(CS2::particles::CParticleFunction, m_bNormalizeToStopTime) == 0x190, "m_bNormalizeToStopTime in CParticleFunction should be at offset 0x190");
		static_assert(offsetof(CS2::particles::CParticleFunction, m_flOpTimeOffsetMin) == 0x194, "m_flOpTimeOffsetMin in CParticleFunction should be at offset 0x194");
		static_assert(offsetof(CS2::particles::CParticleFunction, m_flOpTimeOffsetMax) == 0x198, "m_flOpTimeOffsetMax in CParticleFunction should be at offset 0x198");
		static_assert(offsetof(CS2::particles::CParticleFunction, m_nOpTimeOffsetSeed) == 0x19C, "m_nOpTimeOffsetSeed in CParticleFunction should be at offset 0x19C");
		static_assert(offsetof(CS2::particles::CParticleFunction, m_nOpTimeScaleSeed) == 0x1A0, "m_nOpTimeScaleSeed in CParticleFunction should be at offset 0x1A0");
		static_assert(offsetof(CS2::particles::CParticleFunction, m_flOpTimeScaleMin) == 0x1A4, "m_flOpTimeScaleMin in CParticleFunction should be at offset 0x1A4");
		static_assert(offsetof(CS2::particles::CParticleFunction, m_flOpTimeScaleMax) == 0x1A8, "m_flOpTimeScaleMax in CParticleFunction should be at offset 0x1A8");
		static_assert(offsetof(CS2::particles::CParticleFunction, m_bDisableOperator) == 0x1AE, "m_bDisableOperator in CParticleFunction should be at offset 0x1AE");
		static_assert(offsetof(CS2::particles::CParticleFunction, m_Notes) == 0x1B0, "m_Notes in CParticleFunction should be at offset 0x1B0");
		static_assert(sizeof(CS2::particles::CParticleFunction) == 0x1D0, "CParticleFunction size should be 0x1D0");
	}
}
