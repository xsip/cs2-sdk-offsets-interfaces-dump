// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/particles/CParticleFunctionEmitter.hpp>
#include <SDK/particleslib/CParticleCollectionFloatInput.hpp>



namespace CS2 {
	namespace particles {
		class C_OP_MaintainEmitter : public CS2::particles::CParticleFunctionEmitter {
		public:
			particleslib::CParticleCollectionFloatInput m_nParticlesToMaintain; // 0x1d8 | Schema_DeclaredClass | Size: 0x170
			float32 m_flStartTime; // 0x348 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4);
			particleslib::CParticleCollectionFloatInput m_flEmissionDuration; // 0x350 | Schema_DeclaredClass | Size: 0x170
			float32 m_flEmissionRate; // 0x4c0 | Schema_Builtin | Size: 0x4
			int32_t m_nSnapshotControlPoint; // 0x4c4 | Schema_Builtin | Size: 0x4
			GlobalTypes::CUtlString m_strSnapshotSubset; // 0x4c8 | Schema_Atomic | Size: 0x8
			bool m_bEmitInstantaneously; // 0x4d0 | Schema_Builtin | Size: 0x1
			bool m_bFinalEmitOnStop; // 0x4d1 | Schema_Builtin | Size: 0x1
			S2_PAD(0x6);
			particleslib::CParticleCollectionFloatInput m_flScale; // 0x4d8 | Schema_DeclaredClass | Size: 0x170
		};
		static_assert(offsetof(CS2::particles::C_OP_MaintainEmitter, m_nParticlesToMaintain) == 0x1D8, "m_nParticlesToMaintain in C_OP_MaintainEmitter should be at offset 0x1D8");
		static_assert(offsetof(CS2::particles::C_OP_MaintainEmitter, m_flStartTime) == 0x348, "m_flStartTime in C_OP_MaintainEmitter should be at offset 0x348");
		static_assert(offsetof(CS2::particles::C_OP_MaintainEmitter, m_flEmissionDuration) == 0x350, "m_flEmissionDuration in C_OP_MaintainEmitter should be at offset 0x350");
		static_assert(offsetof(CS2::particles::C_OP_MaintainEmitter, m_flEmissionRate) == 0x4C0, "m_flEmissionRate in C_OP_MaintainEmitter should be at offset 0x4C0");
		static_assert(offsetof(CS2::particles::C_OP_MaintainEmitter, m_nSnapshotControlPoint) == 0x4C4, "m_nSnapshotControlPoint in C_OP_MaintainEmitter should be at offset 0x4C4");
		static_assert(offsetof(CS2::particles::C_OP_MaintainEmitter, m_strSnapshotSubset) == 0x4C8, "m_strSnapshotSubset in C_OP_MaintainEmitter should be at offset 0x4C8");
		static_assert(offsetof(CS2::particles::C_OP_MaintainEmitter, m_bEmitInstantaneously) == 0x4D0, "m_bEmitInstantaneously in C_OP_MaintainEmitter should be at offset 0x4D0");
		static_assert(offsetof(CS2::particles::C_OP_MaintainEmitter, m_bFinalEmitOnStop) == 0x4D1, "m_bFinalEmitOnStop in C_OP_MaintainEmitter should be at offset 0x4D1");
		static_assert(offsetof(CS2::particles::C_OP_MaintainEmitter, m_flScale) == 0x4D8, "m_flScale in C_OP_MaintainEmitter should be at offset 0x4D8");
		static_assert(sizeof(CS2::particles::C_OP_MaintainEmitter) == 0x648, "C_OP_MaintainEmitter size should be 0x648");
	}
}
