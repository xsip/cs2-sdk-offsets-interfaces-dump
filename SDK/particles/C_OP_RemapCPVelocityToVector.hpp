// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/particles/CParticleFunctionOperator.hpp>
#include <SDK/particles/ParticleAttributeIndex_t.hpp>





using namespace GlobalTypes;
namespace CS2 {
	namespace particles {
		class C_OP_RemapCPVelocityToVector : public CS2::particles::CParticleFunctionOperator {
		public:
			int32_t m_nControlPoint; // 0x1d0 | Schema_Builtin | Size: 0x4
			particles::ParticleAttributeIndex_t m_nFieldOutput; // 0x1d4 | Schema_DeclaredClass | Size: 0x4
			float32 m_flScale; // 0x1d8 | Schema_Builtin | Size: 0x4
			bool m_bNormalize; // 0x1dc | Schema_Builtin | Size: 0x1
			S2_PAD(0x3); // End padding
		};
		static_assert(offsetof(CS2::particles::C_OP_RemapCPVelocityToVector, m_nControlPoint) == 0x1D0, "m_nControlPoint in C_OP_RemapCPVelocityToVector should be at offset 0x1D0");
		static_assert(offsetof(CS2::particles::C_OP_RemapCPVelocityToVector, m_nFieldOutput) == 0x1D4, "m_nFieldOutput in C_OP_RemapCPVelocityToVector should be at offset 0x1D4");
		static_assert(offsetof(CS2::particles::C_OP_RemapCPVelocityToVector, m_flScale) == 0x1D8, "m_flScale in C_OP_RemapCPVelocityToVector should be at offset 0x1D8");
		static_assert(offsetof(CS2::particles::C_OP_RemapCPVelocityToVector, m_bNormalize) == 0x1DC, "m_bNormalize in C_OP_RemapCPVelocityToVector should be at offset 0x1DC");
		static_assert(sizeof(CS2::particles::C_OP_RemapCPVelocityToVector) == 0x1E0, "C_OP_RemapCPVelocityToVector size should be 0x1E0");
	}
}
