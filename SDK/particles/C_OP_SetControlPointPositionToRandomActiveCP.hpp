// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/particles/CParticleFunctionPreEmission.hpp>
#include <SDK/particleslib/CParticleCollectionFloatInput.hpp>



namespace CS2 {
	namespace particles {
		class C_OP_SetControlPointPositionToRandomActiveCP : public CS2::particles::CParticleFunctionPreEmission {
		public:
			int32_t m_nCP1; // 0x1d8 | Schema_Builtin | Size: 0x4
			int32_t m_nHeadLocationMin; // 0x1dc | Schema_Builtin | Size: 0x4
			int32_t m_nHeadLocationMax; // 0x1e0 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4);
			particleslib::CParticleCollectionFloatInput m_flResetRate; // 0x1e8 | Schema_DeclaredClass | Size: 0x170
		};
		static_assert(offsetof(CS2::particles::C_OP_SetControlPointPositionToRandomActiveCP, m_nCP1) == 0x1D8, "m_nCP1 in C_OP_SetControlPointPositionToRandomActiveCP should be at offset 0x1D8");
		static_assert(offsetof(CS2::particles::C_OP_SetControlPointPositionToRandomActiveCP, m_nHeadLocationMin) == 0x1DC, "m_nHeadLocationMin in C_OP_SetControlPointPositionToRandomActiveCP should be at offset 0x1DC");
		static_assert(offsetof(CS2::particles::C_OP_SetControlPointPositionToRandomActiveCP, m_nHeadLocationMax) == 0x1E0, "m_nHeadLocationMax in C_OP_SetControlPointPositionToRandomActiveCP should be at offset 0x1E0");
		static_assert(offsetof(CS2::particles::C_OP_SetControlPointPositionToRandomActiveCP, m_flResetRate) == 0x1E8, "m_flResetRate in C_OP_SetControlPointPositionToRandomActiveCP should be at offset 0x1E8");
		static_assert(sizeof(CS2::particles::C_OP_SetControlPointPositionToRandomActiveCP) == 0x358, "C_OP_SetControlPointPositionToRandomActiveCP size should be 0x358");
	}
}
