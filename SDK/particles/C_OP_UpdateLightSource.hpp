// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/particles/CParticleFunctionOperator.hpp>





using namespace GlobalTypes;
namespace CS2 {
	namespace particles {
		class C_OP_UpdateLightSource : public CS2::particles::CParticleFunctionOperator {
		public:
			GlobalTypes::Color m_vColorTint; // 0x1d0 | Schema_Atomic | Size: 0x4
			float32 m_flBrightnessScale; // 0x1d4 | Schema_Builtin | Size: 0x4
			float32 m_flRadiusScale; // 0x1d8 | Schema_Builtin | Size: 0x4
			float32 m_flMinimumLightingRadius; // 0x1dc | Schema_Builtin | Size: 0x4
			float32 m_flMaximumLightingRadius; // 0x1e0 | Schema_Builtin | Size: 0x4
			float32 m_flPositionDampingConstant; // 0x1e4 | Schema_Builtin | Size: 0x4
		};
		static_assert(offsetof(CS2::particles::C_OP_UpdateLightSource, m_vColorTint) == 0x1D0, "m_vColorTint in C_OP_UpdateLightSource should be at offset 0x1D0");
		static_assert(offsetof(CS2::particles::C_OP_UpdateLightSource, m_flBrightnessScale) == 0x1D4, "m_flBrightnessScale in C_OP_UpdateLightSource should be at offset 0x1D4");
		static_assert(offsetof(CS2::particles::C_OP_UpdateLightSource, m_flRadiusScale) == 0x1D8, "m_flRadiusScale in C_OP_UpdateLightSource should be at offset 0x1D8");
		static_assert(offsetof(CS2::particles::C_OP_UpdateLightSource, m_flMinimumLightingRadius) == 0x1DC, "m_flMinimumLightingRadius in C_OP_UpdateLightSource should be at offset 0x1DC");
		static_assert(offsetof(CS2::particles::C_OP_UpdateLightSource, m_flMaximumLightingRadius) == 0x1E0, "m_flMaximumLightingRadius in C_OP_UpdateLightSource should be at offset 0x1E0");
		static_assert(offsetof(CS2::particles::C_OP_UpdateLightSource, m_flPositionDampingConstant) == 0x1E4, "m_flPositionDampingConstant in C_OP_UpdateLightSource should be at offset 0x1E4");
		static_assert(sizeof(CS2::particles::C_OP_UpdateLightSource) == 0x1E8, "C_OP_UpdateLightSource size should be 0x1E8");
	}
}
