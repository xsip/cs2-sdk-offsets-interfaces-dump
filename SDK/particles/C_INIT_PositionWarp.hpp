// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>

#include <SDK/particles/CParticleFunctionInitializer.hpp>
#include <SDK/particleslib/CParticleCollectionVecInput.hpp>



namespace CS2 {
	namespace particles {
		class C_INIT_PositionWarp : public CS2::particles::CParticleFunctionInitializer {
		public:
			particleslib::CParticleCollectionVecInput m_vecWarpMin; // 0x1c8 | Schema_DeclaredClass | Size: 0x678
			particleslib::CParticleCollectionVecInput m_vecWarpMax; // 0x840 | Schema_DeclaredClass | Size: 0x678
			int32_t m_nScaleControlPointNumber; // 0xeb8 | Schema_Builtin | Size: 0x4
			int32_t m_nControlPointNumber; // 0xebc | Schema_Builtin | Size: 0x4
			int32_t m_nRadiusComponent; // 0xec0 | Schema_Builtin | Size: 0x4
			float32 m_flWarpTime; // 0xec4 | Schema_Builtin | Size: 0x4
			float32 m_flWarpStartTime; // 0xec8 | Schema_Builtin | Size: 0x4
			float32 m_flPrevPosScale; // 0xecc | Schema_Builtin | Size: 0x4
			bool m_bInvertWarp; // 0xed0 | Schema_Builtin | Size: 0x1
			bool m_bUseCount; // 0xed1 | Schema_Builtin | Size: 0x1
			S2_PAD(0x6); // End padding
		};
		static_assert(offsetof(CS2::particles::C_INIT_PositionWarp, m_vecWarpMin) == 0x1C8, "m_vecWarpMin in C_INIT_PositionWarp should be at offset 0x1C8");
		static_assert(offsetof(CS2::particles::C_INIT_PositionWarp, m_vecWarpMax) == 0x840, "m_vecWarpMax in C_INIT_PositionWarp should be at offset 0x840");
		static_assert(offsetof(CS2::particles::C_INIT_PositionWarp, m_nScaleControlPointNumber) == 0xEB8, "m_nScaleControlPointNumber in C_INIT_PositionWarp should be at offset 0xEB8");
		static_assert(offsetof(CS2::particles::C_INIT_PositionWarp, m_nControlPointNumber) == 0xEBC, "m_nControlPointNumber in C_INIT_PositionWarp should be at offset 0xEBC");
		static_assert(offsetof(CS2::particles::C_INIT_PositionWarp, m_nRadiusComponent) == 0xEC0, "m_nRadiusComponent in C_INIT_PositionWarp should be at offset 0xEC0");
		static_assert(offsetof(CS2::particles::C_INIT_PositionWarp, m_flWarpTime) == 0xEC4, "m_flWarpTime in C_INIT_PositionWarp should be at offset 0xEC4");
		static_assert(offsetof(CS2::particles::C_INIT_PositionWarp, m_flWarpStartTime) == 0xEC8, "m_flWarpStartTime in C_INIT_PositionWarp should be at offset 0xEC8");
		static_assert(offsetof(CS2::particles::C_INIT_PositionWarp, m_flPrevPosScale) == 0xECC, "m_flPrevPosScale in C_INIT_PositionWarp should be at offset 0xECC");
		static_assert(offsetof(CS2::particles::C_INIT_PositionWarp, m_bInvertWarp) == 0xED0, "m_bInvertWarp in C_INIT_PositionWarp should be at offset 0xED0");
		static_assert(offsetof(CS2::particles::C_INIT_PositionWarp, m_bUseCount) == 0xED1, "m_bUseCount in C_INIT_PositionWarp should be at offset 0xED1");
		static_assert(sizeof(CS2::particles::C_INIT_PositionWarp) == 0xED8, "C_INIT_PositionWarp size should be 0xED8");
	}
}
