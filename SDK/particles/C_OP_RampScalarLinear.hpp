// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/particles/CParticleFunctionOperator.hpp>
#include <SDK/particles/ParticleAttributeIndex_t.hpp>



namespace CS2 {
	namespace particles {
		class C_OP_RampScalarLinear : public CS2::particles::CParticleFunctionOperator {
		public:
			float32 m_RateMin; // 0x1d0 | Schema_Builtin | Size: 0x4
			float32 m_RateMax; // 0x1d4 | Schema_Builtin | Size: 0x4
			float32 m_flStartTime_min; // 0x1d8 | Schema_Builtin | Size: 0x4
			float32 m_flStartTime_max; // 0x1dc | Schema_Builtin | Size: 0x4
			float32 m_flEndTime_min; // 0x1e0 | Schema_Builtin | Size: 0x4
			float32 m_flEndTime_max; // 0x1e4 | Schema_Builtin | Size: 0x4
			S2_PAD(0x28);
			particles::ParticleAttributeIndex_t m_nField; // 0x210 | Schema_DeclaredClass | Size: 0x4
			bool m_bProportionalOp; // 0x214 | Schema_Builtin | Size: 0x1
			S2_PAD(0xb); // End padding
		};
		static_assert(offsetof(CS2::particles::C_OP_RampScalarLinear, m_RateMin) == 0x1D0, "m_RateMin in C_OP_RampScalarLinear should be at offset 0x1D0");
		static_assert(offsetof(CS2::particles::C_OP_RampScalarLinear, m_RateMax) == 0x1D4, "m_RateMax in C_OP_RampScalarLinear should be at offset 0x1D4");
		static_assert(offsetof(CS2::particles::C_OP_RampScalarLinear, m_flStartTime_min) == 0x1D8, "m_flStartTime_min in C_OP_RampScalarLinear should be at offset 0x1D8");
		static_assert(offsetof(CS2::particles::C_OP_RampScalarLinear, m_flStartTime_max) == 0x1DC, "m_flStartTime_max in C_OP_RampScalarLinear should be at offset 0x1DC");
		static_assert(offsetof(CS2::particles::C_OP_RampScalarLinear, m_flEndTime_min) == 0x1E0, "m_flEndTime_min in C_OP_RampScalarLinear should be at offset 0x1E0");
		static_assert(offsetof(CS2::particles::C_OP_RampScalarLinear, m_flEndTime_max) == 0x1E4, "m_flEndTime_max in C_OP_RampScalarLinear should be at offset 0x1E4");
		static_assert(offsetof(CS2::particles::C_OP_RampScalarLinear, m_nField) == 0x210, "m_nField in C_OP_RampScalarLinear should be at offset 0x210");
		static_assert(offsetof(CS2::particles::C_OP_RampScalarLinear, m_bProportionalOp) == 0x214, "m_bProportionalOp in C_OP_RampScalarLinear should be at offset 0x214");
		static_assert(sizeof(CS2::particles::C_OP_RampScalarLinear) == 0x220, "C_OP_RampScalarLinear size should be 0x220");
	}
}
