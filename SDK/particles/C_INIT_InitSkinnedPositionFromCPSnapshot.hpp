// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/particles/CParticleFunctionInitializer.hpp>
#include <SDK/particles/SnapshotIndexType_t.hpp>
#include <SDK/particleslib/CPerParticleFloatInput.hpp>



namespace CS2 {
	namespace particles {
		class C_INIT_InitSkinnedPositionFromCPSnapshot : public CS2::particles::CParticleFunctionInitializer {
		public:
			int32_t m_nSnapshotControlPointNumber; // 0x1d8 | Schema_Builtin | Size: 0x4
			int32_t m_nControlPointNumber; // 0x1dc | Schema_Builtin | Size: 0x4
			bool m_bRandom; // 0x1e0 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			int32_t m_nRandomSeed; // 0x1e4 | Schema_Builtin | Size: 0x4
			bool m_bRigid; // 0x1e8 | Schema_Builtin | Size: 0x1
			bool m_bSetNormal; // 0x1e9 | Schema_Builtin | Size: 0x1
			bool m_bIgnoreDt; // 0x1ea | Schema_Builtin | Size: 0x1
			S2_PAD(0x1);
			float32 m_flMinNormalVelocity; // 0x1ec | Schema_Builtin | Size: 0x4
			float32 m_flMaxNormalVelocity; // 0x1f0 | Schema_Builtin | Size: 0x4
			particles::SnapshotIndexType_t m_nIndexType; // 0x1f4 | Schema_DeclaredEnum | Size: 0x4
			particleslib::CPerParticleFloatInput m_flReadIndex; // 0x1f8 | Schema_DeclaredClass | Size: 0x170
			float32 m_flIncrement; // 0x368 | Schema_Builtin | Size: 0x4
			int32_t m_nFullLoopIncrement; // 0x36c | Schema_Builtin | Size: 0x4
			int32_t m_nSnapShotStartPoint; // 0x370 | Schema_Builtin | Size: 0x4
			float32 m_flBoneVelocity; // 0x374 | Schema_Builtin | Size: 0x4
			float32 m_flBoneVelocityMax; // 0x378 | Schema_Builtin | Size: 0x4
			bool m_bCopyColor; // 0x37c | Schema_Builtin | Size: 0x1
			bool m_bCopyAlpha; // 0x37d | Schema_Builtin | Size: 0x1
			bool m_bSetRadius; // 0x37e | Schema_Builtin | Size: 0x1
			S2_PAD(0x1); // End padding
		};
		static_assert(offsetof(CS2::particles::C_INIT_InitSkinnedPositionFromCPSnapshot, m_nSnapshotControlPointNumber) == 0x1D8, "m_nSnapshotControlPointNumber in C_INIT_InitSkinnedPositionFromCPSnapshot should be at offset 0x1D8");
		static_assert(offsetof(CS2::particles::C_INIT_InitSkinnedPositionFromCPSnapshot, m_nControlPointNumber) == 0x1DC, "m_nControlPointNumber in C_INIT_InitSkinnedPositionFromCPSnapshot should be at offset 0x1DC");
		static_assert(offsetof(CS2::particles::C_INIT_InitSkinnedPositionFromCPSnapshot, m_bRandom) == 0x1E0, "m_bRandom in C_INIT_InitSkinnedPositionFromCPSnapshot should be at offset 0x1E0");
		static_assert(offsetof(CS2::particles::C_INIT_InitSkinnedPositionFromCPSnapshot, m_nRandomSeed) == 0x1E4, "m_nRandomSeed in C_INIT_InitSkinnedPositionFromCPSnapshot should be at offset 0x1E4");
		static_assert(offsetof(CS2::particles::C_INIT_InitSkinnedPositionFromCPSnapshot, m_bRigid) == 0x1E8, "m_bRigid in C_INIT_InitSkinnedPositionFromCPSnapshot should be at offset 0x1E8");
		static_assert(offsetof(CS2::particles::C_INIT_InitSkinnedPositionFromCPSnapshot, m_bSetNormal) == 0x1E9, "m_bSetNormal in C_INIT_InitSkinnedPositionFromCPSnapshot should be at offset 0x1E9");
		static_assert(offsetof(CS2::particles::C_INIT_InitSkinnedPositionFromCPSnapshot, m_bIgnoreDt) == 0x1EA, "m_bIgnoreDt in C_INIT_InitSkinnedPositionFromCPSnapshot should be at offset 0x1EA");
		static_assert(offsetof(CS2::particles::C_INIT_InitSkinnedPositionFromCPSnapshot, m_flMinNormalVelocity) == 0x1EC, "m_flMinNormalVelocity in C_INIT_InitSkinnedPositionFromCPSnapshot should be at offset 0x1EC");
		static_assert(offsetof(CS2::particles::C_INIT_InitSkinnedPositionFromCPSnapshot, m_flMaxNormalVelocity) == 0x1F0, "m_flMaxNormalVelocity in C_INIT_InitSkinnedPositionFromCPSnapshot should be at offset 0x1F0");
		static_assert(offsetof(CS2::particles::C_INIT_InitSkinnedPositionFromCPSnapshot, m_nIndexType) == 0x1F4, "m_nIndexType in C_INIT_InitSkinnedPositionFromCPSnapshot should be at offset 0x1F4");
		static_assert(offsetof(CS2::particles::C_INIT_InitSkinnedPositionFromCPSnapshot, m_flReadIndex) == 0x1F8, "m_flReadIndex in C_INIT_InitSkinnedPositionFromCPSnapshot should be at offset 0x1F8");
		static_assert(offsetof(CS2::particles::C_INIT_InitSkinnedPositionFromCPSnapshot, m_flIncrement) == 0x368, "m_flIncrement in C_INIT_InitSkinnedPositionFromCPSnapshot should be at offset 0x368");
		static_assert(offsetof(CS2::particles::C_INIT_InitSkinnedPositionFromCPSnapshot, m_nFullLoopIncrement) == 0x36C, "m_nFullLoopIncrement in C_INIT_InitSkinnedPositionFromCPSnapshot should be at offset 0x36C");
		static_assert(offsetof(CS2::particles::C_INIT_InitSkinnedPositionFromCPSnapshot, m_nSnapShotStartPoint) == 0x370, "m_nSnapShotStartPoint in C_INIT_InitSkinnedPositionFromCPSnapshot should be at offset 0x370");
		static_assert(offsetof(CS2::particles::C_INIT_InitSkinnedPositionFromCPSnapshot, m_flBoneVelocity) == 0x374, "m_flBoneVelocity in C_INIT_InitSkinnedPositionFromCPSnapshot should be at offset 0x374");
		static_assert(offsetof(CS2::particles::C_INIT_InitSkinnedPositionFromCPSnapshot, m_flBoneVelocityMax) == 0x378, "m_flBoneVelocityMax in C_INIT_InitSkinnedPositionFromCPSnapshot should be at offset 0x378");
		static_assert(offsetof(CS2::particles::C_INIT_InitSkinnedPositionFromCPSnapshot, m_bCopyColor) == 0x37C, "m_bCopyColor in C_INIT_InitSkinnedPositionFromCPSnapshot should be at offset 0x37C");
		static_assert(offsetof(CS2::particles::C_INIT_InitSkinnedPositionFromCPSnapshot, m_bCopyAlpha) == 0x37D, "m_bCopyAlpha in C_INIT_InitSkinnedPositionFromCPSnapshot should be at offset 0x37D");
		static_assert(offsetof(CS2::particles::C_INIT_InitSkinnedPositionFromCPSnapshot, m_bSetRadius) == 0x37E, "m_bSetRadius in C_INIT_InitSkinnedPositionFromCPSnapshot should be at offset 0x37E");
		static_assert(sizeof(CS2::particles::C_INIT_InitSkinnedPositionFromCPSnapshot) == 0x380, "C_INIT_InitSkinnedPositionFromCPSnapshot size should be 0x380");
	}
}
