// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/particles/CParticleFunctionConstraint.hpp>
#include <SDK/particleslib/CPerParticleFloatInput.hpp>
#include <SDK/particleslib/CParticleCollectionFloatInput.hpp>





using namespace GlobalTypes;
namespace CS2 {
	namespace particles {
		class C_OP_PlanarConstraint : public CS2::particles::CParticleFunctionConstraint {
		public:
			GlobalTypes::Vector m_PointOnPlane; // 0x1d0 | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_PlaneNormal; // 0x1dc | Schema_Atomic | Size: 0xc
			int32_t m_nControlPointNumber; // 0x1e8 | Schema_Builtin | Size: 0x4
			bool m_bGlobalOrigin; // 0x1ec | Schema_Builtin | Size: 0x1
			bool m_bGlobalNormal; // 0x1ed | Schema_Builtin | Size: 0x1
			S2_PAD(0x2);
			particleslib::CPerParticleFloatInput m_flRadiusScale; // 0x1f0 | Schema_DeclaredClass | Size: 0x170
			particleslib::CParticleCollectionFloatInput m_flMaximumDistanceToCP; // 0x360 | Schema_DeclaredClass | Size: 0x170
			bool m_bUseOldCode; // 0x4d0 | Schema_Builtin | Size: 0x1
			S2_PAD(0x7); // End padding
		};
		static_assert(offsetof(CS2::particles::C_OP_PlanarConstraint, m_PointOnPlane) == 0x1D0, "m_PointOnPlane in C_OP_PlanarConstraint should be at offset 0x1D0");
		static_assert(offsetof(CS2::particles::C_OP_PlanarConstraint, m_PlaneNormal) == 0x1DC, "m_PlaneNormal in C_OP_PlanarConstraint should be at offset 0x1DC");
		static_assert(offsetof(CS2::particles::C_OP_PlanarConstraint, m_nControlPointNumber) == 0x1E8, "m_nControlPointNumber in C_OP_PlanarConstraint should be at offset 0x1E8");
		static_assert(offsetof(CS2::particles::C_OP_PlanarConstraint, m_bGlobalOrigin) == 0x1EC, "m_bGlobalOrigin in C_OP_PlanarConstraint should be at offset 0x1EC");
		static_assert(offsetof(CS2::particles::C_OP_PlanarConstraint, m_bGlobalNormal) == 0x1ED, "m_bGlobalNormal in C_OP_PlanarConstraint should be at offset 0x1ED");
		static_assert(offsetof(CS2::particles::C_OP_PlanarConstraint, m_flRadiusScale) == 0x1F0, "m_flRadiusScale in C_OP_PlanarConstraint should be at offset 0x1F0");
		static_assert(offsetof(CS2::particles::C_OP_PlanarConstraint, m_flMaximumDistanceToCP) == 0x360, "m_flMaximumDistanceToCP in C_OP_PlanarConstraint should be at offset 0x360");
		static_assert(offsetof(CS2::particles::C_OP_PlanarConstraint, m_bUseOldCode) == 0x4D0, "m_bUseOldCode in C_OP_PlanarConstraint should be at offset 0x4D0");
		static_assert(sizeof(CS2::particles::C_OP_PlanarConstraint) == 0x4D8, "C_OP_PlanarConstraint size should be 0x4D8");
	}
}
