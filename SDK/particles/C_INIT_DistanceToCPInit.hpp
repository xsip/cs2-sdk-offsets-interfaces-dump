// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/particles/CParticleFunctionInitializer.hpp>
#include <SDK/particles/ParticleAttributeIndex_t.hpp>
#include <SDK/particleslib/CPerParticleFloatInput.hpp>
#include <SDK/particles/ParticleTraceSet_t.hpp>
#include <SDK/particles/ParticleSetMethod_t.hpp>





using namespace GlobalTypes;
namespace CS2 {
	namespace particles {
		class C_INIT_DistanceToCPInit : public CS2::particles::CParticleFunctionInitializer {
		public:
			particles::ParticleAttributeIndex_t m_nFieldOutput; // 0x1d8 | Schema_DeclaredClass | Size: 0x4
			S2_PAD(0x4);
			particleslib::CPerParticleFloatInput m_flInputMin; // 0x1e0 | Schema_DeclaredClass | Size: 0x170
			particleslib::CPerParticleFloatInput m_flInputMax; // 0x350 | Schema_DeclaredClass | Size: 0x170
			particleslib::CPerParticleFloatInput m_flOutputMin; // 0x4c0 | Schema_DeclaredClass | Size: 0x170
			particleslib::CPerParticleFloatInput m_flOutputMax; // 0x630 | Schema_DeclaredClass | Size: 0x170
			int32_t m_nStartCP; // 0x7a0 | Schema_Builtin | Size: 0x4
			bool m_bLOS; // 0x7a4 | Schema_Builtin | Size: 0x1
			char m_CollisionGroupName[128]; // 0x7a5 | Schema_FixedArray | Size: 0x80
			S2_PAD(0x3);
			particles::ParticleTraceSet_t m_nTraceSet; // 0x828 | Schema_DeclaredEnum | Size: 0x4
			S2_PAD(0x4);
			particleslib::CPerParticleFloatInput m_flMaxTraceLength; // 0x830 | Schema_DeclaredClass | Size: 0x170
			float32 m_flLOSScale; // 0x9a0 | Schema_Builtin | Size: 0x4
			particles::ParticleSetMethod_t m_nSetMethod; // 0x9a4 | Schema_DeclaredEnum | Size: 0x4
			bool m_bActiveRange; // 0x9a8 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			GlobalTypes::Vector m_vecDistanceScale; // 0x9ac | Schema_Atomic | Size: 0xc
			float32 m_flRemapBias; // 0x9b8 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4); // End padding
		};
		static_assert(offsetof(CS2::particles::C_INIT_DistanceToCPInit, m_nFieldOutput) == 0x1D8, "m_nFieldOutput in C_INIT_DistanceToCPInit should be at offset 0x1D8");
		static_assert(offsetof(CS2::particles::C_INIT_DistanceToCPInit, m_flInputMin) == 0x1E0, "m_flInputMin in C_INIT_DistanceToCPInit should be at offset 0x1E0");
		static_assert(offsetof(CS2::particles::C_INIT_DistanceToCPInit, m_flInputMax) == 0x350, "m_flInputMax in C_INIT_DistanceToCPInit should be at offset 0x350");
		static_assert(offsetof(CS2::particles::C_INIT_DistanceToCPInit, m_flOutputMin) == 0x4C0, "m_flOutputMin in C_INIT_DistanceToCPInit should be at offset 0x4C0");
		static_assert(offsetof(CS2::particles::C_INIT_DistanceToCPInit, m_flOutputMax) == 0x630, "m_flOutputMax in C_INIT_DistanceToCPInit should be at offset 0x630");
		static_assert(offsetof(CS2::particles::C_INIT_DistanceToCPInit, m_nStartCP) == 0x7A0, "m_nStartCP in C_INIT_DistanceToCPInit should be at offset 0x7A0");
		static_assert(offsetof(CS2::particles::C_INIT_DistanceToCPInit, m_bLOS) == 0x7A4, "m_bLOS in C_INIT_DistanceToCPInit should be at offset 0x7A4");
		static_assert(offsetof(CS2::particles::C_INIT_DistanceToCPInit, m_CollisionGroupName) == 0x7A5, "m_CollisionGroupName in C_INIT_DistanceToCPInit should be at offset 0x7A5");
		static_assert(offsetof(CS2::particles::C_INIT_DistanceToCPInit, m_nTraceSet) == 0x828, "m_nTraceSet in C_INIT_DistanceToCPInit should be at offset 0x828");
		static_assert(offsetof(CS2::particles::C_INIT_DistanceToCPInit, m_flMaxTraceLength) == 0x830, "m_flMaxTraceLength in C_INIT_DistanceToCPInit should be at offset 0x830");
		static_assert(offsetof(CS2::particles::C_INIT_DistanceToCPInit, m_flLOSScale) == 0x9A0, "m_flLOSScale in C_INIT_DistanceToCPInit should be at offset 0x9A0");
		static_assert(offsetof(CS2::particles::C_INIT_DistanceToCPInit, m_nSetMethod) == 0x9A4, "m_nSetMethod in C_INIT_DistanceToCPInit should be at offset 0x9A4");
		static_assert(offsetof(CS2::particles::C_INIT_DistanceToCPInit, m_bActiveRange) == 0x9A8, "m_bActiveRange in C_INIT_DistanceToCPInit should be at offset 0x9A8");
		static_assert(offsetof(CS2::particles::C_INIT_DistanceToCPInit, m_vecDistanceScale) == 0x9AC, "m_vecDistanceScale in C_INIT_DistanceToCPInit should be at offset 0x9AC");
		static_assert(offsetof(CS2::particles::C_INIT_DistanceToCPInit, m_flRemapBias) == 0x9B8, "m_flRemapBias in C_INIT_DistanceToCPInit should be at offset 0x9B8");
		static_assert(sizeof(CS2::particles::C_INIT_DistanceToCPInit) == 0x9C0, "C_INIT_DistanceToCPInit size should be 0x9C0");
	}
}
