// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/particles/PetGroundType_t.hpp>



namespace CS2 {
	namespace particles {
		class ParticlePreviewBodyGroup_t;
	}
}


using namespace GlobalTypes;
namespace CS2 {
	namespace particles {
		class ParticlePreviewState_t  {
		public:
			GlobalTypes::CUtlString m_previewModel; // 0x0 | Schema_Atomic | Size: 0x8
			uint32_t m_nModSpecificData; // 0x8 | Schema_Builtin | Size: 0x4
			particles::PetGroundType_t m_groundType; // 0xc | Schema_DeclaredEnum | Size: 0x4
			GlobalTypes::CUtlString m_sequenceName; // 0x10 | Schema_Atomic | Size: 0x8
			int32_t m_nFireParticleOnSequenceFrame; // 0x18 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4);
			GlobalTypes::CUtlString m_hitboxSetName; // 0x20 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlString m_materialGroupName; // 0x28 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlVector<particles::ParticlePreviewBodyGroup_t> m_vecBodyGroups; // 0x30 | Schema_Atomic | Size: 0x18
			// char  m_vecBodyGroups[0x18]; // 0x30 | Schema_Atomic | Size: 0x18
			float32 m_flPlaybackSpeed; // 0x48 | Schema_Builtin | Size: 0x4
			float32 m_flParticleSimulationRate; // 0x4c | Schema_Builtin | Size: 0x4
			bool m_bShouldDrawHitboxes; // 0x50 | Schema_Builtin | Size: 0x1
			bool m_bShouldDrawAttachments; // 0x51 | Schema_Builtin | Size: 0x1
			bool m_bShouldDrawAttachmentNames; // 0x52 | Schema_Builtin | Size: 0x1
			bool m_bShouldDrawControlPointAxes; // 0x53 | Schema_Builtin | Size: 0x1
			bool m_bAnimationNonLooping; // 0x54 | Schema_Builtin | Size: 0x1
			bool m_bSequenceNameIsAnimClipPath; // 0x55 | Schema_Builtin | Size: 0x1
			S2_PAD(0x2);
			GlobalTypes::Vector m_vecPreviewGravity; // 0x58 | Schema_Atomic | Size: 0xc
			S2_PAD(0x4); // End padding
		};
		static_assert(offsetof(CS2::particles::ParticlePreviewState_t, m_previewModel) == 0x0, "m_previewModel in ParticlePreviewState_t should be at offset 0x0");
		static_assert(offsetof(CS2::particles::ParticlePreviewState_t, m_nModSpecificData) == 0x8, "m_nModSpecificData in ParticlePreviewState_t should be at offset 0x8");
		static_assert(offsetof(CS2::particles::ParticlePreviewState_t, m_groundType) == 0xC, "m_groundType in ParticlePreviewState_t should be at offset 0xC");
		static_assert(offsetof(CS2::particles::ParticlePreviewState_t, m_sequenceName) == 0x10, "m_sequenceName in ParticlePreviewState_t should be at offset 0x10");
		static_assert(offsetof(CS2::particles::ParticlePreviewState_t, m_nFireParticleOnSequenceFrame) == 0x18, "m_nFireParticleOnSequenceFrame in ParticlePreviewState_t should be at offset 0x18");
		static_assert(offsetof(CS2::particles::ParticlePreviewState_t, m_hitboxSetName) == 0x20, "m_hitboxSetName in ParticlePreviewState_t should be at offset 0x20");
		static_assert(offsetof(CS2::particles::ParticlePreviewState_t, m_materialGroupName) == 0x28, "m_materialGroupName in ParticlePreviewState_t should be at offset 0x28");
		static_assert(offsetof(CS2::particles::ParticlePreviewState_t, m_vecBodyGroups) == 0x30, "m_vecBodyGroups in ParticlePreviewState_t should be at offset 0x30");
		static_assert(offsetof(CS2::particles::ParticlePreviewState_t, m_flPlaybackSpeed) == 0x48, "m_flPlaybackSpeed in ParticlePreviewState_t should be at offset 0x48");
		static_assert(offsetof(CS2::particles::ParticlePreviewState_t, m_flParticleSimulationRate) == 0x4C, "m_flParticleSimulationRate in ParticlePreviewState_t should be at offset 0x4C");
		static_assert(offsetof(CS2::particles::ParticlePreviewState_t, m_bShouldDrawHitboxes) == 0x50, "m_bShouldDrawHitboxes in ParticlePreviewState_t should be at offset 0x50");
		static_assert(offsetof(CS2::particles::ParticlePreviewState_t, m_bShouldDrawAttachments) == 0x51, "m_bShouldDrawAttachments in ParticlePreviewState_t should be at offset 0x51");
		static_assert(offsetof(CS2::particles::ParticlePreviewState_t, m_bShouldDrawAttachmentNames) == 0x52, "m_bShouldDrawAttachmentNames in ParticlePreviewState_t should be at offset 0x52");
		static_assert(offsetof(CS2::particles::ParticlePreviewState_t, m_bShouldDrawControlPointAxes) == 0x53, "m_bShouldDrawControlPointAxes in ParticlePreviewState_t should be at offset 0x53");
		static_assert(offsetof(CS2::particles::ParticlePreviewState_t, m_bAnimationNonLooping) == 0x54, "m_bAnimationNonLooping in ParticlePreviewState_t should be at offset 0x54");
		static_assert(offsetof(CS2::particles::ParticlePreviewState_t, m_bSequenceNameIsAnimClipPath) == 0x55, "m_bSequenceNameIsAnimClipPath in ParticlePreviewState_t should be at offset 0x55");
		static_assert(offsetof(CS2::particles::ParticlePreviewState_t, m_vecPreviewGravity) == 0x58, "m_vecPreviewGravity in ParticlePreviewState_t should be at offset 0x58");
		static_assert(sizeof(CS2::particles::ParticlePreviewState_t) == 0x68, "ParticlePreviewState_t size should be 0x68");
	}
}
