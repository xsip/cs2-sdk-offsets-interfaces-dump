// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>

#include <SDK/particles/CParticleFunctionOperator.hpp>



namespace CS2 {
	namespace particles {
		class C_OP_ControlpointLight : public CS2::particles::CParticleFunctionOperator {
		public:
			float32 m_flScale; // 0x1c0 | Schema_Builtin | Size: 0x4
			S2_PAD(0x48c);
			int32_t m_nControlPoint1; // 0x650 | Schema_Builtin | Size: 0x4
			int32_t m_nControlPoint2; // 0x654 | Schema_Builtin | Size: 0x4
			int32_t m_nControlPoint3; // 0x658 | Schema_Builtin | Size: 0x4
			int32_t m_nControlPoint4; // 0x65c | Schema_Builtin | Size: 0x4
			GlobalTypes::Vector m_vecCPOffset1; // 0x660 | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vecCPOffset2; // 0x66c | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vecCPOffset3; // 0x678 | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vecCPOffset4; // 0x684 | Schema_Atomic | Size: 0xc
			float32 m_LightFiftyDist1; // 0x690 | Schema_Builtin | Size: 0x4
			float32 m_LightZeroDist1; // 0x694 | Schema_Builtin | Size: 0x4
			float32 m_LightFiftyDist2; // 0x698 | Schema_Builtin | Size: 0x4
			float32 m_LightZeroDist2; // 0x69c | Schema_Builtin | Size: 0x4
			float32 m_LightFiftyDist3; // 0x6a0 | Schema_Builtin | Size: 0x4
			float32 m_LightZeroDist3; // 0x6a4 | Schema_Builtin | Size: 0x4
			float32 m_LightFiftyDist4; // 0x6a8 | Schema_Builtin | Size: 0x4
			float32 m_LightZeroDist4; // 0x6ac | Schema_Builtin | Size: 0x4
			GlobalTypes::Color m_LightColor1; // 0x6b0 | Schema_Atomic | Size: 0x4
			GlobalTypes::Color m_LightColor2; // 0x6b4 | Schema_Atomic | Size: 0x4
			GlobalTypes::Color m_LightColor3; // 0x6b8 | Schema_Atomic | Size: 0x4
			GlobalTypes::Color m_LightColor4; // 0x6bc | Schema_Atomic | Size: 0x4
			bool m_bLightType1; // 0x6c0 | Schema_Builtin | Size: 0x1
			bool m_bLightType2; // 0x6c1 | Schema_Builtin | Size: 0x1
			bool m_bLightType3; // 0x6c2 | Schema_Builtin | Size: 0x1
			bool m_bLightType4; // 0x6c3 | Schema_Builtin | Size: 0x1
			bool m_bLightDynamic1; // 0x6c4 | Schema_Builtin | Size: 0x1
			bool m_bLightDynamic2; // 0x6c5 | Schema_Builtin | Size: 0x1
			bool m_bLightDynamic3; // 0x6c6 | Schema_Builtin | Size: 0x1
			bool m_bLightDynamic4; // 0x6c7 | Schema_Builtin | Size: 0x1
			bool m_bUseNormal; // 0x6c8 | Schema_Builtin | Size: 0x1
			bool m_bUseHLambert; // 0x6c9 | Schema_Builtin | Size: 0x1
			S2_PAD(0x4);
			bool m_bClampLowerRange; // 0x6ce | Schema_Builtin | Size: 0x1
			bool m_bClampUpperRange; // 0x6cf | Schema_Builtin | Size: 0x1
		};
		static_assert(offsetof(CS2::particles::C_OP_ControlpointLight, m_flScale) == 0x1C0, "m_flScale in C_OP_ControlpointLight should be at offset 0x1C0");
		static_assert(offsetof(CS2::particles::C_OP_ControlpointLight, m_nControlPoint1) == 0x650, "m_nControlPoint1 in C_OP_ControlpointLight should be at offset 0x650");
		static_assert(offsetof(CS2::particles::C_OP_ControlpointLight, m_nControlPoint2) == 0x654, "m_nControlPoint2 in C_OP_ControlpointLight should be at offset 0x654");
		static_assert(offsetof(CS2::particles::C_OP_ControlpointLight, m_nControlPoint3) == 0x658, "m_nControlPoint3 in C_OP_ControlpointLight should be at offset 0x658");
		static_assert(offsetof(CS2::particles::C_OP_ControlpointLight, m_nControlPoint4) == 0x65C, "m_nControlPoint4 in C_OP_ControlpointLight should be at offset 0x65C");
		static_assert(offsetof(CS2::particles::C_OP_ControlpointLight, m_vecCPOffset1) == 0x660, "m_vecCPOffset1 in C_OP_ControlpointLight should be at offset 0x660");
		static_assert(offsetof(CS2::particles::C_OP_ControlpointLight, m_vecCPOffset2) == 0x66C, "m_vecCPOffset2 in C_OP_ControlpointLight should be at offset 0x66C");
		static_assert(offsetof(CS2::particles::C_OP_ControlpointLight, m_vecCPOffset3) == 0x678, "m_vecCPOffset3 in C_OP_ControlpointLight should be at offset 0x678");
		static_assert(offsetof(CS2::particles::C_OP_ControlpointLight, m_vecCPOffset4) == 0x684, "m_vecCPOffset4 in C_OP_ControlpointLight should be at offset 0x684");
		static_assert(offsetof(CS2::particles::C_OP_ControlpointLight, m_LightFiftyDist1) == 0x690, "m_LightFiftyDist1 in C_OP_ControlpointLight should be at offset 0x690");
		static_assert(offsetof(CS2::particles::C_OP_ControlpointLight, m_LightZeroDist1) == 0x694, "m_LightZeroDist1 in C_OP_ControlpointLight should be at offset 0x694");
		static_assert(offsetof(CS2::particles::C_OP_ControlpointLight, m_LightFiftyDist2) == 0x698, "m_LightFiftyDist2 in C_OP_ControlpointLight should be at offset 0x698");
		static_assert(offsetof(CS2::particles::C_OP_ControlpointLight, m_LightZeroDist2) == 0x69C, "m_LightZeroDist2 in C_OP_ControlpointLight should be at offset 0x69C");
		static_assert(offsetof(CS2::particles::C_OP_ControlpointLight, m_LightFiftyDist3) == 0x6A0, "m_LightFiftyDist3 in C_OP_ControlpointLight should be at offset 0x6A0");
		static_assert(offsetof(CS2::particles::C_OP_ControlpointLight, m_LightZeroDist3) == 0x6A4, "m_LightZeroDist3 in C_OP_ControlpointLight should be at offset 0x6A4");
		static_assert(offsetof(CS2::particles::C_OP_ControlpointLight, m_LightFiftyDist4) == 0x6A8, "m_LightFiftyDist4 in C_OP_ControlpointLight should be at offset 0x6A8");
		static_assert(offsetof(CS2::particles::C_OP_ControlpointLight, m_LightZeroDist4) == 0x6AC, "m_LightZeroDist4 in C_OP_ControlpointLight should be at offset 0x6AC");
		static_assert(offsetof(CS2::particles::C_OP_ControlpointLight, m_LightColor1) == 0x6B0, "m_LightColor1 in C_OP_ControlpointLight should be at offset 0x6B0");
		static_assert(offsetof(CS2::particles::C_OP_ControlpointLight, m_LightColor2) == 0x6B4, "m_LightColor2 in C_OP_ControlpointLight should be at offset 0x6B4");
		static_assert(offsetof(CS2::particles::C_OP_ControlpointLight, m_LightColor3) == 0x6B8, "m_LightColor3 in C_OP_ControlpointLight should be at offset 0x6B8");
		static_assert(offsetof(CS2::particles::C_OP_ControlpointLight, m_LightColor4) == 0x6BC, "m_LightColor4 in C_OP_ControlpointLight should be at offset 0x6BC");
		static_assert(offsetof(CS2::particles::C_OP_ControlpointLight, m_bLightType1) == 0x6C0, "m_bLightType1 in C_OP_ControlpointLight should be at offset 0x6C0");
		static_assert(offsetof(CS2::particles::C_OP_ControlpointLight, m_bLightType2) == 0x6C1, "m_bLightType2 in C_OP_ControlpointLight should be at offset 0x6C1");
		static_assert(offsetof(CS2::particles::C_OP_ControlpointLight, m_bLightType3) == 0x6C2, "m_bLightType3 in C_OP_ControlpointLight should be at offset 0x6C2");
		static_assert(offsetof(CS2::particles::C_OP_ControlpointLight, m_bLightType4) == 0x6C3, "m_bLightType4 in C_OP_ControlpointLight should be at offset 0x6C3");
		static_assert(offsetof(CS2::particles::C_OP_ControlpointLight, m_bLightDynamic1) == 0x6C4, "m_bLightDynamic1 in C_OP_ControlpointLight should be at offset 0x6C4");
		static_assert(offsetof(CS2::particles::C_OP_ControlpointLight, m_bLightDynamic2) == 0x6C5, "m_bLightDynamic2 in C_OP_ControlpointLight should be at offset 0x6C5");
		static_assert(offsetof(CS2::particles::C_OP_ControlpointLight, m_bLightDynamic3) == 0x6C6, "m_bLightDynamic3 in C_OP_ControlpointLight should be at offset 0x6C6");
		static_assert(offsetof(CS2::particles::C_OP_ControlpointLight, m_bLightDynamic4) == 0x6C7, "m_bLightDynamic4 in C_OP_ControlpointLight should be at offset 0x6C7");
		static_assert(offsetof(CS2::particles::C_OP_ControlpointLight, m_bUseNormal) == 0x6C8, "m_bUseNormal in C_OP_ControlpointLight should be at offset 0x6C8");
		static_assert(offsetof(CS2::particles::C_OP_ControlpointLight, m_bUseHLambert) == 0x6C9, "m_bUseHLambert in C_OP_ControlpointLight should be at offset 0x6C9");
		static_assert(offsetof(CS2::particles::C_OP_ControlpointLight, m_bClampLowerRange) == 0x6CE, "m_bClampLowerRange in C_OP_ControlpointLight should be at offset 0x6CE");
		static_assert(offsetof(CS2::particles::C_OP_ControlpointLight, m_bClampUpperRange) == 0x6CF, "m_bClampUpperRange in C_OP_ControlpointLight should be at offset 0x6CF");
		static_assert(sizeof(CS2::particles::C_OP_ControlpointLight) == 0x6D0, "C_OP_ControlpointLight size should be 0x6D0");
	}
}
