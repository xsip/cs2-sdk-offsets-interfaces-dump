// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/particles/CParticleFunctionOperator.hpp>
#include <SDK/particleslib/CParticleModelInput.hpp>
#include <SDK/particleslib/CParticleTransformInput.hpp>
#include <SDK/particles/ParticleAttributeIndex_t.hpp>
#include <SDK/particles/ParticleRotationLockType_t.hpp>
#include <SDK/particleslib/CPerParticleVecInput.hpp>
#include <SDK/particleslib/CPerParticleFloatInput.hpp>



namespace CS2 {
	namespace particles {
		class C_OP_LockToBone : public CS2::particles::CParticleFunctionOperator {
		public:
			particleslib::CParticleModelInput m_modelInput; // 0x1d0 | Schema_DeclaredClass | Size: 0x60
			particleslib::CParticleTransformInput m_transformInput; // 0x230 | Schema_DeclaredClass | Size: 0x68
			float32 m_flLifeTimeFadeStart; // 0x298 | Schema_Builtin | Size: 0x4
			float32 m_flLifeTimeFadeEnd; // 0x29c | Schema_Builtin | Size: 0x4
			float32 m_flJumpThreshold; // 0x2a0 | Schema_Builtin | Size: 0x4
			float32 m_flPrevPosScale; // 0x2a4 | Schema_Builtin | Size: 0x4
			char m_HitboxSetName[128]; // 0x2a8 | Schema_FixedArray | Size: 0x80
			bool m_bRigid; // 0x328 | Schema_Builtin | Size: 0x1
			bool m_bUseBones; // 0x329 | Schema_Builtin | Size: 0x1
			S2_PAD(0x2);
			particles::ParticleAttributeIndex_t m_nFieldOutput; // 0x32c | Schema_DeclaredClass | Size: 0x4
			particles::ParticleAttributeIndex_t m_nFieldOutputPrev; // 0x330 | Schema_DeclaredClass | Size: 0x4
			particles::ParticleRotationLockType_t m_nRotationSetType; // 0x334 | Schema_DeclaredEnum | Size: 0x4
			bool m_bRigidRotationLock; // 0x338 | Schema_Builtin | Size: 0x1
			S2_PAD(0x7);
			particleslib::CPerParticleVecInput m_vecRotation; // 0x340 | Schema_DeclaredClass | Size: 0x6b8
			particleslib::CPerParticleFloatInput m_flRotLerp; // 0x9f8 | Schema_DeclaredClass | Size: 0x170
		};
		static_assert(offsetof(CS2::particles::C_OP_LockToBone, m_modelInput) == 0x1D0, "m_modelInput in C_OP_LockToBone should be at offset 0x1D0");
		static_assert(offsetof(CS2::particles::C_OP_LockToBone, m_transformInput) == 0x230, "m_transformInput in C_OP_LockToBone should be at offset 0x230");
		static_assert(offsetof(CS2::particles::C_OP_LockToBone, m_flLifeTimeFadeStart) == 0x298, "m_flLifeTimeFadeStart in C_OP_LockToBone should be at offset 0x298");
		static_assert(offsetof(CS2::particles::C_OP_LockToBone, m_flLifeTimeFadeEnd) == 0x29C, "m_flLifeTimeFadeEnd in C_OP_LockToBone should be at offset 0x29C");
		static_assert(offsetof(CS2::particles::C_OP_LockToBone, m_flJumpThreshold) == 0x2A0, "m_flJumpThreshold in C_OP_LockToBone should be at offset 0x2A0");
		static_assert(offsetof(CS2::particles::C_OP_LockToBone, m_flPrevPosScale) == 0x2A4, "m_flPrevPosScale in C_OP_LockToBone should be at offset 0x2A4");
		static_assert(offsetof(CS2::particles::C_OP_LockToBone, m_HitboxSetName) == 0x2A8, "m_HitboxSetName in C_OP_LockToBone should be at offset 0x2A8");
		static_assert(offsetof(CS2::particles::C_OP_LockToBone, m_bRigid) == 0x328, "m_bRigid in C_OP_LockToBone should be at offset 0x328");
		static_assert(offsetof(CS2::particles::C_OP_LockToBone, m_bUseBones) == 0x329, "m_bUseBones in C_OP_LockToBone should be at offset 0x329");
		static_assert(offsetof(CS2::particles::C_OP_LockToBone, m_nFieldOutput) == 0x32C, "m_nFieldOutput in C_OP_LockToBone should be at offset 0x32C");
		static_assert(offsetof(CS2::particles::C_OP_LockToBone, m_nFieldOutputPrev) == 0x330, "m_nFieldOutputPrev in C_OP_LockToBone should be at offset 0x330");
		static_assert(offsetof(CS2::particles::C_OP_LockToBone, m_nRotationSetType) == 0x334, "m_nRotationSetType in C_OP_LockToBone should be at offset 0x334");
		static_assert(offsetof(CS2::particles::C_OP_LockToBone, m_bRigidRotationLock) == 0x338, "m_bRigidRotationLock in C_OP_LockToBone should be at offset 0x338");
		static_assert(offsetof(CS2::particles::C_OP_LockToBone, m_vecRotation) == 0x340, "m_vecRotation in C_OP_LockToBone should be at offset 0x340");
		static_assert(offsetof(CS2::particles::C_OP_LockToBone, m_flRotLerp) == 0x9F8, "m_flRotLerp in C_OP_LockToBone should be at offset 0x9F8");
		static_assert(sizeof(CS2::particles::C_OP_LockToBone) == 0xB68, "C_OP_LockToBone size should be 0xB68");
	}
}
