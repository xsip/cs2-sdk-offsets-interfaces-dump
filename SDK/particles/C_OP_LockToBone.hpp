// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>

#include <SDK/particles/CParticleFunctionOperator.hpp>
#include <SDK/particleslib/CParticleModelInput.hpp>
#include <SDK/particleslib/CParticleTransformInput.hpp>
#include <SDK/particles/ParticleAttributeIndex_t.hpp>
#include <SDK/particles/ParticleRotationLockType_t.hpp>
#include <SDK/particleslib/CPerParticleVecInput.hpp>
#include <SDK/particleslib/CPerParticleFloatInput.hpp>



namespace CS2 {
	namespace particles {
		class C_OP_LockToBone : public CS2::particles::CParticleFunctionOperator {
		public:
			particleslib::CParticleModelInput m_modelInput; // 0x1c0 | Schema_DeclaredClass | Size: 0x60
			particleslib::CParticleTransformInput m_transformInput; // 0x220 | Schema_DeclaredClass | Size: 0x68
			float32 m_flLifeTimeFadeStart; // 0x288 | Schema_Builtin | Size: 0x4
			float32 m_flLifeTimeFadeEnd; // 0x28c | Schema_Builtin | Size: 0x4
			float32 m_flJumpThreshold; // 0x290 | Schema_Builtin | Size: 0x4
			float32 m_flPrevPosScale; // 0x294 | Schema_Builtin | Size: 0x4
			char m_HitboxSetName[128]; // 0x298 | Schema_FixedArray | Size: 0x80
			bool m_bRigid; // 0x318 | Schema_Builtin | Size: 0x1
			bool m_bUseBones; // 0x319 | Schema_Builtin | Size: 0x1
			S2_PAD(0x2);
			particles::ParticleAttributeIndex_t m_nFieldOutput; // 0x31c | Schema_DeclaredClass | Size: 0x4
			particles::ParticleAttributeIndex_t m_nFieldOutputPrev; // 0x320 | Schema_DeclaredClass | Size: 0x4
			particles::ParticleRotationLockType_t m_nRotationSetType; // 0x324 | Schema_DeclaredEnum | Size: 0x4
			bool m_bRigidRotationLock; // 0x328 | Schema_Builtin | Size: 0x1
			S2_PAD(0x7);
			particleslib::CPerParticleVecInput m_vecRotation; // 0x330 | Schema_DeclaredClass | Size: 0x678
			particleslib::CPerParticleFloatInput m_flRotLerp; // 0x9a8 | Schema_DeclaredClass | Size: 0x160
		};
		static_assert(offsetof(CS2::particles::C_OP_LockToBone, m_modelInput) == 0x1C0, "m_modelInput in C_OP_LockToBone should be at offset 0x1C0");
		static_assert(offsetof(CS2::particles::C_OP_LockToBone, m_transformInput) == 0x220, "m_transformInput in C_OP_LockToBone should be at offset 0x220");
		static_assert(offsetof(CS2::particles::C_OP_LockToBone, m_flLifeTimeFadeStart) == 0x288, "m_flLifeTimeFadeStart in C_OP_LockToBone should be at offset 0x288");
		static_assert(offsetof(CS2::particles::C_OP_LockToBone, m_flLifeTimeFadeEnd) == 0x28C, "m_flLifeTimeFadeEnd in C_OP_LockToBone should be at offset 0x28C");
		static_assert(offsetof(CS2::particles::C_OP_LockToBone, m_flJumpThreshold) == 0x290, "m_flJumpThreshold in C_OP_LockToBone should be at offset 0x290");
		static_assert(offsetof(CS2::particles::C_OP_LockToBone, m_flPrevPosScale) == 0x294, "m_flPrevPosScale in C_OP_LockToBone should be at offset 0x294");
		static_assert(offsetof(CS2::particles::C_OP_LockToBone, m_HitboxSetName) == 0x298, "m_HitboxSetName in C_OP_LockToBone should be at offset 0x298");
		static_assert(offsetof(CS2::particles::C_OP_LockToBone, m_bRigid) == 0x318, "m_bRigid in C_OP_LockToBone should be at offset 0x318");
		static_assert(offsetof(CS2::particles::C_OP_LockToBone, m_bUseBones) == 0x319, "m_bUseBones in C_OP_LockToBone should be at offset 0x319");
		static_assert(offsetof(CS2::particles::C_OP_LockToBone, m_nFieldOutput) == 0x31C, "m_nFieldOutput in C_OP_LockToBone should be at offset 0x31C");
		static_assert(offsetof(CS2::particles::C_OP_LockToBone, m_nFieldOutputPrev) == 0x320, "m_nFieldOutputPrev in C_OP_LockToBone should be at offset 0x320");
		static_assert(offsetof(CS2::particles::C_OP_LockToBone, m_nRotationSetType) == 0x324, "m_nRotationSetType in C_OP_LockToBone should be at offset 0x324");
		static_assert(offsetof(CS2::particles::C_OP_LockToBone, m_bRigidRotationLock) == 0x328, "m_bRigidRotationLock in C_OP_LockToBone should be at offset 0x328");
		static_assert(offsetof(CS2::particles::C_OP_LockToBone, m_vecRotation) == 0x330, "m_vecRotation in C_OP_LockToBone should be at offset 0x330");
		static_assert(offsetof(CS2::particles::C_OP_LockToBone, m_flRotLerp) == 0x9A8, "m_flRotLerp in C_OP_LockToBone should be at offset 0x9A8");
		static_assert(sizeof(CS2::particles::C_OP_LockToBone) == 0xB08, "C_OP_LockToBone size should be 0xB08");
	}
}
