// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/particles/CParticleFunctionOperator.hpp>



namespace CS2 {
	namespace particles {
		class C_OP_TeleportBeam : public CS2::particles::CParticleFunctionOperator {
		public:
			int32_t m_nCPPosition; // 0x1d0 | Schema_Builtin | Size: 0x4
			int32_t m_nCPVelocity; // 0x1d4 | Schema_Builtin | Size: 0x4
			int32_t m_nCPMisc; // 0x1d8 | Schema_Builtin | Size: 0x4
			int32_t m_nCPColor; // 0x1dc | Schema_Builtin | Size: 0x4
			int32_t m_nCPInvalidColor; // 0x1e0 | Schema_Builtin | Size: 0x4
			int32_t m_nCPExtraArcData; // 0x1e4 | Schema_Builtin | Size: 0x4
			GlobalTypes::Vector m_vGravity; // 0x1e8 | Schema_Atomic | Size: 0xc
			float32 m_flArcMaxDuration; // 0x1f4 | Schema_Builtin | Size: 0x4
			float32 m_flSegmentBreak; // 0x1f8 | Schema_Builtin | Size: 0x4
			float32 m_flArcSpeed; // 0x1fc | Schema_Builtin | Size: 0x4
			float32 m_flAlpha; // 0x200 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4); // End padding
		};
		static_assert(offsetof(CS2::particles::C_OP_TeleportBeam, m_nCPPosition) == 0x1D0, "m_nCPPosition in C_OP_TeleportBeam should be at offset 0x1D0");
		static_assert(offsetof(CS2::particles::C_OP_TeleportBeam, m_nCPVelocity) == 0x1D4, "m_nCPVelocity in C_OP_TeleportBeam should be at offset 0x1D4");
		static_assert(offsetof(CS2::particles::C_OP_TeleportBeam, m_nCPMisc) == 0x1D8, "m_nCPMisc in C_OP_TeleportBeam should be at offset 0x1D8");
		static_assert(offsetof(CS2::particles::C_OP_TeleportBeam, m_nCPColor) == 0x1DC, "m_nCPColor in C_OP_TeleportBeam should be at offset 0x1DC");
		static_assert(offsetof(CS2::particles::C_OP_TeleportBeam, m_nCPInvalidColor) == 0x1E0, "m_nCPInvalidColor in C_OP_TeleportBeam should be at offset 0x1E0");
		static_assert(offsetof(CS2::particles::C_OP_TeleportBeam, m_nCPExtraArcData) == 0x1E4, "m_nCPExtraArcData in C_OP_TeleportBeam should be at offset 0x1E4");
		static_assert(offsetof(CS2::particles::C_OP_TeleportBeam, m_vGravity) == 0x1E8, "m_vGravity in C_OP_TeleportBeam should be at offset 0x1E8");
		static_assert(offsetof(CS2::particles::C_OP_TeleportBeam, m_flArcMaxDuration) == 0x1F4, "m_flArcMaxDuration in C_OP_TeleportBeam should be at offset 0x1F4");
		static_assert(offsetof(CS2::particles::C_OP_TeleportBeam, m_flSegmentBreak) == 0x1F8, "m_flSegmentBreak in C_OP_TeleportBeam should be at offset 0x1F8");
		static_assert(offsetof(CS2::particles::C_OP_TeleportBeam, m_flArcSpeed) == 0x1FC, "m_flArcSpeed in C_OP_TeleportBeam should be at offset 0x1FC");
		static_assert(offsetof(CS2::particles::C_OP_TeleportBeam, m_flAlpha) == 0x200, "m_flAlpha in C_OP_TeleportBeam should be at offset 0x200");
		static_assert(sizeof(CS2::particles::C_OP_TeleportBeam) == 0x208, "C_OP_TeleportBeam size should be 0x208");
	}
}
