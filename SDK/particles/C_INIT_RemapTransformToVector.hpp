// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/particles/CParticleFunctionInitializer.hpp>
#include <SDK/particles/ParticleAttributeIndex_t.hpp>
#include <SDK/particleslib/CParticleTransformInput.hpp>
#include <SDK/particles/ParticleSetMethod_t.hpp>



namespace CS2 {
	namespace particles {
		class C_INIT_RemapTransformToVector : public CS2::particles::CParticleFunctionInitializer {
		public:
			particles::ParticleAttributeIndex_t m_nFieldOutput; // 0x1d8 | Schema_DeclaredClass | Size: 0x4
			GlobalTypes::Vector m_vInputMin; // 0x1dc | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vInputMax; // 0x1e8 | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vOutputMin; // 0x1f4 | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vOutputMax; // 0x200 | Schema_Atomic | Size: 0xc
			S2_PAD(0x4);
			particleslib::CParticleTransformInput m_TransformInput; // 0x210 | Schema_DeclaredClass | Size: 0x68
			particleslib::CParticleTransformInput m_LocalSpaceTransform; // 0x278 | Schema_DeclaredClass | Size: 0x68
			float32 m_flStartTime; // 0x2e0 | Schema_Builtin | Size: 0x4
			float32 m_flEndTime; // 0x2e4 | Schema_Builtin | Size: 0x4
			particles::ParticleSetMethod_t m_nSetMethod; // 0x2e8 | Schema_DeclaredEnum | Size: 0x4
			bool m_bOffset; // 0x2ec | Schema_Builtin | Size: 0x1
			bool m_bAccelerate; // 0x2ed | Schema_Builtin | Size: 0x1
			S2_PAD(0x2);
			float32 m_flRemapBias; // 0x2f0 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4); // End padding
		};
		static_assert(offsetof(CS2::particles::C_INIT_RemapTransformToVector, m_nFieldOutput) == 0x1D8, "m_nFieldOutput in C_INIT_RemapTransformToVector should be at offset 0x1D8");
		static_assert(offsetof(CS2::particles::C_INIT_RemapTransformToVector, m_vInputMin) == 0x1DC, "m_vInputMin in C_INIT_RemapTransformToVector should be at offset 0x1DC");
		static_assert(offsetof(CS2::particles::C_INIT_RemapTransformToVector, m_vInputMax) == 0x1E8, "m_vInputMax in C_INIT_RemapTransformToVector should be at offset 0x1E8");
		static_assert(offsetof(CS2::particles::C_INIT_RemapTransformToVector, m_vOutputMin) == 0x1F4, "m_vOutputMin in C_INIT_RemapTransformToVector should be at offset 0x1F4");
		static_assert(offsetof(CS2::particles::C_INIT_RemapTransformToVector, m_vOutputMax) == 0x200, "m_vOutputMax in C_INIT_RemapTransformToVector should be at offset 0x200");
		static_assert(offsetof(CS2::particles::C_INIT_RemapTransformToVector, m_TransformInput) == 0x210, "m_TransformInput in C_INIT_RemapTransformToVector should be at offset 0x210");
		static_assert(offsetof(CS2::particles::C_INIT_RemapTransformToVector, m_LocalSpaceTransform) == 0x278, "m_LocalSpaceTransform in C_INIT_RemapTransformToVector should be at offset 0x278");
		static_assert(offsetof(CS2::particles::C_INIT_RemapTransformToVector, m_flStartTime) == 0x2E0, "m_flStartTime in C_INIT_RemapTransformToVector should be at offset 0x2E0");
		static_assert(offsetof(CS2::particles::C_INIT_RemapTransformToVector, m_flEndTime) == 0x2E4, "m_flEndTime in C_INIT_RemapTransformToVector should be at offset 0x2E4");
		static_assert(offsetof(CS2::particles::C_INIT_RemapTransformToVector, m_nSetMethod) == 0x2E8, "m_nSetMethod in C_INIT_RemapTransformToVector should be at offset 0x2E8");
		static_assert(offsetof(CS2::particles::C_INIT_RemapTransformToVector, m_bOffset) == 0x2EC, "m_bOffset in C_INIT_RemapTransformToVector should be at offset 0x2EC");
		static_assert(offsetof(CS2::particles::C_INIT_RemapTransformToVector, m_bAccelerate) == 0x2ED, "m_bAccelerate in C_INIT_RemapTransformToVector should be at offset 0x2ED");
		static_assert(offsetof(CS2::particles::C_INIT_RemapTransformToVector, m_flRemapBias) == 0x2F0, "m_flRemapBias in C_INIT_RemapTransformToVector should be at offset 0x2F0");
		static_assert(sizeof(CS2::particles::C_INIT_RemapTransformToVector) == 0x2F8, "C_INIT_RemapTransformToVector size should be 0x2F8");
	}
}
