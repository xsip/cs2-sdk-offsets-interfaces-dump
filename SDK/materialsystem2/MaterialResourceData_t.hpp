// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif





namespace CS2 {
	namespace materialsystem2 {
		class MaterialParamInt_t;
		class MaterialParamFloat_t;
		class MaterialParamVector_t;
		class MaterialParamTexture_t;
		class MaterialParamBuffer_t;
		class MaterialParamString_t;
	}
}


using namespace GlobalTypes;
namespace CS2 {
	namespace materialsystem2 {
		class MaterialResourceData_t  {
		public:
			GlobalTypes::CUtlString m_materialName; // 0x0 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlString m_shaderName; // 0x8 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlVector<materialsystem2::MaterialParamInt_t> m_intParams; // 0x10 | Schema_Atomic | Size: 0x18
			// char  m_intParams[0x18]; // 0x10 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector<materialsystem2::MaterialParamFloat_t> m_floatParams; // 0x28 | Schema_Atomic | Size: 0x18
			// char  m_floatParams[0x18]; // 0x28 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector<materialsystem2::MaterialParamVector_t> m_vectorParams; // 0x40 | Schema_Atomic | Size: 0x18
			// char  m_vectorParams[0x18]; // 0x40 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector<materialsystem2::MaterialParamTexture_t> m_textureParams; // 0x58 | Schema_Atomic | Size: 0x18
			// char  m_textureParams[0x18]; // 0x58 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector<materialsystem2::MaterialParamBuffer_t> m_dynamicParams; // 0x70 | Schema_Atomic | Size: 0x18
			// char  m_dynamicParams[0x18]; // 0x70 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector<materialsystem2::MaterialParamBuffer_t> m_dynamicTextureParams; // 0x88 | Schema_Atomic | Size: 0x18
			// char  m_dynamicTextureParams[0x18]; // 0x88 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector<materialsystem2::MaterialParamInt_t> m_intAttributes; // 0xa0 | Schema_Atomic | Size: 0x18
			// char  m_intAttributes[0x18]; // 0xa0 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector<materialsystem2::MaterialParamFloat_t> m_floatAttributes; // 0xb8 | Schema_Atomic | Size: 0x18
			// char  m_floatAttributes[0x18]; // 0xb8 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector<materialsystem2::MaterialParamVector_t> m_vectorAttributes; // 0xd0 | Schema_Atomic | Size: 0x18
			// char  m_vectorAttributes[0x18]; // 0xd0 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector<materialsystem2::MaterialParamTexture_t> m_textureAttributes; // 0xe8 | Schema_Atomic | Size: 0x18
			// char  m_textureAttributes[0x18]; // 0xe8 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector<materialsystem2::MaterialParamString_t> m_stringAttributes; // 0x100 | Schema_Atomic | Size: 0x18
			// char  m_stringAttributes[0x18]; // 0x100 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector<GlobalTypes::CUtlString> m_renderAttributesUsed; // 0x118 | Schema_Atomic | Size: 0x18
			// char  m_renderAttributesUsed[0x18]; // 0x118 | Schema_Atomic | Size: 0x18
		};
		static_assert(offsetof(CS2::materialsystem2::MaterialResourceData_t, m_materialName) == 0x0, "m_materialName in MaterialResourceData_t should be at offset 0x0");
		static_assert(offsetof(CS2::materialsystem2::MaterialResourceData_t, m_shaderName) == 0x8, "m_shaderName in MaterialResourceData_t should be at offset 0x8");
		static_assert(offsetof(CS2::materialsystem2::MaterialResourceData_t, m_intParams) == 0x10, "m_intParams in MaterialResourceData_t should be at offset 0x10");
		static_assert(offsetof(CS2::materialsystem2::MaterialResourceData_t, m_floatParams) == 0x28, "m_floatParams in MaterialResourceData_t should be at offset 0x28");
		static_assert(offsetof(CS2::materialsystem2::MaterialResourceData_t, m_vectorParams) == 0x40, "m_vectorParams in MaterialResourceData_t should be at offset 0x40");
		static_assert(offsetof(CS2::materialsystem2::MaterialResourceData_t, m_textureParams) == 0x58, "m_textureParams in MaterialResourceData_t should be at offset 0x58");
		static_assert(offsetof(CS2::materialsystem2::MaterialResourceData_t, m_dynamicParams) == 0x70, "m_dynamicParams in MaterialResourceData_t should be at offset 0x70");
		static_assert(offsetof(CS2::materialsystem2::MaterialResourceData_t, m_dynamicTextureParams) == 0x88, "m_dynamicTextureParams in MaterialResourceData_t should be at offset 0x88");
		static_assert(offsetof(CS2::materialsystem2::MaterialResourceData_t, m_intAttributes) == 0xA0, "m_intAttributes in MaterialResourceData_t should be at offset 0xA0");
		static_assert(offsetof(CS2::materialsystem2::MaterialResourceData_t, m_floatAttributes) == 0xB8, "m_floatAttributes in MaterialResourceData_t should be at offset 0xB8");
		static_assert(offsetof(CS2::materialsystem2::MaterialResourceData_t, m_vectorAttributes) == 0xD0, "m_vectorAttributes in MaterialResourceData_t should be at offset 0xD0");
		static_assert(offsetof(CS2::materialsystem2::MaterialResourceData_t, m_textureAttributes) == 0xE8, "m_textureAttributes in MaterialResourceData_t should be at offset 0xE8");
		static_assert(offsetof(CS2::materialsystem2::MaterialResourceData_t, m_stringAttributes) == 0x100, "m_stringAttributes in MaterialResourceData_t should be at offset 0x100");
		static_assert(offsetof(CS2::materialsystem2::MaterialResourceData_t, m_renderAttributesUsed) == 0x118, "m_renderAttributesUsed in MaterialResourceData_t should be at offset 0x118");
		static_assert(sizeof(CS2::materialsystem2::MaterialResourceData_t) == 0x130, "MaterialResourceData_t size should be 0x130");
	}
}
