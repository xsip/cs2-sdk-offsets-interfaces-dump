// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/materialsystem2/BloomBlendMode_t.hpp>





using namespace GlobalTypes;
namespace CS2 {
	namespace materialsystem2 {
		class PostProcessingBloomParameters_t  {
		public:
			materialsystem2::BloomBlendMode_t m_blendMode; // 0x0 | Schema_DeclaredEnum | Size: 0x4
			float32 m_flBloomStrength; // 0x4 | Schema_Builtin | Size: 0x4
			float32 m_flScreenBloomStrength; // 0x8 | Schema_Builtin | Size: 0x4
			float32 m_flBlurBloomStrength; // 0xc | Schema_Builtin | Size: 0x4
			float32 m_flBloomThreshold; // 0x10 | Schema_Builtin | Size: 0x4
			float32 m_flBloomThresholdWidth; // 0x14 | Schema_Builtin | Size: 0x4
			float32 m_flSkyboxBloomStrength; // 0x18 | Schema_Builtin | Size: 0x4
			float32 m_flBloomStartValue; // 0x1c | Schema_Builtin | Size: 0x4
			float32 m_flComputeBloomStrength; // 0x20 | Schema_Builtin | Size: 0x4
			float32 m_flComputeBloomThreshold; // 0x24 | Schema_Builtin | Size: 0x4
			float32 m_flComputeBloomRadius; // 0x28 | Schema_Builtin | Size: 0x4
			float32 m_flComputeBloomEffectsScale; // 0x2c | Schema_Builtin | Size: 0x4
			float32 m_flComputeBloomLensDirtStrength; // 0x30 | Schema_Builtin | Size: 0x4
			float32 m_flComputeBloomLensDirtBlackLevel; // 0x34 | Schema_Builtin | Size: 0x4
			float32 m_flBlurWeight[5]; // 0x38 | Schema_FixedArray | Size: 0x14
			GlobalTypes::Vector m_vBlurTint[5]; // 0x4c | Schema_FixedArray | Size: 0x3c
		};
		static_assert(offsetof(CS2::materialsystem2::PostProcessingBloomParameters_t, m_blendMode) == 0x0, "m_blendMode in PostProcessingBloomParameters_t should be at offset 0x0");
		static_assert(offsetof(CS2::materialsystem2::PostProcessingBloomParameters_t, m_flBloomStrength) == 0x4, "m_flBloomStrength in PostProcessingBloomParameters_t should be at offset 0x4");
		static_assert(offsetof(CS2::materialsystem2::PostProcessingBloomParameters_t, m_flScreenBloomStrength) == 0x8, "m_flScreenBloomStrength in PostProcessingBloomParameters_t should be at offset 0x8");
		static_assert(offsetof(CS2::materialsystem2::PostProcessingBloomParameters_t, m_flBlurBloomStrength) == 0xC, "m_flBlurBloomStrength in PostProcessingBloomParameters_t should be at offset 0xC");
		static_assert(offsetof(CS2::materialsystem2::PostProcessingBloomParameters_t, m_flBloomThreshold) == 0x10, "m_flBloomThreshold in PostProcessingBloomParameters_t should be at offset 0x10");
		static_assert(offsetof(CS2::materialsystem2::PostProcessingBloomParameters_t, m_flBloomThresholdWidth) == 0x14, "m_flBloomThresholdWidth in PostProcessingBloomParameters_t should be at offset 0x14");
		static_assert(offsetof(CS2::materialsystem2::PostProcessingBloomParameters_t, m_flSkyboxBloomStrength) == 0x18, "m_flSkyboxBloomStrength in PostProcessingBloomParameters_t should be at offset 0x18");
		static_assert(offsetof(CS2::materialsystem2::PostProcessingBloomParameters_t, m_flBloomStartValue) == 0x1C, "m_flBloomStartValue in PostProcessingBloomParameters_t should be at offset 0x1C");
		static_assert(offsetof(CS2::materialsystem2::PostProcessingBloomParameters_t, m_flComputeBloomStrength) == 0x20, "m_flComputeBloomStrength in PostProcessingBloomParameters_t should be at offset 0x20");
		static_assert(offsetof(CS2::materialsystem2::PostProcessingBloomParameters_t, m_flComputeBloomThreshold) == 0x24, "m_flComputeBloomThreshold in PostProcessingBloomParameters_t should be at offset 0x24");
		static_assert(offsetof(CS2::materialsystem2::PostProcessingBloomParameters_t, m_flComputeBloomRadius) == 0x28, "m_flComputeBloomRadius in PostProcessingBloomParameters_t should be at offset 0x28");
		static_assert(offsetof(CS2::materialsystem2::PostProcessingBloomParameters_t, m_flComputeBloomEffectsScale) == 0x2C, "m_flComputeBloomEffectsScale in PostProcessingBloomParameters_t should be at offset 0x2C");
		static_assert(offsetof(CS2::materialsystem2::PostProcessingBloomParameters_t, m_flComputeBloomLensDirtStrength) == 0x30, "m_flComputeBloomLensDirtStrength in PostProcessingBloomParameters_t should be at offset 0x30");
		static_assert(offsetof(CS2::materialsystem2::PostProcessingBloomParameters_t, m_flComputeBloomLensDirtBlackLevel) == 0x34, "m_flComputeBloomLensDirtBlackLevel in PostProcessingBloomParameters_t should be at offset 0x34");
		static_assert(offsetof(CS2::materialsystem2::PostProcessingBloomParameters_t, m_flBlurWeight) == 0x38, "m_flBlurWeight in PostProcessingBloomParameters_t should be at offset 0x38");
		static_assert(offsetof(CS2::materialsystem2::PostProcessingBloomParameters_t, m_vBlurTint) == 0x4C, "m_vBlurTint in PostProcessingBloomParameters_t should be at offset 0x4C");
		static_assert(sizeof(CS2::materialsystem2::PostProcessingBloomParameters_t) == 0x88, "PostProcessingBloomParameters_t size should be 0x88");
	}
}
