// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif







using namespace GlobalTypes;
namespace CS2 {
	namespace physicslib {
		class FeHingeLimit_t  {
		public:
			uint16_t nNode[6]; // 0x0 | Schema_FixedArray | Size: 0xc
			uint32_t nFlags; // 0xc | Schema_Builtin | Size: 0x4
			float32 flWeight4; // 0x10 | Schema_Builtin | Size: 0x4
			float32 flWeight5; // 0x14 | Schema_Builtin | Size: 0x4
			float32 flAngleCenter; // 0x18 | Schema_Builtin | Size: 0x4
			float32 flAngleExtents; // 0x1c | Schema_Builtin | Size: 0x4
		};
		static_assert(offsetof(CS2::physicslib::FeHingeLimit_t, nNode) == 0x0, "nNode in FeHingeLimit_t should be at offset 0x0");
		static_assert(offsetof(CS2::physicslib::FeHingeLimit_t, nFlags) == 0xC, "nFlags in FeHingeLimit_t should be at offset 0xC");
		static_assert(offsetof(CS2::physicslib::FeHingeLimit_t, flWeight4) == 0x10, "flWeight4 in FeHingeLimit_t should be at offset 0x10");
		static_assert(offsetof(CS2::physicslib::FeHingeLimit_t, flWeight5) == 0x14, "flWeight5 in FeHingeLimit_t should be at offset 0x14");
		static_assert(offsetof(CS2::physicslib::FeHingeLimit_t, flAngleCenter) == 0x18, "flAngleCenter in FeHingeLimit_t should be at offset 0x18");
		static_assert(offsetof(CS2::physicslib::FeHingeLimit_t, flAngleExtents) == 0x1C, "flAngleExtents in FeHingeLimit_t should be at offset 0x1C");
		static_assert(sizeof(CS2::physicslib::FeHingeLimit_t) == 0x20, "FeHingeLimit_t size should be 0x20");
	}
}
