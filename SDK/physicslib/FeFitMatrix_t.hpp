// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif







using namespace GlobalTypes;
namespace CS2 {
	namespace physicslib {
		class FeFitMatrix_t  {
		public:
			GlobalTypes::CTransform bone; // 0x0 | Schema_Atomic | Size: 0x20
			GlobalTypes::Vector vCenter; // 0x20 | Schema_Atomic | Size: 0xc
			uint16_t nEnd; // 0x2c | Schema_Builtin | Size: 0x2
			uint16_t nNode; // 0x2e | Schema_Builtin | Size: 0x2
			uint16_t nBeginDynamic; // 0x30 | Schema_Builtin | Size: 0x2
			S2_PAD(0xe); // End padding
		};
		static_assert(offsetof(CS2::physicslib::FeFitMatrix_t, bone) == 0x0, "bone in FeFitMatrix_t should be at offset 0x0");
		static_assert(offsetof(CS2::physicslib::FeFitMatrix_t, vCenter) == 0x20, "vCenter in FeFitMatrix_t should be at offset 0x20");
		static_assert(offsetof(CS2::physicslib::FeFitMatrix_t, nEnd) == 0x2C, "nEnd in FeFitMatrix_t should be at offset 0x2C");
		static_assert(offsetof(CS2::physicslib::FeFitMatrix_t, nNode) == 0x2E, "nNode in FeFitMatrix_t should be at offset 0x2E");
		static_assert(offsetof(CS2::physicslib::FeFitMatrix_t, nBeginDynamic) == 0x30, "nBeginDynamic in FeFitMatrix_t should be at offset 0x30");
		static_assert(sizeof(CS2::physicslib::FeFitMatrix_t) == 0x40, "FeFitMatrix_t size should be 0x40");
	}
}
