// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif







using namespace GlobalTypes;
namespace CS2 {
	namespace physicslib {
		class FeTwistConstraint_t  {
		public:
			uint16_t nNodeOrient; // 0x0 | Schema_Builtin | Size: 0x2
			uint16_t nNodeEnd; // 0x2 | Schema_Builtin | Size: 0x2
			float32 flTwistRelax; // 0x4 | Schema_Builtin | Size: 0x4
			float32 flSwingRelax; // 0x8 | Schema_Builtin | Size: 0x4
		};
		static_assert(offsetof(CS2::physicslib::FeTwistConstraint_t, nNodeOrient) == 0x0, "nNodeOrient in FeTwistConstraint_t should be at offset 0x0");
		static_assert(offsetof(CS2::physicslib::FeTwistConstraint_t, nNodeEnd) == 0x2, "nNodeEnd in FeTwistConstraint_t should be at offset 0x2");
		static_assert(offsetof(CS2::physicslib::FeTwistConstraint_t, flTwistRelax) == 0x4, "flTwistRelax in FeTwistConstraint_t should be at offset 0x4");
		static_assert(offsetof(CS2::physicslib::FeTwistConstraint_t, flSwingRelax) == 0x8, "flSwingRelax in FeTwistConstraint_t should be at offset 0x8");
		static_assert(sizeof(CS2::physicslib::FeTwistConstraint_t) == 0xC, "FeTwistConstraint_t size should be 0xC");
	}
}
