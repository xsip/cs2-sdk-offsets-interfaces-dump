// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif







using namespace GlobalTypes;
namespace CS2 {
	namespace physicslib {
		class FeSDFRigid_t  {
		public:
			GlobalTypes::Vector vLocalMin; // 0x0 | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector vLocalMax; // 0xc | Schema_Atomic | Size: 0xc
			float32 flBounciness; // 0x18 | Schema_Builtin | Size: 0x4
			uint16_t nNode; // 0x1c | Schema_Builtin | Size: 0x2
			uint16_t nCollisionMask; // 0x1e | Schema_Builtin | Size: 0x2
			uint16_t nVertexMapIndex; // 0x20 | Schema_Builtin | Size: 0x2
			uint16_t nFlags; // 0x22 | Schema_Builtin | Size: 0x2
			S2_PAD(0x4);
			GlobalTypes::CUtlVector< float32 > m_Distances; // 0x28 | Schema_Atomic | Size: 0x18
			// char  m_Distances[0x18]; // 0x28 | Schema_Atomic | Size: 0x18
			int32_t m_nWidth; // 0x40 | Schema_Builtin | Size: 0x4
			int32_t m_nHeight; // 0x44 | Schema_Builtin | Size: 0x4
			int32_t m_nDepth; // 0x48 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4); // End padding
		};
		static_assert(offsetof(CS2::physicslib::FeSDFRigid_t, vLocalMin) == 0x0, "vLocalMin in FeSDFRigid_t should be at offset 0x0");
		static_assert(offsetof(CS2::physicslib::FeSDFRigid_t, vLocalMax) == 0xC, "vLocalMax in FeSDFRigid_t should be at offset 0xC");
		static_assert(offsetof(CS2::physicslib::FeSDFRigid_t, flBounciness) == 0x18, "flBounciness in FeSDFRigid_t should be at offset 0x18");
		static_assert(offsetof(CS2::physicslib::FeSDFRigid_t, nNode) == 0x1C, "nNode in FeSDFRigid_t should be at offset 0x1C");
		static_assert(offsetof(CS2::physicslib::FeSDFRigid_t, nCollisionMask) == 0x1E, "nCollisionMask in FeSDFRigid_t should be at offset 0x1E");
		static_assert(offsetof(CS2::physicslib::FeSDFRigid_t, nVertexMapIndex) == 0x20, "nVertexMapIndex in FeSDFRigid_t should be at offset 0x20");
		static_assert(offsetof(CS2::physicslib::FeSDFRigid_t, nFlags) == 0x22, "nFlags in FeSDFRigid_t should be at offset 0x22");
		static_assert(offsetof(CS2::physicslib::FeSDFRigid_t, m_Distances) == 0x28, "m_Distances in FeSDFRigid_t should be at offset 0x28");
		static_assert(offsetof(CS2::physicslib::FeSDFRigid_t, m_nWidth) == 0x40, "m_nWidth in FeSDFRigid_t should be at offset 0x40");
		static_assert(offsetof(CS2::physicslib::FeSDFRigid_t, m_nHeight) == 0x44, "m_nHeight in FeSDFRigid_t should be at offset 0x44");
		static_assert(offsetof(CS2::physicslib::FeSDFRigid_t, m_nDepth) == 0x48, "m_nDepth in FeSDFRigid_t should be at offset 0x48");
		static_assert(sizeof(CS2::physicslib::FeSDFRigid_t) == 0x50, "FeSDFRigid_t size should be 0x50");
	}
}
