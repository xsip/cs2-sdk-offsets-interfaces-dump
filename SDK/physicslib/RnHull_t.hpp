// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>

#include <SDK/mathlib_extended/AABB_t.hpp>



namespace CS2 {
	namespace physicslib {
		class CRegionSVM;
	}
}
namespace CS2 {
	namespace physicslib {
		class RnHull_t  {
		public:
			GlobalTypes::Vector m_vCentroid; // 0x0 | Schema_Atomic | Size: 0xc
			float32 m_flMaxAngularRadius; // 0xc | Schema_Builtin | Size: 0x4
			mathlib_extended::AABB_t m_Bounds; // 0x10 | Schema_DeclaredClass | Size: 0x18
			GlobalTypes::Vector m_vOrthographicAreas; // 0x28 | Schema_Atomic | Size: 0xc
			GlobalTypes::matrix3x4_t m_MassProperties; // 0x34 | Schema_Atomic | Size: 0x30
			float32 m_flVolume; // 0x64 | Schema_Builtin | Size: 0x4
			float32 m_flSurfaceArea; // 0x68 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4);
			// GlobalTypes::CUtlVector< physicslib::RnVertex_t > m_Vertices; // 0x70 | Schema_Atomic | Size: 0x18
			char  m_Vertices[0x18]; // 0x70 | Schema_Atomic | Size: 0x18
			// GlobalTypes::CUtlGlobalTypes::Vector< Vector > m_VertexPositions; // 0x88 | Schema_Atomic | Size: 0x18
			char  m_VertexPositions[0x18]; // 0x88 | Schema_Atomic | Size: 0x18
			// GlobalTypes::CUtlVector< physicslib::RnHalfEdge_t > m_Edges; // 0xa0 | Schema_Atomic | Size: 0x18
			char  m_Edges[0x18]; // 0xa0 | Schema_Atomic | Size: 0x18
			// GlobalTypes::CUtlVector< physicslib::RnFace_t > m_Faces; // 0xb8 | Schema_Atomic | Size: 0x18
			char  m_Faces[0x18]; // 0xb8 | Schema_Atomic | Size: 0x18
			// GlobalTypes::CUtlVector< physicslib::RnPlane_t > m_FacePlanes; // 0xd0 | Schema_Atomic | Size: 0x18
			char  m_FacePlanes[0x18]; // 0xd0 | Schema_Atomic | Size: 0x18
			uint32_t m_nFlags; // 0xe8 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4);
			physicslib::CRegionSVM* m_pRegionSVM; // 0xf0 | Schema_Ptr | Size: 0x8
		};
		static_assert(offsetof(CS2::physicslib::RnHull_t, m_vCentroid) == 0x0, "m_vCentroid in RnHull_t should be at offset 0x0");
		static_assert(offsetof(CS2::physicslib::RnHull_t, m_flMaxAngularRadius) == 0xC, "m_flMaxAngularRadius in RnHull_t should be at offset 0xC");
		static_assert(offsetof(CS2::physicslib::RnHull_t, m_Bounds) == 0x10, "m_Bounds in RnHull_t should be at offset 0x10");
		static_assert(offsetof(CS2::physicslib::RnHull_t, m_vOrthographicAreas) == 0x28, "m_vOrthographicAreas in RnHull_t should be at offset 0x28");
		static_assert(offsetof(CS2::physicslib::RnHull_t, m_MassProperties) == 0x34, "m_MassProperties in RnHull_t should be at offset 0x34");
		static_assert(offsetof(CS2::physicslib::RnHull_t, m_flVolume) == 0x64, "m_flVolume in RnHull_t should be at offset 0x64");
		static_assert(offsetof(CS2::physicslib::RnHull_t, m_flSurfaceArea) == 0x68, "m_flSurfaceArea in RnHull_t should be at offset 0x68");
		static_assert(offsetof(CS2::physicslib::RnHull_t, m_Vertices) == 0x70, "m_Vertices in RnHull_t should be at offset 0x70");
		static_assert(offsetof(CS2::physicslib::RnHull_t, m_VertexPositions) == 0x88, "m_VertexPositions in RnHull_t should be at offset 0x88");
		static_assert(offsetof(CS2::physicslib::RnHull_t, m_Edges) == 0xA0, "m_Edges in RnHull_t should be at offset 0xA0");
		static_assert(offsetof(CS2::physicslib::RnHull_t, m_Faces) == 0xB8, "m_Faces in RnHull_t should be at offset 0xB8");
		static_assert(offsetof(CS2::physicslib::RnHull_t, m_FacePlanes) == 0xD0, "m_FacePlanes in RnHull_t should be at offset 0xD0");
		static_assert(offsetof(CS2::physicslib::RnHull_t, m_nFlags) == 0xE8, "m_nFlags in RnHull_t should be at offset 0xE8");
		static_assert(offsetof(CS2::physicslib::RnHull_t, m_pRegionSVM) == 0xF0, "m_pRegionSVM in RnHull_t should be at offset 0xF0");
		static_assert(sizeof(CS2::physicslib::RnHull_t) == 0xF8, "RnHull_t size should be 0xF8");
	}
}
