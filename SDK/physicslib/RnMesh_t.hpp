// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif





namespace CS2 {
	namespace physicslib {
		class RnMesh_t  {
		public:
			GlobalTypes::Vector m_vMin; // 0x0 | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vMax; // 0xc | Schema_Atomic | Size: 0xc
			// GlobalTypes::CUtlVector< physicslib::RnNode_t > m_Nodes; // 0x18 | Schema_Atomic | Size: 0x18
			char  m_Nodes[0x18]; // 0x18 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVectorSIMDPaddedVector m_Vertices; // 0x30 | Schema_Atomic | Size: 0x18
			// GlobalTypes::CUtlVector< physicslib::RnTriangle_t > m_Triangles; // 0x48 | Schema_Atomic | Size: 0x18
			char  m_Triangles[0x18]; // 0x48 | Schema_Atomic | Size: 0x18
			// GlobalTypes::CUtlVector< physicslib::RnWing_t > m_Wings; // 0x60 | Schema_Atomic | Size: 0x18
			char  m_Wings[0x18]; // 0x60 | Schema_Atomic | Size: 0x18
			// GlobalTypes::CUtlVector< uint8 > m_TriangleEdgeFlags; // 0x78 | Schema_Atomic | Size: 0x18
			char  m_TriangleEdgeFlags[0x18]; // 0x78 | Schema_Atomic | Size: 0x18
			// GlobalTypes::CUtlVector< uint8 > m_Materials; // 0x90 | Schema_Atomic | Size: 0x18
			char  m_Materials[0x18]; // 0x90 | Schema_Atomic | Size: 0x18
			GlobalTypes::Vector m_vOrthographicAreas; // 0xa8 | Schema_Atomic | Size: 0xc
			uint32_t m_nFlags; // 0xb4 | Schema_Builtin | Size: 0x4
			uint32_t m_nDebugFlags; // 0xb8 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4); // End padding
		};
		static_assert(offsetof(CS2::physicslib::RnMesh_t, m_vMin) == 0x0, "m_vMin in RnMesh_t should be at offset 0x0");
		static_assert(offsetof(CS2::physicslib::RnMesh_t, m_vMax) == 0xC, "m_vMax in RnMesh_t should be at offset 0xC");
		static_assert(offsetof(CS2::physicslib::RnMesh_t, m_Nodes) == 0x18, "m_Nodes in RnMesh_t should be at offset 0x18");
		static_assert(offsetof(CS2::physicslib::RnMesh_t, m_Vertices) == 0x30, "m_Vertices in RnMesh_t should be at offset 0x30");
		static_assert(offsetof(CS2::physicslib::RnMesh_t, m_Triangles) == 0x48, "m_Triangles in RnMesh_t should be at offset 0x48");
		static_assert(offsetof(CS2::physicslib::RnMesh_t, m_Wings) == 0x60, "m_Wings in RnMesh_t should be at offset 0x60");
		static_assert(offsetof(CS2::physicslib::RnMesh_t, m_TriangleEdgeFlags) == 0x78, "m_TriangleEdgeFlags in RnMesh_t should be at offset 0x78");
		static_assert(offsetof(CS2::physicslib::RnMesh_t, m_Materials) == 0x90, "m_Materials in RnMesh_t should be at offset 0x90");
		static_assert(offsetof(CS2::physicslib::RnMesh_t, m_vOrthographicAreas) == 0xA8, "m_vOrthographicAreas in RnMesh_t should be at offset 0xA8");
		static_assert(offsetof(CS2::physicslib::RnMesh_t, m_nFlags) == 0xB4, "m_nFlags in RnMesh_t should be at offset 0xB4");
		static_assert(offsetof(CS2::physicslib::RnMesh_t, m_nDebugFlags) == 0xB8, "m_nDebugFlags in RnMesh_t should be at offset 0xB8");
		static_assert(sizeof(CS2::physicslib::RnMesh_t) == 0xC0, "RnMesh_t size should be 0xC0");
	}
}
