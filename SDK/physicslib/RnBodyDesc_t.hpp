// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/physicslib/DynamicContinuousContactBehavior_t.hpp>





using namespace GlobalTypes;
namespace CS2 {
	namespace physicslib {
		class RnBodyDesc_t  {
		public:
			GlobalTypes::CUtlString m_sDebugName; // 0x0 | Schema_Atomic | Size: 0x8
			GlobalTypes::Vector m_vPosition; // 0x8 | Schema_Atomic | Size: 0xc
			GlobalTypes::QuaternionStorage m_qOrientation; // 0x14 | Schema_Atomic | Size: 0x10
			GlobalTypes::Vector m_vLinearVelocity; // 0x24 | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vAngularVelocity; // 0x30 | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vLocalMassCenter; // 0x3c | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_LocalInertiaInv[3]; // 0x48 | Schema_FixedArray | Size: 0x24
			float32 m_flMassInv; // 0x6c | Schema_Builtin | Size: 0x4
			float32 m_flGameMass; // 0x70 | Schema_Builtin | Size: 0x4
			float32 m_flMassScaleInv; // 0x74 | Schema_Builtin | Size: 0x4
			float32 m_flInertiaScaleInv; // 0x78 | Schema_Builtin | Size: 0x4
			float32 m_flLinearDamping; // 0x7c | Schema_Builtin | Size: 0x4
			float32 m_flAngularDamping; // 0x80 | Schema_Builtin | Size: 0x4
			float32 m_flLinearDrag; // 0x84 | Schema_Builtin | Size: 0x4
			float32 m_flAngularDrag; // 0x88 | Schema_Builtin | Size: 0x4
			float32 m_flLinearBuoyancyDrag; // 0x8c | Schema_Builtin | Size: 0x4
			float32 m_flAngularBuoyancyDrag; // 0x90 | Schema_Builtin | Size: 0x4
			GlobalTypes::Vector m_vLastAwakeForceAccum; // 0x94 | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vLastAwakeTorqueAccum; // 0xa0 | Schema_Atomic | Size: 0xc
			float32 m_flBuoyancyFactor; // 0xac | Schema_Builtin | Size: 0x4
			float32 m_flGravityScale; // 0xb0 | Schema_Builtin | Size: 0x4
			float32 m_flTimeScale; // 0xb4 | Schema_Builtin | Size: 0x4
			int32_t m_nBodyType; // 0xb8 | Schema_Builtin | Size: 0x4
			uint32_t m_nGameIndex; // 0xbc | Schema_Builtin | Size: 0x4
			uint32_t m_nGameFlags; // 0xc0 | Schema_Builtin | Size: 0x4
			int8_t m_nMinVelocityIterations; // 0xc4 | Schema_Builtin | Size: 0x1
			int8_t m_nMinPositionIterations; // 0xc5 | Schema_Builtin | Size: 0x1
			int8_t m_nMassPriority; // 0xc6 | Schema_Builtin | Size: 0x1
			bool m_bEnabled; // 0xc7 | Schema_Builtin | Size: 0x1
			bool m_bSleeping; // 0xc8 | Schema_Builtin | Size: 0x1
			bool m_bIsContinuousEnabled; // 0xc9 | Schema_Builtin | Size: 0x1
			bool m_bDragEnabled; // 0xca | Schema_Builtin | Size: 0x1
			bool m_bBuoyancyDragEnabled; // 0xcb | Schema_Builtin | Size: 0x1
			GlobalTypes::Vector m_vGravity; // 0xcc | Schema_Atomic | Size: 0xc
			bool m_bSpeculativeEnabled; // 0xd8 | Schema_Builtin | Size: 0x1
			bool m_bHasShadowController; // 0xd9 | Schema_Builtin | Size: 0x1
			physicslib::DynamicContinuousContactBehavior_t m_nDynamicContinuousContactBehavior; // 0xda | Schema_DeclaredEnum | Size: 0x1
			S2_PAD(0x5); // End padding
		};
		static_assert(offsetof(CS2::physicslib::RnBodyDesc_t, m_sDebugName) == 0x0, "m_sDebugName in RnBodyDesc_t should be at offset 0x0");
		static_assert(offsetof(CS2::physicslib::RnBodyDesc_t, m_vPosition) == 0x8, "m_vPosition in RnBodyDesc_t should be at offset 0x8");
		static_assert(offsetof(CS2::physicslib::RnBodyDesc_t, m_qOrientation) == 0x14, "m_qOrientation in RnBodyDesc_t should be at offset 0x14");
		static_assert(offsetof(CS2::physicslib::RnBodyDesc_t, m_vLinearVelocity) == 0x24, "m_vLinearVelocity in RnBodyDesc_t should be at offset 0x24");
		static_assert(offsetof(CS2::physicslib::RnBodyDesc_t, m_vAngularVelocity) == 0x30, "m_vAngularVelocity in RnBodyDesc_t should be at offset 0x30");
		static_assert(offsetof(CS2::physicslib::RnBodyDesc_t, m_vLocalMassCenter) == 0x3C, "m_vLocalMassCenter in RnBodyDesc_t should be at offset 0x3C");
		static_assert(offsetof(CS2::physicslib::RnBodyDesc_t, m_LocalInertiaInv) == 0x48, "m_LocalInertiaInv in RnBodyDesc_t should be at offset 0x48");
		static_assert(offsetof(CS2::physicslib::RnBodyDesc_t, m_flMassInv) == 0x6C, "m_flMassInv in RnBodyDesc_t should be at offset 0x6C");
		static_assert(offsetof(CS2::physicslib::RnBodyDesc_t, m_flGameMass) == 0x70, "m_flGameMass in RnBodyDesc_t should be at offset 0x70");
		static_assert(offsetof(CS2::physicslib::RnBodyDesc_t, m_flMassScaleInv) == 0x74, "m_flMassScaleInv in RnBodyDesc_t should be at offset 0x74");
		static_assert(offsetof(CS2::physicslib::RnBodyDesc_t, m_flInertiaScaleInv) == 0x78, "m_flInertiaScaleInv in RnBodyDesc_t should be at offset 0x78");
		static_assert(offsetof(CS2::physicslib::RnBodyDesc_t, m_flLinearDamping) == 0x7C, "m_flLinearDamping in RnBodyDesc_t should be at offset 0x7C");
		static_assert(offsetof(CS2::physicslib::RnBodyDesc_t, m_flAngularDamping) == 0x80, "m_flAngularDamping in RnBodyDesc_t should be at offset 0x80");
		static_assert(offsetof(CS2::physicslib::RnBodyDesc_t, m_flLinearDrag) == 0x84, "m_flLinearDrag in RnBodyDesc_t should be at offset 0x84");
		static_assert(offsetof(CS2::physicslib::RnBodyDesc_t, m_flAngularDrag) == 0x88, "m_flAngularDrag in RnBodyDesc_t should be at offset 0x88");
		static_assert(offsetof(CS2::physicslib::RnBodyDesc_t, m_flLinearBuoyancyDrag) == 0x8C, "m_flLinearBuoyancyDrag in RnBodyDesc_t should be at offset 0x8C");
		static_assert(offsetof(CS2::physicslib::RnBodyDesc_t, m_flAngularBuoyancyDrag) == 0x90, "m_flAngularBuoyancyDrag in RnBodyDesc_t should be at offset 0x90");
		static_assert(offsetof(CS2::physicslib::RnBodyDesc_t, m_vLastAwakeForceAccum) == 0x94, "m_vLastAwakeForceAccum in RnBodyDesc_t should be at offset 0x94");
		static_assert(offsetof(CS2::physicslib::RnBodyDesc_t, m_vLastAwakeTorqueAccum) == 0xA0, "m_vLastAwakeTorqueAccum in RnBodyDesc_t should be at offset 0xA0");
		static_assert(offsetof(CS2::physicslib::RnBodyDesc_t, m_flBuoyancyFactor) == 0xAC, "m_flBuoyancyFactor in RnBodyDesc_t should be at offset 0xAC");
		static_assert(offsetof(CS2::physicslib::RnBodyDesc_t, m_flGravityScale) == 0xB0, "m_flGravityScale in RnBodyDesc_t should be at offset 0xB0");
		static_assert(offsetof(CS2::physicslib::RnBodyDesc_t, m_flTimeScale) == 0xB4, "m_flTimeScale in RnBodyDesc_t should be at offset 0xB4");
		static_assert(offsetof(CS2::physicslib::RnBodyDesc_t, m_nBodyType) == 0xB8, "m_nBodyType in RnBodyDesc_t should be at offset 0xB8");
		static_assert(offsetof(CS2::physicslib::RnBodyDesc_t, m_nGameIndex) == 0xBC, "m_nGameIndex in RnBodyDesc_t should be at offset 0xBC");
		static_assert(offsetof(CS2::physicslib::RnBodyDesc_t, m_nGameFlags) == 0xC0, "m_nGameFlags in RnBodyDesc_t should be at offset 0xC0");
		static_assert(offsetof(CS2::physicslib::RnBodyDesc_t, m_nMinVelocityIterations) == 0xC4, "m_nMinVelocityIterations in RnBodyDesc_t should be at offset 0xC4");
		static_assert(offsetof(CS2::physicslib::RnBodyDesc_t, m_nMinPositionIterations) == 0xC5, "m_nMinPositionIterations in RnBodyDesc_t should be at offset 0xC5");
		static_assert(offsetof(CS2::physicslib::RnBodyDesc_t, m_nMassPriority) == 0xC6, "m_nMassPriority in RnBodyDesc_t should be at offset 0xC6");
		static_assert(offsetof(CS2::physicslib::RnBodyDesc_t, m_bEnabled) == 0xC7, "m_bEnabled in RnBodyDesc_t should be at offset 0xC7");
		static_assert(offsetof(CS2::physicslib::RnBodyDesc_t, m_bSleeping) == 0xC8, "m_bSleeping in RnBodyDesc_t should be at offset 0xC8");
		static_assert(offsetof(CS2::physicslib::RnBodyDesc_t, m_bIsContinuousEnabled) == 0xC9, "m_bIsContinuousEnabled in RnBodyDesc_t should be at offset 0xC9");
		static_assert(offsetof(CS2::physicslib::RnBodyDesc_t, m_bDragEnabled) == 0xCA, "m_bDragEnabled in RnBodyDesc_t should be at offset 0xCA");
		static_assert(offsetof(CS2::physicslib::RnBodyDesc_t, m_bBuoyancyDragEnabled) == 0xCB, "m_bBuoyancyDragEnabled in RnBodyDesc_t should be at offset 0xCB");
		static_assert(offsetof(CS2::physicslib::RnBodyDesc_t, m_vGravity) == 0xCC, "m_vGravity in RnBodyDesc_t should be at offset 0xCC");
		static_assert(offsetof(CS2::physicslib::RnBodyDesc_t, m_bSpeculativeEnabled) == 0xD8, "m_bSpeculativeEnabled in RnBodyDesc_t should be at offset 0xD8");
		static_assert(offsetof(CS2::physicslib::RnBodyDesc_t, m_bHasShadowController) == 0xD9, "m_bHasShadowController in RnBodyDesc_t should be at offset 0xD9");
		static_assert(offsetof(CS2::physicslib::RnBodyDesc_t, m_nDynamicContinuousContactBehavior) == 0xDA, "m_nDynamicContinuousContactBehavior in RnBodyDesc_t should be at offset 0xDA");
		static_assert(sizeof(CS2::physicslib::RnBodyDesc_t) == 0xE0, "RnBodyDesc_t size should be 0xE0");
	}
}
