// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif





namespace CS2 {
	namespace physicslib {
		class FeSphereRigid_t  {
		public:
			GlobalTypes::fltx4 vSphere; // 0x0 | Schema_Atomic | Size: 0x10
			uint16_t nNode; // 0x10 | Schema_Builtin | Size: 0x2
			uint16_t nCollisionMask; // 0x12 | Schema_Builtin | Size: 0x2
			uint16_t nVertexMapIndex; // 0x14 | Schema_Builtin | Size: 0x2
			uint16_t nFlags; // 0x16 | Schema_Builtin | Size: 0x2
			S2_PAD(0x8); // End padding
		};
		static_assert(offsetof(CS2::physicslib::FeSphereRigid_t, vSphere) == 0x0, "vSphere in FeSphereRigid_t should be at offset 0x0");
		static_assert(offsetof(CS2::physicslib::FeSphereRigid_t, nNode) == 0x10, "nNode in FeSphereRigid_t should be at offset 0x10");
		static_assert(offsetof(CS2::physicslib::FeSphereRigid_t, nCollisionMask) == 0x12, "nCollisionMask in FeSphereRigid_t should be at offset 0x12");
		static_assert(offsetof(CS2::physicslib::FeSphereRigid_t, nVertexMapIndex) == 0x14, "nVertexMapIndex in FeSphereRigid_t should be at offset 0x14");
		static_assert(offsetof(CS2::physicslib::FeSphereRigid_t, nFlags) == 0x16, "nFlags in FeSphereRigid_t should be at offset 0x16");
		static_assert(sizeof(CS2::physicslib::FeSphereRigid_t) == 0x20, "FeSphereRigid_t size should be 0x20");
	}
}
