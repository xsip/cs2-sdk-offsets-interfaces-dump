// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif





namespace CS2 {
	namespace physicslib {
		class FeNodeBase_t  {
		public:
			uint16_t nNode; // 0x0 | Schema_Builtin | Size: 0x2
			uint16_t nDummy[3]; // 0x2 | Schema_FixedArray | Size: 0x6
			uint16_t nNodeX0; // 0x8 | Schema_Builtin | Size: 0x2
			uint16_t nNodeX1; // 0xa | Schema_Builtin | Size: 0x2
			uint16_t nNodeY0; // 0xc | Schema_Builtin | Size: 0x2
			uint16_t nNodeY1; // 0xe | Schema_Builtin | Size: 0x2
			GlobalTypes::QuaternionStorage qAdjust; // 0x10 | Schema_Atomic | Size: 0x10
		};
		static_assert(offsetof(CS2::physicslib::FeNodeBase_t, nNode) == 0x0, "nNode in FeNodeBase_t should be at offset 0x0");
		static_assert(offsetof(CS2::physicslib::FeNodeBase_t, nDummy) == 0x2, "nDummy in FeNodeBase_t should be at offset 0x2");
		static_assert(offsetof(CS2::physicslib::FeNodeBase_t, nNodeX0) == 0x8, "nNodeX0 in FeNodeBase_t should be at offset 0x8");
		static_assert(offsetof(CS2::physicslib::FeNodeBase_t, nNodeX1) == 0xA, "nNodeX1 in FeNodeBase_t should be at offset 0xA");
		static_assert(offsetof(CS2::physicslib::FeNodeBase_t, nNodeY0) == 0xC, "nNodeY0 in FeNodeBase_t should be at offset 0xC");
		static_assert(offsetof(CS2::physicslib::FeNodeBase_t, nNodeY1) == 0xE, "nNodeY1 in FeNodeBase_t should be at offset 0xE");
		static_assert(offsetof(CS2::physicslib::FeNodeBase_t, qAdjust) == 0x10, "qAdjust in FeNodeBase_t should be at offset 0x10");
		static_assert(sizeof(CS2::physicslib::FeNodeBase_t) == 0x20, "FeNodeBase_t size should be 0x20");
	}
}
