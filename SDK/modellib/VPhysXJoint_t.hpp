// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/modellib/VPhysXRange_t.hpp>





using namespace GlobalTypes;
namespace CS2 {
	namespace modellib {
		class VPhysXJoint_t  {
		public:
			uint16_t m_nType; // 0x0 | Schema_Builtin | Size: 0x2
			uint16_t m_nBody1; // 0x2 | Schema_Builtin | Size: 0x2
			uint16_t m_nBody2; // 0x4 | Schema_Builtin | Size: 0x2
			uint16_t m_nFlags; // 0x6 | Schema_Builtin | Size: 0x2
			S2_PAD(0x8);
			GlobalTypes::CTransform m_Frame1; // 0x10 | Schema_Atomic | Size: 0x20
			GlobalTypes::CTransform m_Frame2; // 0x30 | Schema_Atomic | Size: 0x20
			bool m_bEnableCollision; // 0x50 | Schema_Builtin | Size: 0x1
			bool m_bIsLinearConstraintDisabled; // 0x51 | Schema_Builtin | Size: 0x1
			bool m_bIsAngularConstraintDisabled; // 0x52 | Schema_Builtin | Size: 0x1
			bool m_bEnableLinearLimit; // 0x53 | Schema_Builtin | Size: 0x1
			modellib::VPhysXRange_t m_LinearLimit; // 0x54 | Schema_DeclaredClass | Size: 0x8
			bool m_bEnableLinearMotor; // 0x5c | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			GlobalTypes::Vector m_vLinearTargetVelocity; // 0x60 | Schema_Atomic | Size: 0xc
			float32 m_flMaxForce; // 0x6c | Schema_Builtin | Size: 0x4
			bool m_bEnableSwingLimit; // 0x70 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			modellib::VPhysXRange_t m_SwingLimit; // 0x74 | Schema_DeclaredClass | Size: 0x8
			bool m_bEnableTwistLimit; // 0x7c | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			modellib::VPhysXRange_t m_TwistLimit; // 0x80 | Schema_DeclaredClass | Size: 0x8
			bool m_bEnableAngularMotor; // 0x88 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			GlobalTypes::Vector m_vAngularTargetVelocity; // 0x8c | Schema_Atomic | Size: 0xc
			float32 m_flMaxTorque; // 0x98 | Schema_Builtin | Size: 0x4
			float32 m_flLinearFrequency; // 0x9c | Schema_Builtin | Size: 0x4
			float32 m_flLinearDampingRatio; // 0xa0 | Schema_Builtin | Size: 0x4
			float32 m_flAngularFrequency; // 0xa4 | Schema_Builtin | Size: 0x4
			float32 m_flAngularDampingRatio; // 0xa8 | Schema_Builtin | Size: 0x4
			float32 m_flFriction; // 0xac | Schema_Builtin | Size: 0x4
			float32 m_flElasticity; // 0xb0 | Schema_Builtin | Size: 0x4
			float32 m_flElasticDamping; // 0xb4 | Schema_Builtin | Size: 0x4
			float32 m_flPlasticity; // 0xb8 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4);
			GlobalTypes::CUtlString m_Tag; // 0xc0 | Schema_Atomic | Size: 0x8
			S2_PAD(0x8); // End padding
		};
		static_assert(offsetof(CS2::modellib::VPhysXJoint_t, m_nType) == 0x0, "m_nType in VPhysXJoint_t should be at offset 0x0");
		static_assert(offsetof(CS2::modellib::VPhysXJoint_t, m_nBody1) == 0x2, "m_nBody1 in VPhysXJoint_t should be at offset 0x2");
		static_assert(offsetof(CS2::modellib::VPhysXJoint_t, m_nBody2) == 0x4, "m_nBody2 in VPhysXJoint_t should be at offset 0x4");
		static_assert(offsetof(CS2::modellib::VPhysXJoint_t, m_nFlags) == 0x6, "m_nFlags in VPhysXJoint_t should be at offset 0x6");
		static_assert(offsetof(CS2::modellib::VPhysXJoint_t, m_Frame1) == 0x10, "m_Frame1 in VPhysXJoint_t should be at offset 0x10");
		static_assert(offsetof(CS2::modellib::VPhysXJoint_t, m_Frame2) == 0x30, "m_Frame2 in VPhysXJoint_t should be at offset 0x30");
		static_assert(offsetof(CS2::modellib::VPhysXJoint_t, m_bEnableCollision) == 0x50, "m_bEnableCollision in VPhysXJoint_t should be at offset 0x50");
		static_assert(offsetof(CS2::modellib::VPhysXJoint_t, m_bIsLinearConstraintDisabled) == 0x51, "m_bIsLinearConstraintDisabled in VPhysXJoint_t should be at offset 0x51");
		static_assert(offsetof(CS2::modellib::VPhysXJoint_t, m_bIsAngularConstraintDisabled) == 0x52, "m_bIsAngularConstraintDisabled in VPhysXJoint_t should be at offset 0x52");
		static_assert(offsetof(CS2::modellib::VPhysXJoint_t, m_bEnableLinearLimit) == 0x53, "m_bEnableLinearLimit in VPhysXJoint_t should be at offset 0x53");
		static_assert(offsetof(CS2::modellib::VPhysXJoint_t, m_LinearLimit) == 0x54, "m_LinearLimit in VPhysXJoint_t should be at offset 0x54");
		static_assert(offsetof(CS2::modellib::VPhysXJoint_t, m_bEnableLinearMotor) == 0x5C, "m_bEnableLinearMotor in VPhysXJoint_t should be at offset 0x5C");
		static_assert(offsetof(CS2::modellib::VPhysXJoint_t, m_vLinearTargetVelocity) == 0x60, "m_vLinearTargetVelocity in VPhysXJoint_t should be at offset 0x60");
		static_assert(offsetof(CS2::modellib::VPhysXJoint_t, m_flMaxForce) == 0x6C, "m_flMaxForce in VPhysXJoint_t should be at offset 0x6C");
		static_assert(offsetof(CS2::modellib::VPhysXJoint_t, m_bEnableSwingLimit) == 0x70, "m_bEnableSwingLimit in VPhysXJoint_t should be at offset 0x70");
		static_assert(offsetof(CS2::modellib::VPhysXJoint_t, m_SwingLimit) == 0x74, "m_SwingLimit in VPhysXJoint_t should be at offset 0x74");
		static_assert(offsetof(CS2::modellib::VPhysXJoint_t, m_bEnableTwistLimit) == 0x7C, "m_bEnableTwistLimit in VPhysXJoint_t should be at offset 0x7C");
		static_assert(offsetof(CS2::modellib::VPhysXJoint_t, m_TwistLimit) == 0x80, "m_TwistLimit in VPhysXJoint_t should be at offset 0x80");
		static_assert(offsetof(CS2::modellib::VPhysXJoint_t, m_bEnableAngularMotor) == 0x88, "m_bEnableAngularMotor in VPhysXJoint_t should be at offset 0x88");
		static_assert(offsetof(CS2::modellib::VPhysXJoint_t, m_vAngularTargetVelocity) == 0x8C, "m_vAngularTargetVelocity in VPhysXJoint_t should be at offset 0x8C");
		static_assert(offsetof(CS2::modellib::VPhysXJoint_t, m_flMaxTorque) == 0x98, "m_flMaxTorque in VPhysXJoint_t should be at offset 0x98");
		static_assert(offsetof(CS2::modellib::VPhysXJoint_t, m_flLinearFrequency) == 0x9C, "m_flLinearFrequency in VPhysXJoint_t should be at offset 0x9C");
		static_assert(offsetof(CS2::modellib::VPhysXJoint_t, m_flLinearDampingRatio) == 0xA0, "m_flLinearDampingRatio in VPhysXJoint_t should be at offset 0xA0");
		static_assert(offsetof(CS2::modellib::VPhysXJoint_t, m_flAngularFrequency) == 0xA4, "m_flAngularFrequency in VPhysXJoint_t should be at offset 0xA4");
		static_assert(offsetof(CS2::modellib::VPhysXJoint_t, m_flAngularDampingRatio) == 0xA8, "m_flAngularDampingRatio in VPhysXJoint_t should be at offset 0xA8");
		static_assert(offsetof(CS2::modellib::VPhysXJoint_t, m_flFriction) == 0xAC, "m_flFriction in VPhysXJoint_t should be at offset 0xAC");
		static_assert(offsetof(CS2::modellib::VPhysXJoint_t, m_flElasticity) == 0xB0, "m_flElasticity in VPhysXJoint_t should be at offset 0xB0");
		static_assert(offsetof(CS2::modellib::VPhysXJoint_t, m_flElasticDamping) == 0xB4, "m_flElasticDamping in VPhysXJoint_t should be at offset 0xB4");
		static_assert(offsetof(CS2::modellib::VPhysXJoint_t, m_flPlasticity) == 0xB8, "m_flPlasticity in VPhysXJoint_t should be at offset 0xB8");
		static_assert(offsetof(CS2::modellib::VPhysXJoint_t, m_Tag) == 0xC0, "m_Tag in VPhysXJoint_t should be at offset 0xC0");
		static_assert(sizeof(CS2::modellib::VPhysXJoint_t) == 0xD0, "VPhysXJoint_t size should be 0xD0");
	}
}
