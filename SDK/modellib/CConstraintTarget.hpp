// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif





namespace CS2 {
	namespace modellib {
		class CConstraintTarget  {
		public:
			S2_PAD(0x20);
			GlobalTypes::Quaternion m_qOffset; // 0x20 | Schema_Atomic | Size: 0x10
			GlobalTypes::Vector m_vOffset; // 0x30 | Schema_Atomic | Size: 0xc
			uint32_t m_nBoneHash; // 0x3c | Schema_Builtin | Size: 0x4
			GlobalTypes::CUtlString m_sName; // 0x40 | Schema_Atomic | Size: 0x8
			float32 m_flWeight; // 0x48 | Schema_Builtin | Size: 0x4
			S2_PAD(0xd);
			bool m_bIsAttachment; // 0x59 | Schema_Builtin | Size: 0x1
			S2_PAD(0x6); // End padding
		};
		static_assert(offsetof(CS2::modellib::CConstraintTarget, m_qOffset) == 0x20, "m_qOffset in CConstraintTarget should be at offset 0x20");
		static_assert(offsetof(CS2::modellib::CConstraintTarget, m_vOffset) == 0x30, "m_vOffset in CConstraintTarget should be at offset 0x30");
		static_assert(offsetof(CS2::modellib::CConstraintTarget, m_nBoneHash) == 0x3C, "m_nBoneHash in CConstraintTarget should be at offset 0x3C");
		static_assert(offsetof(CS2::modellib::CConstraintTarget, m_sName) == 0x40, "m_sName in CConstraintTarget should be at offset 0x40");
		static_assert(offsetof(CS2::modellib::CConstraintTarget, m_flWeight) == 0x48, "m_flWeight in CConstraintTarget should be at offset 0x48");
		static_assert(offsetof(CS2::modellib::CConstraintTarget, m_bIsAttachment) == 0x59, "m_bIsAttachment in CConstraintTarget should be at offset 0x59");
		static_assert(sizeof(CS2::modellib::CConstraintTarget) == 0x60, "CConstraintTarget size should be 0x60");
	}
}
