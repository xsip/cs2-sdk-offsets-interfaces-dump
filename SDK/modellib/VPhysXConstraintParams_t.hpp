// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif







using namespace GlobalTypes;
namespace CS2 {
	namespace modellib {
		class VPhysXConstraintParams_t  {
		public:
			int8_t m_nType; // 0x0 | Schema_Builtin | Size: 0x1
			int8_t m_nTranslateMotion; // 0x1 | Schema_Builtin | Size: 0x1
			int8_t m_nRotateMotion; // 0x2 | Schema_Builtin | Size: 0x1
			int8_t m_nFlags; // 0x3 | Schema_Builtin | Size: 0x1
			GlobalTypes::Vector m_anchor[2]; // 0x4 | Schema_FixedArray | Size: 0x18
			GlobalTypes::QuaternionStorage m_axes[2]; // 0x1c | Schema_FixedArray | Size: 0x20
			float32 m_maxForce; // 0x3c | Schema_Builtin | Size: 0x4
			float32 m_maxTorque; // 0x40 | Schema_Builtin | Size: 0x4
			float32 m_linearLimitValue; // 0x44 | Schema_Builtin | Size: 0x4
			float32 m_linearLimitRestitution; // 0x48 | Schema_Builtin | Size: 0x4
			float32 m_linearLimitSpring; // 0x4c | Schema_Builtin | Size: 0x4
			float32 m_linearLimitDamping; // 0x50 | Schema_Builtin | Size: 0x4
			float32 m_twistLowLimitValue; // 0x54 | Schema_Builtin | Size: 0x4
			float32 m_twistLowLimitRestitution; // 0x58 | Schema_Builtin | Size: 0x4
			float32 m_twistLowLimitSpring; // 0x5c | Schema_Builtin | Size: 0x4
			float32 m_twistLowLimitDamping; // 0x60 | Schema_Builtin | Size: 0x4
			float32 m_twistHighLimitValue; // 0x64 | Schema_Builtin | Size: 0x4
			float32 m_twistHighLimitRestitution; // 0x68 | Schema_Builtin | Size: 0x4
			float32 m_twistHighLimitSpring; // 0x6c | Schema_Builtin | Size: 0x4
			float32 m_twistHighLimitDamping; // 0x70 | Schema_Builtin | Size: 0x4
			float32 m_swing1LimitValue; // 0x74 | Schema_Builtin | Size: 0x4
			float32 m_swing1LimitRestitution; // 0x78 | Schema_Builtin | Size: 0x4
			float32 m_swing1LimitSpring; // 0x7c | Schema_Builtin | Size: 0x4
			float32 m_swing1LimitDamping; // 0x80 | Schema_Builtin | Size: 0x4
			float32 m_swing2LimitValue; // 0x84 | Schema_Builtin | Size: 0x4
			float32 m_swing2LimitRestitution; // 0x88 | Schema_Builtin | Size: 0x4
			float32 m_swing2LimitSpring; // 0x8c | Schema_Builtin | Size: 0x4
			float32 m_swing2LimitDamping; // 0x90 | Schema_Builtin | Size: 0x4
			GlobalTypes::Vector m_goalPosition; // 0x94 | Schema_Atomic | Size: 0xc
			GlobalTypes::QuaternionStorage m_goalOrientation; // 0xa0 | Schema_Atomic | Size: 0x10
			GlobalTypes::Vector m_goalAngularVelocity; // 0xb0 | Schema_Atomic | Size: 0xc
			float32 m_driveSpringX; // 0xbc | Schema_Builtin | Size: 0x4
			float32 m_driveSpringY; // 0xc0 | Schema_Builtin | Size: 0x4
			float32 m_driveSpringZ; // 0xc4 | Schema_Builtin | Size: 0x4
			float32 m_driveDampingX; // 0xc8 | Schema_Builtin | Size: 0x4
			float32 m_driveDampingY; // 0xcc | Schema_Builtin | Size: 0x4
			float32 m_driveDampingZ; // 0xd0 | Schema_Builtin | Size: 0x4
			float32 m_driveSpringTwist; // 0xd4 | Schema_Builtin | Size: 0x4
			float32 m_driveSpringSwing; // 0xd8 | Schema_Builtin | Size: 0x4
			float32 m_driveSpringSlerp; // 0xdc | Schema_Builtin | Size: 0x4
			float32 m_driveDampingTwist; // 0xe0 | Schema_Builtin | Size: 0x4
			float32 m_driveDampingSwing; // 0xe4 | Schema_Builtin | Size: 0x4
			float32 m_driveDampingSlerp; // 0xe8 | Schema_Builtin | Size: 0x4
			int32_t m_solverIterationCount; // 0xec | Schema_Builtin | Size: 0x4
			float32 m_projectionLinearTolerance; // 0xf0 | Schema_Builtin | Size: 0x4
			float32 m_projectionAngularTolerance; // 0xf4 | Schema_Builtin | Size: 0x4
		};
		static_assert(offsetof(CS2::modellib::VPhysXConstraintParams_t, m_nType) == 0x0, "m_nType in VPhysXConstraintParams_t should be at offset 0x0");
		static_assert(offsetof(CS2::modellib::VPhysXConstraintParams_t, m_nTranslateMotion) == 0x1, "m_nTranslateMotion in VPhysXConstraintParams_t should be at offset 0x1");
		static_assert(offsetof(CS2::modellib::VPhysXConstraintParams_t, m_nRotateMotion) == 0x2, "m_nRotateMotion in VPhysXConstraintParams_t should be at offset 0x2");
		static_assert(offsetof(CS2::modellib::VPhysXConstraintParams_t, m_nFlags) == 0x3, "m_nFlags in VPhysXConstraintParams_t should be at offset 0x3");
		static_assert(offsetof(CS2::modellib::VPhysXConstraintParams_t, m_anchor) == 0x4, "m_anchor in VPhysXConstraintParams_t should be at offset 0x4");
		static_assert(offsetof(CS2::modellib::VPhysXConstraintParams_t, m_axes) == 0x1C, "m_axes in VPhysXConstraintParams_t should be at offset 0x1C");
		static_assert(offsetof(CS2::modellib::VPhysXConstraintParams_t, m_maxForce) == 0x3C, "m_maxForce in VPhysXConstraintParams_t should be at offset 0x3C");
		static_assert(offsetof(CS2::modellib::VPhysXConstraintParams_t, m_maxTorque) == 0x40, "m_maxTorque in VPhysXConstraintParams_t should be at offset 0x40");
		static_assert(offsetof(CS2::modellib::VPhysXConstraintParams_t, m_linearLimitValue) == 0x44, "m_linearLimitValue in VPhysXConstraintParams_t should be at offset 0x44");
		static_assert(offsetof(CS2::modellib::VPhysXConstraintParams_t, m_linearLimitRestitution) == 0x48, "m_linearLimitRestitution in VPhysXConstraintParams_t should be at offset 0x48");
		static_assert(offsetof(CS2::modellib::VPhysXConstraintParams_t, m_linearLimitSpring) == 0x4C, "m_linearLimitSpring in VPhysXConstraintParams_t should be at offset 0x4C");
		static_assert(offsetof(CS2::modellib::VPhysXConstraintParams_t, m_linearLimitDamping) == 0x50, "m_linearLimitDamping in VPhysXConstraintParams_t should be at offset 0x50");
		static_assert(offsetof(CS2::modellib::VPhysXConstraintParams_t, m_twistLowLimitValue) == 0x54, "m_twistLowLimitValue in VPhysXConstraintParams_t should be at offset 0x54");
		static_assert(offsetof(CS2::modellib::VPhysXConstraintParams_t, m_twistLowLimitRestitution) == 0x58, "m_twistLowLimitRestitution in VPhysXConstraintParams_t should be at offset 0x58");
		static_assert(offsetof(CS2::modellib::VPhysXConstraintParams_t, m_twistLowLimitSpring) == 0x5C, "m_twistLowLimitSpring in VPhysXConstraintParams_t should be at offset 0x5C");
		static_assert(offsetof(CS2::modellib::VPhysXConstraintParams_t, m_twistLowLimitDamping) == 0x60, "m_twistLowLimitDamping in VPhysXConstraintParams_t should be at offset 0x60");
		static_assert(offsetof(CS2::modellib::VPhysXConstraintParams_t, m_twistHighLimitValue) == 0x64, "m_twistHighLimitValue in VPhysXConstraintParams_t should be at offset 0x64");
		static_assert(offsetof(CS2::modellib::VPhysXConstraintParams_t, m_twistHighLimitRestitution) == 0x68, "m_twistHighLimitRestitution in VPhysXConstraintParams_t should be at offset 0x68");
		static_assert(offsetof(CS2::modellib::VPhysXConstraintParams_t, m_twistHighLimitSpring) == 0x6C, "m_twistHighLimitSpring in VPhysXConstraintParams_t should be at offset 0x6C");
		static_assert(offsetof(CS2::modellib::VPhysXConstraintParams_t, m_twistHighLimitDamping) == 0x70, "m_twistHighLimitDamping in VPhysXConstraintParams_t should be at offset 0x70");
		static_assert(offsetof(CS2::modellib::VPhysXConstraintParams_t, m_swing1LimitValue) == 0x74, "m_swing1LimitValue in VPhysXConstraintParams_t should be at offset 0x74");
		static_assert(offsetof(CS2::modellib::VPhysXConstraintParams_t, m_swing1LimitRestitution) == 0x78, "m_swing1LimitRestitution in VPhysXConstraintParams_t should be at offset 0x78");
		static_assert(offsetof(CS2::modellib::VPhysXConstraintParams_t, m_swing1LimitSpring) == 0x7C, "m_swing1LimitSpring in VPhysXConstraintParams_t should be at offset 0x7C");
		static_assert(offsetof(CS2::modellib::VPhysXConstraintParams_t, m_swing1LimitDamping) == 0x80, "m_swing1LimitDamping in VPhysXConstraintParams_t should be at offset 0x80");
		static_assert(offsetof(CS2::modellib::VPhysXConstraintParams_t, m_swing2LimitValue) == 0x84, "m_swing2LimitValue in VPhysXConstraintParams_t should be at offset 0x84");
		static_assert(offsetof(CS2::modellib::VPhysXConstraintParams_t, m_swing2LimitRestitution) == 0x88, "m_swing2LimitRestitution in VPhysXConstraintParams_t should be at offset 0x88");
		static_assert(offsetof(CS2::modellib::VPhysXConstraintParams_t, m_swing2LimitSpring) == 0x8C, "m_swing2LimitSpring in VPhysXConstraintParams_t should be at offset 0x8C");
		static_assert(offsetof(CS2::modellib::VPhysXConstraintParams_t, m_swing2LimitDamping) == 0x90, "m_swing2LimitDamping in VPhysXConstraintParams_t should be at offset 0x90");
		static_assert(offsetof(CS2::modellib::VPhysXConstraintParams_t, m_goalPosition) == 0x94, "m_goalPosition in VPhysXConstraintParams_t should be at offset 0x94");
		static_assert(offsetof(CS2::modellib::VPhysXConstraintParams_t, m_goalOrientation) == 0xA0, "m_goalOrientation in VPhysXConstraintParams_t should be at offset 0xA0");
		static_assert(offsetof(CS2::modellib::VPhysXConstraintParams_t, m_goalAngularVelocity) == 0xB0, "m_goalAngularVelocity in VPhysXConstraintParams_t should be at offset 0xB0");
		static_assert(offsetof(CS2::modellib::VPhysXConstraintParams_t, m_driveSpringX) == 0xBC, "m_driveSpringX in VPhysXConstraintParams_t should be at offset 0xBC");
		static_assert(offsetof(CS2::modellib::VPhysXConstraintParams_t, m_driveSpringY) == 0xC0, "m_driveSpringY in VPhysXConstraintParams_t should be at offset 0xC0");
		static_assert(offsetof(CS2::modellib::VPhysXConstraintParams_t, m_driveSpringZ) == 0xC4, "m_driveSpringZ in VPhysXConstraintParams_t should be at offset 0xC4");
		static_assert(offsetof(CS2::modellib::VPhysXConstraintParams_t, m_driveDampingX) == 0xC8, "m_driveDampingX in VPhysXConstraintParams_t should be at offset 0xC8");
		static_assert(offsetof(CS2::modellib::VPhysXConstraintParams_t, m_driveDampingY) == 0xCC, "m_driveDampingY in VPhysXConstraintParams_t should be at offset 0xCC");
		static_assert(offsetof(CS2::modellib::VPhysXConstraintParams_t, m_driveDampingZ) == 0xD0, "m_driveDampingZ in VPhysXConstraintParams_t should be at offset 0xD0");
		static_assert(offsetof(CS2::modellib::VPhysXConstraintParams_t, m_driveSpringTwist) == 0xD4, "m_driveSpringTwist in VPhysXConstraintParams_t should be at offset 0xD4");
		static_assert(offsetof(CS2::modellib::VPhysXConstraintParams_t, m_driveSpringSwing) == 0xD8, "m_driveSpringSwing in VPhysXConstraintParams_t should be at offset 0xD8");
		static_assert(offsetof(CS2::modellib::VPhysXConstraintParams_t, m_driveSpringSlerp) == 0xDC, "m_driveSpringSlerp in VPhysXConstraintParams_t should be at offset 0xDC");
		static_assert(offsetof(CS2::modellib::VPhysXConstraintParams_t, m_driveDampingTwist) == 0xE0, "m_driveDampingTwist in VPhysXConstraintParams_t should be at offset 0xE0");
		static_assert(offsetof(CS2::modellib::VPhysXConstraintParams_t, m_driveDampingSwing) == 0xE4, "m_driveDampingSwing in VPhysXConstraintParams_t should be at offset 0xE4");
		static_assert(offsetof(CS2::modellib::VPhysXConstraintParams_t, m_driveDampingSlerp) == 0xE8, "m_driveDampingSlerp in VPhysXConstraintParams_t should be at offset 0xE8");
		static_assert(offsetof(CS2::modellib::VPhysXConstraintParams_t, m_solverIterationCount) == 0xEC, "m_solverIterationCount in VPhysXConstraintParams_t should be at offset 0xEC");
		static_assert(offsetof(CS2::modellib::VPhysXConstraintParams_t, m_projectionLinearTolerance) == 0xF0, "m_projectionLinearTolerance in VPhysXConstraintParams_t should be at offset 0xF0");
		static_assert(offsetof(CS2::modellib::VPhysXConstraintParams_t, m_projectionAngularTolerance) == 0xF4, "m_projectionAngularTolerance in VPhysXConstraintParams_t should be at offset 0xF4");
		static_assert(sizeof(CS2::modellib::VPhysXConstraintParams_t) == 0xF8, "VPhysXConstraintParams_t size should be 0xF8");
	}
}
