// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>

#include <SDK/modellib/RenderPrimitiveType_t.hpp>
#include <SDK/modellib/CRenderBufferBinding.hpp>



namespace CS2 {
	namespace modellib {
		class CMaterialDrawDescriptor  {
		public:
			float32 m_flUvDensity; // 0x0 | Schema_Builtin | Size: 0x4
			GlobalTypes::Vector m_vTintColor; // 0x4 | Schema_Atomic | Size: 0xc
			float32 m_flAlpha; // 0x10 | Schema_Builtin | Size: 0x4
			S2_PAD(0x2);
			uint16_t m_nNumMeshlets; // 0x16 | Schema_Builtin | Size: 0x2
			S2_PAD(0x4);
			uint32_t m_nFirstMeshlet; // 0x1c | Schema_Builtin | Size: 0x4
			uint32_t m_nAppliedIndexOffset; // 0x20 | Schema_Builtin | Size: 0x4
			uint8_t m_nDepthVertexBufferIndex; // 0x24 | Schema_Builtin | Size: 0x1
			uint8_t m_nMeshletPackedIVBIndex; // 0x25 | Schema_Builtin | Size: 0x1
			S2_PAD(0x2);
			// GlobalTypes::RigidMeshPart_t > m_rigidMeshParts; // 0x28 | Schema_Atomic | Size: 0x10
			char  m_rigidMeshParts[0x10]; // 0x28 | Schema_Atomic | Size: 0x10
			modellib::RenderPrimitiveType_t m_nPrimitiveType; // 0x38 | Schema_DeclaredEnum | Size: 0x4
			int32_t m_nBaseVertex; // 0x3c | Schema_Builtin | Size: 0x4
			int32_t m_nVertexCount; // 0x40 | Schema_Builtin | Size: 0x4
			int32_t m_nStartIndex; // 0x44 | Schema_Builtin | Size: 0x4
			int32_t m_nIndexCount; // 0x48 | Schema_Builtin | Size: 0x4
			S2_PAD(0x64);
			modellib::CRenderBufferBinding m_indexBuffer; // 0xb0 | Schema_DeclaredClass | Size: 0x20
			modellib::CRenderBufferBinding m_meshletPackedIVB; // 0xd0 | Schema_DeclaredClass | Size: 0x20
			S2_PAD(0x10);
			// GlobalTypes::CStrongHandle< resourcesystem::InfoForResourceTypeIMaterial2 > m_material; // 0x100 | Schema_Atomic | Size: 0x8
			char  m_material[0x8]; // 0x100 | Schema_Atomic | Size: 0x8
		};
		static_assert(offsetof(CS2::modellib::CMaterialDrawDescriptor, m_flUvDensity) == 0x0, "m_flUvDensity in CMaterialDrawDescriptor should be at offset 0x0");
		static_assert(offsetof(CS2::modellib::CMaterialDrawDescriptor, m_vTintColor) == 0x4, "m_vTintColor in CMaterialDrawDescriptor should be at offset 0x4");
		static_assert(offsetof(CS2::modellib::CMaterialDrawDescriptor, m_flAlpha) == 0x10, "m_flAlpha in CMaterialDrawDescriptor should be at offset 0x10");
		static_assert(offsetof(CS2::modellib::CMaterialDrawDescriptor, m_nNumMeshlets) == 0x16, "m_nNumMeshlets in CMaterialDrawDescriptor should be at offset 0x16");
		static_assert(offsetof(CS2::modellib::CMaterialDrawDescriptor, m_nFirstMeshlet) == 0x1C, "m_nFirstMeshlet in CMaterialDrawDescriptor should be at offset 0x1C");
		static_assert(offsetof(CS2::modellib::CMaterialDrawDescriptor, m_nAppliedIndexOffset) == 0x20, "m_nAppliedIndexOffset in CMaterialDrawDescriptor should be at offset 0x20");
		static_assert(offsetof(CS2::modellib::CMaterialDrawDescriptor, m_nDepthVertexBufferIndex) == 0x24, "m_nDepthVertexBufferIndex in CMaterialDrawDescriptor should be at offset 0x24");
		static_assert(offsetof(CS2::modellib::CMaterialDrawDescriptor, m_nMeshletPackedIVBIndex) == 0x25, "m_nMeshletPackedIVBIndex in CMaterialDrawDescriptor should be at offset 0x25");
		static_assert(offsetof(CS2::modellib::CMaterialDrawDescriptor, m_rigidMeshParts) == 0x28, "m_rigidMeshParts in CMaterialDrawDescriptor should be at offset 0x28");
		static_assert(offsetof(CS2::modellib::CMaterialDrawDescriptor, m_nPrimitiveType) == 0x38, "m_nPrimitiveType in CMaterialDrawDescriptor should be at offset 0x38");
		static_assert(offsetof(CS2::modellib::CMaterialDrawDescriptor, m_nBaseVertex) == 0x3C, "m_nBaseVertex in CMaterialDrawDescriptor should be at offset 0x3C");
		static_assert(offsetof(CS2::modellib::CMaterialDrawDescriptor, m_nVertexCount) == 0x40, "m_nVertexCount in CMaterialDrawDescriptor should be at offset 0x40");
		static_assert(offsetof(CS2::modellib::CMaterialDrawDescriptor, m_nStartIndex) == 0x44, "m_nStartIndex in CMaterialDrawDescriptor should be at offset 0x44");
		static_assert(offsetof(CS2::modellib::CMaterialDrawDescriptor, m_nIndexCount) == 0x48, "m_nIndexCount in CMaterialDrawDescriptor should be at offset 0x48");
		static_assert(offsetof(CS2::modellib::CMaterialDrawDescriptor, m_indexBuffer) == 0xB0, "m_indexBuffer in CMaterialDrawDescriptor should be at offset 0xB0");
		static_assert(offsetof(CS2::modellib::CMaterialDrawDescriptor, m_meshletPackedIVB) == 0xD0, "m_meshletPackedIVB in CMaterialDrawDescriptor should be at offset 0xD0");
		static_assert(offsetof(CS2::modellib::CMaterialDrawDescriptor, m_material) == 0x100, "m_material in CMaterialDrawDescriptor should be at offset 0x100");
		static_assert(sizeof(CS2::modellib::CMaterialDrawDescriptor) == 0x108, "CMaterialDrawDescriptor size should be 0x108");
	}
}
