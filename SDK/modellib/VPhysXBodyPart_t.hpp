// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/modellib/VPhysics2ShapeDef_t.hpp>





using namespace GlobalTypes;
namespace CS2 {
	namespace modellib {
		class VPhysXBodyPart_t  {
		public:
			uint32_t m_nFlags; // 0x0 | Schema_Builtin | Size: 0x4
			float32 m_flMass; // 0x4 | Schema_Builtin | Size: 0x4
			modellib::VPhysics2ShapeDef_t m_rnShape; // 0x8 | Schema_DeclaredClass | Size: 0x78
			uint16_t m_nCollisionAttributeIndex; // 0x80 | Schema_Builtin | Size: 0x2
			uint16_t m_nReserved; // 0x82 | Schema_Builtin | Size: 0x2
			float32 m_flInertiaScale; // 0x84 | Schema_Builtin | Size: 0x4
			float32 m_flLinearDamping; // 0x88 | Schema_Builtin | Size: 0x4
			float32 m_flAngularDamping; // 0x8c | Schema_Builtin | Size: 0x4
			float32 m_flLinearDrag; // 0x90 | Schema_Builtin | Size: 0x4
			float32 m_flAngularDrag; // 0x94 | Schema_Builtin | Size: 0x4
			bool m_bOverrideMassCenter; // 0x98 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			GlobalTypes::Vector m_vMassCenterOverride; // 0x9c | Schema_Atomic | Size: 0xc
		};
		static_assert(offsetof(CS2::modellib::VPhysXBodyPart_t, m_nFlags) == 0x0, "m_nFlags in VPhysXBodyPart_t should be at offset 0x0");
		static_assert(offsetof(CS2::modellib::VPhysXBodyPart_t, m_flMass) == 0x4, "m_flMass in VPhysXBodyPart_t should be at offset 0x4");
		static_assert(offsetof(CS2::modellib::VPhysXBodyPart_t, m_rnShape) == 0x8, "m_rnShape in VPhysXBodyPart_t should be at offset 0x8");
		static_assert(offsetof(CS2::modellib::VPhysXBodyPart_t, m_nCollisionAttributeIndex) == 0x80, "m_nCollisionAttributeIndex in VPhysXBodyPart_t should be at offset 0x80");
		static_assert(offsetof(CS2::modellib::VPhysXBodyPart_t, m_nReserved) == 0x82, "m_nReserved in VPhysXBodyPart_t should be at offset 0x82");
		static_assert(offsetof(CS2::modellib::VPhysXBodyPart_t, m_flInertiaScale) == 0x84, "m_flInertiaScale in VPhysXBodyPart_t should be at offset 0x84");
		static_assert(offsetof(CS2::modellib::VPhysXBodyPart_t, m_flLinearDamping) == 0x88, "m_flLinearDamping in VPhysXBodyPart_t should be at offset 0x88");
		static_assert(offsetof(CS2::modellib::VPhysXBodyPart_t, m_flAngularDamping) == 0x8C, "m_flAngularDamping in VPhysXBodyPart_t should be at offset 0x8C");
		static_assert(offsetof(CS2::modellib::VPhysXBodyPart_t, m_flLinearDrag) == 0x90, "m_flLinearDrag in VPhysXBodyPart_t should be at offset 0x90");
		static_assert(offsetof(CS2::modellib::VPhysXBodyPart_t, m_flAngularDrag) == 0x94, "m_flAngularDrag in VPhysXBodyPart_t should be at offset 0x94");
		static_assert(offsetof(CS2::modellib::VPhysXBodyPart_t, m_bOverrideMassCenter) == 0x98, "m_bOverrideMassCenter in VPhysXBodyPart_t should be at offset 0x98");
		static_assert(offsetof(CS2::modellib::VPhysXBodyPart_t, m_vMassCenterOverride) == 0x9C, "m_vMassCenterOverride in VPhysXBodyPart_t should be at offset 0x9C");
		static_assert(sizeof(CS2::modellib::VPhysXBodyPart_t) == 0xA8, "VPhysXBodyPart_t size should be 0xA8");
	}
}
