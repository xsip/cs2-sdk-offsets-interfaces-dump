// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif





namespace CS2 {
	namespace modellib {
		class Bone_t;
		class Frame_t;
	}
}


using namespace GlobalTypes;
namespace CS2 {
	namespace modellib {
		class SkeletonAnimCapture_t  {
		public:
			GlobalTypes::CEntityIndex m_nEntIndex; // 0x0 | Schema_Atomic | Size: 0x4
			GlobalTypes::CEntityIndex m_nEntParent; // 0x4 | Schema_Atomic | Size: 0x4
			GlobalTypes::CUtlVector< GlobalTypes::CEntityIndex > m_ImportedCollision; // 0x8 | Schema_Atomic | Size: 0x18
			// char  m_ImportedCollision[0x18]; // 0x8 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlString m_ModelName; // 0x20 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlString m_CaptureName; // 0x28 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlVector< modellib::Bone_t > m_ModelBindPose; // 0x30 | Schema_Atomic | Size: 0x18
			// char  m_ModelBindPose[0x18]; // 0x30 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector< modellib::Bone_t > m_FeModelInitPose; // 0x48 | Schema_Atomic | Size: 0x18
			// char  m_FeModelInitPose[0x18]; // 0x48 | Schema_Atomic | Size: 0x18
			int32_t m_nFlexControllers; // 0x60 | Schema_Builtin | Size: 0x4
			bool m_bPredicted; // 0x64 | Schema_Builtin | Size: 0x1
			S2_PAD(0x43);
			GlobalTypes::CUtlVector< modellib::Frame_t > m_Frames; // 0xa8 | Schema_Atomic | Size: 0x18
			// char  m_Frames[0x18]; // 0xa8 | Schema_Atomic | Size: 0x18
		};
		static_assert(offsetof(CS2::modellib::SkeletonAnimCapture_t, m_nEntIndex) == 0x0, "m_nEntIndex in SkeletonAnimCapture_t should be at offset 0x0");
		static_assert(offsetof(CS2::modellib::SkeletonAnimCapture_t, m_nEntParent) == 0x4, "m_nEntParent in SkeletonAnimCapture_t should be at offset 0x4");
		static_assert(offsetof(CS2::modellib::SkeletonAnimCapture_t, m_ImportedCollision) == 0x8, "m_ImportedCollision in SkeletonAnimCapture_t should be at offset 0x8");
		static_assert(offsetof(CS2::modellib::SkeletonAnimCapture_t, m_ModelName) == 0x20, "m_ModelName in SkeletonAnimCapture_t should be at offset 0x20");
		static_assert(offsetof(CS2::modellib::SkeletonAnimCapture_t, m_CaptureName) == 0x28, "m_CaptureName in SkeletonAnimCapture_t should be at offset 0x28");
		static_assert(offsetof(CS2::modellib::SkeletonAnimCapture_t, m_ModelBindPose) == 0x30, "m_ModelBindPose in SkeletonAnimCapture_t should be at offset 0x30");
		static_assert(offsetof(CS2::modellib::SkeletonAnimCapture_t, m_FeModelInitPose) == 0x48, "m_FeModelInitPose in SkeletonAnimCapture_t should be at offset 0x48");
		static_assert(offsetof(CS2::modellib::SkeletonAnimCapture_t, m_nFlexControllers) == 0x60, "m_nFlexControllers in SkeletonAnimCapture_t should be at offset 0x60");
		static_assert(offsetof(CS2::modellib::SkeletonAnimCapture_t, m_bPredicted) == 0x64, "m_bPredicted in SkeletonAnimCapture_t should be at offset 0x64");
		static_assert(offsetof(CS2::modellib::SkeletonAnimCapture_t, m_Frames) == 0xA8, "m_Frames in SkeletonAnimCapture_t should be at offset 0xA8");
		static_assert(sizeof(CS2::modellib::SkeletonAnimCapture_t) == 0xC0, "SkeletonAnimCapture_t size should be 0xC0");
	}
}
