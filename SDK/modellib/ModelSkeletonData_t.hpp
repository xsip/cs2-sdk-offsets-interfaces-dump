// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif





namespace CS2 {
	namespace modellib {
		class ModelSkeletonData_t  {
		public:
			// GlobalTypes::CUtlVector< GlobalTypes::CUtlString > m_boneName; // 0x0 | Schema_Atomic | Size: 0x18
			char  m_boneName[0x18]; // 0x0 | Schema_Atomic | Size: 0x18
			// GlobalTypes::CUtlVector< int16 > m_nParent; // 0x18 | Schema_Atomic | Size: 0x18
			char  m_nParent[0x18]; // 0x18 | Schema_Atomic | Size: 0x18
			// GlobalTypes::CUtlVector< float32 > m_boneSphere; // 0x30 | Schema_Atomic | Size: 0x18
			char  m_boneSphere[0x18]; // 0x30 | Schema_Atomic | Size: 0x18
			// GlobalTypes::CUtlVector< uint32 > m_nFlag; // 0x48 | Schema_Atomic | Size: 0x18
			char  m_nFlag[0x18]; // 0x48 | Schema_Atomic | Size: 0x18
			// GlobalTypes::CUtlGlobalTypes::Vector< Vector > m_bonePosParent; // 0x60 | Schema_Atomic | Size: 0x18
			char  m_bonePosParent[0x18]; // 0x60 | Schema_Atomic | Size: 0x18
			// GlobalTypes::CUtlVector< GlobalTypes::QuaternionStorage > m_boneRotParent; // 0x78 | Schema_Atomic | Size: 0x18
			char  m_boneRotParent[0x18]; // 0x78 | Schema_Atomic | Size: 0x18
			// GlobalTypes::CUtlVector< float32 > m_boneScaleParent; // 0x90 | Schema_Atomic | Size: 0x18
			char  m_boneScaleParent[0x18]; // 0x90 | Schema_Atomic | Size: 0x18
		};
		static_assert(offsetof(CS2::modellib::ModelSkeletonData_t, m_boneName) == 0x0, "m_boneName in ModelSkeletonData_t should be at offset 0x0");
		static_assert(offsetof(CS2::modellib::ModelSkeletonData_t, m_nParent) == 0x18, "m_nParent in ModelSkeletonData_t should be at offset 0x18");
		static_assert(offsetof(CS2::modellib::ModelSkeletonData_t, m_boneSphere) == 0x30, "m_boneSphere in ModelSkeletonData_t should be at offset 0x30");
		static_assert(offsetof(CS2::modellib::ModelSkeletonData_t, m_nFlag) == 0x48, "m_nFlag in ModelSkeletonData_t should be at offset 0x48");
		static_assert(offsetof(CS2::modellib::ModelSkeletonData_t, m_bonePosParent) == 0x60, "m_bonePosParent in ModelSkeletonData_t should be at offset 0x60");
		static_assert(offsetof(CS2::modellib::ModelSkeletonData_t, m_boneRotParent) == 0x78, "m_boneRotParent in ModelSkeletonData_t should be at offset 0x78");
		static_assert(offsetof(CS2::modellib::ModelSkeletonData_t, m_boneScaleParent) == 0x90, "m_boneScaleParent in ModelSkeletonData_t should be at offset 0x90");
		static_assert(sizeof(CS2::modellib::ModelSkeletonData_t) == 0xA8, "ModelSkeletonData_t size should be 0xA8");
	}
}
