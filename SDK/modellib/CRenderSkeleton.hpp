// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif





namespace CS2 {
	namespace modellib {
		class RenderSkeletonBone_t;
	}
}


using namespace GlobalTypes;
namespace CS2 {
	namespace modellib {
		class CRenderSkeleton  {
		public:
			GlobalTypes::CUtlVector< modellib::RenderSkeletonBone_t > m_bones; // 0x0 | Schema_Atomic | Size: 0x18
			// char  m_bones[0x18]; // 0x0 | Schema_Atomic | Size: 0x18
			S2_PAD(0x18);
			GlobalTypes::CUtlVector< int32 > m_boneParents; // 0x30 | Schema_Atomic | Size: 0x18
			// char  m_boneParents[0x18]; // 0x30 | Schema_Atomic | Size: 0x18
			int32_t m_nBoneWeightCount; // 0x48 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4); // End padding
		};
		static_assert(offsetof(CS2::modellib::CRenderSkeleton, m_bones) == 0x0, "m_bones in CRenderSkeleton should be at offset 0x0");
		static_assert(offsetof(CS2::modellib::CRenderSkeleton, m_boneParents) == 0x30, "m_boneParents in CRenderSkeleton should be at offset 0x30");
		static_assert(offsetof(CS2::modellib::CRenderSkeleton, m_nBoneWeightCount) == 0x48, "m_nBoneWeightCount in CRenderSkeleton should be at offset 0x48");
		static_assert(sizeof(CS2::modellib::CRenderSkeleton) == 0x50, "CRenderSkeleton size should be 0x50");
	}
}
