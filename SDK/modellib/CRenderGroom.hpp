// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif





namespace CS2 {
	namespace modellib {
		class RenderHairStrandInfo_t;
	}
}


using namespace GlobalTypes;
namespace CS2 {
	namespace modellib {
		class CRenderGroom  {
		public:
			GlobalTypes::CUtlVector<modellib::RenderHairStrandInfo_t> m_hairs; // 0x0 | Schema_Atomic | Size: 0x18
			// char  m_hairs[0x18]; // 0x0 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector< uint32 > m_hairPositionOffsets; // 0x18 | Schema_Atomic | Size: 0x18
			// char  m_hairPositionOffsets[0x18]; // 0x18 | Schema_Atomic | Size: 0x18
			S2_PAD(0x10);
			// GlobalTypes::CStrongHandleCopyable<resourcesystem::InfoForResourceTypeIMaterial2> m_hSimParamsMat; // 0x40 | Schema_Atomic | Size: 0x8
			char  m_hSimParamsMat[0x8]; // 0x40 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlVector< int32 > m_strandSegmentCountHist; // 0x48 | Schema_Atomic | Size: 0x18
			// char  m_strandSegmentCountHist[0x18]; // 0x48 | Schema_Atomic | Size: 0x18
			S2_PAD(0x18);
			int32_t m_nMaxSegmentsPerHairStrand; // 0x78 | Schema_Builtin | Size: 0x4
			int32_t m_nGuideHairCount; // 0x7c | Schema_Builtin | Size: 0x4
			int32_t m_nHairCount; // 0x80 | Schema_Builtin | Size: 0x4
			int32_t m_nTotalVertexCount; // 0x84 | Schema_Builtin | Size: 0x4
			int32_t m_nTotalSegmentCount; // 0x88 | Schema_Builtin | Size: 0x4
			int32_t m_nGroomGroupID; // 0x8c | Schema_Builtin | Size: 0x4
			int32_t m_nAttachBoneIdx; // 0x90 | Schema_Builtin | Size: 0x4
			int32_t m_nAttachMeshIdx; // 0x94 | Schema_Builtin | Size: 0x4
			int32_t m_nAttachMeshDrawCallIdx; // 0x98 | Schema_Builtin | Size: 0x4
			bool m_bEnableSimulation; // 0x9c | Schema_Builtin | Size: 0x1
			S2_PAD(0x3); // End padding
		};
		static_assert(offsetof(CS2::modellib::CRenderGroom, m_hairs) == 0x0, "m_hairs in CRenderGroom should be at offset 0x0");
		static_assert(offsetof(CS2::modellib::CRenderGroom, m_hairPositionOffsets) == 0x18, "m_hairPositionOffsets in CRenderGroom should be at offset 0x18");
		static_assert(offsetof(CS2::modellib::CRenderGroom, m_hSimParamsMat) == 0x40, "m_hSimParamsMat in CRenderGroom should be at offset 0x40");
		static_assert(offsetof(CS2::modellib::CRenderGroom, m_strandSegmentCountHist) == 0x48, "m_strandSegmentCountHist in CRenderGroom should be at offset 0x48");
		static_assert(offsetof(CS2::modellib::CRenderGroom, m_nMaxSegmentsPerHairStrand) == 0x78, "m_nMaxSegmentsPerHairStrand in CRenderGroom should be at offset 0x78");
		static_assert(offsetof(CS2::modellib::CRenderGroom, m_nGuideHairCount) == 0x7C, "m_nGuideHairCount in CRenderGroom should be at offset 0x7C");
		static_assert(offsetof(CS2::modellib::CRenderGroom, m_nHairCount) == 0x80, "m_nHairCount in CRenderGroom should be at offset 0x80");
		static_assert(offsetof(CS2::modellib::CRenderGroom, m_nTotalVertexCount) == 0x84, "m_nTotalVertexCount in CRenderGroom should be at offset 0x84");
		static_assert(offsetof(CS2::modellib::CRenderGroom, m_nTotalSegmentCount) == 0x88, "m_nTotalSegmentCount in CRenderGroom should be at offset 0x88");
		static_assert(offsetof(CS2::modellib::CRenderGroom, m_nGroomGroupID) == 0x8C, "m_nGroomGroupID in CRenderGroom should be at offset 0x8C");
		static_assert(offsetof(CS2::modellib::CRenderGroom, m_nAttachBoneIdx) == 0x90, "m_nAttachBoneIdx in CRenderGroom should be at offset 0x90");
		static_assert(offsetof(CS2::modellib::CRenderGroom, m_nAttachMeshIdx) == 0x94, "m_nAttachMeshIdx in CRenderGroom should be at offset 0x94");
		static_assert(offsetof(CS2::modellib::CRenderGroom, m_nAttachMeshDrawCallIdx) == 0x98, "m_nAttachMeshDrawCallIdx in CRenderGroom should be at offset 0x98");
		static_assert(offsetof(CS2::modellib::CRenderGroom, m_bEnableSimulation) == 0x9C, "m_bEnableSimulation in CRenderGroom should be at offset 0x9C");
		static_assert(sizeof(CS2::modellib::CRenderGroom) == 0xA0, "CRenderGroom size should be 0xA0");
	}
}
