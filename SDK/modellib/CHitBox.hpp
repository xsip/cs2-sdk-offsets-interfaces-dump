// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif





namespace CS2 {
	namespace modellib {
		class CHitBox  {
		public:
			GlobalTypes::CUtlString m_name; // 0x0 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlString m_sSurfaceProperty; // 0x8 | Schema_Atomic | Size: 0x8
			GlobalTypes::CUtlString m_sBoneName; // 0x10 | Schema_Atomic | Size: 0x8
			GlobalTypes::Vector m_vMinBounds; // 0x18 | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vMaxBounds; // 0x24 | Schema_Atomic | Size: 0xc
			float32 m_flShapeRadius; // 0x30 | Schema_Builtin | Size: 0x4
			uint32_t m_nBoneNameHash; // 0x34 | Schema_Builtin | Size: 0x4
			int32_t m_nGroupId; // 0x38 | Schema_Builtin | Size: 0x4
			uint8_t m_nShapeType; // 0x3c | Schema_Builtin | Size: 0x1
			bool m_bTranslationOnly; // 0x3d | Schema_Builtin | Size: 0x1
			S2_PAD(0x2);
			uint32_t m_CRC; // 0x40 | Schema_Builtin | Size: 0x4
			GlobalTypes::Color m_cRenderColor; // 0x44 | Schema_Atomic | Size: 0x4
			uint16_t m_nHitBoxIndex; // 0x48 | Schema_Builtin | Size: 0x2
			S2_PAD(0x26); // End padding
		};
		static_assert(offsetof(CS2::modellib::CHitBox, m_name) == 0x0, "m_name in CHitBox should be at offset 0x0");
		static_assert(offsetof(CS2::modellib::CHitBox, m_sSurfaceProperty) == 0x8, "m_sSurfaceProperty in CHitBox should be at offset 0x8");
		static_assert(offsetof(CS2::modellib::CHitBox, m_sBoneName) == 0x10, "m_sBoneName in CHitBox should be at offset 0x10");
		static_assert(offsetof(CS2::modellib::CHitBox, m_vMinBounds) == 0x18, "m_vMinBounds in CHitBox should be at offset 0x18");
		static_assert(offsetof(CS2::modellib::CHitBox, m_vMaxBounds) == 0x24, "m_vMaxBounds in CHitBox should be at offset 0x24");
		static_assert(offsetof(CS2::modellib::CHitBox, m_flShapeRadius) == 0x30, "m_flShapeRadius in CHitBox should be at offset 0x30");
		static_assert(offsetof(CS2::modellib::CHitBox, m_nBoneNameHash) == 0x34, "m_nBoneNameHash in CHitBox should be at offset 0x34");
		static_assert(offsetof(CS2::modellib::CHitBox, m_nGroupId) == 0x38, "m_nGroupId in CHitBox should be at offset 0x38");
		static_assert(offsetof(CS2::modellib::CHitBox, m_nShapeType) == 0x3C, "m_nShapeType in CHitBox should be at offset 0x3C");
		static_assert(offsetof(CS2::modellib::CHitBox, m_bTranslationOnly) == 0x3D, "m_bTranslationOnly in CHitBox should be at offset 0x3D");
		static_assert(offsetof(CS2::modellib::CHitBox, m_CRC) == 0x40, "m_CRC in CHitBox should be at offset 0x40");
		static_assert(offsetof(CS2::modellib::CHitBox, m_cRenderColor) == 0x44, "m_cRenderColor in CHitBox should be at offset 0x44");
		static_assert(offsetof(CS2::modellib::CHitBox, m_nHitBoxIndex) == 0x48, "m_nHitBoxIndex in CHitBox should be at offset 0x48");
		static_assert(sizeof(CS2::modellib::CHitBox) == 0x70, "CHitBox size should be 0x70");
	}
}
