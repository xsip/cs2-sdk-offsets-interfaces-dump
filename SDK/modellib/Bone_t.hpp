// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif







using namespace GlobalTypes;
namespace CS2 {
	namespace modellib {
		class Bone_t  {
		public:
			GlobalTypes::CUtlString m_Name; // 0x0 | Schema_Atomic | Size: 0x8
			S2_PAD(0x8);
			GlobalTypes::CTransform m_BindPose; // 0x10 | Schema_Atomic | Size: 0x20
			int32_t m_nParent; // 0x30 | Schema_Builtin | Size: 0x4
			S2_PAD(0xc); // End padding
		};
		static_assert(offsetof(CS2::modellib::Bone_t, m_Name) == 0x0, "m_Name in SkeletonAnimCapture_t::Bone_t should be at offset 0x0");
		static_assert(offsetof(CS2::modellib::Bone_t, m_BindPose) == 0x10, "m_BindPose in SkeletonAnimCapture_t::Bone_t should be at offset 0x10");
		static_assert(offsetof(CS2::modellib::Bone_t, m_nParent) == 0x30, "m_nParent in SkeletonAnimCapture_t::Bone_t should be at offset 0x30");
		static_assert(sizeof(CS2::modellib::Bone_t) == 0x40, "SkeletonAnimCapture_t::Bone_t size should be 0x40");
	}
}
