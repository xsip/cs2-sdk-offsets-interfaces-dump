// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/modellib/PermModelInfo_t.hpp>
#include <SDK/modellib/ModelSkeletonData_t.hpp>



namespace CS2 {
	namespace modellib {
		class PermModelExtPart_t;
		class MaterialGroup_t;
		class ModelBoneFlexDriver_t;
		class CModelConfigList;
		class PermModelDataAnimatedMaterialAttribute_t;
	}
}


using namespace GlobalTypes;
namespace CS2 {
	namespace modellib {
		class PermModelData_t  {
		public:
			GlobalTypes::CUtlString m_name; // 0x0 | Schema_Atomic | Size: 0x8
			modellib::PermModelInfo_t m_modelInfo; // 0x8 | Schema_DeclaredClass | Size: 0x58
			GlobalTypes::CUtlVector< modellib::PermModelExtPart_t > m_ExtParts; // 0x60 | Schema_Atomic | Size: 0x18
			// char  m_ExtParts[0x18]; // 0x60 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector< GlobalTypes::CStrongHandle< InfoForResourceTypeCRenderMesh > > m_refMeshes; // 0x78 | Schema_Atomic | Size: 0x18
			// char  m_refMeshes[0x18]; // 0x78 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector< uint64 > m_refMeshGroupMasks; // 0x90 | Schema_Atomic | Size: 0x18
			// char  m_refMeshGroupMasks[0x18]; // 0x90 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector< uint64 > m_refPhysGroupMasks; // 0xa8 | Schema_Atomic | Size: 0x18
			// char  m_refPhysGroupMasks[0x18]; // 0xa8 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector< uint8 > m_refLODGroupMasks; // 0xc0 | Schema_Atomic | Size: 0x18
			// char  m_refLODGroupMasks[0x18]; // 0xc0 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector< float32 > m_lodGroupSwitchDistances; // 0xd8 | Schema_Atomic | Size: 0x18
			// char  m_lodGroupSwitchDistances[0x18]; // 0xd8 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector< GlobalTypes::CStrongHandle< InfoForResourceTypeCPhysAggregateData > > m_refPhysicsData; // 0xf0 | Schema_Atomic | Size: 0x18
			// char  m_refPhysicsData[0x18]; // 0xf0 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector< GlobalTypes::CStrongHandle< InfoForResourceTypeCPhysAggregateData > > m_refPhysicsHitboxData; // 0x108 | Schema_Atomic | Size: 0x18
			// char  m_refPhysicsHitboxData[0x18]; // 0x108 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector< GlobalTypes::CStrongHandle< InfoForResourceTypeCAnimationGroup > > m_refAnimGroups; // 0x120 | Schema_Atomic | Size: 0x18
			// char  m_refAnimGroups[0x18]; // 0x120 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector< GlobalTypes::CStrongHandle< InfoForResourceTypeCSequenceGroupData > > m_refSequenceGroups; // 0x138 | Schema_Atomic | Size: 0x18
			// char  m_refSequenceGroups[0x18]; // 0x138 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector< GlobalTypes::CUtlString > m_meshGroups; // 0x150 | Schema_Atomic | Size: 0x18
			// char  m_meshGroups[0x18]; // 0x150 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector< modellib::MaterialGroup_t > m_materialGroups; // 0x168 | Schema_Atomic | Size: 0x18
			// char  m_materialGroups[0x18]; // 0x168 | Schema_Atomic | Size: 0x18
			uint64_t m_nDefaultMeshGroupMask; // 0x180 | Schema_Builtin | Size: 0x8
			modellib::ModelSkeletonData_t m_modelSkeleton; // 0x188 | Schema_DeclaredClass | Size: 0xa8
			GlobalTypes::CUtlVector< int16 > m_remappingTable; // 0x230 | Schema_Atomic | Size: 0x18
			// char  m_remappingTable[0x18]; // 0x230 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector< uint16 > m_remappingTableStarts; // 0x248 | Schema_Atomic | Size: 0x18
			// char  m_remappingTableStarts[0x18]; // 0x248 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector< modellib::ModelBoneFlexDriver_t > m_boneFlexDrivers; // 0x260 | Schema_Atomic | Size: 0x18
			// char  m_boneFlexDrivers[0x18]; // 0x260 | Schema_Atomic | Size: 0x18
			modellib::CModelConfigList* m_pModelConfigList; // 0x278 | Schema_Ptr | Size: 0x8
			GlobalTypes::CUtlVector< GlobalTypes::CUtlString > m_BodyGroupsHiddenInTools; // 0x280 | Schema_Atomic | Size: 0x18
			// char  m_BodyGroupsHiddenInTools[0x18]; // 0x280 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector< GlobalTypes::CStrongHandle< InfoForResourceTypeCModel > > m_refAnimIncludeModels; // 0x298 | Schema_Atomic | Size: 0x18
			// char  m_refAnimIncludeModels[0x18]; // 0x298 | Schema_Atomic | Size: 0x18
			GlobalTypes::CUtlVector< modellib::PermModelDataAnimatedMaterialAttribute_t > m_AnimatedMaterialAttributes; // 0x2b0 | Schema_Atomic | Size: 0x18
			// char  m_AnimatedMaterialAttributes[0x18]; // 0x2b0 | Schema_Atomic | Size: 0x18
		};
		static_assert(offsetof(CS2::modellib::PermModelData_t, m_name) == 0x0, "m_name in PermModelData_t should be at offset 0x0");
		static_assert(offsetof(CS2::modellib::PermModelData_t, m_modelInfo) == 0x8, "m_modelInfo in PermModelData_t should be at offset 0x8");
		static_assert(offsetof(CS2::modellib::PermModelData_t, m_ExtParts) == 0x60, "m_ExtParts in PermModelData_t should be at offset 0x60");
		static_assert(offsetof(CS2::modellib::PermModelData_t, m_refMeshes) == 0x78, "m_refMeshes in PermModelData_t should be at offset 0x78");
		static_assert(offsetof(CS2::modellib::PermModelData_t, m_refMeshGroupMasks) == 0x90, "m_refMeshGroupMasks in PermModelData_t should be at offset 0x90");
		static_assert(offsetof(CS2::modellib::PermModelData_t, m_refPhysGroupMasks) == 0xA8, "m_refPhysGroupMasks in PermModelData_t should be at offset 0xA8");
		static_assert(offsetof(CS2::modellib::PermModelData_t, m_refLODGroupMasks) == 0xC0, "m_refLODGroupMasks in PermModelData_t should be at offset 0xC0");
		static_assert(offsetof(CS2::modellib::PermModelData_t, m_lodGroupSwitchDistances) == 0xD8, "m_lodGroupSwitchDistances in PermModelData_t should be at offset 0xD8");
		static_assert(offsetof(CS2::modellib::PermModelData_t, m_refPhysicsData) == 0xF0, "m_refPhysicsData in PermModelData_t should be at offset 0xF0");
		static_assert(offsetof(CS2::modellib::PermModelData_t, m_refPhysicsHitboxData) == 0x108, "m_refPhysicsHitboxData in PermModelData_t should be at offset 0x108");
		static_assert(offsetof(CS2::modellib::PermModelData_t, m_refAnimGroups) == 0x120, "m_refAnimGroups in PermModelData_t should be at offset 0x120");
		static_assert(offsetof(CS2::modellib::PermModelData_t, m_refSequenceGroups) == 0x138, "m_refSequenceGroups in PermModelData_t should be at offset 0x138");
		static_assert(offsetof(CS2::modellib::PermModelData_t, m_meshGroups) == 0x150, "m_meshGroups in PermModelData_t should be at offset 0x150");
		static_assert(offsetof(CS2::modellib::PermModelData_t, m_materialGroups) == 0x168, "m_materialGroups in PermModelData_t should be at offset 0x168");
		static_assert(offsetof(CS2::modellib::PermModelData_t, m_nDefaultMeshGroupMask) == 0x180, "m_nDefaultMeshGroupMask in PermModelData_t should be at offset 0x180");
		static_assert(offsetof(CS2::modellib::PermModelData_t, m_modelSkeleton) == 0x188, "m_modelSkeleton in PermModelData_t should be at offset 0x188");
		static_assert(offsetof(CS2::modellib::PermModelData_t, m_remappingTable) == 0x230, "m_remappingTable in PermModelData_t should be at offset 0x230");
		static_assert(offsetof(CS2::modellib::PermModelData_t, m_remappingTableStarts) == 0x248, "m_remappingTableStarts in PermModelData_t should be at offset 0x248");
		static_assert(offsetof(CS2::modellib::PermModelData_t, m_boneFlexDrivers) == 0x260, "m_boneFlexDrivers in PermModelData_t should be at offset 0x260");
		static_assert(offsetof(CS2::modellib::PermModelData_t, m_pModelConfigList) == 0x278, "m_pModelConfigList in PermModelData_t should be at offset 0x278");
		static_assert(offsetof(CS2::modellib::PermModelData_t, m_BodyGroupsHiddenInTools) == 0x280, "m_BodyGroupsHiddenInTools in PermModelData_t should be at offset 0x280");
		static_assert(offsetof(CS2::modellib::PermModelData_t, m_refAnimIncludeModels) == 0x298, "m_refAnimIncludeModels in PermModelData_t should be at offset 0x298");
		static_assert(offsetof(CS2::modellib::PermModelData_t, m_AnimatedMaterialAttributes) == 0x2B0, "m_AnimatedMaterialAttributes in PermModelData_t should be at offset 0x2B0");
		static_assert(sizeof(CS2::modellib::PermModelData_t) == 0x2C8, "PermModelData_t size should be 0x2C8");
	}
}
