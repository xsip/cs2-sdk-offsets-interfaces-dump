// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/smartprops/CSmartPropElement_Group.hpp>
#include <SDK/smartprops/CSmartPropAttributeGridPlacementMode.hpp>
#include <SDK/smartprops/CSmartPropAttributeGridOriginMode.hpp>





using namespace GlobalTypes;
namespace CS2 {
	namespace smartprops {
		class CSmartPropElement_Layout2DGrid : public CS2::smartprops::CSmartPropElement_Group {
		public:
			GlobalTypes::CSmartPropAttributeFloat m_flWidth; // 0xa0 | Schema_Atomic | Size: 0x40
			GlobalTypes::CSmartPropAttributeFloat m_flLength; // 0xe0 | Schema_Atomic | Size: 0x40
			GlobalTypes::CSmartPropAttributeBool m_bVerticalLength; // 0x120 | Schema_Atomic | Size: 0x40
			smartprops::CSmartPropAttributeGridPlacementMode m_GridArrangement; // 0x160 | Schema_DeclaredClass | Size: 0x40
			smartprops::CSmartPropAttributeGridOriginMode m_GridOriginMode; // 0x1a0 | Schema_DeclaredClass | Size: 0x40
			GlobalTypes::CSmartPropAttributeInt m_nCountW; // 0x1e0 | Schema_Atomic | Size: 0x40
			GlobalTypes::CSmartPropAttributeInt m_nCountL; // 0x220 | Schema_Atomic | Size: 0x40
			GlobalTypes::CSmartPropAttributeFloat m_flSpacingWidth; // 0x260 | Schema_Atomic | Size: 0x40
			GlobalTypes::CSmartPropAttributeFloat m_flSpacingLength; // 0x2a0 | Schema_Atomic | Size: 0x40
			GlobalTypes::CSmartPropAttributeBool m_bAlternateShift; // 0x2e0 | Schema_Atomic | Size: 0x40
			GlobalTypes::CSmartPropAttributeFloat m_flAlternateShiftWidth; // 0x320 | Schema_Atomic | Size: 0x40
			GlobalTypes::CSmartPropAttributeFloat m_flAlternateShiftLength; // 0x360 | Schema_Atomic | Size: 0x40
		};
		static_assert(offsetof(CS2::smartprops::CSmartPropElement_Layout2DGrid, m_flWidth) == 0xA0, "m_flWidth in CSmartPropElement_Layout2DGrid should be at offset 0xA0");
		static_assert(offsetof(CS2::smartprops::CSmartPropElement_Layout2DGrid, m_flLength) == 0xE0, "m_flLength in CSmartPropElement_Layout2DGrid should be at offset 0xE0");
		static_assert(offsetof(CS2::smartprops::CSmartPropElement_Layout2DGrid, m_bVerticalLength) == 0x120, "m_bVerticalLength in CSmartPropElement_Layout2DGrid should be at offset 0x120");
		static_assert(offsetof(CS2::smartprops::CSmartPropElement_Layout2DGrid, m_GridArrangement) == 0x160, "m_GridArrangement in CSmartPropElement_Layout2DGrid should be at offset 0x160");
		static_assert(offsetof(CS2::smartprops::CSmartPropElement_Layout2DGrid, m_GridOriginMode) == 0x1A0, "m_GridOriginMode in CSmartPropElement_Layout2DGrid should be at offset 0x1A0");
		static_assert(offsetof(CS2::smartprops::CSmartPropElement_Layout2DGrid, m_nCountW) == 0x1E0, "m_nCountW in CSmartPropElement_Layout2DGrid should be at offset 0x1E0");
		static_assert(offsetof(CS2::smartprops::CSmartPropElement_Layout2DGrid, m_nCountL) == 0x220, "m_nCountL in CSmartPropElement_Layout2DGrid should be at offset 0x220");
		static_assert(offsetof(CS2::smartprops::CSmartPropElement_Layout2DGrid, m_flSpacingWidth) == 0x260, "m_flSpacingWidth in CSmartPropElement_Layout2DGrid should be at offset 0x260");
		static_assert(offsetof(CS2::smartprops::CSmartPropElement_Layout2DGrid, m_flSpacingLength) == 0x2A0, "m_flSpacingLength in CSmartPropElement_Layout2DGrid should be at offset 0x2A0");
		static_assert(offsetof(CS2::smartprops::CSmartPropElement_Layout2DGrid, m_bAlternateShift) == 0x2E0, "m_bAlternateShift in CSmartPropElement_Layout2DGrid should be at offset 0x2E0");
		static_assert(offsetof(CS2::smartprops::CSmartPropElement_Layout2DGrid, m_flAlternateShiftWidth) == 0x320, "m_flAlternateShiftWidth in CSmartPropElement_Layout2DGrid should be at offset 0x320");
		static_assert(offsetof(CS2::smartprops::CSmartPropElement_Layout2DGrid, m_flAlternateShiftLength) == 0x360, "m_flAlternateShiftLength in CSmartPropElement_Layout2DGrid should be at offset 0x360");
		static_assert(sizeof(CS2::smartprops::CSmartPropElement_Layout2DGrid) == 0x3A0, "CSmartPropElement_Layout2DGrid size should be 0x3A0");
	}
}
