// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/toolscene/LightRigType_t.hpp>
#include <SDK/toolscene/CLightRigBackground.hpp>
#include <SDK/toolscene/CLightRigGrid.hpp>
#include <SDK/toolscene/CLightRigExposure.hpp>
#include <SDK/toolscene/CLightRigPostProcessing.hpp>
#include <SDK/toolscene/CLightRigSky.hpp>
#include <SDK/toolscene/CLightRigVMap.hpp>



namespace CS2 {
	namespace toolscene {
		class CToolSceneLightRig  {
		public:
			S2_PAD(0x8);
			toolscene::LightRigType_t m_nRigType; // 0x8 | Schema_DeclaredEnum | Size: 0x4
			S2_PAD(0x4);
			// GlobalTypes::CUtlVector< toolscene::CLightRigSunLight > m_Suns; // 0x10 | Schema_Atomic | Size: 0x18
			char  m_Suns[0x18]; // 0x10 | Schema_Atomic | Size: 0x18
			// GlobalTypes::CUtlVector< toolscene::CLightRigPointLight > m_PointLights; // 0x28 | Schema_Atomic | Size: 0x18
			char  m_PointLights[0x18]; // 0x28 | Schema_Atomic | Size: 0x18
			// GlobalTypes::CUtlVector< toolscene::CLightRigSpotLight > m_SpotLights; // 0x40 | Schema_Atomic | Size: 0x18
			char  m_SpotLights[0x18]; // 0x40 | Schema_Atomic | Size: 0x18
			toolscene::CLightRigBackground m_Background; // 0x58 | Schema_DeclaredClass | Size: 0x5
			toolscene::CLightRigGrid m_Grid; // 0x5d | Schema_DeclaredClass | Size: 0x5
			S2_PAD(0x2);
			toolscene::CLightRigExposure m_Exposure; // 0x64 | Schema_DeclaredClass | Size: 0xc
			toolscene::CLightRigPostProcessing m_PostProcessing; // 0x70 | Schema_DeclaredClass | Size: 0x8
			toolscene::CLightRigSky m_Sky; // 0x78 | Schema_DeclaredClass | Size: 0x8
			toolscene::CLightRigVMap m_BackgroundMap; // 0x80 | Schema_DeclaredClass | Size: 0xe8
		};
		static_assert(offsetof(CS2::toolscene::CToolSceneLightRig, m_nRigType) == 0x8, "m_nRigType in CToolSceneLightRig should be at offset 0x8");
		static_assert(offsetof(CS2::toolscene::CToolSceneLightRig, m_Suns) == 0x10, "m_Suns in CToolSceneLightRig should be at offset 0x10");
		static_assert(offsetof(CS2::toolscene::CToolSceneLightRig, m_PointLights) == 0x28, "m_PointLights in CToolSceneLightRig should be at offset 0x28");
		static_assert(offsetof(CS2::toolscene::CToolSceneLightRig, m_SpotLights) == 0x40, "m_SpotLights in CToolSceneLightRig should be at offset 0x40");
		static_assert(offsetof(CS2::toolscene::CToolSceneLightRig, m_Background) == 0x58, "m_Background in CToolSceneLightRig should be at offset 0x58");
		static_assert(offsetof(CS2::toolscene::CToolSceneLightRig, m_Grid) == 0x5D, "m_Grid in CToolSceneLightRig should be at offset 0x5D");
		static_assert(offsetof(CS2::toolscene::CToolSceneLightRig, m_Exposure) == 0x64, "m_Exposure in CToolSceneLightRig should be at offset 0x64");
		static_assert(offsetof(CS2::toolscene::CToolSceneLightRig, m_PostProcessing) == 0x70, "m_PostProcessing in CToolSceneLightRig should be at offset 0x70");
		static_assert(offsetof(CS2::toolscene::CToolSceneLightRig, m_Sky) == 0x78, "m_Sky in CToolSceneLightRig should be at offset 0x78");
		static_assert(offsetof(CS2::toolscene::CToolSceneLightRig, m_BackgroundMap) == 0x80, "m_BackgroundMap in CToolSceneLightRig should be at offset 0x80");
		static_assert(sizeof(CS2::toolscene::CToolSceneLightRig) == 0x168, "CToolSceneLightRig size should be 0x168");
	}
}
