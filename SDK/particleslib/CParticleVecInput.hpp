// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <SDK/GlobalTypes.hpp>

#include <SDK/particleslib/CParticleInput.hpp>
#include <SDK/particleslib/ParticleVecType_t.hpp>
#include <SDK/particles/ParticleAttributeIndex_t.hpp>
#include <SDK/particleslib/CParticleFloatInput.hpp>



namespace CS2 {
	namespace particleslib {
		class CParticleVecInput : public CS2::particleslib::CParticleInput {
		public:
			particleslib::ParticleVecType_t m_nType; // 0x10 | Schema_DeclaredEnum | Size: 0x4
			GlobalTypes::Vector m_vLiteralValue; // 0x14 | Schema_Atomic | Size: 0xc
			GlobalTypes::Color m_LiteralColor; // 0x20 | Schema_Atomic | Size: 0x4
			S2_PAD(0x4);
			GlobalTypes::CParticleNamedValueRef m_NamedValue; // 0x28 | Schema_Atomic | Size: 0x40
			bool m_bFollowNamedValue; // 0x68 | Schema_Builtin | Size: 0x1
			S2_PAD(0x3);
			particles::ParticleAttributeIndex_t m_nVectorAttribute; // 0x6c | Schema_DeclaredClass | Size: 0x4
			GlobalTypes::Vector m_vVectorAttributeScale; // 0x70 | Schema_Atomic | Size: 0xc
			int32_t m_nControlPoint; // 0x7c | Schema_Builtin | Size: 0x4
			int32_t m_nDeltaControlPoint; // 0x80 | Schema_Builtin | Size: 0x4
			GlobalTypes::Vector m_vCPValueScale; // 0x84 | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vCPRelativePosition; // 0x90 | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vCPRelativeDir; // 0x9c | Schema_Atomic | Size: 0xc
			particleslib::CParticleFloatInput m_FloatComponentX; // 0xa8 | Schema_DeclaredClass | Size: 0x160
			particleslib::CParticleFloatInput m_FloatComponentY; // 0x208 | Schema_DeclaredClass | Size: 0x160
			particleslib::CParticleFloatInput m_FloatComponentZ; // 0x368 | Schema_DeclaredClass | Size: 0x160
			particleslib::CParticleFloatInput m_FloatInterp; // 0x4c8 | Schema_DeclaredClass | Size: 0x160
			float32 m_flInterpInput0; // 0x628 | Schema_Builtin | Size: 0x4
			float32 m_flInterpInput1; // 0x62c | Schema_Builtin | Size: 0x4
			GlobalTypes::Vector m_vInterpOutput0; // 0x630 | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vInterpOutput1; // 0x63c | Schema_Atomic | Size: 0xc
			GlobalTypes::CColorGradient m_Gradient; // 0x648 | Schema_Atomic | Size: 0x18
			GlobalTypes::Vector m_vRandomMin; // 0x660 | Schema_Atomic | Size: 0xc
			GlobalTypes::Vector m_vRandomMax; // 0x66c | Schema_Atomic | Size: 0xc
		};
		static_assert(offsetof(CS2::particleslib::CParticleVecInput, m_nType) == 0x10, "m_nType in CParticleVecInput should be at offset 0x10");
		static_assert(offsetof(CS2::particleslib::CParticleVecInput, m_vLiteralValue) == 0x14, "m_vLiteralValue in CParticleVecInput should be at offset 0x14");
		static_assert(offsetof(CS2::particleslib::CParticleVecInput, m_LiteralColor) == 0x20, "m_LiteralColor in CParticleVecInput should be at offset 0x20");
		static_assert(offsetof(CS2::particleslib::CParticleVecInput, m_NamedValue) == 0x28, "m_NamedValue in CParticleVecInput should be at offset 0x28");
		static_assert(offsetof(CS2::particleslib::CParticleVecInput, m_bFollowNamedValue) == 0x68, "m_bFollowNamedValue in CParticleVecInput should be at offset 0x68");
		static_assert(offsetof(CS2::particleslib::CParticleVecInput, m_nVectorAttribute) == 0x6C, "m_nVectorAttribute in CParticleVecInput should be at offset 0x6C");
		static_assert(offsetof(CS2::particleslib::CParticleVecInput, m_vVectorAttributeScale) == 0x70, "m_vVectorAttributeScale in CParticleVecInput should be at offset 0x70");
		static_assert(offsetof(CS2::particleslib::CParticleVecInput, m_nControlPoint) == 0x7C, "m_nControlPoint in CParticleVecInput should be at offset 0x7C");
		static_assert(offsetof(CS2::particleslib::CParticleVecInput, m_nDeltaControlPoint) == 0x80, "m_nDeltaControlPoint in CParticleVecInput should be at offset 0x80");
		static_assert(offsetof(CS2::particleslib::CParticleVecInput, m_vCPValueScale) == 0x84, "m_vCPValueScale in CParticleVecInput should be at offset 0x84");
		static_assert(offsetof(CS2::particleslib::CParticleVecInput, m_vCPRelativePosition) == 0x90, "m_vCPRelativePosition in CParticleVecInput should be at offset 0x90");
		static_assert(offsetof(CS2::particleslib::CParticleVecInput, m_vCPRelativeDir) == 0x9C, "m_vCPRelativeDir in CParticleVecInput should be at offset 0x9C");
		static_assert(offsetof(CS2::particleslib::CParticleVecInput, m_FloatComponentX) == 0xA8, "m_FloatComponentX in CParticleVecInput should be at offset 0xA8");
		static_assert(offsetof(CS2::particleslib::CParticleVecInput, m_FloatComponentY) == 0x208, "m_FloatComponentY in CParticleVecInput should be at offset 0x208");
		static_assert(offsetof(CS2::particleslib::CParticleVecInput, m_FloatComponentZ) == 0x368, "m_FloatComponentZ in CParticleVecInput should be at offset 0x368");
		static_assert(offsetof(CS2::particleslib::CParticleVecInput, m_FloatInterp) == 0x4C8, "m_FloatInterp in CParticleVecInput should be at offset 0x4C8");
		static_assert(offsetof(CS2::particleslib::CParticleVecInput, m_flInterpInput0) == 0x628, "m_flInterpInput0 in CParticleVecInput should be at offset 0x628");
		static_assert(offsetof(CS2::particleslib::CParticleVecInput, m_flInterpInput1) == 0x62C, "m_flInterpInput1 in CParticleVecInput should be at offset 0x62C");
		static_assert(offsetof(CS2::particleslib::CParticleVecInput, m_vInterpOutput0) == 0x630, "m_vInterpOutput0 in CParticleVecInput should be at offset 0x630");
		static_assert(offsetof(CS2::particleslib::CParticleVecInput, m_vInterpOutput1) == 0x63C, "m_vInterpOutput1 in CParticleVecInput should be at offset 0x63C");
		static_assert(offsetof(CS2::particleslib::CParticleVecInput, m_Gradient) == 0x648, "m_Gradient in CParticleVecInput should be at offset 0x648");
		static_assert(offsetof(CS2::particleslib::CParticleVecInput, m_vRandomMin) == 0x660, "m_vRandomMin in CParticleVecInput should be at offset 0x660");
		static_assert(offsetof(CS2::particleslib::CParticleVecInput, m_vRandomMax) == 0x66C, "m_vRandomMax in CParticleVecInput should be at offset 0x66C");
		static_assert(sizeof(CS2::particleslib::CParticleVecInput) == 0x678, "CParticleVecInput size should be 0x678");
	}
}
