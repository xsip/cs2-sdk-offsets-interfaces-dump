// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#ifndef CUSTOM_GLOBAL_TYPES
	#include <SDK/GlobalTypes.hpp>
#else
	#include <Custom/GlobalTypes.hpp>
#endif


#include <SDK/soundsystem_voicecontainers/CVSoundFormat_t.hpp>



namespace CS2 {
	namespace soundsystem_voicecontainers {
		class CAudioSentence;
	}
}


using namespace GlobalTypes;
namespace CS2 {
	namespace soundsystem_voicecontainers {
		class CVSound  {
		public:
			int32_t m_nRate; // 0x0 | Schema_Builtin | Size: 0x4
			soundsystem_voicecontainers::CVSoundFormat_t m_nFormat; // 0x4 | Schema_DeclaredEnum | Size: 0x1
			S2_PAD(0x3);
			uint32_t m_nChannels; // 0x8 | Schema_Builtin | Size: 0x4
			int32_t m_nLoopStart; // 0xc | Schema_Builtin | Size: 0x4
			uint32_t m_nSampleCount; // 0x10 | Schema_Builtin | Size: 0x4
			float32 m_flDuration; // 0x14 | Schema_Builtin | Size: 0x4
			GlobalTypes::CUtlVector< soundsystem_voicecontainers::CAudioSentence > m_Sentences; // 0x18 | Schema_Atomic | Size: 0x18
			// char  m_Sentences[0x18]; // 0x18 | Schema_Atomic | Size: 0x18
			uint32_t m_nStreamingSize; // 0x30 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4);
			GlobalTypes::CUtlVector< int32 > m_nSeekTable; // 0x38 | Schema_Atomic | Size: 0x18
			// char  m_nSeekTable[0x18]; // 0x38 | Schema_Atomic | Size: 0x18
			int32_t m_nLoopEnd; // 0x50 | Schema_Builtin | Size: 0x4
			S2_PAD(0x4);
			GlobalTypes::CUtlBinaryBlock m_encodedHeader; // 0x58 | Schema_Atomic | Size: 0x10
			S2_PAD(0x10); // End padding
		};
		static_assert(offsetof(CS2::soundsystem_voicecontainers::CVSound, m_nRate) == 0x0, "m_nRate in CVSound should be at offset 0x0");
		static_assert(offsetof(CS2::soundsystem_voicecontainers::CVSound, m_nFormat) == 0x4, "m_nFormat in CVSound should be at offset 0x4");
		static_assert(offsetof(CS2::soundsystem_voicecontainers::CVSound, m_nChannels) == 0x8, "m_nChannels in CVSound should be at offset 0x8");
		static_assert(offsetof(CS2::soundsystem_voicecontainers::CVSound, m_nLoopStart) == 0xC, "m_nLoopStart in CVSound should be at offset 0xC");
		static_assert(offsetof(CS2::soundsystem_voicecontainers::CVSound, m_nSampleCount) == 0x10, "m_nSampleCount in CVSound should be at offset 0x10");
		static_assert(offsetof(CS2::soundsystem_voicecontainers::CVSound, m_flDuration) == 0x14, "m_flDuration in CVSound should be at offset 0x14");
		static_assert(offsetof(CS2::soundsystem_voicecontainers::CVSound, m_Sentences) == 0x18, "m_Sentences in CVSound should be at offset 0x18");
		static_assert(offsetof(CS2::soundsystem_voicecontainers::CVSound, m_nStreamingSize) == 0x30, "m_nStreamingSize in CVSound should be at offset 0x30");
		static_assert(offsetof(CS2::soundsystem_voicecontainers::CVSound, m_nSeekTable) == 0x38, "m_nSeekTable in CVSound should be at offset 0x38");
		static_assert(offsetof(CS2::soundsystem_voicecontainers::CVSound, m_nLoopEnd) == 0x50, "m_nLoopEnd in CVSound should be at offset 0x50");
		static_assert(offsetof(CS2::soundsystem_voicecontainers::CVSound, m_encodedHeader) == 0x58, "m_encodedHeader in CVSound should be at offset 0x58");
		static_assert(sizeof(CS2::soundsystem_voicecontainers::CVSound) == 0x78, "CVSound size should be 0x78");
	}
}
