// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <cstddef>

namespace CS2 {
	namespace SchemaOffsets {
		namespace client {
			// Class size: 0x2E0
			namespace CProjectedTextureBase /**/ {
				constexpr std::ptrdiff_t m_hTargetEntity = 0xc; // client::CHandle< client::C_BaseEntity > m_hTargetEntity; |  Schema_Atomic | Size: 0x4
				constexpr std::ptrdiff_t m_bState = 0x10; // bool m_bState; |  0x10 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bAlwaysUpdate = 0x11; // bool m_bAlwaysUpdate; |  0x11 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_flLightFOV = 0x14; // float32 m_flLightFOV; |  0x14 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bEnableShadows = 0x18; // bool m_bEnableShadows; |  0x18 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bSimpleProjection = 0x19; // bool m_bSimpleProjection; |  0x19 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bLightOnlyTarget = 0x1a; // bool m_bLightOnlyTarget; |  0x1a | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bLightWorld = 0x1b; // bool m_bLightWorld; |  0x1b | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bCameraSpace = 0x1c; // bool m_bCameraSpace; |  0x1c | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_flBrightnessScale = 0x20; // float32 m_flBrightnessScale; |  0x20 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_LightColor = 0x24; // GlobalTypes::Color m_LightColor; |  Schema_Atomic | Size: 0x4
				constexpr std::ptrdiff_t m_flIntensity = 0x28; // float32 m_flIntensity; |  0x28 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flLinearAttenuation = 0x2c; // float32 m_flLinearAttenuation; |  0x2c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flQuadraticAttenuation = 0x30; // float32 m_flQuadraticAttenuation; |  0x30 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bVolumetric = 0x34; // bool m_bVolumetric; |  0x34 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_flVolumetricIntensity = 0x38; // float32 m_flVolumetricIntensity; |  0x38 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flNoiseStrength = 0x3c; // float32 m_flNoiseStrength; |  0x3c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flFlashlightTime = 0x40; // float32 m_flFlashlightTime; |  0x40 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_nNumPlanes = 0x44; // uint32_t m_nNumPlanes; |  0x44 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flPlaneOffset = 0x48; // float32 m_flPlaneOffset; |  0x48 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flColorTransitionTime = 0x4c; // float32 m_flColorTransitionTime; |  0x4c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flAmbient = 0x50; // float32 m_flAmbient; |  0x50 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_SpotlightTextureName = 0x54; // char m_SpotlightTextureName[512]; |  0x54 | Schema_FixedArray | Size: 0x200
				constexpr std::ptrdiff_t m_nSpotlightTextureFrame = 0x254; // int32_t m_nSpotlightTextureFrame; |  0x254 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_nShadowQuality = 0x258; // uint32_t m_nShadowQuality; |  0x258 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flNearZ = 0x25c; // float32 m_flNearZ; |  0x25c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flFarZ = 0x260; // float32 m_flFarZ; |  0x260 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flProjectionSize = 0x264; // float32 m_flProjectionSize; |  0x264 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flRotation = 0x268; // float32 m_flRotation; |  0x268 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bFlipHorizontal = 0x26c; // bool m_bFlipHorizontal; |  0x26c | Schema_Builtin | Size: 0x1
			}
		}
	}
}
