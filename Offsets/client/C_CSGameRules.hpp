// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <cstddef>

namespace CS2 {
	namespace SchemaOffsets {
		namespace client {
			// Class size: 0x4F60
			namespace C_CSGameRules /*: public CS2::client::C_TeamplayRules*/ {
				constexpr std::ptrdiff_t m_bFreezePeriod = 0x40; // bool m_bFreezePeriod; |  0x40 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bWarmupPeriod = 0x41; // bool m_bWarmupPeriod; |  0x41 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_fWarmupPeriodEnd = 0x44; // entity2::GameTime_t  | Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_fWarmupPeriodStart = 0x48; // entity2::GameTime_t  | Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_bTerroristTimeOutActive = 0x4c; // bool m_bTerroristTimeOutActive; |  0x4c | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bCTTimeOutActive = 0x4d; // bool m_bCTTimeOutActive; |  0x4d | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_flTerroristTimeOutRemaining = 0x50; // float32 m_flTerroristTimeOutRemaining; |  0x50 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flCTTimeOutRemaining = 0x54; // float32 m_flCTTimeOutRemaining; |  0x54 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_nTerroristTimeOuts = 0x58; // int32_t m_nTerroristTimeOuts; |  0x58 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_nCTTimeOuts = 0x5c; // int32_t m_nCTTimeOuts; |  0x5c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bTechnicalTimeOut = 0x60; // bool m_bTechnicalTimeOut; |  0x60 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bMatchWaitingForResume = 0x61; // bool m_bMatchWaitingForResume; |  0x61 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_iFreezeTime = 0x64; // int32_t m_iFreezeTime; |  0x64 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_iRoundTime = 0x68; // int32_t m_iRoundTime; |  0x68 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_fMatchStartTime = 0x6c; // float32 m_fMatchStartTime; |  0x6c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_fRoundStartTime = 0x70; // entity2::GameTime_t  | Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_flRestartRoundTime = 0x74; // entity2::GameTime_t  | Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_bGameRestart = 0x78; // bool m_bGameRestart; |  0x78 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_flGameStartTime = 0x7c; // float32 m_flGameStartTime; |  0x7c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_timeUntilNextPhaseStarts = 0x80; // float32 m_timeUntilNextPhaseStarts; |  0x80 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_gamePhase = 0x84; // int32_t m_gamePhase; |  0x84 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_totalRoundsPlayed = 0x88; // int32_t m_totalRoundsPlayed; |  0x88 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_nRoundsPlayedThisPhase = 0x8c; // int32_t m_nRoundsPlayedThisPhase; |  0x8c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_nOvertimePlaying = 0x90; // int32_t m_nOvertimePlaying; |  0x90 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_iHostagesRemaining = 0x94; // int32_t m_iHostagesRemaining; |  0x94 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bAnyHostageReached = 0x98; // bool m_bAnyHostageReached; |  0x98 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bMapHasBombTarget = 0x99; // bool m_bMapHasBombTarget; |  0x99 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bMapHasRescueZone = 0x9a; // bool m_bMapHasRescueZone; |  0x9a | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bMapHasBuyZone = 0x9b; // bool m_bMapHasBuyZone; |  0x9b | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bIsQueuedMatchmaking = 0x9c; // bool m_bIsQueuedMatchmaking; |  0x9c | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_nQueuedMatchmakingMode = 0xa0; // int32_t m_nQueuedMatchmakingMode; |  0xa0 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bIsValveDS = 0xa4; // bool m_bIsValveDS; |  0xa4 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bLogoMap = 0xa5; // bool m_bLogoMap; |  0xa5 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bPlayAllStepSoundsOnServer = 0xa6; // bool m_bPlayAllStepSoundsOnServer; |  0xa6 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_iSpectatorSlotCount = 0xa8; // int32_t m_iSpectatorSlotCount; |  0xa8 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_MatchDevice = 0xac; // int32_t m_MatchDevice; |  0xac | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bHasMatchStarted = 0xb0; // bool m_bHasMatchStarted; |  0xb0 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_nNextMapInMapgroup = 0xb4; // int32_t m_nNextMapInMapgroup; |  0xb4 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_szTournamentEventName = 0xb8; // char m_szTournamentEventName[512]; |  0xb8 | Schema_FixedArray | Size: 0x200
				constexpr std::ptrdiff_t m_szTournamentEventStage = 0x2b8; // char m_szTournamentEventStage[512]; |  0x2b8 | Schema_FixedArray | Size: 0x200
				constexpr std::ptrdiff_t m_szMatchStatTxt = 0x4b8; // char m_szMatchStatTxt[512]; |  0x4b8 | Schema_FixedArray | Size: 0x200
				constexpr std::ptrdiff_t m_szTournamentPredictionsTxt = 0x6b8; // char m_szTournamentPredictionsTxt[512]; |  0x6b8 | Schema_FixedArray | Size: 0x200
				constexpr std::ptrdiff_t m_nTournamentPredictionsPct = 0x8b8; // int32_t m_nTournamentPredictionsPct; |  0x8b8 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flCMMItemDropRevealStartTime = 0x8bc; // entity2::GameTime_t  | Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_flCMMItemDropRevealEndTime = 0x8c0; // entity2::GameTime_t  | Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_bIsDroppingItems = 0x8c4; // bool m_bIsDroppingItems; |  0x8c4 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bIsQuestEligible = 0x8c5; // bool m_bIsQuestEligible; |  0x8c5 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bIsHltvActive = 0x8c6; // bool m_bIsHltvActive; |  0x8c6 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_arrProhibitedItemIndices = 0x8c8; // uint16_t m_arrProhibitedItemIndices[100]; |  0x8c8 | Schema_FixedArray | Size: 0xc8
				constexpr std::ptrdiff_t m_arrTournamentActiveCasterAccounts = 0x990; // uint32_t m_arrTournamentActiveCasterAccounts[4]; |  0x990 | Schema_FixedArray | Size: 0x10
				constexpr std::ptrdiff_t m_numBestOfMaps = 0x9a0; // int32_t m_numBestOfMaps; |  0x9a0 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_nHalloweenMaskListSeed = 0x9a4; // int32_t m_nHalloweenMaskListSeed; |  0x9a4 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bBombDropped = 0x9a8; // bool m_bBombDropped; |  0x9a8 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bBombPlanted = 0x9a9; // bool m_bBombPlanted; |  0x9a9 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_iRoundWinStatus = 0x9ac; // int32_t m_iRoundWinStatus; |  0x9ac | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_eRoundWinReason = 0x9b0; // int32_t m_eRoundWinReason; |  0x9b0 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bTCantBuy = 0x9b4; // bool m_bTCantBuy; |  0x9b4 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bCTCantBuy = 0x9b5; // bool m_bCTCantBuy; |  0x9b5 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_iMatchStats_RoundResults = 0x9b8; // int32_t m_iMatchStats_RoundResults[30]; |  0x9b8 | Schema_FixedArray | Size: 0x78
				constexpr std::ptrdiff_t m_iMatchStats_PlayersAlive_CT = 0xa30; // int32_t m_iMatchStats_PlayersAlive_CT[30]; |  0xa30 | Schema_FixedArray | Size: 0x78
				constexpr std::ptrdiff_t m_iMatchStats_PlayersAlive_T = 0xaa8; // int32_t m_iMatchStats_PlayersAlive_T[30]; |  0xaa8 | Schema_FixedArray | Size: 0x78
				constexpr std::ptrdiff_t m_TeamRespawnWaveTimes = 0xb20; // float32 m_TeamRespawnWaveTimes[32]; |  0xb20 | Schema_FixedArray | Size: 0x80
				constexpr std::ptrdiff_t m_flNextRespawnWave = 0xba0; // GlobalTypes::GameTime_t[32]  | Schema_FixedArray | Size: 0x1000
				constexpr std::ptrdiff_t m_vMinimapMins = 0xc20; // GlobalTypes::Vector  | Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_vMinimapMaxs = 0xc2c; // GlobalTypes::Vector  | Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_MinimapVerticalSectionHeights = 0xc38; // float32 m_MinimapVerticalSectionHeights[8]; |  0xc38 | Schema_FixedArray | Size: 0x20
				constexpr std::ptrdiff_t m_ullLocalMatchID = 0xc58; // uint64_t m_ullLocalMatchID; |  0xc58 | Schema_Builtin | Size: 0x8
				constexpr std::ptrdiff_t m_nEndMatchMapGroupVoteTypes = 0xc60; // int32_t m_nEndMatchMapGroupVoteTypes[10]; |  0xc60 | Schema_FixedArray | Size: 0x28
				constexpr std::ptrdiff_t m_nEndMatchMapGroupVoteOptions = 0xc88; // int32_t m_nEndMatchMapGroupVoteOptions[10]; |  0xc88 | Schema_FixedArray | Size: 0x28
				constexpr std::ptrdiff_t m_nEndMatchMapVoteWinner = 0xcb0; // int32_t m_nEndMatchMapVoteWinner; |  0xcb0 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_iNumConsecutiveCTLoses = 0xcb4; // int32_t m_iNumConsecutiveCTLoses; |  0xcb4 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_iNumConsecutiveTerroristLoses = 0xcb8; // int32_t m_iNumConsecutiveTerroristLoses; |  0xcb8 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_nMatchAbortedEarlyReason = 0xd78; // int32_t m_nMatchAbortedEarlyReason; |  0xd78 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bHasTriggeredRoundStartMusic = 0xd7c; // bool m_bHasTriggeredRoundStartMusic; |  0xd7c | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bSwitchingTeamsAtRoundReset = 0xd7d; // bool m_bSwitchingTeamsAtRoundReset; |  0xd7d | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_pGameModeRules = 0xd98; // client::CCSGameModeRules**  | Schema_Ptr | Size: 0x8
				constexpr std::ptrdiff_t m_RetakeRules = 0xda0; // client::C_RetakeGameRules  | Schema_DeclaredClass | Size: 0x158
				constexpr std::ptrdiff_t m_nMatchEndCount = 0xef8; // uint8_t m_nMatchEndCount; |  0xef8 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_nTTeamIntroVariant = 0xefc; // int32_t m_nTTeamIntroVariant; |  0xefc | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_nCTTeamIntroVariant = 0xf00; // int32_t m_nCTTeamIntroVariant; |  0xf00 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bTeamIntroPeriod = 0xf04; // bool m_bTeamIntroPeriod; |  0xf04 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_iRoundEndWinnerTeam = 0xf08; // int32_t m_iRoundEndWinnerTeam; |  0xf08 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_eRoundEndReason = 0xf0c; // int32_t m_eRoundEndReason; |  0xf0c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bRoundEndShowTimerDefend = 0xf10; // bool m_bRoundEndShowTimerDefend; |  0xf10 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_iRoundEndTimerTime = 0xf14; // int32_t m_iRoundEndTimerTime; |  0xf14 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_sRoundEndFunFactToken = 0xf18; // GlobalTypes::CUtlString  | Schema_Atomic | Size: 0x8
				constexpr std::ptrdiff_t m_iRoundEndFunFactPlayerSlot = 0xf20; // GlobalTypes::CPlayerSlot  | Schema_Atomic | Size: 0x4
				constexpr std::ptrdiff_t m_iRoundEndFunFactData1 = 0xf24; // int32_t m_iRoundEndFunFactData1; |  0xf24 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_iRoundEndFunFactData2 = 0xf28; // int32_t m_iRoundEndFunFactData2; |  0xf28 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_iRoundEndFunFactData3 = 0xf2c; // int32_t m_iRoundEndFunFactData3; |  0xf2c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_sRoundEndMessage = 0xf30; // GlobalTypes::CUtlString  | Schema_Atomic | Size: 0x8
				constexpr std::ptrdiff_t m_iRoundEndPlayerCount = 0xf38; // int32_t m_iRoundEndPlayerCount; |  0xf38 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bRoundEndNoMusic = 0xf3c; // bool m_bRoundEndNoMusic; |  0xf3c | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_iRoundEndLegacy = 0xf40; // int32_t m_iRoundEndLegacy; |  0xf40 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_nRoundEndCount = 0xf44; // uint8_t m_nRoundEndCount; |  0xf44 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_iRoundStartRoundNumber = 0xf48; // int32_t m_iRoundStartRoundNumber; |  0xf48 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_nRoundStartCount = 0xf4c; // uint8_t m_nRoundStartCount; |  0xf4c | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_flLastPerfSampleTime = 0x4f58; // float64 m_flLastPerfSampleTime; |  0x4f58 | Schema_Builtin | Size: 0x8
			}
		}
	}
}
