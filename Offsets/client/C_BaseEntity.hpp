// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <cstddef>

namespace CS2 {
	namespace SchemaOffsets {
		namespace client {
			// Class size: 0x5F8
			namespace C_BaseEntity /*: public CS2::entity2::CEntityInstance*/ {
				constexpr std::ptrdiff_t m_CBodyComponent = 0x38; // client::CBodyComponent**  | Schema_Ptr | Size: 0x8
				constexpr std::ptrdiff_t m_NetworkTransmitComponent = 0x40; // client::CNetworkTransmitComponent  | Schema_DeclaredClass | Size: 0x1c8
				constexpr std::ptrdiff_t m_nLastThinkTick = 0x328; // entity2::GameTick_t  | Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_pGameSceneNode = 0x330; // client::CGameSceneNode**  | Schema_Ptr | Size: 0x8
				constexpr std::ptrdiff_t m_pRenderComponent = 0x338; // client::CRenderComponent**  | Schema_Ptr | Size: 0x8
				constexpr std::ptrdiff_t m_pCollision = 0x340; // client::CCollisionProperty**  | Schema_Ptr | Size: 0x8
				constexpr std::ptrdiff_t m_iMaxHealth = 0x348; // int32_t m_iMaxHealth; |  0x348 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_iHealth = 0x34c; // int32_t m_iHealth; |  0x34c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flDamageAccumulator = 0x350; // float32 m_flDamageAccumulator; |  0x350 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_lifeState = 0x354; // uint8_t m_lifeState; |  0x354 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bTakesDamage = 0x355; // bool m_bTakesDamage; |  0x355 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_nTakeDamageFlags = 0x358; // client::TakeDamageFlags_t  | Schema_DeclaredEnum | Size: 0x8
				constexpr std::ptrdiff_t m_nPlatformType = 0x360; // client::EntityPlatformTypes_t  | Schema_DeclaredEnum | Size: 0x1
				constexpr std::ptrdiff_t m_ubInterpolationFrame = 0x361; // uint8_t m_ubInterpolationFrame; |  0x361 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_hSceneObjectController = 0x364; // GlobalTypes::CHandle<client::C_BaseEntity>  | Schema_Atomic | Size: 0x4
				constexpr std::ptrdiff_t m_nNoInterpolationTick = 0x368; // int32_t m_nNoInterpolationTick; |  0x368 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_nVisibilityNoInterpolationTick = 0x36c; // int32_t m_nVisibilityNoInterpolationTick; |  0x36c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flProxyRandomValue = 0x370; // float32 m_flProxyRandomValue; |  0x370 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_iEFlags = 0x374; // int32_t m_iEFlags; |  0x374 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_nWaterType = 0x378; // uint8_t m_nWaterType; |  0x378 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bInterpolateEvenWithNoModel = 0x379; // bool m_bInterpolateEvenWithNoModel; |  0x379 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bPredictionEligible = 0x37a; // bool m_bPredictionEligible; |  0x37a | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bApplyLayerMatchIDToModel = 0x37b; // bool m_bApplyLayerMatchIDToModel; |  0x37b | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_tokLayerMatchID = 0x37c; // GlobalTypes::CUtlStringToken  | Schema_Atomic | Size: 0x4
				constexpr std::ptrdiff_t m_nSubclassID = 0x380; // GlobalTypes::CUtlStringToken  | Schema_Atomic | Size: 0x4
				constexpr std::ptrdiff_t m_nSimulationTick = 0x390; // int32_t m_nSimulationTick; |  0x390 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_iCurrentThinkContext = 0x394; // int32_t m_iCurrentThinkContext; |  0x394 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_aThinkFunctions = 0x398; // GlobalTypes::CUtlVector<client::thinkfunc_t>  | Schema_Atomic | Size: 0x18
				constexpr std::ptrdiff_t m_bDisabledContextThinks = 0x3b0; // bool m_bDisabledContextThinks; |  0x3b0 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_flAnimTime = 0x3b4; // float32 m_flAnimTime; |  0x3b4 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flSimulationTime = 0x3b8; // float32 m_flSimulationTime; |  0x3b8 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_nSceneObjectOverrideFlags = 0x3bc; // uint8_t m_nSceneObjectOverrideFlags; |  0x3bc | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bHasSuccessfullyInterpolated = 0x3bd; // bool m_bHasSuccessfullyInterpolated; |  0x3bd | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bHasAddedVarsToInterpolation = 0x3be; // bool m_bHasAddedVarsToInterpolation; |  0x3be | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bRenderEvenWhenNotSuccessfullyInterpolated = 0x3bf; // bool m_bRenderEvenWhenNotSuccessfullyInterpolated; |  0x3bf | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_nInterpolationLatchDirtyFlags = 0x3c0; // int32_t m_nInterpolationLatchDirtyFlags[2]; |  0x3c0 | Schema_FixedArray | Size: 0x8
				constexpr std::ptrdiff_t m_ListEntry = 0x3c8; // uint16_t m_ListEntry[11]; |  0x3c8 | Schema_FixedArray | Size: 0x16
				constexpr std::ptrdiff_t m_flCreateTime = 0x3e0; // entity2::GameTime_t  | Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_flSpeed = 0x3e4; // float32 m_flSpeed; |  0x3e4 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_EntClientFlags = 0x3e8; // uint16_t m_EntClientFlags; |  0x3e8 | Schema_Builtin | Size: 0x2
				constexpr std::ptrdiff_t m_bClientSideRagdoll = 0x3ea; // bool m_bClientSideRagdoll; |  0x3ea | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_iTeamNum = 0x3eb; // uint8_t m_iTeamNum; |  0x3eb | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_spawnflags = 0x3ec; // uint32_t m_spawnflags; |  0x3ec | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_nNextThinkTick = 0x3f0; // entity2::GameTick_t  | Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_fFlags = 0x3f8; // uint32_t m_fFlags; |  0x3f8 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_vecAbsVelocity = 0x3fc; // GlobalTypes::Vector  | Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_vecServerVelocity = 0x408; // client::CNetworkVelocityVector  | Schema_DeclaredClass | Size: 0x28
				constexpr std::ptrdiff_t m_vecVelocity = 0x430; // client::CNetworkVelocityVector  | Schema_DeclaredClass | Size: 0x28
				constexpr std::ptrdiff_t m_vecBaseVelocity = 0x510; // GlobalTypes::Vector  | Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_hEffectEntity = 0x51c; // GlobalTypes::CHandle<client::C_BaseEntity>  | Schema_Atomic | Size: 0x4
				constexpr std::ptrdiff_t m_hOwnerEntity = 0x520; // GlobalTypes::CHandle<client::C_BaseEntity>  | Schema_Atomic | Size: 0x4
				constexpr std::ptrdiff_t m_MoveCollide = 0x524; // client::MoveCollide_t  | Schema_DeclaredEnum | Size: 0x1
				constexpr std::ptrdiff_t m_MoveType = 0x525; // client::MoveType_t  | Schema_DeclaredEnum | Size: 0x1
				constexpr std::ptrdiff_t m_nActualMoveType = 0x526; // client::MoveType_t  | Schema_DeclaredEnum | Size: 0x1
				constexpr std::ptrdiff_t m_flWaterLevel = 0x528; // float32 m_flWaterLevel; |  0x528 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_fEffects = 0x52c; // uint32_t m_fEffects; |  0x52c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_hGroundEntity = 0x530; // GlobalTypes::CHandle<client::C_BaseEntity>  | Schema_Atomic | Size: 0x4
				constexpr std::ptrdiff_t m_nGroundBodyIndex = 0x534; // int32_t m_nGroundBodyIndex; |  0x534 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flFriction = 0x538; // float32 m_flFriction; |  0x538 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flElasticity = 0x53c; // float32 m_flElasticity; |  0x53c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flGravityScale = 0x540; // float32 m_flGravityScale; |  0x540 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flTimeScale = 0x544; // float32 m_flTimeScale; |  0x544 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bAnimatedEveryTick = 0x548; // bool m_bAnimatedEveryTick; |  0x548 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bGravityDisabled = 0x549; // bool m_bGravityDisabled; |  0x549 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_flNavIgnoreUntilTime = 0x54c; // entity2::GameTime_t  | Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_hThink = 0x550; // uint16_t m_hThink; |  0x550 | Schema_Builtin | Size: 0x2
				constexpr std::ptrdiff_t m_fBBoxVisFlags = 0x560; // uint8_t m_fBBoxVisFlags; |  0x560 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_flActualGravityScale = 0x564; // float32 m_flActualGravityScale; |  0x564 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bGravityActuallyDisabled = 0x568; // bool m_bGravityActuallyDisabled; |  0x568 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bPredictable = 0x569; // bool m_bPredictable; |  0x569 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bRenderWithViewModels = 0x56a; // bool m_bRenderWithViewModels; |  0x56a | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_nFirstPredictableCommand = 0x56c; // int32_t m_nFirstPredictableCommand; |  0x56c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_nLastPredictableCommand = 0x570; // int32_t m_nLastPredictableCommand; |  0x570 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_hOldMoveParent = 0x574; // GlobalTypes::CHandle<client::C_BaseEntity>  | Schema_Atomic | Size: 0x4
				constexpr std::ptrdiff_t m_Particles = 0x578; // particleslib::CParticleProperty  | Schema_DeclaredClass | Size: 0x28
				constexpr std::ptrdiff_t m_vecAngVelocity = 0x5a8; // GlobalTypes::QAngle  | Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_DataChangeEventRef = 0x5b4; // int32_t m_DataChangeEventRef; |  0x5b4 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_dependencies = 0x5b8; // GlobalTypes::CUtlVector<GlobalTypes::CEntityHandle>  | Schema_Atomic | Size: 0x18
				constexpr std::ptrdiff_t m_nCreationTick = 0x5d0; // int32_t m_nCreationTick; |  0x5d0 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bAnimTimeChanged = 0x5dd; // bool m_bAnimTimeChanged; |  0x5dd | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bSimulationTimeChanged = 0x5de; // bool m_bSimulationTimeChanged; |  0x5de | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_sUniqueHammerID = 0x5e8; // GlobalTypes::CUtlString  | Schema_Atomic | Size: 0x8
				constexpr std::ptrdiff_t m_nBloodType = 0x5f0; // client::BloodType  | Schema_DeclaredEnum | Size: 0x4
			}
		}
	}
}
