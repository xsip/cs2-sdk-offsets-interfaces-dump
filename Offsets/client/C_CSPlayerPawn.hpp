// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <cstddef>

namespace CS2 {
	namespace SchemaOffsets {
		namespace client {
			// Class size: 0x3F10
			namespace C_CSPlayerPawn /*: public CS2::client::C_CSPlayerPawnBase*/ {
				constexpr std::ptrdiff_t m_pBulletServices = 0x1678; // client::CCSPlayer_BulletServices* m_pBulletServices; |  Schema_Ptr | Size: 0x8
				constexpr std::ptrdiff_t m_pHostageServices = 0x1680; // client::CCSPlayer_HostageServices* m_pHostageServices; |  Schema_Ptr | Size: 0x8
				constexpr std::ptrdiff_t m_pBuyServices = 0x1688; // client::CCSPlayer_BuyServices* m_pBuyServices; |  Schema_Ptr | Size: 0x8
				constexpr std::ptrdiff_t m_pGlowServices = 0x1690; // client::CCSPlayer_GlowServices* m_pGlowServices; |  Schema_Ptr | Size: 0x8
				constexpr std::ptrdiff_t m_pActionTrackingServices = 0x1698; // client::CCSPlayer_ActionTrackingServices* m_pActionTrackingServices; |  Schema_Ptr | Size: 0x8
				constexpr std::ptrdiff_t m_pDamageReactServices = 0x16a0; // client::CCSPlayer_DamageReactServices* m_pDamageReactServices; |  Schema_Ptr | Size: 0x8
				constexpr std::ptrdiff_t m_flHealthShotBoostExpirationTime = 0x16a8; // entity2::GameTime_t m_flHealthShotBoostExpirationTime; |  Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_flLastFiredWeaponTime = 0x16ac; // entity2::GameTime_t m_flLastFiredWeaponTime; |  Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_bHasFemaleVoice = 0x16b0; // bool m_bHasFemaleVoice; |  0x16b0 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_flLandingTimeSeconds = 0x16b4; // float32 m_flLandingTimeSeconds; |  0x16b4 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flOldFallVelocity = 0x16b8; // float32 m_flOldFallVelocity; |  0x16b8 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_szLastPlaceName = 0x16bc; // char m_szLastPlaceName[18]; |  0x16bc | Schema_FixedArray | Size: 0x12
				constexpr std::ptrdiff_t m_bPrevDefuser = 0x16ce; // bool m_bPrevDefuser; |  0x16ce | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bPrevHelmet = 0x16cf; // bool m_bPrevHelmet; |  0x16cf | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_nPrevArmorVal = 0x16d0; // int32_t m_nPrevArmorVal; |  0x16d0 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_nPrevGrenadeAmmoCount = 0x16d4; // int32_t m_nPrevGrenadeAmmoCount; |  0x16d4 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_unPreviousWeaponHash = 0x16d8; // uint32_t m_unPreviousWeaponHash; |  0x16d8 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_unWeaponHash = 0x16dc; // uint32_t m_unWeaponHash; |  0x16dc | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bInBuyZone = 0x16e0; // bool m_bInBuyZone; |  0x16e0 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bPreviouslyInBuyZone = 0x16e1; // bool m_bPreviouslyInBuyZone; |  0x16e1 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_aimPunchAngle = 0x16e4; // GlobalTypes::QAngle m_aimPunchAngle; |  Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_aimPunchAngleVel = 0x16f0; // GlobalTypes::QAngle m_aimPunchAngleVel; |  Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_aimPunchTickBase = 0x16fc; // entity2::GameTick_t m_aimPunchTickBase; |  Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_aimPunchTickFraction = 0x1700; // float32 m_aimPunchTickFraction; |  0x1700 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_aimPunchCache = 0x1708; // GlobalTypes::CUtlVector< GlobalTypes::QAngle > m_aimPunchCache; |  Schema_Atomic | Size: 0x18
				constexpr std::ptrdiff_t m_bInLanding = 0x1728; // bool m_bInLanding; |  0x1728 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_flLandingStartTime = 0x172c; // float32 m_flLandingStartTime; |  0x172c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bInHostageRescueZone = 0x1730; // bool m_bInHostageRescueZone; |  0x1730 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bInBombZone = 0x1731; // bool m_bInBombZone; |  0x1731 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bIsBuyMenuOpen = 0x1732; // bool m_bIsBuyMenuOpen; |  0x1732 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_flTimeOfLastInjury = 0x1734; // entity2::GameTime_t m_flTimeOfLastInjury; |  Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_flNextSprayDecalTime = 0x1738; // entity2::GameTime_t m_flNextSprayDecalTime; |  Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_iRetakesOffering = 0x1890; // int32_t m_iRetakesOffering; |  0x1890 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_iRetakesOfferingCard = 0x1894; // int32_t m_iRetakesOfferingCard; |  0x1894 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bRetakesHasDefuseKit = 0x1898; // bool m_bRetakesHasDefuseKit; |  0x1898 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bRetakesMVPLastRound = 0x1899; // bool m_bRetakesMVPLastRound; |  0x1899 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_iRetakesMVPBoostItem = 0x189c; // int32_t m_iRetakesMVPBoostItem; |  0x189c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_RetakesMVPBoostExtraUtility = 0x18a0; // client::loadout_slot_t m_RetakesMVPBoostExtraUtility; |  Schema_DeclaredEnum | Size: 0x4
				constexpr std::ptrdiff_t m_bNeedToReApplyGloves = 0x18a5; // bool m_bNeedToReApplyGloves; |  0x18a5 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_EconGloves = 0x18a8; // client::C_EconItemView m_EconGloves; |  Schema_DeclaredClass | Size: 0x478
				constexpr std::ptrdiff_t m_nEconGlovesChanged = 0x1d20; // uint8_t m_nEconGlovesChanged; |  0x1d20 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bMustSyncRagdollState = 0x1d21; // bool m_bMustSyncRagdollState; |  0x1d21 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_nRagdollDamageBone = 0x1d24; // int32_t m_nRagdollDamageBone; |  0x1d24 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_vRagdollDamageForce = 0x1d28; // GlobalTypes::Vector m_vRagdollDamageForce; |  Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_vRagdollDamagePosition = 0x1d34; // GlobalTypes::Vector m_vRagdollDamagePosition; |  Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_szRagdollDamageWeaponName = 0x1d40; // char m_szRagdollDamageWeaponName[64]; |  0x1d40 | Schema_FixedArray | Size: 0x40
				constexpr std::ptrdiff_t m_bRagdollDamageHeadshot = 0x1d80; // bool m_bRagdollDamageHeadshot; |  0x1d80 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_vRagdollServerOrigin = 0x1d84; // GlobalTypes::Vector m_vRagdollServerOrigin; |  Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_lastLandTime = 0x2400; // entity2::GameTime_t m_lastLandTime; |  Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_bOnGroundLastTick = 0x2404; // bool m_bOnGroundLastTick; |  0x2404 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_hHudModelArms = 0x2420; // client::CHandle< client::C_CS2HudModelArms > m_hHudModelArms; |  Schema_Atomic | Size: 0x4
				constexpr std::ptrdiff_t m_qDeathEyeAngles = 0x2424; // GlobalTypes::QAngle m_qDeathEyeAngles; |  Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_bSkipOneHeadConstraintUpdate = 0x2430; // bool m_bSkipOneHeadConstraintUpdate; |  0x2430 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bLeftHanded = 0x2431; // bool m_bLeftHanded; |  0x2431 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_fSwitchedHandednessTime = 0x2434; // entity2::GameTime_t m_fSwitchedHandednessTime; |  Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_flViewmodelOffsetX = 0x2438; // float32 m_flViewmodelOffsetX; |  0x2438 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flViewmodelOffsetY = 0x243c; // float32 m_flViewmodelOffsetY; |  0x243c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flViewmodelOffsetZ = 0x2440; // float32 m_flViewmodelOffsetZ; |  0x2440 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flViewmodelFOV = 0x2444; // float32 m_flViewmodelFOV; |  0x2444 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_vecPlayerPatchEconIndices = 0x2448; // uint32_t m_vecPlayerPatchEconIndices[5]; |  0x2448 | Schema_FixedArray | Size: 0x14
				constexpr std::ptrdiff_t m_GunGameImmunityColor = 0x2480; // GlobalTypes::Color m_GunGameImmunityColor; |  Schema_Atomic | Size: 0x4
				constexpr std::ptrdiff_t m_vecBulletHitModels = 0x24d0; // client::CUtlVector< C_BulletHitModel >* m_vecBulletHitModels; |  Schema_Atomic | Size: 0x18
				constexpr std::ptrdiff_t m_bIsWalking = 0x24e8; // bool m_bIsWalking; |  0x24e8 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_thirdPersonHeading = 0x24f0; // GlobalTypes::QAngle m_thirdPersonHeading; |  Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_flSlopeDropOffset = 0x2580; // float32 m_flSlopeDropOffset; |  0x2580 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flSlopeDropHeight = 0x25f8; // float32 m_flSlopeDropHeight; |  0x25f8 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_vHeadConstraintOffset = 0x2670; // GlobalTypes::Vector m_vHeadConstraintOffset; |  Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_entitySpottedState = 0x2700; // client::EntitySpottedState_t m_entitySpottedState; |  Schema_DeclaredClass | Size: 0x18
				constexpr std::ptrdiff_t m_bIsScoped = 0x2718; // bool m_bIsScoped; |  0x2718 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bResumeZoom = 0x2719; // bool m_bResumeZoom; |  0x2719 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bIsDefusing = 0x271a; // bool m_bIsDefusing; |  0x271a | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bIsGrabbingHostage = 0x271b; // bool m_bIsGrabbingHostage; |  0x271b | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_iBlockingUseActionInProgress = 0x271c; // client::CSPlayerBlockingUseAction_t m_iBlockingUseActionInProgress; |  Schema_DeclaredEnum | Size: 0x4
				constexpr std::ptrdiff_t m_flEmitSoundTime = 0x2720; // entity2::GameTime_t m_flEmitSoundTime; |  Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_bInNoDefuseArea = 0x2724; // bool m_bInNoDefuseArea; |  0x2724 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_nWhichBombZone = 0x2728; // int32_t m_nWhichBombZone; |  0x2728 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_iShotsFired = 0x272c; // int32_t m_iShotsFired; |  0x272c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flFlinchStack = 0x2730; // float32 m_flFlinchStack; |  0x2730 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flVelocityModifier = 0x2734; // float32 m_flVelocityModifier; |  0x2734 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flHitHeading = 0x2738; // float32 m_flHitHeading; |  0x2738 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_nHitBodyPart = 0x273c; // int32_t m_nHitBodyPart; |  0x273c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bWaitForNoAttack = 0x2740; // bool m_bWaitForNoAttack; |  0x2740 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_ignoreLadderJumpTime = 0x2744; // float32 m_ignoreLadderJumpTime; |  0x2744 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bKilledByHeadshot = 0x2749; // bool m_bKilledByHeadshot; |  0x2749 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_ArmorValue = 0x274c; // int32_t m_ArmorValue; |  0x274c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_unCurrentEquipmentValue = 0x2750; // uint16_t m_unCurrentEquipmentValue; |  0x2750 | Schema_Builtin | Size: 0x2
				constexpr std::ptrdiff_t m_unRoundStartEquipmentValue = 0x2752; // uint16_t m_unRoundStartEquipmentValue; |  0x2752 | Schema_Builtin | Size: 0x2
				constexpr std::ptrdiff_t m_unFreezetimeEndEquipmentValue = 0x2754; // uint16_t m_unFreezetimeEndEquipmentValue; |  0x2754 | Schema_Builtin | Size: 0x2
				constexpr std::ptrdiff_t m_nLastKillerIndex = 0x2758; // GlobalTypes::CEntityIndex m_nLastKillerIndex; |  Schema_Atomic | Size: 0x4
				constexpr std::ptrdiff_t m_bOldIsScoped = 0x275c; // bool m_bOldIsScoped; |  0x275c | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bHasDeathInfo = 0x275d; // bool m_bHasDeathInfo; |  0x275d | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_flDeathInfoTime = 0x2760; // float32 m_flDeathInfoTime; |  0x2760 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_vecDeathInfoOrigin = 0x2764; // GlobalTypes::Vector m_vecDeathInfoOrigin; |  Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_grenadeParameterStashTime = 0x2774; // entity2::GameTime_t m_grenadeParameterStashTime; |  Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_bGrenadeParametersStashed = 0x2778; // bool m_bGrenadeParametersStashed; |  0x2778 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_angStashedShootAngles = 0x277c; // GlobalTypes::QAngle m_angStashedShootAngles; |  Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_vecStashedGrenadeThrowPosition = 0x2788; // GlobalTypes::Vector m_vecStashedGrenadeThrowPosition; |  Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_vecStashedVelocity = 0x2794; // GlobalTypes::Vector m_vecStashedVelocity; |  Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_angShootAngleHistory = 0x27a0; // GlobalTypes::QAngle m_angShootAngleHistory[2]; |  Schema_FixedArray | Size: 0x18
				constexpr std::ptrdiff_t m_vecThrowPositionHistory = 0x27b8; // GlobalTypes::Vector m_vecThrowPositionHistory[2]; |  Schema_FixedArray | Size: 0x18
				constexpr std::ptrdiff_t m_vecVelocityHistory = 0x27d0; // GlobalTypes::Vector m_vecVelocityHistory[2]; |  Schema_FixedArray | Size: 0x18
				constexpr std::ptrdiff_t m_PredictedDamageTags = 0x27e8; // client::C_UtlVectorEmbeddedNetworkVar< client::PredictedDamageTag_t > m_PredictedDamageTags; |  Schema_Atomic | Size: 0x68
				constexpr std::ptrdiff_t m_nPrevHighestReceivedDamageTagTick = 0x2850; // entity2::GameTick_t m_nPrevHighestReceivedDamageTagTick; |  Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_nHighestAppliedDamageTagTick = 0x2854; // int32_t m_nHighestAppliedDamageTagTick; |  0x2854 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bShouldAutobuyDMWeapons = 0x3d8c; // bool m_bShouldAutobuyDMWeapons; |  0x3d8c | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_fImmuneToGunGameDamageTime = 0x3d90; // entity2::GameTime_t m_fImmuneToGunGameDamageTime; |  Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_bGunGameImmunity = 0x3d94; // bool m_bGunGameImmunity; |  0x3d94 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_fImmuneToGunGameDamageTimeLast = 0x3d98; // entity2::GameTime_t m_fImmuneToGunGameDamageTimeLast; |  Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_fMolotovDamageTime = 0x3d9c; // float32 m_fMolotovDamageTime; |  0x3d9c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_vecLastAliveLocalVelocity = 0x3da4; // GlobalTypes::Vector m_vecLastAliveLocalVelocity; |  Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_fRenderingClipPlane = 0x3db0; // float32 m_fRenderingClipPlane[4]; |  0x3db0 | Schema_FixedArray | Size: 0x10
				constexpr std::ptrdiff_t m_nLastClipPlaneSetupFrame = 0x3dc0; // int32_t m_nLastClipPlaneSetupFrame; |  0x3dc0 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_vecLastClipCameraPos = 0x3dc4; // GlobalTypes::Vector m_vecLastClipCameraPos; |  Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_vecLastClipCameraForward = 0x3dd0; // GlobalTypes::Vector m_vecLastClipCameraForward; |  Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_bClipHitStaticWorld = 0x3ddc; // bool m_bClipHitStaticWorld; |  0x3ddc | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bCachedPlaneIsValid = 0x3ddd; // bool m_bCachedPlaneIsValid; |  0x3ddd | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_pClippingWeapon = 0x3de0; // client::C_CSWeaponBase* m_pClippingWeapon; |  Schema_Ptr | Size: 0x8
				constexpr std::ptrdiff_t m_nPlayerInfernoBodyFx = 0x3de8; // client::ParticleIndex_t m_nPlayerInfernoBodyFx; |  Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_angEyeAngles = 0x3df0; // GlobalTypes::QAngle m_angEyeAngles; |  Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_arrOldEyeAnglesTimes = 0x3e80; // entity2::GameTime_t m_arrOldEyeAnglesTimes[4]; |  Schema_FixedArray | Size: 0x40
				constexpr std::ptrdiff_t m_arrOldEyeAngles = 0x3e90; // GlobalTypes::QAngle m_arrOldEyeAngles[4]; |  Schema_FixedArray | Size: 0x30
				constexpr std::ptrdiff_t m_angEyeAnglesVelocity = 0x3ec0; // GlobalTypes::QAngle m_angEyeAnglesVelocity; |  Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_iIDEntIndex = 0x3ecc; // GlobalTypes::CEntityIndex m_iIDEntIndex; |  Schema_Atomic | Size: 0x4
				constexpr std::ptrdiff_t m_delayTargetIDTimer = 0x3ed0; // client::CountdownTimer m_delayTargetIDTimer; |  Schema_DeclaredClass | Size: 0x18
				constexpr std::ptrdiff_t m_iTargetItemEntIdx = 0x3ee8; // GlobalTypes::CEntityIndex m_iTargetItemEntIdx; |  Schema_Atomic | Size: 0x4
				constexpr std::ptrdiff_t m_iOldIDEntIndex = 0x3eec; // GlobalTypes::CEntityIndex m_iOldIDEntIndex; |  Schema_Atomic | Size: 0x4
				constexpr std::ptrdiff_t m_holdTargetIDTimer = 0x3ef0; // client::CountdownTimer m_holdTargetIDTimer; |  Schema_DeclaredClass | Size: 0x18
			}
		}
	}
}
