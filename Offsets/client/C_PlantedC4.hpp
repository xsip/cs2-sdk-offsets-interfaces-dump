// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <cstddef>

namespace CS2 {
	namespace SchemaOffsets {
		namespace client {
			// Class size: 0x16F0
			namespace C_PlantedC4 /*: public CS2::client::CBaseAnimGraph*/ {
				constexpr std::ptrdiff_t m_bBombTicking = 0x1178; // bool m_bBombTicking; |  0x1178 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_nBombSite = 0x117c; // int32_t m_nBombSite; |  0x117c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_nSourceSoundscapeHash = 0x1180; // int32_t m_nSourceSoundscapeHash; |  0x1180 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_entitySpottedState = 0x1188; // client::EntitySpottedState_t m_entitySpottedState; |  Schema_DeclaredClass | Size: 0x18
				constexpr std::ptrdiff_t m_flNextGlow = 0x11a0; // entity2::GameTime_t m_flNextGlow; |  Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_flNextBeep = 0x11a4; // entity2::GameTime_t m_flNextBeep; |  Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_flC4Blow = 0x11a8; // entity2::GameTime_t m_flC4Blow; |  Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_bCannotBeDefused = 0x11ac; // bool m_bCannotBeDefused; |  0x11ac | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bHasExploded = 0x11ad; // bool m_bHasExploded; |  0x11ad | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_flTimerLength = 0x11b0; // float32 m_flTimerLength; |  0x11b0 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bBeingDefused = 0x11b4; // bool m_bBeingDefused; |  0x11b4 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bTriggerWarning = 0x11b8; // float32 m_bTriggerWarning; |  0x11b8 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bExplodeWarning = 0x11bc; // float32 m_bExplodeWarning; |  0x11bc | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bC4Activated = 0x11c0; // bool m_bC4Activated; |  0x11c0 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bTenSecWarning = 0x11c1; // bool m_bTenSecWarning; |  0x11c1 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_flDefuseLength = 0x11c4; // float32 m_flDefuseLength; |  0x11c4 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flDefuseCountDown = 0x11c8; // entity2::GameTime_t m_flDefuseCountDown; |  Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_bBombDefused = 0x11cc; // bool m_bBombDefused; |  0x11cc | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_hBombDefuser = 0x11d0; // client::CHandle< client::C_CSPlayerPawn > m_hBombDefuser; |  Schema_Atomic | Size: 0x4
				constexpr std::ptrdiff_t m_AttributeManager = 0x11d8; // client::C_AttributeContainer m_AttributeManager; |  Schema_DeclaredClass | Size: 0x4d8
				constexpr std::ptrdiff_t m_hDefuserMultimeter = 0x16b0; // client::CHandle< client::C_Multimeter > m_hDefuserMultimeter; |  Schema_Atomic | Size: 0x4
				constexpr std::ptrdiff_t m_flNextRadarFlashTime = 0x16b4; // entity2::GameTime_t m_flNextRadarFlashTime; |  Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_bRadarFlash = 0x16b8; // bool m_bRadarFlash; |  0x16b8 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_pBombDefuser = 0x16bc; // client::CHandle< client::C_CSPlayerPawn > m_pBombDefuser; |  Schema_Atomic | Size: 0x4
				constexpr std::ptrdiff_t m_fLastDefuseTime = 0x16c0; // entity2::GameTime_t m_fLastDefuseTime; |  Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_pPredictionOwner = 0x16c8; // client::CBasePlayerController* m_pPredictionOwner; |  Schema_Ptr | Size: 0x8
				constexpr std::ptrdiff_t m_vecC4ExplodeSpectatePos = 0x16d0; // GlobalTypes::Vector m_vecC4ExplodeSpectatePos; |  Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_vecC4ExplodeSpectateAng = 0x16dc; // GlobalTypes::QAngle m_vecC4ExplodeSpectateAng; |  Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_flC4ExplodeSpectateDuration = 0x16e8; // float32 m_flC4ExplodeSpectateDuration; |  0x16e8 | Schema_Builtin | Size: 0x4
			}
		}
	}
}
