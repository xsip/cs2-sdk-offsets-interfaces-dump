// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <cstddef>

namespace CS2 {
	namespace SchemaOffsets {
		namespace client {
			// Class size: 0xF88
			namespace C_Beam /*: public CS2::client::C_BaseModelEntity*/ {
				constexpr std::ptrdiff_t m_flFrameRate = 0xec8; // float32 m_flFrameRate; |  0xec8 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flHDRColorScale = 0xecc; // float32 m_flHDRColorScale; |  0xecc | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flFireTime = 0xed0; // entity2::GameTime_t m_flFireTime; |  Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_flDamage = 0xed4; // float32 m_flDamage; |  0xed4 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_nNumBeamEnts = 0xed8; // uint8_t m_nNumBeamEnts; |  0xed8 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_queryHandleHalo = 0xedc; // int32_t m_queryHandleHalo; |  0xedc | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_hBaseMaterial = 0xf00; // GlobalTypes::CStrongHandle< resourcesystem::InfoForResourceTypeIMaterial2 > m_hBaseMaterial; |  Schema_Atomic | Size: 0x8
				constexpr std::ptrdiff_t m_nHaloIndex = 0xf08; // GlobalTypes::CStrongHandle< resourcesystem::InfoForResourceTypeIMaterial2 > m_nHaloIndex; |  Schema_Atomic | Size: 0x8
				constexpr std::ptrdiff_t m_nBeamType = 0xf10; // client::BeamType_t m_nBeamType; |  Schema_DeclaredEnum | Size: 0x4
				constexpr std::ptrdiff_t m_nBeamFlags = 0xf14; // uint32_t m_nBeamFlags; |  0xf14 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_hAttachEntity = 0xf18; // client::CHandle< C_BaseEntity > m_hAttachEntity[10]; |  Schema_FixedArray | Size: 0x28
				constexpr std::ptrdiff_t m_nAttachIndex = 0xf40; // modellib::AttachmentHandle_t m_nAttachIndex[10]; |  Schema_FixedArray | Size: 0x64
				constexpr std::ptrdiff_t m_fWidth = 0xf4c; // float32 m_fWidth; |  0xf4c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_fEndWidth = 0xf50; // float32 m_fEndWidth; |  0xf50 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_fFadeLength = 0xf54; // float32 m_fFadeLength; |  0xf54 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_fHaloScale = 0xf58; // float32 m_fHaloScale; |  0xf58 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_fAmplitude = 0xf5c; // float32 m_fAmplitude; |  0xf5c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_fStartFrame = 0xf60; // float32 m_fStartFrame; |  0xf60 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_fSpeed = 0xf64; // float32 m_fSpeed; |  0xf64 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flFrame = 0xf68; // float32 m_flFrame; |  0xf68 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_nClipStyle = 0xf6c; // client::BeamClipStyle_t m_nClipStyle; |  Schema_DeclaredEnum | Size: 0x4
				constexpr std::ptrdiff_t m_bTurnedOff = 0xf70; // bool m_bTurnedOff; |  0xf70 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_vecEndPos = 0xf74; // GlobalTypes::VectorWS m_vecEndPos; |  Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_hEndEntity = 0xf80; // client::CHandle< client::C_BaseEntity > m_hEndEntity; |  Schema_Atomic | Size: 0x4
			}
		}
	}
}
