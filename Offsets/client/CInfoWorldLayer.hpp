// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <cstddef>

namespace CS2 {
	namespace SchemaOffsets {
		namespace client {
			// Class size: 0x640
			namespace CInfoWorldLayer /*: public CS2::client::C_BaseEntity*/ {
				constexpr std::ptrdiff_t m_pOutputOnEntitiesSpawned = 0x5f8; // entity2::CEntityIOOutput  | Schema_DeclaredClass | Size: 0x28
				constexpr std::ptrdiff_t m_worldName = 0x620; // GlobalTypes::CUtlSymbolLarge  | Schema_Atomic | Size: 0x8
				constexpr std::ptrdiff_t m_layerName = 0x628; // GlobalTypes::CUtlSymbolLarge  | Schema_Atomic | Size: 0x8
				constexpr std::ptrdiff_t m_bWorldLayerVisible = 0x630; // bool m_bWorldLayerVisible; |  0x630 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bEntitiesSpawned = 0x631; // bool m_bEntitiesSpawned; |  0x631 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bCreateAsChildSpawnGroup = 0x632; // bool m_bCreateAsChildSpawnGroup; |  0x632 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_hLayerSpawnGroup = 0x634; // uint32_t m_hLayerSpawnGroup; |  0x634 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bWorldLayerActuallyVisible = 0x638; // bool m_bWorldLayerActuallyVisible; |  0x638 | Schema_Builtin | Size: 0x1
			}
		}
	}
}
