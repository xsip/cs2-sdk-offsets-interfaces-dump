// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <cstddef>

namespace CS2 {
	namespace SchemaOffsets {
		namespace modellib {
			// Class size: 0xD0
			namespace VPhysXJoint_t /**/ {
				constexpr std::ptrdiff_t m_nType = 0x0; // uint16_t m_nType; |  0x0 | Schema_Builtin | Size: 0x2
				constexpr std::ptrdiff_t m_nBody1 = 0x2; // uint16_t m_nBody1; |  0x2 | Schema_Builtin | Size: 0x2
				constexpr std::ptrdiff_t m_nBody2 = 0x4; // uint16_t m_nBody2; |  0x4 | Schema_Builtin | Size: 0x2
				constexpr std::ptrdiff_t m_nFlags = 0x6; // uint16_t m_nFlags; |  0x6 | Schema_Builtin | Size: 0x2
				constexpr std::ptrdiff_t m_Frame1 = 0x10; // GlobalTypes::CTransform  | Schema_Atomic | Size: 0x20
				constexpr std::ptrdiff_t m_Frame2 = 0x30; // GlobalTypes::CTransform  | Schema_Atomic | Size: 0x20
				constexpr std::ptrdiff_t m_bEnableCollision = 0x50; // bool m_bEnableCollision; |  0x50 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bIsLinearConstraintDisabled = 0x51; // bool m_bIsLinearConstraintDisabled; |  0x51 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bIsAngularConstraintDisabled = 0x52; // bool m_bIsAngularConstraintDisabled; |  0x52 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bEnableLinearLimit = 0x53; // bool m_bEnableLinearLimit; |  0x53 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_LinearLimit = 0x54; // modellib::VPhysXRange_t  | Schema_DeclaredClass | Size: 0x8
				constexpr std::ptrdiff_t m_bEnableLinearMotor = 0x5c; // bool m_bEnableLinearMotor; |  0x5c | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_vLinearTargetVelocity = 0x60; // GlobalTypes::Vector  | Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_flMaxForce = 0x6c; // float32 m_flMaxForce; |  0x6c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bEnableSwingLimit = 0x70; // bool m_bEnableSwingLimit; |  0x70 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_SwingLimit = 0x74; // modellib::VPhysXRange_t  | Schema_DeclaredClass | Size: 0x8
				constexpr std::ptrdiff_t m_bEnableTwistLimit = 0x7c; // bool m_bEnableTwistLimit; |  0x7c | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_TwistLimit = 0x80; // modellib::VPhysXRange_t  | Schema_DeclaredClass | Size: 0x8
				constexpr std::ptrdiff_t m_bEnableAngularMotor = 0x88; // bool m_bEnableAngularMotor; |  0x88 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_vAngularTargetVelocity = 0x8c; // GlobalTypes::Vector  | Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_flMaxTorque = 0x98; // float32 m_flMaxTorque; |  0x98 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flLinearFrequency = 0x9c; // float32 m_flLinearFrequency; |  0x9c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flLinearDampingRatio = 0xa0; // float32 m_flLinearDampingRatio; |  0xa0 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flAngularFrequency = 0xa4; // float32 m_flAngularFrequency; |  0xa4 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flAngularDampingRatio = 0xa8; // float32 m_flAngularDampingRatio; |  0xa8 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flFriction = 0xac; // float32 m_flFriction; |  0xac | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flElasticity = 0xb0; // float32 m_flElasticity; |  0xb0 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flElasticDamping = 0xb4; // float32 m_flElasticDamping; |  0xb4 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flPlasticity = 0xb8; // float32 m_flPlasticity; |  0xb8 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_Tag = 0xc0; // GlobalTypes::CUtlString  | Schema_Atomic | Size: 0x8
			}
		}
	}
}
