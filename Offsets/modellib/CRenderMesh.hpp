// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <cstddef>

namespace CS2 {
	namespace SchemaOffsets {
		namespace modellib {
			// Class size: 0x1F0
			namespace CRenderMesh /**/ {
				constexpr std::ptrdiff_t m_sceneObjects = 0x10; // GlobalTypes::CUtlLeanVectorFixedGrowable< modellib::CSceneObjectData, 1 > m_sceneObjects; |  Schema_Atomic | Size: 0x98
				constexpr std::ptrdiff_t m_constraints = 0xa8; // GlobalTypes::CUtlLeanVector< CBaseConstraint >* m_constraints; |  Schema_Atomic | Size: 0x10
				constexpr std::ptrdiff_t m_skeleton = 0xb8; // modellib::CRenderSkeleton m_skeleton; |  Schema_DeclaredClass | Size: 0x50
				constexpr std::ptrdiff_t m_bUseUV2ForCharting = 0x1b4; // bool m_bUseUV2ForCharting; |  0x1b4 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bEmbeddedMapMesh = 0x1b5; // bool m_bEmbeddedMapMesh; |  0x1b5 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_meshDeformParams = 0x1d8; // modellib::DynamicMeshDeformParams_t m_meshDeformParams; |  Schema_DeclaredClass | Size: 0xc
				constexpr std::ptrdiff_t m_pGroomData = 0x1e8; // GlobalTypes::CRenderGroom* m_pGroomData; |  Schema_Ptr | Size: 0x8
			}
		}
	}
}
