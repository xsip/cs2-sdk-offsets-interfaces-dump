// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <cstddef>

namespace CS2 {
	namespace SchemaOffsets {
		namespace server {
			// Class size: 0xBA0
			namespace CFish /*: public CS2::server::CBaseAnimGraph*/ {
				constexpr std::ptrdiff_t m_pool = 0xa90; // server::CHandle< server::CFishPool > m_pool; |  Schema_Atomic | Size: 0x4
				constexpr std::ptrdiff_t m_id = 0xa94; // uint32_t m_id; |  0xa94 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_x = 0xa98; // float32 m_x; |  0xa98 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_y = 0xa9c; // float32 m_y; |  0xa9c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_z = 0xaa0; // float32 m_z; |  0xaa0 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_angle = 0xaa4; // float32 m_angle; |  0xaa4 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_angleChange = 0xaa8; // float32 m_angleChange; |  0xaa8 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_forward = 0xaac; // GlobalTypes::Vector m_forward; |  Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_perp = 0xab8; // GlobalTypes::Vector m_perp; |  Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_poolOrigin = 0xac4; // GlobalTypes::Vector m_poolOrigin; |  Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_waterLevel = 0xad0; // float32 m_waterLevel; |  0xad0 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_speed = 0xad4; // float32 m_speed; |  0xad4 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_desiredSpeed = 0xad8; // float32 m_desiredSpeed; |  0xad8 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_calmSpeed = 0xadc; // float32 m_calmSpeed; |  0xadc | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_panicSpeed = 0xae0; // float32 m_panicSpeed; |  0xae0 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_avoidRange = 0xae4; // float32 m_avoidRange; |  0xae4 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_turnTimer = 0xae8; // server::CountdownTimer m_turnTimer; |  Schema_DeclaredClass | Size: 0x18
				constexpr std::ptrdiff_t m_turnClockwise = 0xb00; // bool m_turnClockwise; |  0xb00 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_goTimer = 0xb08; // server::CountdownTimer m_goTimer; |  Schema_DeclaredClass | Size: 0x18
				constexpr std::ptrdiff_t m_moveTimer = 0xb20; // server::CountdownTimer m_moveTimer; |  Schema_DeclaredClass | Size: 0x18
				constexpr std::ptrdiff_t m_panicTimer = 0xb38; // server::CountdownTimer m_panicTimer; |  Schema_DeclaredClass | Size: 0x18
				constexpr std::ptrdiff_t m_disperseTimer = 0xb50; // server::CountdownTimer m_disperseTimer; |  Schema_DeclaredClass | Size: 0x18
				constexpr std::ptrdiff_t m_proximityTimer = 0xb68; // server::CountdownTimer m_proximityTimer; |  Schema_DeclaredClass | Size: 0x18
				constexpr std::ptrdiff_t m_visible = 0xb80; // server::CUtlVector< server::CFish > m_visible; |  Schema_Atomic | Size: 0x18
			}
		}
	}
}
