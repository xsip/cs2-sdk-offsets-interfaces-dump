// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <cstddef>

namespace CS2 {
	namespace SchemaOffsets {
		namespace server {
			// Class size: 0xE78
			namespace CPlantedC4 /*: public CS2::server::CBaseAnimGraph*/ {
				constexpr std::ptrdiff_t m_bBombTicking = 0xa88; // bool m_bBombTicking; |  0xa88 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_flC4Blow = 0xa8c; // entity2::GameTime_t m_flC4Blow; |  Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_nBombSite = 0xa90; // int32_t m_nBombSite; |  0xa90 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_nSourceSoundscapeHash = 0xa94; // int32_t m_nSourceSoundscapeHash; |  0xa94 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_AttributeManager = 0xa98; // server::CAttributeContainer m_AttributeManager; |  Schema_DeclaredClass | Size: 0x2f8
				constexpr std::ptrdiff_t m_OnBombDefused = 0xd90; // entity2::CEntityIOOutput m_OnBombDefused; |  Schema_DeclaredClass | Size: 0x28
				constexpr std::ptrdiff_t m_OnBombBeginDefuse = 0xdb8; // entity2::CEntityIOOutput m_OnBombBeginDefuse; |  Schema_DeclaredClass | Size: 0x28
				constexpr std::ptrdiff_t m_OnBombDefuseAborted = 0xde0; // entity2::CEntityIOOutput m_OnBombDefuseAborted; |  Schema_DeclaredClass | Size: 0x28
				constexpr std::ptrdiff_t m_bCannotBeDefused = 0xe08; // bool m_bCannotBeDefused; |  0xe08 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_entitySpottedState = 0xe10; // server::EntitySpottedState_t m_entitySpottedState; |  Schema_DeclaredClass | Size: 0x18
				constexpr std::ptrdiff_t m_nSpotRules = 0xe28; // int32_t m_nSpotRules; |  0xe28 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bTrainingPlacedByPlayer = 0xe2c; // bool m_bTrainingPlacedByPlayer; |  0xe2c | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bHasExploded = 0xe2d; // bool m_bHasExploded; |  0xe2d | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_flTimerLength = 0xe30; // float32 m_flTimerLength; |  0xe30 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bBeingDefused = 0xe34; // bool m_bBeingDefused; |  0xe34 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_fLastDefuseTime = 0xe3c; // entity2::GameTime_t m_fLastDefuseTime; |  Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_flDefuseLength = 0xe44; // float32 m_flDefuseLength; |  0xe44 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flDefuseCountDown = 0xe48; // entity2::GameTime_t m_flDefuseCountDown; |  Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_bBombDefused = 0xe4c; // bool m_bBombDefused; |  0xe4c | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_hBombDefuser = 0xe50; // server::CHandle< server::CCSPlayerPawn > m_hBombDefuser; |  Schema_Atomic | Size: 0x4
				constexpr std::ptrdiff_t m_iProgressBarTime = 0xe54; // int32_t m_iProgressBarTime; |  0xe54 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bVoiceAlertFired = 0xe58; // bool m_bVoiceAlertFired; |  0xe58 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bVoiceAlertPlayed = 0xe59; // bool m_bVoiceAlertPlayed[4]; |  0xe59 | Schema_FixedArray | Size: 0x4
				constexpr std::ptrdiff_t m_flNextBotBeepTime = 0xe60; // entity2::GameTime_t m_flNextBotBeepTime; |  Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_angCatchUpToPlayerEye = 0xe68; // GlobalTypes::QAngle m_angCatchUpToPlayerEye; |  Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_flLastSpinDetectionTime = 0xe74; // entity2::GameTime_t m_flLastSpinDetectionTime; |  Schema_DeclaredClass | Size: 0x4
			}
		}
	}
}
