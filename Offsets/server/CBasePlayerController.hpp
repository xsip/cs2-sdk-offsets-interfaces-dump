// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <cstddef>

namespace CS2 {
	namespace SchemaOffsets {
		namespace server {
			// Class size: 0x810
			namespace CBasePlayerController /*: public CS2::server::CBaseEntity*/ {
				constexpr std::ptrdiff_t m_nInButtonsWhichAreToggles = 0x4f8; // uint64_t m_nInButtonsWhichAreToggles; |  0x4f8 | Schema_Builtin | Size: 0x8
				constexpr std::ptrdiff_t m_nTickBase = 0x500; // uint32_t m_nTickBase; |  0x500 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_hPawn = 0x528; // GlobalTypes::CHandle<server::CBasePlayerPawn>  | Schema_Atomic | Size: 0x4
				constexpr std::ptrdiff_t m_bKnownTeamMismatch = 0x52c; // bool m_bKnownTeamMismatch; |  0x52c | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_nSplitScreenSlot = 0x530; // GlobalTypes::CSplitScreenSlot  | Schema_Atomic | Size: 0x4
				constexpr std::ptrdiff_t m_hSplitOwner = 0x534; // GlobalTypes::CHandle<server::CBasePlayerController>  | Schema_Atomic | Size: 0x4
				constexpr std::ptrdiff_t m_hSplitScreenPlayers = 0x538; // server::CUtlVector<GlobalTypes::CHandle<server::CBasePlayerController>>  | Schema_Atomic | Size: 0x18
				constexpr std::ptrdiff_t m_bIsHLTV = 0x550; // bool m_bIsHLTV; |  0x550 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_iConnected = 0x554; // client::PlayerConnectedState  | Schema_DeclaredEnum | Size: 0x4
				constexpr std::ptrdiff_t m_iszPlayerName = 0x558; // char m_iszPlayerName[128]; |  0x558 | Schema_FixedArray | Size: 0x80
				constexpr std::ptrdiff_t m_szNetworkIDString = 0x5d8; // GlobalTypes::CUtlString  | Schema_Atomic | Size: 0x8
				constexpr std::ptrdiff_t m_fLerpTime = 0x5e0; // float32 m_fLerpTime; |  0x5e0 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bLagCompensation = 0x5e4; // bool m_bLagCompensation; |  0x5e4 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bPredict = 0x5e5; // bool m_bPredict; |  0x5e5 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bIsLowViolence = 0x5ec; // bool m_bIsLowViolence; |  0x5ec | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bGamePaused = 0x5ed; // bool m_bGamePaused; |  0x5ed | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_iIgnoreGlobalChat = 0x728; // client::ChatIgnoreType_t  | Schema_DeclaredEnum | Size: 0x4
				constexpr std::ptrdiff_t m_flLastPlayerTalkTime = 0x72c; // float32 m_flLastPlayerTalkTime; |  0x72c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flLastEntitySteadyState = 0x730; // float32 m_flLastEntitySteadyState; |  0x730 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_nAvailableEntitySteadyState = 0x734; // int32_t m_nAvailableEntitySteadyState; |  0x734 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bHasAnySteadyStateEnts = 0x738; // bool m_bHasAnySteadyStateEnts; |  0x738 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_steamID = 0x748; // uint64_t m_steamID; |  0x748 | Schema_Builtin | Size: 0x8
				constexpr std::ptrdiff_t m_bNoClipEnabled = 0x750; // bool m_bNoClipEnabled; |  0x750 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_iDesiredFOV = 0x754; // uint32_t m_iDesiredFOV; |  0x754 | Schema_Builtin | Size: 0x4
			}
		}
	}
}
