// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <cstddef>

namespace CS2 {
	namespace SchemaOffsets {
		namespace server {
			// Class size: 0xD40
			namespace CDynamicProp /*: public CS2::server::CBreakableProp*/ {
				constexpr std::ptrdiff_t m_bCreateNavObstacle = 0xc48; // bool m_bCreateNavObstacle; |  0xc48 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bNavObstacleUpdatesOverridden = 0xc49; // bool m_bNavObstacleUpdatesOverridden; |  0xc49 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bUseHitboxesForRenderBox = 0xc4a; // bool m_bUseHitboxesForRenderBox; |  0xc4a | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bUseAnimGraph = 0xc4b; // bool m_bUseAnimGraph; |  0xc4b | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_pOutputAnimBegun = 0xc50; // entity2::CEntityIOOutput m_pOutputAnimBegun; |  Schema_DeclaredClass | Size: 0x28
				constexpr std::ptrdiff_t m_pOutputAnimOver = 0xc78; // entity2::CEntityIOOutput m_pOutputAnimOver; |  Schema_DeclaredClass | Size: 0x28
				constexpr std::ptrdiff_t m_pOutputAnimLoopCycleOver = 0xca0; // entity2::CEntityIOOutput m_pOutputAnimLoopCycleOver; |  Schema_DeclaredClass | Size: 0x28
				constexpr std::ptrdiff_t m_OnAnimReachedStart = 0xcc8; // entity2::CEntityIOOutput m_OnAnimReachedStart; |  Schema_DeclaredClass | Size: 0x28
				constexpr std::ptrdiff_t m_OnAnimReachedEnd = 0xcf0; // entity2::CEntityIOOutput m_OnAnimReachedEnd; |  Schema_DeclaredClass | Size: 0x28
				constexpr std::ptrdiff_t m_iszIdleAnim = 0xd18; // GlobalTypes::CUtlSymbolLarge m_iszIdleAnim; |  Schema_Atomic | Size: 0x8
				constexpr std::ptrdiff_t m_nIdleAnimLoopMode = 0xd20; // client::AnimLoopMode_t m_nIdleAnimLoopMode; |  Schema_DeclaredEnum | Size: 0x4
				constexpr std::ptrdiff_t m_bRandomizeCycle = 0xd24; // bool m_bRandomizeCycle; |  0xd24 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bStartDisabled = 0xd25; // bool m_bStartDisabled; |  0xd25 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bFiredStartEndOutput = 0xd26; // bool m_bFiredStartEndOutput; |  0xd26 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bForceNpcExclude = 0xd27; // bool m_bForceNpcExclude; |  0xd27 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bCreateNonSolid = 0xd28; // bool m_bCreateNonSolid; |  0xd28 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bIsOverrideProp = 0xd29; // bool m_bIsOverrideProp; |  0xd29 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_iInitialGlowState = 0xd2c; // int32_t m_iInitialGlowState; |  0xd2c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_nGlowRange = 0xd30; // int32_t m_nGlowRange; |  0xd30 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_nGlowRangeMin = 0xd34; // int32_t m_nGlowRangeMin; |  0xd34 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_glowColor = 0xd38; // GlobalTypes::Color m_glowColor; |  Schema_Atomic | Size: 0x4
				constexpr std::ptrdiff_t m_nGlowTeam = 0xd3c; // int32_t m_nGlowTeam; |  0xd3c | Schema_Builtin | Size: 0x4
			}
		}
	}
}
