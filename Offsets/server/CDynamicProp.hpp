// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <cstddef>

namespace CS2 {
	namespace SchemaOffsets {
		namespace server {
			// Class size: 0xD50
			namespace CDynamicProp /*: public CS2::server::CBreakableProp*/ {
				constexpr std::ptrdiff_t m_bCreateNavObstacle = 0xc58; // bool m_bCreateNavObstacle; |  0xc58 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bNavObstacleUpdatesOverridden = 0xc59; // bool m_bNavObstacleUpdatesOverridden; |  0xc59 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bUseHitboxesForRenderBox = 0xc5a; // bool m_bUseHitboxesForRenderBox; |  0xc5a | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bUseAnimGraph = 0xc5b; // bool m_bUseAnimGraph; |  0xc5b | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_pOutputAnimBegun = 0xc60; // entity2::CEntityIOOutput m_pOutputAnimBegun; |  Schema_DeclaredClass | Size: 0x28
				constexpr std::ptrdiff_t m_pOutputAnimOver = 0xc88; // entity2::CEntityIOOutput m_pOutputAnimOver; |  Schema_DeclaredClass | Size: 0x28
				constexpr std::ptrdiff_t m_pOutputAnimLoopCycleOver = 0xcb0; // entity2::CEntityIOOutput m_pOutputAnimLoopCycleOver; |  Schema_DeclaredClass | Size: 0x28
				constexpr std::ptrdiff_t m_OnAnimReachedStart = 0xcd8; // entity2::CEntityIOOutput m_OnAnimReachedStart; |  Schema_DeclaredClass | Size: 0x28
				constexpr std::ptrdiff_t m_OnAnimReachedEnd = 0xd00; // entity2::CEntityIOOutput m_OnAnimReachedEnd; |  Schema_DeclaredClass | Size: 0x28
				constexpr std::ptrdiff_t m_iszIdleAnim = 0xd28; // GlobalTypes::CUtlSymbolLarge m_iszIdleAnim; |  Schema_Atomic | Size: 0x8
				constexpr std::ptrdiff_t m_nIdleAnimLoopMode = 0xd30; // client::AnimLoopMode_t m_nIdleAnimLoopMode; |  Schema_DeclaredEnum | Size: 0x4
				constexpr std::ptrdiff_t m_bRandomizeCycle = 0xd34; // bool m_bRandomizeCycle; |  0xd34 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bStartDisabled = 0xd35; // bool m_bStartDisabled; |  0xd35 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bFiredStartEndOutput = 0xd36; // bool m_bFiredStartEndOutput; |  0xd36 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bForceNpcExclude = 0xd37; // bool m_bForceNpcExclude; |  0xd37 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bCreateNonSolid = 0xd38; // bool m_bCreateNonSolid; |  0xd38 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bIsOverrideProp = 0xd39; // bool m_bIsOverrideProp; |  0xd39 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_iInitialGlowState = 0xd3c; // int32_t m_iInitialGlowState; |  0xd3c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_nGlowRange = 0xd40; // int32_t m_nGlowRange; |  0xd40 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_nGlowRangeMin = 0xd44; // int32_t m_nGlowRangeMin; |  0xd44 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_glowColor = 0xd48; // GlobalTypes::Color m_glowColor; |  Schema_Atomic | Size: 0x4
				constexpr std::ptrdiff_t m_nGlowTeam = 0xd4c; // int32_t m_nGlowTeam; |  0xd4c | Schema_Builtin | Size: 0x4
			}
		}
	}
}
