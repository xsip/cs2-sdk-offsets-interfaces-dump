// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <cstddef>

namespace CS2 {
	namespace SchemaOffsets {
		namespace server {
			// Class size: 0xE00
			namespace CPhysicsProp /*: public CS2::server::CBreakableProp*/ {
				constexpr std::ptrdiff_t m_MotionEnabled = 0xc60; // entity2::CEntityIOOutput  | Schema_DeclaredClass | Size: 0x28
				constexpr std::ptrdiff_t m_OnAwakened = 0xc88; // entity2::CEntityIOOutput  | Schema_DeclaredClass | Size: 0x28
				constexpr std::ptrdiff_t m_OnAwake = 0xcb0; // entity2::CEntityIOOutput  | Schema_DeclaredClass | Size: 0x28
				constexpr std::ptrdiff_t m_OnAsleep = 0xcd8; // entity2::CEntityIOOutput  | Schema_DeclaredClass | Size: 0x28
				constexpr std::ptrdiff_t m_OnPlayerUse = 0xd00; // entity2::CEntityIOOutput  | Schema_DeclaredClass | Size: 0x28
				constexpr std::ptrdiff_t m_OnOutOfWorld = 0xd28; // entity2::CEntityIOOutput  | Schema_DeclaredClass | Size: 0x28
				constexpr std::ptrdiff_t m_OnPlayerPickup = 0xd50; // entity2::CEntityIOOutput  | Schema_DeclaredClass | Size: 0x28
				constexpr std::ptrdiff_t m_bForceNavIgnore = 0xd78; // bool m_bForceNavIgnore; |  0xd78 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bNoNavmeshBlocker = 0xd79; // bool m_bNoNavmeshBlocker; |  0xd79 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bForceNpcExclude = 0xd7a; // bool m_bForceNpcExclude; |  0xd7a | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_massScale = 0xd7c; // float32 m_massScale; |  0xd7c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_buoyancyScale = 0xd80; // float32 m_buoyancyScale; |  0xd80 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_damageType = 0xd84; // int32_t m_damageType; |  0xd84 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_damageToEnableMotion = 0xd88; // int32_t m_damageToEnableMotion; |  0xd88 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flForceToEnableMotion = 0xd8c; // float32 m_flForceToEnableMotion; |  0xd8c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bThrownByPlayer = 0xd90; // bool m_bThrownByPlayer; |  0xd90 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bDroppedByPlayer = 0xd91; // bool m_bDroppedByPlayer; |  0xd91 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bTouchedByPlayer = 0xd92; // bool m_bTouchedByPlayer; |  0xd92 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bFirstCollisionAfterLaunch = 0xd93; // bool m_bFirstCollisionAfterLaunch; |  0xd93 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bHasBeenAwakened = 0xd94; // bool m_bHasBeenAwakened; |  0xd94 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bIsOverrideProp = 0xd95; // bool m_bIsOverrideProp; |  0xd95 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_flLastBurn = 0xd98; // entity2::GameTime_t  | Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_nDynamicContinuousContactBehavior = 0xd9c; // physicslib::DynamicContinuousContactBehavior_t  | Schema_DeclaredEnum | Size: 0x1
				constexpr std::ptrdiff_t m_fNextCheckDisableMotionContactsTime = 0xda0; // entity2::GameTime_t  | Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_iInitialGlowState = 0xda4; // int32_t m_iInitialGlowState; |  0xda4 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_nGlowRange = 0xda8; // int32_t m_nGlowRange; |  0xda8 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_nGlowRangeMin = 0xdac; // int32_t m_nGlowRangeMin; |  0xdac | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_glowColor = 0xdb0; // GlobalTypes::Color  | Schema_Atomic | Size: 0x4
				constexpr std::ptrdiff_t m_bShouldAutoConvertBackFromDebris = 0xdb4; // bool m_bShouldAutoConvertBackFromDebris; |  0xdb4 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bMuteImpactEffects = 0xdb5; // bool m_bMuteImpactEffects; |  0xdb5 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bAcceptDamageFromHeldObjects = 0xdbf; // bool m_bAcceptDamageFromHeldObjects; |  0xdbf | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bEnableUseOutput = 0xdc0; // bool m_bEnableUseOutput; |  0xdc0 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_CrateType = 0xdc4; // server::CPhysicsProp::CrateType_t  | Schema_DeclaredEnum | Size: 0x4
				constexpr std::ptrdiff_t m_strItemClass = 0xdc8; // GlobalTypes::CUtlSymbolLarge[4]  | Schema_FixedArray | Size: 0x20
				constexpr std::ptrdiff_t m_nItemCount = 0xde8; // int32_t m_nItemCount[4]; |  0xde8 | Schema_FixedArray | Size: 0x10
				constexpr std::ptrdiff_t m_bRemovableForAmmoBalancing = 0xdf8; // bool m_bRemovableForAmmoBalancing; |  0xdf8 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bAwake = 0xdf9; // bool m_bAwake; |  0xdf9 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bAttachedToReferenceFrame = 0xdfa; // bool m_bAttachedToReferenceFrame; |  0xdfa | Schema_Builtin | Size: 0x1
			}
		}
	}
}
