// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <cstddef>

namespace CS2 {
	namespace SchemaOffsets {
		namespace server {
			// Class size: 0x4F0
			namespace CBaseEntity /*: public CS2::entity2::CEntityInstance*/ {
				constexpr std::ptrdiff_t m_CBodyComponent = 0x38; // server::CBodyComponent* m_CBodyComponent; |  Schema_Ptr | Size: 0x8
				constexpr std::ptrdiff_t m_NetworkTransmitComponent = 0x40; // client::CNetworkTransmitComponent m_NetworkTransmitComponent; |  Schema_DeclaredClass | Size: 0x1c8
				constexpr std::ptrdiff_t m_aThinkFunctions = 0x248; // GlobalTypes::CUtlVector< client::thinkfunc_t > m_aThinkFunctions; |  Schema_Atomic | Size: 0x18
				constexpr std::ptrdiff_t m_iCurrentThinkContext = 0x260; // int32_t m_iCurrentThinkContext; |  0x260 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_nLastThinkTick = 0x264; // entity2::GameTick_t m_nLastThinkTick; |  Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_bDisabledContextThinks = 0x268; // bool m_bDisabledContextThinks; |  0x268 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_isSteadyState = 0x278; // GlobalTypes::CTypedBitVec< 64 > m_isSteadyState; |  Schema_Atomic | Size: 0x8
				constexpr std::ptrdiff_t m_lastNetworkChange = 0x280; // float32 m_lastNetworkChange; |  0x280 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_ResponseContexts = 0x290; // GlobalTypes::CUtlVector< server::ResponseContext_t > m_ResponseContexts; |  Schema_Atomic | Size: 0x18
				constexpr std::ptrdiff_t m_iszResponseContext = 0x2a8; // GlobalTypes::CUtlSymbolLarge m_iszResponseContext; |  Schema_Atomic | Size: 0x8
				constexpr std::ptrdiff_t m_iHealth = 0x2d0; // int32_t m_iHealth; |  0x2d0 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_iMaxHealth = 0x2d4; // int32_t m_iMaxHealth; |  0x2d4 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_lifeState = 0x2d8; // uint8_t m_lifeState; |  0x2d8 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_flDamageAccumulator = 0x2dc; // float32 m_flDamageAccumulator; |  0x2dc | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bTakesDamage = 0x2e0; // bool m_bTakesDamage; |  0x2e0 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_nTakeDamageFlags = 0x2e8; // client::TakeDamageFlags_t m_nTakeDamageFlags; |  Schema_DeclaredEnum | Size: 0x8
				constexpr std::ptrdiff_t m_nPlatformType = 0x2f0; // client::EntityPlatformTypes_t m_nPlatformType; |  Schema_DeclaredEnum | Size: 0x1
				constexpr std::ptrdiff_t m_MoveCollide = 0x2f2; // client::MoveCollide_t m_MoveCollide; |  Schema_DeclaredEnum | Size: 0x1
				constexpr std::ptrdiff_t m_MoveType = 0x2f3; // client::MoveType_t m_MoveType; |  Schema_DeclaredEnum | Size: 0x1
				constexpr std::ptrdiff_t m_nActualMoveType = 0x2f4; // client::MoveType_t m_nActualMoveType; |  Schema_DeclaredEnum | Size: 0x1
				constexpr std::ptrdiff_t m_nWaterTouch = 0x2f5; // uint8_t m_nWaterTouch; |  0x2f5 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_nSlimeTouch = 0x2f6; // uint8_t m_nSlimeTouch; |  0x2f6 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bRestoreInHierarchy = 0x2f7; // bool m_bRestoreInHierarchy; |  0x2f7 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_target = 0x2f8; // GlobalTypes::CUtlSymbolLarge m_target; |  Schema_Atomic | Size: 0x8
				constexpr std::ptrdiff_t m_hDamageFilter = 0x300; // server::CHandle< server::CBaseFilter > m_hDamageFilter; |  Schema_Atomic | Size: 0x4
				constexpr std::ptrdiff_t m_iszDamageFilterName = 0x308; // GlobalTypes::CUtlSymbolLarge m_iszDamageFilterName; |  Schema_Atomic | Size: 0x8
				constexpr std::ptrdiff_t m_flMoveDoneTime = 0x310; // float32 m_flMoveDoneTime; |  0x310 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_nSubclassID = 0x314; // GlobalTypes::CUtlStringToken m_nSubclassID; |  Schema_Atomic | Size: 0x4
				constexpr std::ptrdiff_t m_flAnimTime = 0x320; // float32 m_flAnimTime; |  0x320 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flSimulationTime = 0x324; // float32 m_flSimulationTime; |  0x324 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flCreateTime = 0x328; // entity2::GameTime_t m_flCreateTime; |  Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_bClientSideRagdoll = 0x32c; // bool m_bClientSideRagdoll; |  0x32c | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_ubInterpolationFrame = 0x32d; // uint8_t m_ubInterpolationFrame; |  0x32d | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_vPrevVPhysicsUpdatePos = 0x330; // GlobalTypes::Vector m_vPrevVPhysicsUpdatePos; |  Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_iTeamNum = 0x33c; // uint8_t m_iTeamNum; |  0x33c | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_iGlobalname = 0x340; // GlobalTypes::CUtlSymbolLarge m_iGlobalname; |  Schema_Atomic | Size: 0x8
				constexpr std::ptrdiff_t m_iSentToClients = 0x348; // int32_t m_iSentToClients; |  0x348 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flSpeed = 0x34c; // float32 m_flSpeed; |  0x34c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_sUniqueHammerID = 0x350; // GlobalTypes::CUtlString m_sUniqueHammerID; |  Schema_Atomic | Size: 0x8
				constexpr std::ptrdiff_t m_spawnflags = 0x358; // uint32_t m_spawnflags; |  0x358 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_nNextThinkTick = 0x35c; // entity2::GameTick_t m_nNextThinkTick; |  Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_nSimulationTick = 0x360; // int32_t m_nSimulationTick; |  0x360 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_OnKilled = 0x368; // entity2::CEntityIOOutput m_OnKilled; |  Schema_DeclaredClass | Size: 0x28
				constexpr std::ptrdiff_t m_fFlags = 0x390; // uint32_t m_fFlags; |  0x390 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_vecAbsVelocity = 0x394; // GlobalTypes::Vector m_vecAbsVelocity; |  Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_vecVelocity = 0x3a0; // client::CNetworkVelocityVector m_vecVelocity; |  Schema_DeclaredClass | Size: 0x28
				constexpr std::ptrdiff_t m_vecBaseVelocity = 0x3d0; // GlobalTypes::Vector m_vecBaseVelocity; |  Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_nPushEnumCount = 0x3dc; // int32_t m_nPushEnumCount; |  0x3dc | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_pCollision = 0x3e0; // server::CCollisionProperty* m_pCollision; |  Schema_Ptr | Size: 0x8
				constexpr std::ptrdiff_t m_hEffectEntity = 0x3e8; // server::CHandle< server::CBaseEntity > m_hEffectEntity; |  Schema_Atomic | Size: 0x4
				constexpr std::ptrdiff_t m_hOwnerEntity = 0x3ec; // server::CHandle< server::CBaseEntity > m_hOwnerEntity; |  Schema_Atomic | Size: 0x4
				constexpr std::ptrdiff_t m_fEffects = 0x3f0; // uint32_t m_fEffects; |  0x3f0 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_hGroundEntity = 0x3f4; // server::CHandle< server::CBaseEntity > m_hGroundEntity; |  Schema_Atomic | Size: 0x4
				constexpr std::ptrdiff_t m_nGroundBodyIndex = 0x3f8; // int32_t m_nGroundBodyIndex; |  0x3f8 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flFriction = 0x3fc; // float32 m_flFriction; |  0x3fc | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flElasticity = 0x400; // float32 m_flElasticity; |  0x400 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flGravityScale = 0x404; // float32 m_flGravityScale; |  0x404 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flTimeScale = 0x408; // float32 m_flTimeScale; |  0x408 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flWaterLevel = 0x40c; // float32 m_flWaterLevel; |  0x40c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bGravityDisabled = 0x410; // bool m_bGravityDisabled; |  0x410 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bAnimatedEveryTick = 0x411; // bool m_bAnimatedEveryTick; |  0x411 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_flActualGravityScale = 0x414; // float32 m_flActualGravityScale; |  0x414 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bGravityActuallyDisabled = 0x418; // bool m_bGravityActuallyDisabled; |  0x418 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bDisableLowViolence = 0x419; // bool m_bDisableLowViolence; |  0x419 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_nWaterType = 0x41a; // uint8_t m_nWaterType; |  0x41a | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_iEFlags = 0x41c; // int32_t m_iEFlags; |  0x41c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_OnUser1 = 0x420; // entity2::CEntityIOOutput m_OnUser1; |  Schema_DeclaredClass | Size: 0x28
				constexpr std::ptrdiff_t m_OnUser2 = 0x448; // entity2::CEntityIOOutput m_OnUser2; |  Schema_DeclaredClass | Size: 0x28
				constexpr std::ptrdiff_t m_OnUser3 = 0x470; // entity2::CEntityIOOutput m_OnUser3; |  Schema_DeclaredClass | Size: 0x28
				constexpr std::ptrdiff_t m_OnUser4 = 0x498; // entity2::CEntityIOOutput m_OnUser4; |  Schema_DeclaredClass | Size: 0x28
				constexpr std::ptrdiff_t m_iInitialTeamNum = 0x4c0; // int32_t m_iInitialTeamNum; |  0x4c0 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flNavIgnoreUntilTime = 0x4c4; // entity2::GameTime_t m_flNavIgnoreUntilTime; |  Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_vecAngVelocity = 0x4c8; // GlobalTypes::QAngle m_vecAngVelocity; |  Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_bNetworkQuantizeOriginAndAngles = 0x4d4; // bool m_bNetworkQuantizeOriginAndAngles; |  0x4d4 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bLagCompensate = 0x4d5; // bool m_bLagCompensate; |  0x4d5 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_pBlocker = 0x4d8; // server::CHandle< server::CBaseEntity > m_pBlocker; |  Schema_Atomic | Size: 0x4
				constexpr std::ptrdiff_t m_flLocalTime = 0x4dc; // float32 m_flLocalTime; |  0x4dc | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flVPhysicsUpdateLocalTime = 0x4e0; // float32 m_flVPhysicsUpdateLocalTime; |  0x4e0 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_nBloodType = 0x4e4; // client::BloodType m_nBloodType; |  Schema_DeclaredEnum | Size: 0x4
				constexpr std::ptrdiff_t m_pPulseGraphInstance = 0x4e8; // server::CPulseGraphInstance_ServerEntity* m_pPulseGraphInstance; |  Schema_Ptr | Size: 0x8
			}
		}
	}
}
