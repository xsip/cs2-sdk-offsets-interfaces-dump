// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <cstddef>

namespace CS2 {
	namespace SchemaOffsets {
		namespace server {
			// Class size: 0x600
			namespace CBaseAnimGraphController /*: public CS2::client::CSkeletonAnimationController*/ {
				constexpr std::ptrdiff_t m_animGraphNetworkedVars = 0x18; // server::CAnimGraphNetworkedVariables m_animGraphNetworkedVars; |  Schema_DeclaredClass | Size: 0x208
				constexpr std::ptrdiff_t m_bSequenceFinished = 0x220; // bool m_bSequenceFinished; |  0x220 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_flSoundSyncTime = 0x224; // float32 m_flSoundSyncTime; |  0x224 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_nActiveIKChainMask = 0x228; // uint32_t m_nActiveIKChainMask; |  0x228 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_hSequence = 0x22c; // animationsystem::HSequence m_hSequence; |  Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_flSeqStartTime = 0x230; // entity2::GameTime_t m_flSeqStartTime; |  Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_flSeqFixedCycle = 0x234; // float32 m_flSeqFixedCycle; |  0x234 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_nAnimLoopMode = 0x238; // client::AnimLoopMode_t m_nAnimLoopMode; |  Schema_DeclaredEnum | Size: 0x4
				constexpr std::ptrdiff_t m_flPlaybackRate = 0x23c; // GlobalTypes::CNetworkedQuantizedFloat m_flPlaybackRate; |  Schema_Atomic | Size: 0x8
				constexpr std::ptrdiff_t m_nNotifyState = 0x248; // client::SequenceFinishNotifyState_t m_nNotifyState; |  Schema_DeclaredEnum | Size: 0x1
				constexpr std::ptrdiff_t m_bNetworkedAnimationInputsChanged = 0x24a; // bool m_bNetworkedAnimationInputsChanged; |  0x24a | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bNetworkedSequenceChanged = 0x24b; // bool m_bNetworkedSequenceChanged; |  0x24b | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bLastUpdateSkipped = 0x24c; // bool m_bLastUpdateSkipped; |  0x24c | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_flPrevAnimUpdateTime = 0x250; // entity2::GameTime_t m_flPrevAnimUpdateTime; |  Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_hGraphDefinitionAG2 = 0x588; // GlobalTypes::CStrongHandle< resourcesystem::InfoForResourceTypeCNmGraphDefinition > m_hGraphDefinitionAG2; |  Schema_Atomic | Size: 0x8
				constexpr std::ptrdiff_t m_bIsUsingAG2 = 0x590; // bool m_bIsUsingAG2; |  0x590 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_serializedPoseRecipeAG2 = 0x598; // GlobalTypes::CNetworkUtlVectorBase< uint8 > m_serializedPoseRecipeAG2; |  Schema_Atomic | Size: 0x18
				constexpr std::ptrdiff_t m_nSerializePoseRecipeSizeAG2 = 0x5b0; // int32_t m_nSerializePoseRecipeSizeAG2; |  0x5b0 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_nSerializePoseRecipeVersionAG2 = 0x5b4; // int32_t m_nSerializePoseRecipeVersionAG2; |  0x5b4 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_nGraphCreationFlagsAG2 = 0x5b8; // uint8_t m_nGraphCreationFlagsAG2; |  0x5b8 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_nServerGraphDefReloadCountAG2 = 0x5f8; // int32_t m_nServerGraphDefReloadCountAG2; |  0x5f8 | Schema_Builtin | Size: 0x4
			}
		}
	}
}
