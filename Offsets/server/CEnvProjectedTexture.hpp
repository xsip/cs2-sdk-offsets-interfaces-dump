// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <cstddef>

namespace CS2 {
	namespace SchemaOffsets {
		namespace server {
			// Class size: 0xA50
			namespace CEnvProjectedTexture /*: public CS2::server::CModelPointEntity*/ {
				constexpr std::ptrdiff_t m_hTargetEntity = 0x7e8; // server::CHandle< server::CBaseEntity > m_hTargetEntity; |  Schema_Atomic | Size: 0x4
				constexpr std::ptrdiff_t m_bState = 0x7ec; // bool m_bState; |  0x7ec | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bAlwaysUpdate = 0x7ed; // bool m_bAlwaysUpdate; |  0x7ed | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_flLightFOV = 0x7f0; // float32 m_flLightFOV; |  0x7f0 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bEnableShadows = 0x7f4; // bool m_bEnableShadows; |  0x7f4 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bSimpleProjection = 0x7f5; // bool m_bSimpleProjection; |  0x7f5 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bLightOnlyTarget = 0x7f6; // bool m_bLightOnlyTarget; |  0x7f6 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bLightWorld = 0x7f7; // bool m_bLightWorld; |  0x7f7 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bCameraSpace = 0x7f8; // bool m_bCameraSpace; |  0x7f8 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_flBrightnessScale = 0x7fc; // float32 m_flBrightnessScale; |  0x7fc | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_LightColor = 0x800; // GlobalTypes::Color m_LightColor; |  Schema_Atomic | Size: 0x4
				constexpr std::ptrdiff_t m_flIntensity = 0x804; // float32 m_flIntensity; |  0x804 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flLinearAttenuation = 0x808; // float32 m_flLinearAttenuation; |  0x808 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flQuadraticAttenuation = 0x80c; // float32 m_flQuadraticAttenuation; |  0x80c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bVolumetric = 0x810; // bool m_bVolumetric; |  0x810 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_flNoiseStrength = 0x814; // float32 m_flNoiseStrength; |  0x814 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flFlashlightTime = 0x818; // float32 m_flFlashlightTime; |  0x818 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_nNumPlanes = 0x81c; // uint32_t m_nNumPlanes; |  0x81c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flPlaneOffset = 0x820; // float32 m_flPlaneOffset; |  0x820 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flVolumetricIntensity = 0x824; // float32 m_flVolumetricIntensity; |  0x824 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flColorTransitionTime = 0x828; // float32 m_flColorTransitionTime; |  0x828 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flAmbient = 0x82c; // float32 m_flAmbient; |  0x82c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_SpotlightTextureName = 0x830; // char m_SpotlightTextureName[512]; |  0x830 | Schema_FixedArray | Size: 0x200
				constexpr std::ptrdiff_t m_nSpotlightTextureFrame = 0xa30; // int32_t m_nSpotlightTextureFrame; |  0xa30 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_nShadowQuality = 0xa34; // uint32_t m_nShadowQuality; |  0xa34 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flNearZ = 0xa38; // float32 m_flNearZ; |  0xa38 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flFarZ = 0xa3c; // float32 m_flFarZ; |  0xa3c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flProjectionSize = 0xa40; // float32 m_flProjectionSize; |  0xa40 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flRotation = 0xa44; // float32 m_flRotation; |  0xa44 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bFlipHorizontal = 0xa48; // bool m_bFlipHorizontal; |  0xa48 | Schema_Builtin | Size: 0x1
			}
		}
	}
}
