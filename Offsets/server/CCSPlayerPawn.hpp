// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <cstddef>

namespace CS2 {
	namespace SchemaOffsets {
		namespace server {
			// Class size: 0x1C80
			namespace CCSPlayerPawn /*: public CS2::server::CCSPlayerPawnBase*/ {
				constexpr std::ptrdiff_t m_pBulletServices = 0xee8; // server::CCSPlayer_BulletServices* m_pBulletServices; |  Schema_Ptr | Size: 0x8
				constexpr std::ptrdiff_t m_pHostageServices = 0xef0; // server::CCSPlayer_HostageServices* m_pHostageServices; |  Schema_Ptr | Size: 0x8
				constexpr std::ptrdiff_t m_pBuyServices = 0xef8; // server::CCSPlayer_BuyServices* m_pBuyServices; |  Schema_Ptr | Size: 0x8
				constexpr std::ptrdiff_t m_pActionTrackingServices = 0xf00; // server::CCSPlayer_ActionTrackingServices* m_pActionTrackingServices; |  Schema_Ptr | Size: 0x8
				constexpr std::ptrdiff_t m_pRadioServices = 0xf08; // server::CCSPlayer_RadioServices* m_pRadioServices; |  Schema_Ptr | Size: 0x8
				constexpr std::ptrdiff_t m_pDamageReactServices = 0xf10; // server::CCSPlayer_DamageReactServices* m_pDamageReactServices; |  Schema_Ptr | Size: 0x8
				constexpr std::ptrdiff_t m_nCharacterDefIndex = 0xf18; // uint16_t m_nCharacterDefIndex; |  0xf18 | Schema_Builtin | Size: 0x2
				constexpr std::ptrdiff_t m_bHasFemaleVoice = 0xf1a; // bool m_bHasFemaleVoice; |  0xf1a | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_strVOPrefix = 0xf20; // GlobalTypes::CUtlString m_strVOPrefix; |  Schema_Atomic | Size: 0x8
				constexpr std::ptrdiff_t m_szLastPlaceName = 0xf28; // char m_szLastPlaceName[18]; |  0xf28 | Schema_FixedArray | Size: 0x12
				constexpr std::ptrdiff_t m_bInHostageResetZone = 0xfe8; // bool m_bInHostageResetZone; |  0xfe8 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bInBuyZone = 0xfe9; // bool m_bInBuyZone; |  0xfe9 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_TouchingBuyZones = 0xff0; // server::CUtlVector< server.dll::CHandle< CBaseEntity > > m_TouchingBuyZones; |  Schema_Atomic | Size: 0x18
				constexpr std::ptrdiff_t m_bWasInBuyZone = 0x1008; // bool m_bWasInBuyZone; |  0x1008 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bInHostageRescueZone = 0x1009; // bool m_bInHostageRescueZone; |  0x1009 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bInBombZone = 0x100a; // bool m_bInBombZone; |  0x100a | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bWasInHostageRescueZone = 0x100b; // bool m_bWasInHostageRescueZone; |  0x100b | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_iRetakesOffering = 0x100c; // int32_t m_iRetakesOffering; |  0x100c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_iRetakesOfferingCard = 0x1010; // int32_t m_iRetakesOfferingCard; |  0x1010 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bRetakesHasDefuseKit = 0x1014; // bool m_bRetakesHasDefuseKit; |  0x1014 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bRetakesMVPLastRound = 0x1015; // bool m_bRetakesMVPLastRound; |  0x1015 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_iRetakesMVPBoostItem = 0x1018; // int32_t m_iRetakesMVPBoostItem; |  0x1018 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_RetakesMVPBoostExtraUtility = 0x101c; // client::loadout_slot_t m_RetakesMVPBoostExtraUtility; |  Schema_DeclaredEnum | Size: 0x4
				constexpr std::ptrdiff_t m_flHealthShotBoostExpirationTime = 0x1020; // entity2::GameTime_t m_flHealthShotBoostExpirationTime; |  Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_flLandingTimeSeconds = 0x1024; // float32 m_flLandingTimeSeconds; |  0x1024 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_aimPunchAngle = 0x1028; // GlobalTypes::QAngle m_aimPunchAngle; |  Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_aimPunchAngleVel = 0x1034; // GlobalTypes::QAngle m_aimPunchAngleVel; |  Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_aimPunchTickBase = 0x1040; // entity2::GameTick_t m_aimPunchTickBase; |  Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_aimPunchTickFraction = 0x1044; // float32 m_aimPunchTickFraction; |  0x1044 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_aimPunchCache = 0x1048; // GlobalTypes::CUtlVector< GlobalTypes::QAngle > m_aimPunchCache; |  Schema_Atomic | Size: 0x18
				constexpr std::ptrdiff_t m_bIsBuyMenuOpen = 0x1060; // bool m_bIsBuyMenuOpen; |  0x1060 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_lastLandTime = 0x1708; // entity2::GameTime_t m_lastLandTime; |  Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_bOnGroundLastTick = 0x170c; // bool m_bOnGroundLastTick; |  0x170c | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_iPlayerLocked = 0x1710; // int32_t m_iPlayerLocked; |  0x1710 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flTimeOfLastInjury = 0x1718; // entity2::GameTime_t m_flTimeOfLastInjury; |  Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_flNextSprayDecalTime = 0x171c; // entity2::GameTime_t m_flNextSprayDecalTime; |  Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_bNextSprayDecalTimeExpedited = 0x1720; // bool m_bNextSprayDecalTimeExpedited; |  0x1720 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_nRagdollDamageBone = 0x1724; // int32_t m_nRagdollDamageBone; |  0x1724 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_vRagdollDamageForce = 0x1728; // GlobalTypes::Vector m_vRagdollDamageForce; |  Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_vRagdollDamagePosition = 0x1734; // GlobalTypes::Vector m_vRagdollDamagePosition; |  Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_szRagdollDamageWeaponName = 0x1740; // char m_szRagdollDamageWeaponName[64]; |  0x1740 | Schema_FixedArray | Size: 0x40
				constexpr std::ptrdiff_t m_bRagdollDamageHeadshot = 0x1780; // bool m_bRagdollDamageHeadshot; |  0x1780 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_vRagdollServerOrigin = 0x1784; // GlobalTypes::Vector m_vRagdollServerOrigin; |  Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_EconGloves = 0x1790; // server::CEconItemView m_EconGloves; |  Schema_DeclaredClass | Size: 0x2a8
				constexpr std::ptrdiff_t m_nEconGlovesChanged = 0x1a38; // uint8_t m_nEconGlovesChanged; |  0x1a38 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_qDeathEyeAngles = 0x1a3c; // GlobalTypes::QAngle m_qDeathEyeAngles; |  Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_bSkipOneHeadConstraintUpdate = 0x1a48; // bool m_bSkipOneHeadConstraintUpdate; |  0x1a48 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bLeftHanded = 0x1a49; // bool m_bLeftHanded; |  0x1a49 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_fSwitchedHandednessTime = 0x1a4c; // entity2::GameTime_t m_fSwitchedHandednessTime; |  Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_flViewmodelOffsetX = 0x1a50; // float32 m_flViewmodelOffsetX; |  0x1a50 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flViewmodelOffsetY = 0x1a54; // float32 m_flViewmodelOffsetY; |  0x1a54 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flViewmodelOffsetZ = 0x1a58; // float32 m_flViewmodelOffsetZ; |  0x1a58 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flViewmodelFOV = 0x1a5c; // float32 m_flViewmodelFOV; |  0x1a5c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bIsWalking = 0x1a60; // bool m_bIsWalking; |  0x1a60 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_fLastGivenDefuserTime = 0x1a64; // float32 m_fLastGivenDefuserTime; |  0x1a64 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_fLastGivenBombTime = 0x1a68; // float32 m_fLastGivenBombTime; |  0x1a68 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flDealtDamageToEnemyMostRecentTimestamp = 0x1a6c; // float32 m_flDealtDamageToEnemyMostRecentTimestamp; |  0x1a6c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_iDisplayHistoryBits = 0x1a70; // uint32_t m_iDisplayHistoryBits; |  0x1a70 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flLastAttackedTeammate = 0x1a74; // float32 m_flLastAttackedTeammate; |  0x1a74 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_allowAutoFollowTime = 0x1a78; // entity2::GameTime_t m_allowAutoFollowTime; |  Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_bResetArmorNextSpawn = 0x1a7c; // bool m_bResetArmorNextSpawn; |  0x1a7c | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_nLastKillerIndex = 0x1a80; // GlobalTypes::CEntityIndex m_nLastKillerIndex; |  Schema_Atomic | Size: 0x4
				constexpr std::ptrdiff_t m_entitySpottedState = 0x1a88; // server::EntitySpottedState_t m_entitySpottedState; |  Schema_DeclaredClass | Size: 0x18
				constexpr std::ptrdiff_t m_nSpotRules = 0x1aa0; // int32_t m_nSpotRules; |  0x1aa0 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bIsScoped = 0x1aa4; // bool m_bIsScoped; |  0x1aa4 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bResumeZoom = 0x1aa5; // bool m_bResumeZoom; |  0x1aa5 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bIsDefusing = 0x1aa6; // bool m_bIsDefusing; |  0x1aa6 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bIsGrabbingHostage = 0x1aa7; // bool m_bIsGrabbingHostage; |  0x1aa7 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_iBlockingUseActionInProgress = 0x1aa8; // client::CSPlayerBlockingUseAction_t m_iBlockingUseActionInProgress; |  Schema_DeclaredEnum | Size: 0x4
				constexpr std::ptrdiff_t m_flEmitSoundTime = 0x1aac; // entity2::GameTime_t m_flEmitSoundTime; |  Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_bInNoDefuseArea = 0x1ab0; // bool m_bInNoDefuseArea; |  0x1ab0 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_iBombSiteIndex = 0x1ab4; // GlobalTypes::CEntityIndex m_iBombSiteIndex; |  Schema_Atomic | Size: 0x4
				constexpr std::ptrdiff_t m_nWhichBombZone = 0x1ab8; // int32_t m_nWhichBombZone; |  0x1ab8 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bInBombZoneTrigger = 0x1abc; // bool m_bInBombZoneTrigger; |  0x1abc | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bWasInBombZoneTrigger = 0x1abd; // bool m_bWasInBombZoneTrigger; |  0x1abd | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_iShotsFired = 0x1ac0; // int32_t m_iShotsFired; |  0x1ac0 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flFlinchStack = 0x1ac4; // float32 m_flFlinchStack; |  0x1ac4 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flVelocityModifier = 0x1ac8; // float32 m_flVelocityModifier; |  0x1ac8 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flHitHeading = 0x1acc; // float32 m_flHitHeading; |  0x1acc | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_nHitBodyPart = 0x1ad0; // int32_t m_nHitBodyPart; |  0x1ad0 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_vecTotalBulletForce = 0x1ad4; // GlobalTypes::Vector m_vecTotalBulletForce; |  Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_bWaitForNoAttack = 0x1ae0; // bool m_bWaitForNoAttack; |  0x1ae0 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_ignoreLadderJumpTime = 0x1ae4; // float32 m_ignoreLadderJumpTime; |  0x1ae4 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bKilledByHeadshot = 0x1ae8; // bool m_bKilledByHeadshot; |  0x1ae8 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_LastHitBox = 0x1aec; // int32_t m_LastHitBox; |  0x1aec | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_LastHealth = 0x1af0; // int32_t m_LastHealth; |  0x1af0 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_pBot = 0x1af8; // server::CCSBot* m_pBot; |  Schema_Ptr | Size: 0x8
				constexpr std::ptrdiff_t m_bBotAllowActive = 0x1b00; // bool m_bBotAllowActive; |  0x1b00 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_thirdPersonHeading = 0x1b04; // GlobalTypes::QAngle m_thirdPersonHeading; |  Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_flSlopeDropOffset = 0x1b10; // float32 m_flSlopeDropOffset; |  0x1b10 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flSlopeDropHeight = 0x1b14; // float32 m_flSlopeDropHeight; |  0x1b14 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_vHeadConstraintOffset = 0x1b18; // GlobalTypes::Vector m_vHeadConstraintOffset; |  Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_nLastPickupPriority = 0x1b24; // int32_t m_nLastPickupPriority; |  0x1b24 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flLastPickupPriorityTime = 0x1b28; // float32 m_flLastPickupPriorityTime; |  0x1b28 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_ArmorValue = 0x1b2c; // int32_t m_ArmorValue; |  0x1b2c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_unCurrentEquipmentValue = 0x1b30; // uint16_t m_unCurrentEquipmentValue; |  0x1b30 | Schema_Builtin | Size: 0x2
				constexpr std::ptrdiff_t m_unRoundStartEquipmentValue = 0x1b32; // uint16_t m_unRoundStartEquipmentValue; |  0x1b32 | Schema_Builtin | Size: 0x2
				constexpr std::ptrdiff_t m_unFreezetimeEndEquipmentValue = 0x1b34; // uint16_t m_unFreezetimeEndEquipmentValue; |  0x1b34 | Schema_Builtin | Size: 0x2
				constexpr std::ptrdiff_t m_iLastWeaponFireUsercmd = 0x1b38; // int32_t m_iLastWeaponFireUsercmd; |  0x1b38 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bIsSpawning = 0x1b3c; // bool m_bIsSpawning; |  0x1b3c | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_iDeathFlags = 0x1b48; // int32_t m_iDeathFlags; |  0x1b48 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bHasDeathInfo = 0x1b4c; // bool m_bHasDeathInfo; |  0x1b4c | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_flDeathInfoTime = 0x1b50; // float32 m_flDeathInfoTime; |  0x1b50 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_vecDeathInfoOrigin = 0x1b54; // GlobalTypes::Vector m_vecDeathInfoOrigin; |  Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_vecPlayerPatchEconIndices = 0x1b60; // uint32_t m_vecPlayerPatchEconIndices[5]; |  0x1b60 | Schema_FixedArray | Size: 0x14
				constexpr std::ptrdiff_t m_GunGameImmunityColor = 0x1b74; // GlobalTypes::Color m_GunGameImmunityColor; |  Schema_Atomic | Size: 0x4
				constexpr std::ptrdiff_t m_grenadeParameterStashTime = 0x1b78; // entity2::GameTime_t m_grenadeParameterStashTime; |  Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_bGrenadeParametersStashed = 0x1b7c; // bool m_bGrenadeParametersStashed; |  0x1b7c | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_angStashedShootAngles = 0x1b80; // GlobalTypes::QAngle m_angStashedShootAngles; |  Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_vecStashedGrenadeThrowPosition = 0x1b8c; // GlobalTypes::Vector m_vecStashedGrenadeThrowPosition; |  Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_vecStashedVelocity = 0x1b98; // GlobalTypes::Vector m_vecStashedVelocity; |  Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_angShootAngleHistory = 0x1ba4; // GlobalTypes::QAngle m_angShootAngleHistory[2]; |  Schema_FixedArray | Size: 0x18
				constexpr std::ptrdiff_t m_vecThrowPositionHistory = 0x1bbc; // GlobalTypes::Vector m_vecThrowPositionHistory[2]; |  Schema_FixedArray | Size: 0x18
				constexpr std::ptrdiff_t m_vecVelocityHistory = 0x1bd4; // GlobalTypes::Vector m_vecVelocityHistory[2]; |  Schema_FixedArray | Size: 0x18
				constexpr std::ptrdiff_t m_PredictedDamageTags = 0x1bf0; // server::CUtlVectorEmbeddedNetworkVar< server::PredictedDamageTag_t > m_PredictedDamageTags; |  Schema_Atomic | Size: 0x68
				constexpr std::ptrdiff_t m_nHighestAppliedDamageTagTick = 0x1c58; // int32_t m_nHighestAppliedDamageTagTick; |  0x1c58 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bCommittingSuicideOnTeamChange = 0x1c5c; // bool m_bCommittingSuicideOnTeamChange; |  0x1c5c | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_wasNotKilledNaturally = 0x1c5d; // bool m_wasNotKilledNaturally; |  0x1c5d | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_fImmuneToGunGameDamageTime = 0x1c60; // entity2::GameTime_t m_fImmuneToGunGameDamageTime; |  Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_bGunGameImmunity = 0x1c64; // bool m_bGunGameImmunity; |  0x1c64 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_fMolotovDamageTime = 0x1c68; // float32 m_fMolotovDamageTime; |  0x1c68 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_angEyeAngles = 0x1c6c; // GlobalTypes::QAngle m_angEyeAngles; |  Schema_Atomic | Size: 0xc
			}
		}
	}
}
