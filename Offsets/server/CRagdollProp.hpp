// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <cstddef>

namespace CS2 {
	namespace SchemaOffsets {
		namespace server {
			// Class size: 0xBE0
			namespace CRagdollProp /*: public CS2::server::CBaseAnimGraph*/ {
				constexpr std::ptrdiff_t m_ragdoll = 0xaa0; // client::ragdoll_t m_ragdoll; |  Schema_DeclaredClass | Size: 0x50
				constexpr std::ptrdiff_t m_bStartDisabled = 0xaf0; // bool m_bStartDisabled; |  0xaf0 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_ragEnabled = 0xaf8; // GlobalTypes::CNetworkUtlVectorBase< bool > m_ragEnabled; |  Schema_Atomic | Size: 0x18
				constexpr std::ptrdiff_t m_ragPos = 0xb10; // GlobalTypes::CNetworkUtlGlobalTypes::VectorBase< Vector > m_ragPos; |  Schema_Atomic | Size: 0x18
				constexpr std::ptrdiff_t m_ragAngles = 0xb28; // GlobalTypes::CNetworkUtlVectorBase< GlobalTypes::QAngle > m_ragAngles; |  Schema_Atomic | Size: 0x18
				constexpr std::ptrdiff_t m_lastUpdateTickCount = 0xb40; // uint32_t m_lastUpdateTickCount; |  0xb40 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_allAsleep = 0xb44; // bool m_allAsleep; |  0xb44 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bFirstCollisionAfterLaunch = 0xb45; // bool m_bFirstCollisionAfterLaunch; |  0xb45 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_hDamageEntity = 0xb48; // server::CHandle< server::CBaseEntity > m_hDamageEntity; |  Schema_Atomic | Size: 0x4
				constexpr std::ptrdiff_t m_hKiller = 0xb4c; // server::CHandle< server::CBaseEntity > m_hKiller; |  Schema_Atomic | Size: 0x4
				constexpr std::ptrdiff_t m_hPhysicsAttacker = 0xb50; // server::CHandle< server::CBasePlayerPawn > m_hPhysicsAttacker; |  Schema_Atomic | Size: 0x4
				constexpr std::ptrdiff_t m_flLastPhysicsInfluenceTime = 0xb54; // entity2::GameTime_t m_flLastPhysicsInfluenceTime; |  Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_flFadeOutStartTime = 0xb58; // entity2::GameTime_t m_flFadeOutStartTime; |  Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_flFadeTime = 0xb5c; // float32 m_flFadeTime; |  0xb5c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_vecLastOrigin = 0xb60; // GlobalTypes::VectorWS m_vecLastOrigin; |  Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_flAwakeTime = 0xb6c; // entity2::GameTime_t m_flAwakeTime; |  Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_flLastOriginChangeTime = 0xb70; // entity2::GameTime_t m_flLastOriginChangeTime; |  Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_strOriginClassName = 0xb78; // GlobalTypes::CUtlSymbolLarge m_strOriginClassName; |  Schema_Atomic | Size: 0x8
				constexpr std::ptrdiff_t m_strSourceClassName = 0xb80; // GlobalTypes::CUtlSymbolLarge m_strSourceClassName; |  Schema_Atomic | Size: 0x8
				constexpr std::ptrdiff_t m_bHasBeenPhysgunned = 0xb88; // bool m_bHasBeenPhysgunned; |  0xb88 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bAllowStretch = 0xb89; // bool m_bAllowStretch; |  0xb89 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_flBlendWeight = 0xb8c; // float32 m_flBlendWeight; |  0xb8c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flDefaultFadeScale = 0xb90; // float32 m_flDefaultFadeScale; |  0xb90 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_ragdollMins = 0xb98; // GlobalTypes::CUtlGlobalTypes::Vector< Vector > m_ragdollMins; |  Schema_Atomic | Size: 0x18
				constexpr std::ptrdiff_t m_ragdollMaxs = 0xbb0; // GlobalTypes::CUtlGlobalTypes::Vector< Vector > m_ragdollMaxs; |  Schema_Atomic | Size: 0x18
				constexpr std::ptrdiff_t m_bShouldDeleteActivationRecord = 0xbc8; // bool m_bShouldDeleteActivationRecord; |  0xbc8 | Schema_Builtin | Size: 0x1
			}
		}
	}
}
