// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <cstddef>

namespace CS2 {
	namespace SchemaOffsets {
		namespace server {
			// Class size: 0x3290
			namespace CChicken /*: public CS2::server::CDynamicProp*/ {
				constexpr std::ptrdiff_t m_AttributeManager = 0xd60; // server::CAttributeContainer m_AttributeManager; |  Schema_DeclaredClass | Size: 0x2f8
				constexpr std::ptrdiff_t m_updateTimer = 0x1058; // server::CountdownTimer m_updateTimer; |  Schema_DeclaredClass | Size: 0x18
				constexpr std::ptrdiff_t m_stuckAnchor = 0x1070; // GlobalTypes::Vector m_stuckAnchor; |  Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_stuckTimer = 0x1080; // server::CountdownTimer m_stuckTimer; |  Schema_DeclaredClass | Size: 0x18
				constexpr std::ptrdiff_t m_collisionStuckTimer = 0x1098; // server::CountdownTimer m_collisionStuckTimer; |  Schema_DeclaredClass | Size: 0x18
				constexpr std::ptrdiff_t m_isOnGround = 0x10b0; // bool m_isOnGround; |  0x10b0 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_vFallVelocity = 0x10b4; // GlobalTypes::Vector m_vFallVelocity; |  Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_desiredActivity = 0x10c0; // server::ChickenActivity m_desiredActivity; |  Schema_DeclaredEnum | Size: 0x4
				constexpr std::ptrdiff_t m_currentActivity = 0x10c4; // server::ChickenActivity m_currentActivity; |  Schema_DeclaredEnum | Size: 0x4
				constexpr std::ptrdiff_t m_activityTimer = 0x10c8; // server::CountdownTimer m_activityTimer; |  Schema_DeclaredClass | Size: 0x18
				constexpr std::ptrdiff_t m_turnRate = 0x10e0; // float32 m_turnRate; |  0x10e0 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_fleeFrom = 0x10e4; // server::CHandle< server::CBaseEntity > m_fleeFrom; |  Schema_Atomic | Size: 0x4
				constexpr std::ptrdiff_t m_moveRateThrottleTimer = 0x10e8; // server::CountdownTimer m_moveRateThrottleTimer; |  Schema_DeclaredClass | Size: 0x18
				constexpr std::ptrdiff_t m_startleTimer = 0x1100; // server::CountdownTimer m_startleTimer; |  Schema_DeclaredClass | Size: 0x18
				constexpr std::ptrdiff_t m_vocalizeTimer = 0x1118; // server::CountdownTimer m_vocalizeTimer; |  Schema_DeclaredClass | Size: 0x18
				constexpr std::ptrdiff_t m_flWhenZombified = 0x1130; // entity2::GameTime_t m_flWhenZombified; |  Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_jumpedThisFrame = 0x1134; // bool m_jumpedThisFrame; |  0x1134 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_leader = 0x1138; // server::CHandle< server::CCSPlayerPawn > m_leader; |  Schema_Atomic | Size: 0x4
				constexpr std::ptrdiff_t m_reuseTimer = 0x1150; // server::CountdownTimer m_reuseTimer; |  Schema_DeclaredClass | Size: 0x18
				constexpr std::ptrdiff_t m_hasBeenUsed = 0x1168; // bool m_hasBeenUsed; |  0x1168 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_jumpTimer = 0x1170; // server::CountdownTimer m_jumpTimer; |  Schema_DeclaredClass | Size: 0x18
				constexpr std::ptrdiff_t m_flLastJumpTime = 0x1188; // float32 m_flLastJumpTime; |  0x1188 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bInJump = 0x118c; // bool m_bInJump; |  0x118c | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_repathTimer = 0x3198; // server::CountdownTimer m_repathTimer; |  Schema_DeclaredClass | Size: 0x18
				constexpr std::ptrdiff_t m_vecPathGoal = 0x3230; // GlobalTypes::Vector m_vecPathGoal; |  Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_flActiveFollowStartTime = 0x323c; // entity2::GameTime_t m_flActiveFollowStartTime; |  Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_followMinuteTimer = 0x3240; // server::CountdownTimer m_followMinuteTimer; |  Schema_DeclaredClass | Size: 0x18
				constexpr std::ptrdiff_t m_BlockDirectionTimer = 0x3260; // server::CountdownTimer m_BlockDirectionTimer; |  Schema_DeclaredClass | Size: 0x18
			}
		}
	}
}
