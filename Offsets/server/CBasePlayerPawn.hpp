// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <cstddef>

namespace CS2 {
	namespace SchemaOffsets {
		namespace server {
			// Class size: 0xD90
			namespace CBasePlayerPawn /*: public CS2::server::CBaseCombatCharacter*/ {
				constexpr std::ptrdiff_t m_pWeaponServices = 0xbe0; // server::CPlayer_WeaponServices**  | Schema_Ptr | Size: 0x8
				constexpr std::ptrdiff_t m_pItemServices = 0xbe8; // server::CPlayer_ItemServices**  | Schema_Ptr | Size: 0x8
				constexpr std::ptrdiff_t m_pAutoaimServices = 0xbf0; // server::CPlayer_AutoaimServices**  | Schema_Ptr | Size: 0x8
				constexpr std::ptrdiff_t m_pObserverServices = 0xbf8; // server::CPlayer_ObserverServices**  | Schema_Ptr | Size: 0x8
				constexpr std::ptrdiff_t m_pWaterServices = 0xc00; // server::CPlayer_WaterServices**  | Schema_Ptr | Size: 0x8
				constexpr std::ptrdiff_t m_pUseServices = 0xc08; // server::CPlayer_UseServices**  | Schema_Ptr | Size: 0x8
				constexpr std::ptrdiff_t m_pFlashlightServices = 0xc10; // server::CPlayer_FlashlightServices**  | Schema_Ptr | Size: 0x8
				constexpr std::ptrdiff_t m_pCameraServices = 0xc18; // server::CPlayer_CameraServices**  | Schema_Ptr | Size: 0x8
				constexpr std::ptrdiff_t m_pMovementServices = 0xc20; // server::CPlayer_MovementServices**  | Schema_Ptr | Size: 0x8
				constexpr std::ptrdiff_t m_ServerViewAngleChanges = 0xc30; // server::CUtlVectorEmbeddedNetworkVar<server::ViewAngleServerChange_t>  | Schema_Atomic | Size: 0x68
				constexpr std::ptrdiff_t v_angle = 0xc98; // GlobalTypes::QAngle  | Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t v_anglePrevious = 0xca4; // GlobalTypes::QAngle  | Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_iHideHUD = 0xcb0; // uint32_t m_iHideHUD; |  0xcb0 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_skybox3d = 0xcb8; // server::sky3dparams_t  | Schema_DeclaredClass | Size: 0x90
				constexpr std::ptrdiff_t m_fTimeLastHurt = 0xd48; // entity2::GameTime_t  | Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_flDeathTime = 0xd4c; // entity2::GameTime_t  | Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_fNextSuicideTime = 0xd50; // entity2::GameTime_t  | Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_fInitHUD = 0xd54; // bool m_fInitHUD; |  0xd54 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_pExpresser = 0xd58; // server::CAI_Expresser**  | Schema_Ptr | Size: 0x8
				constexpr std::ptrdiff_t m_hController = 0xd60; // GlobalTypes::CHandle<server::CBasePlayerController>  | Schema_Atomic | Size: 0x4
				constexpr std::ptrdiff_t m_hDefaultController = 0xd64; // GlobalTypes::CHandle<server::CBasePlayerController>  | Schema_Atomic | Size: 0x4
				constexpr std::ptrdiff_t m_fHltvReplayDelay = 0xd6c; // float32 m_fHltvReplayDelay; |  0xd6c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_fHltvReplayEnd = 0xd70; // float32 m_fHltvReplayEnd; |  0xd70 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_iHltvReplayEntity = 0xd74; // GlobalTypes::CEntityIndex  | Schema_Atomic | Size: 0x4
				constexpr std::ptrdiff_t m_sndOpvarLatchData = 0xd78; // GlobalTypes::CUtlVector<client::sndopvarlatchdata_t>  | Schema_Atomic | Size: 0x18
			}
		}
	}
}
