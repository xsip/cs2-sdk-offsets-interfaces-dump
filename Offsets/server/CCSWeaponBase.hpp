// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <cstddef>

namespace CS2 {
	namespace SchemaOffsets {
		namespace server {
			// Class size: 0x11D0
			namespace CCSWeaponBase /*: public CS2::server::CBasePlayerWeapon*/ {
				constexpr std::ptrdiff_t m_bRemoveable = 0xea0; // bool m_bRemoveable; |  0xea0 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bPlayerAmmoStockOnPickup = 0xeb0; // bool m_bPlayerAmmoStockOnPickup; |  0xeb0 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bRequireUseToTouch = 0xeb1; // bool m_bRequireUseToTouch; |  0xeb1 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_iWeaponGameplayAnimState = 0xeb2; // client::WeaponGameplayAnimState  | Schema_DeclaredEnum | Size: 0x2
				constexpr std::ptrdiff_t m_flWeaponGameplayAnimStateTimestamp = 0xeb4; // entity2::GameTime_t  | Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_flInspectCancelCompleteTime = 0xeb8; // entity2::GameTime_t  | Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_bInspectPending = 0xebc; // bool m_bInspectPending; |  0xebc | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bInspectShouldLoop = 0xebd; // bool m_bInspectShouldLoop; |  0xebd | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_nLastEmptySoundCmdNum = 0xee8; // int32_t m_nLastEmptySoundCmdNum; |  0xee8 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bFireOnEmpty = 0xf08; // bool m_bFireOnEmpty; |  0xf08 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_OnPlayerPickup = 0xf10; // entity2::CEntityIOOutput  | Schema_DeclaredClass | Size: 0x28
				constexpr std::ptrdiff_t m_weaponMode = 0xf38; // client::CSWeaponMode  | Schema_DeclaredEnum | Size: 0x4
				constexpr std::ptrdiff_t m_flTurningInaccuracyDelta = 0xf3c; // float32 m_flTurningInaccuracyDelta; |  0xf3c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_vecTurningInaccuracyEyeDirLast = 0xf40; // GlobalTypes::Vector  | Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_flTurningInaccuracy = 0xf4c; // float32 m_flTurningInaccuracy; |  0xf4c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_fAccuracyPenalty = 0xf50; // float32 m_fAccuracyPenalty; |  0xf50 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flLastAccuracyUpdateTime = 0xf54; // entity2::GameTime_t  | Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_fAccuracySmoothedForZoom = 0xf58; // float32 m_fAccuracySmoothedForZoom; |  0xf58 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_iRecoilIndex = 0xf5c; // int32_t m_iRecoilIndex; |  0xf5c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flRecoilIndex = 0xf60; // float32 m_flRecoilIndex; |  0xf60 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bBurstMode = 0xf64; // bool m_bBurstMode; |  0xf64 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_nPostponeFireReadyTicks = 0xf68; // entity2::GameTick_t  | Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_flPostponeFireReadyFrac = 0xf6c; // float32 m_flPostponeFireReadyFrac; |  0xf6c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bInReload = 0xf70; // bool m_bInReload; |  0xf70 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_flDroppedAtTime = 0xf74; // entity2::GameTime_t  | Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_bIsHauledBack = 0xf78; // bool m_bIsHauledBack; |  0xf78 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bSilencerOn = 0xf79; // bool m_bSilencerOn; |  0xf79 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_flTimeSilencerSwitchComplete = 0xf7c; // entity2::GameTime_t  | Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_iOriginalTeamNumber = 0xf80; // int32_t m_iOriginalTeamNumber; |  0xf80 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_iMostRecentTeamNumber = 0xf84; // int32_t m_iMostRecentTeamNumber; |  0xf84 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bDroppedNearBuyZone = 0xf88; // bool m_bDroppedNearBuyZone; |  0xf88 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_flNextAttackRenderTimeOffset = 0xf8c; // float32 m_flNextAttackRenderTimeOffset; |  0xf8c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bCanBePickedUp = 0xfa0; // bool m_bCanBePickedUp; |  0xfa0 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bUseCanOverrideNextOwnerTouchTime = 0xfa1; // bool m_bUseCanOverrideNextOwnerTouchTime; |  0xfa1 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_nextOwnerTouchTime = 0xfa4; // entity2::GameTime_t  | Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_nextPrevOwnerTouchTime = 0xfa8; // entity2::GameTime_t  | Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_nextPrevOwnerUseTime = 0xfb0; // entity2::GameTime_t  | Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_hPrevOwner = 0xfb4; // GlobalTypes::CHandle<server::CCSPlayerPawn>  | Schema_Atomic | Size: 0x4
				constexpr std::ptrdiff_t m_nDropTick = 0xfb8; // entity2::GameTick_t  | Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_bWasActiveWeaponWhenDropped = 0xfbc; // bool m_bWasActiveWeaponWhenDropped; |  0xfbc | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_donated = 0xfdc; // bool m_donated; |  0xfdc | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_fLastShotTime = 0xfe0; // entity2::GameTime_t  | Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_bWasOwnedByCT = 0xfe4; // bool m_bWasOwnedByCT; |  0xfe4 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bWasOwnedByTerrorist = 0xfe5; // bool m_bWasOwnedByTerrorist; |  0xfe5 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_numRemoveUnownedWeaponThink = 0xfe8; // int32_t m_numRemoveUnownedWeaponThink; |  0xfe8 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_IronSightController = 0xff0; // server::CIronSightController  | Schema_DeclaredClass | Size: 0x18
				constexpr std::ptrdiff_t m_iIronSightMode = 0x1008; // int32_t m_iIronSightMode; |  0x1008 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flLastLOSTraceFailureTime = 0x100c; // entity2::GameTime_t  | Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_flWatTickOffset = 0x1010; // float32 m_flWatTickOffset; |  0x1010 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flLastShakeTime = 0x1020; // entity2::GameTime_t  | Schema_DeclaredClass | Size: 0x4
			}
		}
	}
}
