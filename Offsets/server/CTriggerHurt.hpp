// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <cstddef>

namespace CS2 {
	namespace SchemaOffsets {
		namespace server {
			// Class size: 0xA48
			namespace CTriggerHurt /*: public CS2::server::CBaseTrigger*/ {
				constexpr std::ptrdiff_t m_flOriginalDamage = 0x9a8; // float32 m_flOriginalDamage; |  0x9a8 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flDamage = 0x9ac; // float32 m_flDamage; |  0x9ac | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flDamageCap = 0x9b0; // float32 m_flDamageCap; |  0x9b0 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flLastDmgTime = 0x9b4; // entity2::GameTime_t  | Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_flForgivenessDelay = 0x9b8; // float32 m_flForgivenessDelay; |  0x9b8 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bitsDamageInflict = 0x9bc; // client::DamageTypes_t  | Schema_DeclaredEnum | Size: 0x4
				constexpr std::ptrdiff_t m_damageModel = 0x9c0; // int32_t m_damageModel; |  0x9c0 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bNoDmgForce = 0x9c4; // bool m_bNoDmgForce; |  0x9c4 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_vDamageForce = 0x9c8; // GlobalTypes::Vector  | Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_thinkAlways = 0x9d4; // bool m_thinkAlways; |  0x9d4 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_hurtThinkPeriod = 0x9d8; // float32 m_hurtThinkPeriod; |  0x9d8 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_OnHurt = 0x9e0; // entity2::CEntityIOOutput  | Schema_DeclaredClass | Size: 0x28
				constexpr std::ptrdiff_t m_OnHurtPlayer = 0xa08; // entity2::CEntityIOOutput  | Schema_DeclaredClass | Size: 0x28
				constexpr std::ptrdiff_t m_hurtEntities = 0xa30; // server::CUtlVector<GlobalTypes::CHandle<server::CBaseEntity>>  | Schema_Atomic | Size: 0x18
			}
		}
	}
}
