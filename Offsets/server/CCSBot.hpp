// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <cstddef>

namespace CS2 {
	namespace SchemaOffsets {
		namespace server {
			// Class size: 0x6D50
			namespace CCSBot /*: public CS2::server::CBot*/ {
				constexpr std::ptrdiff_t m_eyePosition = 0x108; // GlobalTypes::VectorWS  | Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_name = 0x114; // char m_name[64]; |  0x114 | Schema_FixedArray | Size: 0x40
				constexpr std::ptrdiff_t m_combatRange = 0x154; // float32 m_combatRange; |  0x154 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_isRogue = 0x158; // bool m_isRogue; |  0x158 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_rogueTimer = 0x160; // server::CountdownTimer  | Schema_DeclaredClass | Size: 0x18
				constexpr std::ptrdiff_t m_diedLastRound = 0x17c; // bool m_diedLastRound; |  0x17c | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_safeTime = 0x180; // float32 m_safeTime; |  0x180 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_wasSafe = 0x184; // bool m_wasSafe; |  0x184 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_blindFire = 0x18c; // bool m_blindFire; |  0x18c | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_surpriseTimer = 0x190; // server::CountdownTimer  | Schema_DeclaredClass | Size: 0x18
				constexpr std::ptrdiff_t m_bAllowActive = 0x1a8; // bool m_bAllowActive; |  0x1a8 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_isFollowing = 0x1a9; // bool m_isFollowing; |  0x1a9 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_leader = 0x1ac; // GlobalTypes::CHandle<server::CCSPlayerPawn>  | Schema_Atomic | Size: 0x4
				constexpr std::ptrdiff_t m_followTimestamp = 0x1b0; // float32 m_followTimestamp; |  0x1b0 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_allowAutoFollowTime = 0x1b4; // float32 m_allowAutoFollowTime; |  0x1b4 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_hurryTimer = 0x1b8; // server::CountdownTimer  | Schema_DeclaredClass | Size: 0x18
				constexpr std::ptrdiff_t m_alertTimer = 0x1d0; // server::CountdownTimer  | Schema_DeclaredClass | Size: 0x18
				constexpr std::ptrdiff_t m_sneakTimer = 0x1e8; // server::CountdownTimer  | Schema_DeclaredClass | Size: 0x18
				constexpr std::ptrdiff_t m_panicTimer = 0x200; // server::CountdownTimer  | Schema_DeclaredClass | Size: 0x18
				constexpr std::ptrdiff_t m_stateTimestamp = 0x4d0; // float32 m_stateTimestamp; |  0x4d0 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_isAttacking = 0x4d4; // bool m_isAttacking; |  0x4d4 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_isOpeningDoor = 0x4d5; // bool m_isOpeningDoor; |  0x4d5 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_taskEntity = 0x4dc; // GlobalTypes::CHandle<server::CBaseEntity>  | Schema_Atomic | Size: 0x4
				constexpr std::ptrdiff_t m_goalPosition = 0x4ec; // GlobalTypes::VectorWS  | Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_goalEntity = 0x4f8; // GlobalTypes::CHandle<server::CBaseEntity>  | Schema_Atomic | Size: 0x4
				constexpr std::ptrdiff_t m_avoid = 0x4fc; // GlobalTypes::CHandle<server::CBaseEntity>  | Schema_Atomic | Size: 0x4
				constexpr std::ptrdiff_t m_avoidTimestamp = 0x500; // float32 m_avoidTimestamp; |  0x500 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_isStopping = 0x504; // bool m_isStopping; |  0x504 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_hasVisitedEnemySpawn = 0x505; // bool m_hasVisitedEnemySpawn; |  0x505 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_stillTimer = 0x508; // server::IntervalTimer  | Schema_DeclaredClass | Size: 0x10
				constexpr std::ptrdiff_t m_bEyeAnglesUnderPathFinderControl = 0x518; // bool m_bEyeAnglesUnderPathFinderControl; |  0x518 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_pathIndex = 0x5e18; // int32_t m_pathIndex; |  0x5e18 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_areaEnteredTimestamp = 0x5e1c; // entity2::GameTime_t  | Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_repathTimer = 0x5e20; // server::CountdownTimer  | Schema_DeclaredClass | Size: 0x18
				constexpr std::ptrdiff_t m_avoidFriendTimer = 0x5e38; // server::CountdownTimer  | Schema_DeclaredClass | Size: 0x18
				constexpr std::ptrdiff_t m_isFriendInTheWay = 0x5e50; // bool m_isFriendInTheWay; |  0x5e50 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_politeTimer = 0x5e58; // server::CountdownTimer  | Schema_DeclaredClass | Size: 0x18
				constexpr std::ptrdiff_t m_isWaitingBehindFriend = 0x5e70; // bool m_isWaitingBehindFriend; |  0x5e70 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_pathLadderEnd = 0x5e9c; // float32 m_pathLadderEnd; |  0x5e9c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_mustRunTimer = 0x5ee8; // server::CountdownTimer  | Schema_DeclaredClass | Size: 0x18
				constexpr std::ptrdiff_t m_waitTimer = 0x5f00; // server::CountdownTimer  | Schema_DeclaredClass | Size: 0x18
				constexpr std::ptrdiff_t m_updateTravelDistanceTimer = 0x5f18; // server::CountdownTimer  | Schema_DeclaredClass | Size: 0x18
				constexpr std::ptrdiff_t m_playerTravelDistance = 0x5f30; // float32 m_playerTravelDistance[64]; |  0x5f30 | Schema_FixedArray | Size: 0x100
				constexpr std::ptrdiff_t m_travelDistancePhase = 0x6030; // uint8_t m_travelDistancePhase; |  0x6030 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_hostageEscortCount = 0x61c8; // uint8_t m_hostageEscortCount; |  0x61c8 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_hostageEscortCountTimestamp = 0x61cc; // float32 m_hostageEscortCountTimestamp; |  0x61cc | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_desiredTeam = 0x61d0; // int32_t m_desiredTeam; |  0x61d0 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_hasJoined = 0x61d4; // bool m_hasJoined; |  0x61d4 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_isWaitingForHostage = 0x61d5; // bool m_isWaitingForHostage; |  0x61d5 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_inhibitWaitingForHostageTimer = 0x61d8; // server::CountdownTimer  | Schema_DeclaredClass | Size: 0x18
				constexpr std::ptrdiff_t m_waitForHostageTimer = 0x61f0; // server::CountdownTimer  | Schema_DeclaredClass | Size: 0x18
				constexpr std::ptrdiff_t m_noisePosition = 0x6208; // GlobalTypes::Vector  | Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_noiseTravelDistance = 0x6214; // float32 m_noiseTravelDistance; |  0x6214 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_noiseTimestamp = 0x6218; // float32 m_noiseTimestamp; |  0x6218 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_noiseSource = 0x6220; // server::CCSPlayerPawn**  | Schema_Ptr | Size: 0x8
				constexpr std::ptrdiff_t m_noiseBendTimer = 0x6238; // server::CountdownTimer  | Schema_DeclaredClass | Size: 0x18
				constexpr std::ptrdiff_t m_bentNoisePosition = 0x6250; // GlobalTypes::Vector  | Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_bendNoisePositionValid = 0x625c; // bool m_bendNoisePositionValid; |  0x625c | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_lookAroundStateTimestamp = 0x6260; // float32 m_lookAroundStateTimestamp; |  0x6260 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_lookAheadAngle = 0x6264; // float32 m_lookAheadAngle; |  0x6264 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_forwardAngle = 0x6268; // float32 m_forwardAngle; |  0x6268 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_inhibitLookAroundTimestamp = 0x626c; // float32 m_inhibitLookAroundTimestamp; |  0x626c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_lookAtSpot = 0x6274; // GlobalTypes::Vector  | Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_lookAtSpotDuration = 0x6284; // float32 m_lookAtSpotDuration; |  0x6284 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_lookAtSpotTimestamp = 0x6288; // float32 m_lookAtSpotTimestamp; |  0x6288 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_lookAtSpotAngleTolerance = 0x628c; // float32 m_lookAtSpotAngleTolerance; |  0x628c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_lookAtSpotClearIfClose = 0x6290; // bool m_lookAtSpotClearIfClose; |  0x6290 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_lookAtSpotAttack = 0x6291; // bool m_lookAtSpotAttack; |  0x6291 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_lookAtDesc = 0x6298; // char* m_lookAtDesc; |  0x6298 | Schema_Ptr | Size: 0x8
				constexpr std::ptrdiff_t m_peripheralTimestamp = 0x62a0; // float32 m_peripheralTimestamp; |  0x62a0 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_approachPointCount = 0x6428; // uint8_t m_approachPointCount; |  0x6428 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_approachPointViewPosition = 0x642c; // GlobalTypes::Vector  | Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_viewSteadyTimer = 0x6438; // server::IntervalTimer  | Schema_DeclaredClass | Size: 0x10
				constexpr std::ptrdiff_t m_tossGrenadeTimer = 0x6450; // server::CountdownTimer  | Schema_DeclaredClass | Size: 0x18
				constexpr std::ptrdiff_t m_isAvoidingGrenade = 0x6470; // server::CountdownTimer  | Schema_DeclaredClass | Size: 0x18
				constexpr std::ptrdiff_t m_spotCheckTimestamp = 0x6490; // float32 m_spotCheckTimestamp; |  0x6490 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_checkedHidingSpotCount = 0x6898; // int32_t m_checkedHidingSpotCount; |  0x6898 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_lookPitch = 0x689c; // float32 m_lookPitch; |  0x689c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_lookPitchVel = 0x68a0; // float32 m_lookPitchVel; |  0x68a0 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_lookYaw = 0x68a4; // float32 m_lookYaw; |  0x68a4 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_lookYawVel = 0x68a8; // float32 m_lookYawVel; |  0x68a8 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_targetSpot = 0x68ac; // GlobalTypes::Vector  | Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_targetSpotVelocity = 0x68b8; // GlobalTypes::Vector  | Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_targetSpotPredicted = 0x68c4; // GlobalTypes::Vector  | Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_aimError = 0x68d0; // GlobalTypes::QAngle  | Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_aimGoal = 0x68dc; // GlobalTypes::QAngle  | Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_targetSpotTime = 0x68e8; // entity2::GameTime_t  | Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_aimFocus = 0x68ec; // float32 m_aimFocus; |  0x68ec | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_aimFocusInterval = 0x68f0; // float32 m_aimFocusInterval; |  0x68f0 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_aimFocusNextUpdate = 0x68f4; // entity2::GameTime_t  | Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_ignoreEnemiesTimer = 0x6900; // server::CountdownTimer  | Schema_DeclaredClass | Size: 0x18
				constexpr std::ptrdiff_t m_enemy = 0x6918; // GlobalTypes::CHandle<server::CCSPlayerPawn>  | Schema_Atomic | Size: 0x4
				constexpr std::ptrdiff_t m_isEnemyVisible = 0x691c; // bool m_isEnemyVisible; |  0x691c | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_visibleEnemyParts = 0x691d; // uint8_t m_visibleEnemyParts; |  0x691d | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_lastEnemyPosition = 0x6920; // GlobalTypes::Vector  | Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_lastSawEnemyTimestamp = 0x692c; // float32 m_lastSawEnemyTimestamp; |  0x692c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_firstSawEnemyTimestamp = 0x6930; // float32 m_firstSawEnemyTimestamp; |  0x6930 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_currentEnemyAcquireTimestamp = 0x6934; // float32 m_currentEnemyAcquireTimestamp; |  0x6934 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_enemyDeathTimestamp = 0x6938; // float32 m_enemyDeathTimestamp; |  0x6938 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_friendDeathTimestamp = 0x693c; // float32 m_friendDeathTimestamp; |  0x693c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_isLastEnemyDead = 0x6940; // bool m_isLastEnemyDead; |  0x6940 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_nearbyEnemyCount = 0x6944; // int32_t m_nearbyEnemyCount; |  0x6944 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bomber = 0x6b50; // GlobalTypes::CHandle<server::CCSPlayerPawn>  | Schema_Atomic | Size: 0x4
				constexpr std::ptrdiff_t m_nearbyFriendCount = 0x6b54; // int32_t m_nearbyFriendCount; |  0x6b54 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_closestVisibleFriend = 0x6b58; // GlobalTypes::CHandle<server::CCSPlayerPawn>  | Schema_Atomic | Size: 0x4
				constexpr std::ptrdiff_t m_closestVisibleHumanFriend = 0x6b5c; // GlobalTypes::CHandle<server::CCSPlayerPawn>  | Schema_Atomic | Size: 0x4
				constexpr std::ptrdiff_t m_attentionInterval = 0x6b60; // server::IntervalTimer  | Schema_DeclaredClass | Size: 0x10
				constexpr std::ptrdiff_t m_attacker = 0x6b70; // GlobalTypes::CHandle<server::CCSPlayerPawn>  | Schema_Atomic | Size: 0x4
				constexpr std::ptrdiff_t m_attackedTimestamp = 0x6b74; // float32 m_attackedTimestamp; |  0x6b74 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_burnedByFlamesTimer = 0x6b78; // server::IntervalTimer  | Schema_DeclaredClass | Size: 0x10
				constexpr std::ptrdiff_t m_lastVictimID = 0x6b88; // int32_t m_lastVictimID; |  0x6b88 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_isAimingAtEnemy = 0x6b8c; // bool m_isAimingAtEnemy; |  0x6b8c | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_isRapidFiring = 0x6b8d; // bool m_isRapidFiring; |  0x6b8d | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_equipTimer = 0x6b90; // server::IntervalTimer  | Schema_DeclaredClass | Size: 0x10
				constexpr std::ptrdiff_t m_zoomTimer = 0x6ba0; // server::CountdownTimer  | Schema_DeclaredClass | Size: 0x18
				constexpr std::ptrdiff_t m_fireWeaponTimestamp = 0x6bb8; // entity2::GameTime_t  | Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_lookForWeaponsOnGroundTimer = 0x6bc0; // server::CountdownTimer  | Schema_DeclaredClass | Size: 0x18
				constexpr std::ptrdiff_t m_bIsSleeping = 0x6bd8; // bool m_bIsSleeping; |  0x6bd8 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_isEnemySniperVisible = 0x6bd9; // bool m_isEnemySniperVisible; |  0x6bd9 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_sawEnemySniperTimer = 0x6be0; // server::CountdownTimer  | Schema_DeclaredClass | Size: 0x18
				constexpr std::ptrdiff_t m_enemyQueueIndex = 0x6c98; // uint8_t m_enemyQueueIndex; |  0x6c98 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_enemyQueueCount = 0x6c99; // uint8_t m_enemyQueueCount; |  0x6c99 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_enemyQueueAttendIndex = 0x6c9a; // uint8_t m_enemyQueueAttendIndex; |  0x6c9a | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_isStuck = 0x6c9b; // bool m_isStuck; |  0x6c9b | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_stuckTimestamp = 0x6c9c; // entity2::GameTime_t  | Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_stuckSpot = 0x6ca0; // GlobalTypes::Vector  | Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_wiggleTimer = 0x6cb0; // server::CountdownTimer  | Schema_DeclaredClass | Size: 0x18
				constexpr std::ptrdiff_t m_stuckJumpTimer = 0x6cc8; // server::CountdownTimer  | Schema_DeclaredClass | Size: 0x18
				constexpr std::ptrdiff_t m_nextCleanupCheckTimestamp = 0x6ce0; // entity2::GameTime_t  | Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_avgVel = 0x6ce4; // float32 m_avgVel[10]; |  0x6ce4 | Schema_FixedArray | Size: 0x28
				constexpr std::ptrdiff_t m_avgVelIndex = 0x6d0c; // int32_t m_avgVelIndex; |  0x6d0c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_avgVelCount = 0x6d10; // int32_t m_avgVelCount; |  0x6d10 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_lastOrigin = 0x6d14; // GlobalTypes::Vector  | Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_lastRadioRecievedTimestamp = 0x6d24; // float32 m_lastRadioRecievedTimestamp; |  0x6d24 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_lastRadioSentTimestamp = 0x6d28; // float32 m_lastRadioSentTimestamp; |  0x6d28 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_radioSubject = 0x6d2c; // GlobalTypes::CHandle<server::CCSPlayerPawn>  | Schema_Atomic | Size: 0x4
				constexpr std::ptrdiff_t m_radioPosition = 0x6d30; // GlobalTypes::Vector  | Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_voiceEndTimestamp = 0x6d3c; // float32 m_voiceEndTimestamp; |  0x6d3c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_lastValidReactionQueueFrame = 0x6d48; // int32_t m_lastValidReactionQueueFrame; |  0x6d48 | Schema_Builtin | Size: 0x4
			}
		}
	}
}
