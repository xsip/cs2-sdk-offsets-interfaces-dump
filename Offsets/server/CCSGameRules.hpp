// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <cstddef>

namespace CS2 {
	namespace SchemaOffsets {
		namespace server {
			// Class size: 0x11430
			namespace CCSGameRules /*: public CS2::server::CTeamplayRules*/ {
				constexpr std::ptrdiff_t m_bFreezePeriod = 0xc8; // bool m_bFreezePeriod; |  0xc8 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bWarmupPeriod = 0xc9; // bool m_bWarmupPeriod; |  0xc9 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_fWarmupPeriodEnd = 0xcc; // entity2::GameTime_t  | Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_fWarmupPeriodStart = 0xd0; // entity2::GameTime_t  | Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_bTerroristTimeOutActive = 0xd4; // bool m_bTerroristTimeOutActive; |  0xd4 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bCTTimeOutActive = 0xd5; // bool m_bCTTimeOutActive; |  0xd5 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_flTerroristTimeOutRemaining = 0xd8; // float32 m_flTerroristTimeOutRemaining; |  0xd8 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flCTTimeOutRemaining = 0xdc; // float32 m_flCTTimeOutRemaining; |  0xdc | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_nTerroristTimeOuts = 0xe0; // int32_t m_nTerroristTimeOuts; |  0xe0 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_nCTTimeOuts = 0xe4; // int32_t m_nCTTimeOuts; |  0xe4 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bTechnicalTimeOut = 0xe8; // bool m_bTechnicalTimeOut; |  0xe8 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bMatchWaitingForResume = 0xe9; // bool m_bMatchWaitingForResume; |  0xe9 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_iFreezeTime = 0xec; // int32_t m_iFreezeTime; |  0xec | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_iRoundTime = 0xf0; // int32_t m_iRoundTime; |  0xf0 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_fMatchStartTime = 0xf4; // float32 m_fMatchStartTime; |  0xf4 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_fRoundStartTime = 0xf8; // entity2::GameTime_t  | Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_flRestartRoundTime = 0xfc; // entity2::GameTime_t  | Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_bGameRestart = 0x100; // bool m_bGameRestart; |  0x100 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_flGameStartTime = 0x104; // float32 m_flGameStartTime; |  0x104 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_timeUntilNextPhaseStarts = 0x108; // float32 m_timeUntilNextPhaseStarts; |  0x108 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_gamePhase = 0x10c; // int32_t m_gamePhase; |  0x10c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_totalRoundsPlayed = 0x110; // int32_t m_totalRoundsPlayed; |  0x110 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_nRoundsPlayedThisPhase = 0x114; // int32_t m_nRoundsPlayedThisPhase; |  0x114 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_nOvertimePlaying = 0x118; // int32_t m_nOvertimePlaying; |  0x118 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_iHostagesRemaining = 0x11c; // int32_t m_iHostagesRemaining; |  0x11c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bAnyHostageReached = 0x120; // bool m_bAnyHostageReached; |  0x120 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bMapHasBombTarget = 0x121; // bool m_bMapHasBombTarget; |  0x121 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bMapHasRescueZone = 0x122; // bool m_bMapHasRescueZone; |  0x122 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bMapHasBuyZone = 0x123; // bool m_bMapHasBuyZone; |  0x123 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bIsQueuedMatchmaking = 0x124; // bool m_bIsQueuedMatchmaking; |  0x124 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_nQueuedMatchmakingMode = 0x128; // int32_t m_nQueuedMatchmakingMode; |  0x128 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bIsValveDS = 0x12c; // bool m_bIsValveDS; |  0x12c | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bLogoMap = 0x12d; // bool m_bLogoMap; |  0x12d | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bPlayAllStepSoundsOnServer = 0x12e; // bool m_bPlayAllStepSoundsOnServer; |  0x12e | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_iSpectatorSlotCount = 0x130; // int32_t m_iSpectatorSlotCount; |  0x130 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_MatchDevice = 0x134; // int32_t m_MatchDevice; |  0x134 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bHasMatchStarted = 0x138; // bool m_bHasMatchStarted; |  0x138 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_nNextMapInMapgroup = 0x13c; // int32_t m_nNextMapInMapgroup; |  0x13c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_szTournamentEventName = 0x140; // char m_szTournamentEventName[512]; |  0x140 | Schema_FixedArray | Size: 0x200
				constexpr std::ptrdiff_t m_szTournamentEventStage = 0x340; // char m_szTournamentEventStage[512]; |  0x340 | Schema_FixedArray | Size: 0x200
				constexpr std::ptrdiff_t m_szMatchStatTxt = 0x540; // char m_szMatchStatTxt[512]; |  0x540 | Schema_FixedArray | Size: 0x200
				constexpr std::ptrdiff_t m_szTournamentPredictionsTxt = 0x740; // char m_szTournamentPredictionsTxt[512]; |  0x740 | Schema_FixedArray | Size: 0x200
				constexpr std::ptrdiff_t m_nTournamentPredictionsPct = 0x940; // int32_t m_nTournamentPredictionsPct; |  0x940 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flCMMItemDropRevealStartTime = 0x944; // entity2::GameTime_t  | Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_flCMMItemDropRevealEndTime = 0x948; // entity2::GameTime_t  | Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_bIsDroppingItems = 0x94c; // bool m_bIsDroppingItems; |  0x94c | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bIsQuestEligible = 0x94d; // bool m_bIsQuestEligible; |  0x94d | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bIsHltvActive = 0x94e; // bool m_bIsHltvActive; |  0x94e | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_arrProhibitedItemIndices = 0x950; // uint16_t m_arrProhibitedItemIndices[100]; |  0x950 | Schema_FixedArray | Size: 0xc8
				constexpr std::ptrdiff_t m_arrTournamentActiveCasterAccounts = 0xa18; // uint32_t m_arrTournamentActiveCasterAccounts[4]; |  0xa18 | Schema_FixedArray | Size: 0x10
				constexpr std::ptrdiff_t m_numBestOfMaps = 0xa28; // int32_t m_numBestOfMaps; |  0xa28 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_nHalloweenMaskListSeed = 0xa2c; // int32_t m_nHalloweenMaskListSeed; |  0xa2c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bBombDropped = 0xa30; // bool m_bBombDropped; |  0xa30 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bBombPlanted = 0xa31; // bool m_bBombPlanted; |  0xa31 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_iRoundWinStatus = 0xa34; // int32_t m_iRoundWinStatus; |  0xa34 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_eRoundWinReason = 0xa38; // int32_t m_eRoundWinReason; |  0xa38 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bTCantBuy = 0xa3c; // bool m_bTCantBuy; |  0xa3c | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bCTCantBuy = 0xa3d; // bool m_bCTCantBuy; |  0xa3d | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_iMatchStats_RoundResults = 0xa40; // int32_t m_iMatchStats_RoundResults[30]; |  0xa40 | Schema_FixedArray | Size: 0x78
				constexpr std::ptrdiff_t m_iMatchStats_PlayersAlive_CT = 0xab8; // int32_t m_iMatchStats_PlayersAlive_CT[30]; |  0xab8 | Schema_FixedArray | Size: 0x78
				constexpr std::ptrdiff_t m_iMatchStats_PlayersAlive_T = 0xb30; // int32_t m_iMatchStats_PlayersAlive_T[30]; |  0xb30 | Schema_FixedArray | Size: 0x78
				constexpr std::ptrdiff_t m_TeamRespawnWaveTimes = 0xba8; // float32 m_TeamRespawnWaveTimes[32]; |  0xba8 | Schema_FixedArray | Size: 0x80
				constexpr std::ptrdiff_t m_flNextRespawnWave = 0xc28; // GlobalTypes::GameTime_t[32]  | Schema_FixedArray | Size: 0x1000
				constexpr std::ptrdiff_t m_vMinimapMins = 0xca8; // GlobalTypes::Vector  | Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_vMinimapMaxs = 0xcb4; // GlobalTypes::Vector  | Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_MinimapVerticalSectionHeights = 0xcc0; // float32 m_MinimapVerticalSectionHeights[8]; |  0xcc0 | Schema_FixedArray | Size: 0x20
				constexpr std::ptrdiff_t m_ullLocalMatchID = 0xce0; // uint64_t m_ullLocalMatchID; |  0xce0 | Schema_Builtin | Size: 0x8
				constexpr std::ptrdiff_t m_nEndMatchMapGroupVoteTypes = 0xce8; // int32_t m_nEndMatchMapGroupVoteTypes[10]; |  0xce8 | Schema_FixedArray | Size: 0x28
				constexpr std::ptrdiff_t m_nEndMatchMapGroupVoteOptions = 0xd10; // int32_t m_nEndMatchMapGroupVoteOptions[10]; |  0xd10 | Schema_FixedArray | Size: 0x28
				constexpr std::ptrdiff_t m_nEndMatchMapVoteWinner = 0xd38; // int32_t m_nEndMatchMapVoteWinner; |  0xd38 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_iNumConsecutiveCTLoses = 0xd3c; // int32_t m_iNumConsecutiveCTLoses; |  0xd3c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_iNumConsecutiveTerroristLoses = 0xd40; // int32_t m_iNumConsecutiveTerroristLoses; |  0xd40 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bHasHostageBeenTouched = 0xd60; // bool m_bHasHostageBeenTouched; |  0xd60 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_flIntermissionStartTime = 0xd64; // entity2::GameTime_t  | Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_flIntermissionEndTime = 0xd68; // entity2::GameTime_t  | Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_bLevelInitialized = 0xd6c; // bool m_bLevelInitialized; |  0xd6c | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_iTotalRoundsPlayed = 0xd70; // int32_t m_iTotalRoundsPlayed; |  0xd70 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_iUnBalancedRounds = 0xd74; // int32_t m_iUnBalancedRounds; |  0xd74 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_endMatchOnRoundReset = 0xd78; // bool m_endMatchOnRoundReset; |  0xd78 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_endMatchOnThink = 0xd79; // bool m_endMatchOnThink; |  0xd79 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_iNumTerrorist = 0xd7c; // int32_t m_iNumTerrorist; |  0xd7c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_iNumCT = 0xd80; // int32_t m_iNumCT; |  0xd80 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_iNumSpawnableTerrorist = 0xd84; // int32_t m_iNumSpawnableTerrorist; |  0xd84 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_iNumSpawnableCT = 0xd88; // int32_t m_iNumSpawnableCT; |  0xd88 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_arrSelectedHostageSpawnIndices = 0xd90; // GlobalTypes::CUtlVector  | Schema_Atomic | Size: 0x18
				constexpr std::ptrdiff_t m_nSpawnPointsRandomSeed = 0xda8; // int32_t m_nSpawnPointsRandomSeed; |  0xda8 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bFirstConnected = 0xdac; // bool m_bFirstConnected; |  0xdac | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bCompleteReset = 0xdad; // bool m_bCompleteReset; |  0xdad | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bPickNewTeamsOnReset = 0xdae; // bool m_bPickNewTeamsOnReset; |  0xdae | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bScrambleTeamsOnRestart = 0xdaf; // bool m_bScrambleTeamsOnRestart; |  0xdaf | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bSwapTeamsOnRestart = 0xdb0; // bool m_bSwapTeamsOnRestart; |  0xdb0 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_nEndMatchTiedVotes = 0xdb8; // GlobalTypes::CUtlVector  | Schema_Atomic | Size: 0x18
				constexpr std::ptrdiff_t m_bNeedToAskPlayersForContinueVote = 0xdd4; // bool m_bNeedToAskPlayersForContinueVote; |  0xdd4 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_numQueuedMatchmakingAccounts = 0xdd8; // uint32_t m_numQueuedMatchmakingAccounts; |  0xdd8 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_fAvgPlayerRank = 0xddc; // float32 m_fAvgPlayerRank; |  0xddc | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_pQueuedMatchmakingReservationString = 0xde0; // char* m_pQueuedMatchmakingReservationString; |  0xde0 | Schema_Ptr | Size: 0x8
				constexpr std::ptrdiff_t m_numTotalTournamentDrops = 0xde8; // uint32_t m_numTotalTournamentDrops; |  0xde8 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_numSpectatorsCountMax = 0xdec; // uint32_t m_numSpectatorsCountMax; |  0xdec | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_numSpectatorsCountMaxTV = 0xdf0; // uint32_t m_numSpectatorsCountMaxTV; |  0xdf0 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_numSpectatorsCountMaxLnk = 0xdf4; // uint32_t m_numSpectatorsCountMaxLnk; |  0xdf4 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_nCTsAliveAtFreezetimeEnd = 0xe00; // int32_t m_nCTsAliveAtFreezetimeEnd; |  0xe00 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_nTerroristsAliveAtFreezetimeEnd = 0xe04; // int32_t m_nTerroristsAliveAtFreezetimeEnd; |  0xe04 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bForceTeamChangeSilent = 0xe08; // bool m_bForceTeamChangeSilent; |  0xe08 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bLoadingRoundBackupData = 0xe09; // bool m_bLoadingRoundBackupData; |  0xe09 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_nMatchInfoShowType = 0xe40; // int32_t m_nMatchInfoShowType; |  0xe40 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flMatchInfoDecidedTime = 0xe44; // float32 m_flMatchInfoDecidedTime; |  0xe44 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t mTeamDMLastWinningTeamNumber = 0xe60; // int32_t mTeamDMLastWinningTeamNumber; |  0xe60 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t mTeamDMLastThinkTime = 0xe64; // float32 mTeamDMLastThinkTime; |  0xe64 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flTeamDMLastAnnouncementTime = 0xe68; // float32 m_flTeamDMLastAnnouncementTime; |  0xe68 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_iAccountTerrorist = 0xe6c; // int32_t m_iAccountTerrorist; |  0xe6c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_iAccountCT = 0xe70; // int32_t m_iAccountCT; |  0xe70 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_iSpawnPointCount_Terrorist = 0xe74; // int32_t m_iSpawnPointCount_Terrorist; |  0xe74 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_iSpawnPointCount_CT = 0xe78; // int32_t m_iSpawnPointCount_CT; |  0xe78 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_iMaxNumTerrorists = 0xe7c; // int32_t m_iMaxNumTerrorists; |  0xe7c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_iMaxNumCTs = 0xe80; // int32_t m_iMaxNumCTs; |  0xe80 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_iLoserBonusMostRecentTeam = 0xe84; // int32_t m_iLoserBonusMostRecentTeam; |  0xe84 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_tmNextPeriodicThink = 0xe88; // float32 m_tmNextPeriodicThink; |  0xe88 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bVoiceWonMatchBragFired = 0xe8c; // bool m_bVoiceWonMatchBragFired; |  0xe8c | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_fWarmupNextChatNoticeTime = 0xe90; // float32 m_fWarmupNextChatNoticeTime; |  0xe90 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_iHostagesRescued = 0xe98; // int32_t m_iHostagesRescued; |  0xe98 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_iHostagesTouched = 0xe9c; // int32_t m_iHostagesTouched; |  0xe9c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flNextHostageAnnouncement = 0xea0; // float32 m_flNextHostageAnnouncement; |  0xea0 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bNoTerroristsKilled = 0xea4; // bool m_bNoTerroristsKilled; |  0xea4 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bNoCTsKilled = 0xea5; // bool m_bNoCTsKilled; |  0xea5 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bNoEnemiesKilled = 0xea6; // bool m_bNoEnemiesKilled; |  0xea6 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bCanDonateWeapons = 0xea7; // bool m_bCanDonateWeapons; |  0xea7 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_firstKillTime = 0xeac; // float32 m_firstKillTime; |  0xeac | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_firstBloodTime = 0xeb4; // float32 m_firstBloodTime; |  0xeb4 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_hostageWasInjured = 0xed0; // bool m_hostageWasInjured; |  0xed0 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_hostageWasKilled = 0xed1; // bool m_hostageWasKilled; |  0xed1 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bVoteCalled = 0xee0; // bool m_bVoteCalled; |  0xee0 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bServerVoteOnReset = 0xee1; // bool m_bServerVoteOnReset; |  0xee1 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_flVoteCheckThrottle = 0xee4; // float32 m_flVoteCheckThrottle; |  0xee4 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bBuyTimeEnded = 0xee8; // bool m_bBuyTimeEnded; |  0xee8 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_nLastFreezeEndBeep = 0xeec; // int32_t m_nLastFreezeEndBeep; |  0xeec | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bTargetBombed = 0xef0; // bool m_bTargetBombed; |  0xef0 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bBombDefused = 0xef1; // bool m_bBombDefused; |  0xef1 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bMapHasBombZone = 0xef2; // bool m_bMapHasBombZone; |  0xef2 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_vecMainCTSpawnPos = 0xf40; // GlobalTypes::Vector  | Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_CTSpawnPointsMasterList = 0xf50; // server::CUtlVector<server::SpawnPoint*>  | Schema_Atomic | Size: 0x18
				constexpr std::ptrdiff_t m_TerroristSpawnPointsMasterList = 0xf68; // server::CUtlVector<server::SpawnPoint*>  | Schema_Atomic | Size: 0x18
				constexpr std::ptrdiff_t m_bRespawningAllRespawnablePlayers = 0xf80; // bool m_bRespawningAllRespawnablePlayers; |  0xf80 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_iNextCTSpawnPoint = 0xf84; // int32_t m_iNextCTSpawnPoint; |  0xf84 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flCTSpawnPointUsedTime = 0xf88; // float32 m_flCTSpawnPointUsedTime; |  0xf88 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_iNextTerroristSpawnPoint = 0xf8c; // int32_t m_iNextTerroristSpawnPoint; |  0xf8c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flTerroristSpawnPointUsedTime = 0xf90; // float32 m_flTerroristSpawnPointUsedTime; |  0xf90 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_CTSpawnPoints = 0xf98; // server::CUtlVector<server::SpawnPoint*>  | Schema_Atomic | Size: 0x18
				constexpr std::ptrdiff_t m_TerroristSpawnPoints = 0xfb0; // server::CUtlVector<server::SpawnPoint*>  | Schema_Atomic | Size: 0x18
				constexpr std::ptrdiff_t m_bIsUnreservedGameServer = 0xfc8; // bool m_bIsUnreservedGameServer; |  0xfc8 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_fAutobalanceDisplayTime = 0xfcc; // float32 m_fAutobalanceDisplayTime; |  0xfcc | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bAllowWeaponSwitch = 0x1008; // bool m_bAllowWeaponSwitch; |  0x1008 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bRoundTimeWarningTriggered = 0x1009; // bool m_bRoundTimeWarningTriggered; |  0x1009 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_phaseChangeAnnouncementTime = 0x100c; // entity2::GameTime_t  | Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_fNextUpdateTeamClanNamesTime = 0x1010; // float32 m_fNextUpdateTeamClanNamesTime; |  0x1010 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flLastThinkTime = 0x1014; // entity2::GameTime_t  | Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_fAccumulatedRoundOffDamage = 0x1018; // float32 m_fAccumulatedRoundOffDamage; |  0x1018 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_nShorthandedBonusLastEvalRound = 0x101c; // int32_t m_nShorthandedBonusLastEvalRound; |  0x101c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_nMatchAbortedEarlyReason = 0x1068; // int32_t m_nMatchAbortedEarlyReason; |  0x1068 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bHasTriggeredRoundStartMusic = 0x106c; // bool m_bHasTriggeredRoundStartMusic; |  0x106c | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bSwitchingTeamsAtRoundReset = 0x106d; // bool m_bSwitchingTeamsAtRoundReset; |  0x106d | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_pGameModeRules = 0x1088; // server::CCSGameModeRules**  | Schema_Ptr | Size: 0x8
				constexpr std::ptrdiff_t m_BtGlobalBlackboard = 0x1090; // GlobalTypes::KeyValues3  | Schema_Atomic | Size: 0x10
				constexpr std::ptrdiff_t m_hPlayerResource = 0x1128; // GlobalTypes::CHandle<server::CBaseEntity>  | Schema_Atomic | Size: 0x4
				constexpr std::ptrdiff_t m_RetakeRules = 0x1130; // server::CRetakeGameRules  | Schema_DeclaredClass | Size: 0x1f0
				constexpr std::ptrdiff_t m_arrTeamUniqueKillWeaponsMatch = 0x1320; // GlobalTypes::CUtlVector  | Schema_FixedArray | Size: 0x60
				constexpr std::ptrdiff_t m_bTeamLastKillUsedUniqueWeaponMatch = 0x1380; // bool m_bTeamLastKillUsedUniqueWeaponMatch[4]; |  0x1380 | Schema_FixedArray | Size: 0x4
				constexpr std::ptrdiff_t m_nMatchEndCount = 0x13a8; // uint8_t m_nMatchEndCount; |  0x13a8 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_nTTeamIntroVariant = 0x13ac; // int32_t m_nTTeamIntroVariant; |  0x13ac | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_nCTTeamIntroVariant = 0x13b0; // int32_t m_nCTTeamIntroVariant; |  0x13b0 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bTeamIntroPeriod = 0x13b4; // bool m_bTeamIntroPeriod; |  0x13b4 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_fTeamIntroPeriodEnd = 0x13b8; // entity2::GameTime_t  | Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_bPlayedTeamIntroVO = 0x13bc; // bool m_bPlayedTeamIntroVO; |  0x13bc | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_iRoundEndWinnerTeam = 0x13c0; // int32_t m_iRoundEndWinnerTeam; |  0x13c0 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_eRoundEndReason = 0x13c4; // int32_t m_eRoundEndReason; |  0x13c4 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bRoundEndShowTimerDefend = 0x13c8; // bool m_bRoundEndShowTimerDefend; |  0x13c8 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_iRoundEndTimerTime = 0x13cc; // int32_t m_iRoundEndTimerTime; |  0x13cc | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_sRoundEndFunFactToken = 0x13d0; // GlobalTypes::CUtlString  | Schema_Atomic | Size: 0x8
				constexpr std::ptrdiff_t m_iRoundEndFunFactPlayerSlot = 0x13d8; // GlobalTypes::CPlayerSlot  | Schema_Atomic | Size: 0x4
				constexpr std::ptrdiff_t m_iRoundEndFunFactData1 = 0x13dc; // int32_t m_iRoundEndFunFactData1; |  0x13dc | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_iRoundEndFunFactData2 = 0x13e0; // int32_t m_iRoundEndFunFactData2; |  0x13e0 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_iRoundEndFunFactData3 = 0x13e4; // int32_t m_iRoundEndFunFactData3; |  0x13e4 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_sRoundEndMessage = 0x13e8; // GlobalTypes::CUtlString  | Schema_Atomic | Size: 0x8
				constexpr std::ptrdiff_t m_iRoundEndPlayerCount = 0x13f0; // int32_t m_iRoundEndPlayerCount; |  0x13f0 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bRoundEndNoMusic = 0x13f4; // bool m_bRoundEndNoMusic; |  0x13f4 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_iRoundEndLegacy = 0x13f8; // int32_t m_iRoundEndLegacy; |  0x13f8 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_nRoundEndCount = 0x13fc; // uint8_t m_nRoundEndCount; |  0x13fc | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_iRoundStartRoundNumber = 0x1400; // int32_t m_iRoundStartRoundNumber; |  0x1400 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_nRoundStartCount = 0x1404; // uint8_t m_nRoundStartCount; |  0x1404 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_flLastPerfSampleTime = 0x5410; // float64 m_flLastPerfSampleTime; |  0x5410 | Schema_Builtin | Size: 0x8
			}
		}
	}
}
