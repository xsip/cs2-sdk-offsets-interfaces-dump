// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <cstddef>

namespace CS2 {
	namespace SchemaOffsets {
		namespace server {
			// Class size: 0xA70
			namespace CTriggerFan /*: public CS2::server::CBaseTrigger*/ {
				constexpr std::ptrdiff_t m_vFanOrigin = 0x9c0; // GlobalTypes::VectorWS m_vFanOrigin; |  Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_vFanOriginOffset = 0x9cc; // GlobalTypes::Vector m_vFanOriginOffset; |  Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_vFanEnd = 0x9d8; // GlobalTypes::Vector m_vFanEnd; |  Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_vNoiseDirectionTarget = 0x9e4; // GlobalTypes::Vector m_vNoiseDirectionTarget; |  Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_vDirection = 0x9f0; // GlobalTypes::Vector m_vDirection; |  Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_bPushTowardsInfoTarget = 0x9fc; // bool m_bPushTowardsInfoTarget; |  0x9fc | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bPushAwayFromInfoTarget = 0x9fd; // bool m_bPushAwayFromInfoTarget; |  0x9fd | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_qNoiseDelta = 0xa00; // GlobalTypes::Quaternion m_qNoiseDelta; |  Schema_Atomic | Size: 0x10
				constexpr std::ptrdiff_t m_hInfoFan = 0xa10; // server::CHandle< server::CInfoFan > m_hInfoFan; |  Schema_Atomic | Size: 0x4
				constexpr std::ptrdiff_t m_flForce = 0xa14; // float32 m_flForce; |  0xa14 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bFalloff = 0xa18; // bool m_bFalloff; |  0xa18 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_RampTimer = 0xa20; // server::CountdownTimer m_RampTimer; |  Schema_DeclaredClass | Size: 0x18
				constexpr std::ptrdiff_t m_iszInfoFan = 0xa38; // GlobalTypes::CUtlSymbolLarge m_iszInfoFan; |  Schema_Atomic | Size: 0x8
				constexpr std::ptrdiff_t m_flRopeForceScale = 0xa40; // float32 m_flRopeForceScale; |  0xa40 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flParticleForceScale = 0xa44; // float32 m_flParticleForceScale; |  0xa44 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flPlayerForce = 0xa48; // float32 m_flPlayerForce; |  0xa48 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bPlayerWindblock = 0xa4c; // bool m_bPlayerWindblock; |  0xa4c | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_flNPCForce = 0xa50; // float32 m_flNPCForce; |  0xa50 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flRampTime = 0xa54; // float32 m_flRampTime; |  0xa54 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_fNoiseDegrees = 0xa58; // float32 m_fNoiseDegrees; |  0xa58 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_fNoiseSpeed = 0xa5c; // float32 m_fNoiseSpeed; |  0xa5c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bPushPlayer = 0xa60; // bool m_bPushPlayer; |  0xa60 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bRampDown = 0xa61; // bool m_bRampDown; |  0xa61 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_nManagerFanIdx = 0xa64; // int32_t m_nManagerFanIdx; |  0xa64 | Schema_Builtin | Size: 0x4
			}
		}
	}
}
