// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <cstddef>

namespace CS2 {
	namespace SchemaOffsets {
		namespace server {
			// Class size: 0xA08
			namespace CTriggerPhysics /*: public CS2::server::CBaseTrigger*/ {
				constexpr std::ptrdiff_t m_gravityScale = 0x9b8; // float32 m_gravityScale; |  0x9b8 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_linearLimit = 0x9bc; // float32 m_linearLimit; |  0x9bc | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_linearDamping = 0x9c0; // float32 m_linearDamping; |  0x9c0 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_angularLimit = 0x9c4; // float32 m_angularLimit; |  0x9c4 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_angularDamping = 0x9c8; // float32 m_angularDamping; |  0x9c8 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_linearForce = 0x9cc; // float32 m_linearForce; |  0x9cc | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flFrequency = 0x9d0; // float32 m_flFrequency; |  0x9d0 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flDampingRatio = 0x9d4; // float32 m_flDampingRatio; |  0x9d4 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_vecLinearForcePointAt = 0x9d8; // GlobalTypes::Vector m_vecLinearForcePointAt; |  Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_bCollapseToForcePoint = 0x9e4; // bool m_bCollapseToForcePoint; |  0x9e4 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_vecLinearForcePointAtWorld = 0x9e8; // GlobalTypes::Vector m_vecLinearForcePointAtWorld; |  Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_vecLinearForceDirection = 0x9f4; // GlobalTypes::Vector m_vecLinearForceDirection; |  Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_bConvertToDebrisWhenPossible = 0xa00; // bool m_bConvertToDebrisWhenPossible; |  0xa00 | Schema_Builtin | Size: 0x1
			}
		}
	}
}
