// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <cstddef>

namespace CS2 {
	namespace SchemaOffsets {
		namespace server {
			// Class size: 0xC28
			namespace CBaseCSGrenadeProjectile /*: public CS2::server::CBaseGrenade*/ {
				constexpr std::ptrdiff_t m_vInitialPosition = 0xbb8; // GlobalTypes::Vector m_vInitialPosition; |  Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_vInitialVelocity = 0xbc4; // GlobalTypes::Vector m_vInitialVelocity; |  Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_nBounces = 0xbd0; // int32_t m_nBounces; |  0xbd0 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_nExplodeEffectIndex = 0xbd8; // GlobalTypes::CStrongHandle< resourcesystem::InfoForResourceTypeIParticleSystemDefinition > m_nExplodeEffectIndex; |  Schema_Atomic | Size: 0x8
				constexpr std::ptrdiff_t m_nExplodeEffectTickBegin = 0xbe0; // int32_t m_nExplodeEffectTickBegin; |  0xbe0 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_vecExplodeEffectOrigin = 0xbe4; // GlobalTypes::Vector m_vecExplodeEffectOrigin; |  Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_flSpawnTime = 0xbf0; // entity2::GameTime_t m_flSpawnTime; |  Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_unOGSExtraFlags = 0xbf4; // uint8_t m_unOGSExtraFlags; |  0xbf4 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bDetonationRecorded = 0xbf5; // bool m_bDetonationRecorded; |  0xbf5 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_nItemIndex = 0xbf6; // uint16_t m_nItemIndex; |  0xbf6 | Schema_Builtin | Size: 0x2
				constexpr std::ptrdiff_t m_vecOriginalSpawnLocation = 0xbf8; // GlobalTypes::Vector m_vecOriginalSpawnLocation; |  Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_flLastBounceSoundTime = 0xc04; // entity2::GameTime_t m_flLastBounceSoundTime; |  Schema_DeclaredClass | Size: 0x4
				constexpr std::ptrdiff_t m_vecGrenadeSpin = 0xc08; // GlobalTypes::RotationVector m_vecGrenadeSpin; |  Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_vecLastHitSurfaceNormal = 0xc14; // GlobalTypes::Vector m_vecLastHitSurfaceNormal; |  Schema_Atomic | Size: 0xc
				constexpr std::ptrdiff_t m_nTicksAtZeroVelocity = 0xc20; // int32_t m_nTicksAtZeroVelocity; |  0xc20 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bHasEverHitEnemy = 0xc24; // bool m_bHasEverHitEnemy; |  0xc24 | Schema_Builtin | Size: 0x1
			}
		}
	}
}
