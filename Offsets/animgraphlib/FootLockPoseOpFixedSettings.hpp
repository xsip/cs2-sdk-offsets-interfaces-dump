// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <cstddef>

namespace CS2 {
	namespace SchemaOffsets {
		namespace animgraphlib {
			// Class size: 0x68
			namespace FootLockPoseOpFixedSettings /**/ {
				constexpr std::ptrdiff_t m_footInfo = 0x0; // GlobalTypes::CUtlVector<animgraphlib::FootFixedData_t>  | Schema_Atomic | Size: 0x18
				constexpr std::ptrdiff_t m_hipDampingSettings = 0x18; // animgraphlib::CAnimInputDamping  | Schema_DeclaredClass | Size: 0x18
				constexpr std::ptrdiff_t m_nHipBoneIndex = 0x30; // int32_t m_nHipBoneIndex; |  0x30 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_ikSolverType = 0x34; // animgraphlib::IKSolverType  | Schema_DeclaredEnum | Size: 0x4
				constexpr std::ptrdiff_t m_bApplyTilt = 0x38; // bool m_bApplyTilt; |  0x38 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bApplyHipDrop = 0x39; // bool m_bApplyHipDrop; |  0x39 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bAlwaysUseFallbackHinge = 0x3a; // bool m_bAlwaysUseFallbackHinge; |  0x3a | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bApplyFootRotationLimits = 0x3b; // bool m_bApplyFootRotationLimits; |  0x3b | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bApplyLegTwistLimits = 0x3c; // bool m_bApplyLegTwistLimits; |  0x3c | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_flMaxFootHeight = 0x40; // float32 m_flMaxFootHeight; |  0x40 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flExtensionScale = 0x44; // float32 m_flExtensionScale; |  0x44 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flMaxLegTwist = 0x48; // float32 m_flMaxLegTwist; |  0x48 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bEnableLockBreaking = 0x4c; // bool m_bEnableLockBreaking; |  0x4c | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_flLockBreakTolerance = 0x50; // float32 m_flLockBreakTolerance; |  0x50 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flLockBlendTime = 0x54; // float32 m_flLockBlendTime; |  0x54 | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_bEnableStretching = 0x58; // bool m_bEnableStretching; |  0x58 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_flMaxStretchAmount = 0x5c; // float32 m_flMaxStretchAmount; |  0x5c | Schema_Builtin | Size: 0x4
				constexpr std::ptrdiff_t m_flStretchExtensionScale = 0x60; // float32 m_flStretchExtensionScale; |  0x60 | Schema_Builtin | Size: 0x4
			}
		}
	}
}
