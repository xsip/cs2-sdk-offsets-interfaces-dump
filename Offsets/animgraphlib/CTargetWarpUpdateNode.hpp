// generated - do not edit!
// generated by @xsip cs2 schema generator

#pragma once

#include <cstddef>

namespace CS2 {
	namespace SchemaOffsets {
		namespace animgraphlib {
			// Class size: 0x98
			namespace CTargetWarpUpdateNode /*: public CS2::animgraphlib::CUnaryUpdateNode*/ {
				constexpr std::ptrdiff_t m_eAngleMode = 0x74; // animgraphlib::TargetWarpAngleMode_t m_eAngleMode; |  Schema_DeclaredEnum | Size: 0x4
				constexpr std::ptrdiff_t m_hTargetPositionParameter = 0x78; // animgraphlib::CAnimParamHandle m_hTargetPositionParameter; |  Schema_DeclaredClass | Size: 0x2
				constexpr std::ptrdiff_t m_hTargetUpVectorParameter = 0x7a; // animgraphlib::CAnimParamHandle m_hTargetUpVectorParameter; |  Schema_DeclaredClass | Size: 0x2
				constexpr std::ptrdiff_t m_hTargetFacePositionParameter = 0x7c; // animgraphlib::CAnimParamHandle m_hTargetFacePositionParameter; |  Schema_DeclaredClass | Size: 0x2
				constexpr std::ptrdiff_t m_hMoveHeadingParameter = 0x7e; // animgraphlib::CAnimParamHandle m_hMoveHeadingParameter; |  Schema_DeclaredClass | Size: 0x2
				constexpr std::ptrdiff_t m_hDesiredMoveHeadingParameter = 0x80; // animgraphlib::CAnimParamHandle m_hDesiredMoveHeadingParameter; |  Schema_DeclaredClass | Size: 0x2
				constexpr std::ptrdiff_t m_eCorrectionMethod = 0x84; // animgraphlib::TargetWarpCorrectionMethod m_eCorrectionMethod; |  Schema_DeclaredEnum | Size: 0x4
				constexpr std::ptrdiff_t m_eTargetWarpTimingMethod = 0x88; // animgraphlib::TargetWarpTimingMethod m_eTargetWarpTimingMethod; |  Schema_DeclaredEnum | Size: 0x4
				constexpr std::ptrdiff_t m_bTargetFacePositionIsWorldSpace = 0x8c; // bool m_bTargetFacePositionIsWorldSpace; |  0x8c | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bTargetPositionIsWorldSpace = 0x8d; // bool m_bTargetPositionIsWorldSpace; |  0x8d | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bOnlyWarpWhenTagIsFound = 0x8e; // bool m_bOnlyWarpWhenTagIsFound; |  0x8e | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bWarpOrientationDuringTranslation = 0x8f; // bool m_bWarpOrientationDuringTranslation; |  0x8f | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_bWarpAroundCenter = 0x90; // bool m_bWarpAroundCenter; |  0x90 | Schema_Builtin | Size: 0x1
				constexpr std::ptrdiff_t m_flMaxAngle = 0x94; // float32 m_flMaxAngle; |  0x94 | Schema_Builtin | Size: 0x4
			}
		}
	}
}
