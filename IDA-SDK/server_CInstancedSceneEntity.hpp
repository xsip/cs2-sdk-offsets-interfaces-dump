#pragma once
#include "enums.hpp"
#include "typedefs.hpp"

class entity2_CEntityIdentity;
class entity2_CScriptComponent;
class server_CBodyComponent;
class server_CCollisionProperty;
class server_CPulseGraphInstance_ServerEntity;
#include "client_CNetworkTransmitComponent.hpp"
#include "entity2_GameTick_t.hpp"
#include "entity2_GameTime_t.hpp"
#include "entity2_CEntityIOOutput.hpp"
#include "client_CNetworkVelocityVector.hpp"

class server_CInstancedSceneEntity {
    char vTable723[0x8];
    CUtlSymbolLarge m_iszPrivateVScripts;
    entity2_CEntityIdentity* m_pEntity;
    char pad_724[0x18];
    entity2_CScriptComponent* m_CScriptComponent;
    server_CBodyComponent* m_CBodyComponent;
    client_CNetworkTransmitComponent m_NetworkTransmitComponent;
    char pad_2793[0x40];
    char m_aThinkFunctions[0x18];
    int32_t m_iCurrentThinkContext;
    entity2_GameTick_t m_nLastThinkTick;
    bool m_bDisabledContextThinks;
    char pad_2794[0xf];
    char m_isSteadyState[0x8];
    float32 m_lastNetworkChange;
    char pad_2795[0xc];
    char m_ResponseContexts[0x18];
    CUtlSymbolLarge m_iszResponseContext;
    char pad_2796[0x20];
    int32_t m_iHealth;
    int32_t m_iMaxHealth;
    uint8_t m_lifeState;
    char pad_2797[0x3];
    float32 m_flDamageAccumulator;
    bool m_bTakesDamage;
    char pad_2798[0x7];
    client_TakeDamageFlags_t m_nTakeDamageFlags;
    client_EntityPlatformTypes_t m_nPlatformType;
    char pad_2799[0x1];
    client_MoveCollide_t m_MoveCollide;
    client_MoveType_t m_MoveType;
    client_MoveType_t m_nActualMoveType;
    uint8_t m_nWaterTouch;
    uint8_t m_nSlimeTouch;
    bool m_bRestoreInHierarchy;
    CUtlSymbolLarge m_target;
    char m_hDamageFilter[0x4];
    char pad_2800[0x4];
    CUtlSymbolLarge m_iszDamageFilterName;
    float32 m_flMoveDoneTime;
    CUtlStringToken m_nSubclassID;
    char pad_2801[0x8];
    float32 m_flAnimTime;
    float32 m_flSimulationTime;
    entity2_GameTime_t m_flCreateTime;
    bool m_bClientSideRagdoll;
    uint8_t m_ubInterpolationFrame;
    char pad_2802[0x2];
    Vector m_vPrevVPhysicsUpdatePos;
    uint8_t m_iTeamNum;
    char pad_2803[0x3];
    CUtlSymbolLarge m_iGlobalname;
    int32_t m_iSentToClients;
    float32 m_flSpeed;
    CUtlString m_sUniqueHammerID;
    uint32_t m_spawnflags;
    entity2_GameTick_t m_nNextThinkTick;
    int32_t m_nSimulationTick;
    char pad_2804[0x4];
    entity2_CEntityIOOutput m_OnKilled;
    uint32_t m_fFlags;
    Vector m_vecAbsVelocity;
    client_CNetworkVelocityVector m_vecVelocity;
    char pad_2805[0x8];
    Vector m_vecBaseVelocity;
    int32_t m_nPushEnumCount;
    server_CCollisionProperty* m_pCollision;
    char m_hEffectEntity[0x4];
    char m_hOwnerEntity[0x4];
    uint32_t m_fEffects;
    char m_hGroundEntity[0x4];
    int32_t m_nGroundBodyIndex;
    float32 m_flFriction;
    float32 m_flElasticity;
    float32 m_flGravityScale;
    float32 m_flTimeScale;
    float32 m_flWaterLevel;
    bool m_bGravityDisabled;
    bool m_bAnimatedEveryTick;
    char pad_2806[0x2];
    float32 m_flActualGravityScale;
    bool m_bGravityActuallyDisabled;
    bool m_bDisableLowViolence;
    uint8_t m_nWaterType;
    char pad_2807[0x1];
    int32_t m_iEFlags;
    entity2_CEntityIOOutput m_OnUser1;
    entity2_CEntityIOOutput m_OnUser2;
    entity2_CEntityIOOutput m_OnUser3;
    entity2_CEntityIOOutput m_OnUser4;
    int32_t m_iInitialTeamNum;
    entity2_GameTime_t m_flNavIgnoreUntilTime;
    QAngle m_vecAngVelocity;
    bool m_bNetworkQuantizeOriginAndAngles;
    bool m_bLagCompensate;
    char pad_2808[0x2];
    char m_pBlocker[0x4];
    float32 m_flLocalTime;
    float32 m_flVPhysicsUpdateLocalTime;
    client_BloodType m_nBloodType;
    server_CPulseGraphInstance_ServerEntity* m_pPulseGraphInstance;
    char pad_3632[0x4f0];
    char vTable3703[0x8];
    CUtlSymbolLarge m_iszSceneFile;
    CUtlSymbolLarge m_iszResumeSceneFile;
    CUtlSymbolLarge m_iszTarget1;
    CUtlSymbolLarge m_iszTarget2;
    CUtlSymbolLarge m_iszTarget3;
    CUtlSymbolLarge m_iszTarget4;
    CUtlSymbolLarge m_iszTarget5;
    CUtlSymbolLarge m_iszTarget6;
    CUtlSymbolLarge m_iszTarget7;
    CUtlSymbolLarge m_iszTarget8;
    char m_hTarget1[0x4];
    char m_hTarget2[0x4];
    char m_hTarget3[0x4];
    char m_hTarget4[0x4];
    char m_hTarget5[0x4];
    char m_hTarget6[0x4];
    char m_hTarget7[0x4];
    char m_hTarget8[0x4];
    CUtlSymbolLarge m_sTargetAttachment;
    bool m_bIsPlayingBack;
    bool m_bPaused;
    bool m_bMultiplayer;
    bool m_bAutogenerated;
    float32 m_flForceClientTime;
    float32 m_flCurrentTime;
    float32 m_flFrameTime;
    bool m_bCancelAtNextInterrupt;
    char pad_3704[0x3];
    float32 m_fPitch;
    bool m_bAutomated;
    char pad_3705[0x3];
    int32_t m_nAutomatedAction;
    float32 m_flAutomationDelay;
    float32 m_flAutomationTime;
    int32_t m_nSpeechPriority;
    char m_hWaitingForThisResumeScene[0x4];
    bool m_bWaitingForResumeScene;
    bool m_bPausedViaInput;
    bool m_bPauseAtNextInterrupt;
    bool m_bWaitingForActor;
    bool m_bWaitingForInterrupt;
    bool m_bInterruptedActorsScenes;
    bool m_bBreakOnNonIdle;
    bool m_bSceneFinished;
    char m_hActorList[0x18];
    char m_hRemoveActorList[0x18];
    char pad_3706[0x30];
    int32_t m_nSceneFlushCounter;
    uint16_t m_nSceneStringIndex;
    char pad_3707[0x2];
    entity2_CEntityIOOutput m_OnStart;
    entity2_CEntityIOOutput m_OnCompletion;
    entity2_CEntityIOOutput m_OnCanceled;
    entity2_CEntityIOOutput m_OnPaused;
    entity2_CEntityIOOutput m_OnResumed;
    entity2_CEntityIOOutput m_OnTrigger[16];
    char m_hInterruptScene[0x4];
    int32_t m_nInterruptCount;
    bool m_bSceneMissing;
    bool m_bInterrupted;
    bool m_bCompletedEarly;
    bool m_bInterruptSceneFinished;
    bool m_bRestoring;
    char pad_3708[0x3];
    char m_hNotifySceneCompletion[0x18];
    char m_hListManagers[0x18];
    CUtlSymbolLarge m_iszSoundName;
    CUtlSymbolLarge m_iszSequenceName;
    char m_hActor[0x4];
    char m_hActivator[0x4];
    int32_t m_BusyActor;
    server_SceneOnPlayerDeath_t m_iPlayerDeathBehavior;
    char end_pad_3709[0x8];
    char m_hOwner[0x4];
    bool m_bHadOwner;
    char pad_3701[0x3];
    float32 m_flPostSpeakDelay;
    float32 m_flPreDelay;
    bool m_bIsBackground;
    bool m_bRemoveOnCompletion;
    char pad_3702[0x2];
    char m_hTarget[0x4];
};
