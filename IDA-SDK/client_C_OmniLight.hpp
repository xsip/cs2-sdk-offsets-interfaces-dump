#pragma once
#include "enums.hpp"
#include "typedefs.hpp"

class entity2_CEntityIdentity;
class entity2_CScriptComponent;
class client_CBodyComponent;
class client_CGameSceneNode;
class client_CRenderComponent;
class client_CCollisionProperty;
class client_CDestructiblePartsComponent;
class client_CClientAlphaProperty;
#include "client_CNetworkTransmitComponent.hpp"
#include "entity2_GameTick_t.hpp"
#include "entity2_GameTime_t.hpp"
#include "client_CNetworkVelocityVector.hpp"
#include "particleslib_CParticleProperty.hpp"
#include "client_CHitboxComponent.hpp"
#include "client_CCollisionProperty.hpp"
#include "client_CGlowProperty.hpp"
#include "client_CNetworkViewOffsetVector.hpp"
#include "entity2_CEntityIOOutput.hpp"

class client_C_OmniLight {
    char vTable723[0x8];
    CUtlSymbolLarge m_iszPrivateVScripts;
    entity2_CEntityIdentity* m_pEntity;
    char pad_724[0x18];
    entity2_CScriptComponent* m_CScriptComponent;
    client_CBodyComponent* m_CBodyComponent;
    client_CNetworkTransmitComponent m_NetworkTransmitComponent;
    char pad_705[0x120];
    entity2_GameTick_t m_nLastThinkTick;
    char pad_706[0x4];
    client_CGameSceneNode* m_pGameSceneNode;
    client_CRenderComponent* m_pRenderComponent;
    client_CCollisionProperty* m_pCollision;
    int32_t m_iMaxHealth;
    int32_t m_iHealth;
    float32 m_flDamageAccumulator;
    uint8_t m_lifeState;
    bool m_bTakesDamage;
    char pad_707[0x2];
    client_TakeDamageFlags_t m_nTakeDamageFlags;
    client_EntityPlatformTypes_t m_nPlatformType;
    uint8_t m_ubInterpolationFrame;
    char pad_708[0x2];
    char m_hSceneObjectController[0x4];
    int32_t m_nNoInterpolationTick;
    int32_t m_nVisibilityNoInterpolationTick;
    float32 m_flProxyRandomValue;
    int32_t m_iEFlags;
    uint8_t m_nWaterType;
    bool m_bInterpolateEvenWithNoModel;
    bool m_bPredictionEligible;
    bool m_bApplyLayerMatchIDToModel;
    CUtlStringToken m_tokLayerMatchID;
    CUtlStringToken m_nSubclassID;
    char pad_709[0xc];
    int32_t m_nSimulationTick;
    int32_t m_iCurrentThinkContext;
    char m_aThinkFunctions[0x18];
    bool m_bDisabledContextThinks;
    char pad_710[0x3];
    float32 m_flAnimTime;
    float32 m_flSimulationTime;
    uint8_t m_nSceneObjectOverrideFlags;
    bool m_bHasSuccessfullyInterpolated;
    bool m_bHasAddedVarsToInterpolation;
    bool m_bRenderEvenWhenNotSuccessfullyInterpolated;
    int32_t m_nInterpolationLatchDirtyFlags[2];
    uint16_t m_ListEntry[11];
    char pad_711[0x2];
    entity2_GameTime_t m_flCreateTime;
    float32 m_flSpeed;
    uint16_t m_EntClientFlags;
    bool m_bClientSideRagdoll;
    uint8_t m_iTeamNum;
    uint32_t m_spawnflags;
    entity2_GameTick_t m_nNextThinkTick;
    char pad_712[0x4];
    uint32_t m_fFlags;
    Vector m_vecAbsVelocity;
    client_CNetworkVelocityVector m_vecServerVelocity;
    client_CNetworkVelocityVector m_vecVelocity;
    char pad_713[0xb8];
    Vector m_vecBaseVelocity;
    char m_hEffectEntity[0x4];
    char m_hOwnerEntity[0x4];
    client_MoveCollide_t m_MoveCollide;
    client_MoveType_t m_MoveType;
    client_MoveType_t m_nActualMoveType;
    char pad_714[0x1];
    float32 m_flWaterLevel;
    uint32_t m_fEffects;
    char m_hGroundEntity[0x4];
    int32_t m_nGroundBodyIndex;
    float32 m_flFriction;
    float32 m_flElasticity;
    float32 m_flGravityScale;
    float32 m_flTimeScale;
    bool m_bAnimatedEveryTick;
    bool m_bGravityDisabled;
    char pad_715[0x2];
    entity2_GameTime_t m_flNavIgnoreUntilTime;
    uint16_t m_hThink;
    char pad_716[0xe];
    uint8_t m_fBBoxVisFlags;
    char pad_717[0x3];
    float32 m_flActualGravityScale;
    bool m_bGravityActuallyDisabled;
    bool m_bPredictable;
    bool m_bRenderWithViewModels;
    char pad_718[0x1];
    int32_t m_nFirstPredictableCommand;
    int32_t m_nLastPredictableCommand;
    char m_hOldMoveParent[0x4];
    particleslib_CParticleProperty m_Particles;
    char pad_719[0x8];
    QAngle m_vecAngVelocity;
    int32_t m_DataChangeEventRef;
    char m_dependencies[0x18];
    int32_t m_nCreationTick;
    char pad_720[0x9];
    bool m_bAnimTimeChanged;
    bool m_bSimulationTimeChanged;
    char pad_721[0x9];
    CUtlString m_sUniqueHammerID;
    client_BloodType m_nBloodType;
    char end_pad_722[0x4];
    char vTable599[0x4e8];
    client_CRenderComponent* m_CRenderComponent;
    client_CHitboxComponent m_CHitboxComponent;
    client_CDestructiblePartsComponent* m_pDestructiblePartsSystemComponent;
    client_HitGroup_t m_LastHitGroup;
    char pad_600[0x4];
    CGlobalSymbol m_sLastDamageSourceName;
    VectorWS m_vLastDamagePosition;
    char pad_601[0x1c];
    bool m_bInitModelEffects;
    bool m_bIsStaticProp;
    char pad_602[0x2];
    int32_t m_nLastAddDecal;
    int32_t m_nDecalsAdded;
    int32_t m_iOldHealth;
    client_RenderMode_t m_nRenderMode;
    client_RenderFx_t m_nRenderFX;
    bool m_bAllowFadeInView;
    char pad_603[0x1d];
    Color m_clrRender;
    char pad_604[0x4];
    char m_vecRenderAttributes[0x68];
    char pad_605[0x18];
    bool m_bRenderToCubemaps;
    bool m_bNoInterpolate;
    char pad_606[0x6];
    client_CCollisionProperty m_Collision;
    client_CGlowProperty m_Glow;
    float32 m_flGlowBackfaceMult;
    float32 m_fadeMinDist;
    float32 m_fadeMaxDist;
    float32 m_flFadeScale;
    float32 m_flShadowStrength;
    uint8_t m_nObjectCulling;
    char pad_607[0x3];
    int32_t m_nAddDecal;
    Vector m_vDecalPosition;
    Vector m_vDecalForwardAxis;
    client_DecalMode_t m_nDecalMode;
    client_DecalMode_t m_nRequiredDecalMode;
    char pad_608[0x2];
    char m_ConfigEntitiesToPropagateMaterialDecalsTo[0x18];
    char pad_609[0x28];
    client_CNetworkViewOffsetVector m_vecViewOffset;
    char pad_610[0xb8];
    client_CClientAlphaProperty* m_pClientAlphaProperty;
    Color m_ClientOverrideTint;
    bool m_bUseClientOverrideTint;
    char pad_611[0x3b];
    uint32_t m_bvDisabledHitGroups[1];
    char end_pad_612[0x4];
    bool m_bEnabled;
    char pad_1173[0x3];
    int32_t m_nColorMode;
    Color m_Color;
    float32 m_flColorTemperature;
    float32 m_flBrightness;
    float32 m_flBrightnessScale;
    int32_t m_nDirectLight;
    int32_t m_nBakedShadowIndex;
    int32_t m_nLightPathUniqueId;
    int32_t m_nLightMapUniqueId;
    int32_t m_nLuminaireShape;
    float32 m_flLuminaireSize;
    float32 m_flLuminaireAnisotropy;
    char pad_1174[0x4];
    CUtlString m_LightStyleString;
    entity2_GameTime_t m_flLightStyleStartTime;
    char pad_1175[0x4];
    char m_QueuedLightStyleStrings[0x18];
    char m_LightStyleEvents[0x18];
    char m_LightStyleTargets[0x18];
    entity2_CEntityIOOutput m_StyleEvent[4];
    char m_hLightCookie[0x8];
    float32 m_flShape;
    float32 m_flSoftX;
    float32 m_flSoftY;
    float32 m_flSkirt;
    float32 m_flSkirtNear;
    Vector m_vSizeParams;
    float32 m_flRange;
    Vector m_vShear;
    int32_t m_nBakeSpecularToCubemaps;
    Vector m_vBakeSpecularToCubemapsSize;
    int32_t m_nCastShadows;
    int32_t m_nShadowMapSize;
    int32_t m_nShadowPriority;
    bool m_bContactShadow;
    bool m_bForceShadowsEnabled;
    char pad_1176[0x2];
    int32_t m_nBounceLight;
    float32 m_flBounceScale;
    float32 m_flMinRoughness;
    Vector m_vAlternateColor;
    float32 m_fAlternateColorBrightness;
    int32_t m_nFog;
    float32 m_flFogStrength;
    int32_t m_nFogShadows;
    float32 m_flFogScale;
    bool m_bFogMixedShadows;
    char pad_1177[0x3];
    float32 m_flFadeSizeStart;
    float32 m_flFadeSizeEnd;
    float32 m_flShadowFadeSizeStart;
    float32 m_flShadowFadeSizeEnd;
    bool m_bPrecomputedFieldsValid;
    char pad_1178[0x3];
    Vector m_vPrecomputedBoundsMins;
    Vector m_vPrecomputedBoundsMaxs;
    Vector m_vPrecomputedOBBOrigin;
    QAngle m_vPrecomputedOBBAngles;
    Vector m_vPrecomputedOBBExtent;
    int32_t m_nPrecomputedSubFrusta;
    Vector m_vPrecomputedOBBOrigin0;
    QAngle m_vPrecomputedOBBAngles0;
    Vector m_vPrecomputedOBBExtent0;
    Vector m_vPrecomputedOBBOrigin1;
    QAngle m_vPrecomputedOBBAngles1;
    Vector m_vPrecomputedOBBExtent1;
    Vector m_vPrecomputedOBBOrigin2;
    QAngle m_vPrecomputedOBBAngles2;
    Vector m_vPrecomputedOBBExtent2;
    Vector m_vPrecomputedOBBOrigin3;
    QAngle m_vPrecomputedOBBAngles3;
    Vector m_vPrecomputedOBBExtent3;
    Vector m_vPrecomputedOBBOrigin4;
    QAngle m_vPrecomputedOBBAngles4;
    Vector m_vPrecomputedOBBExtent4;
    Vector m_vPrecomputedOBBOrigin5;
    QAngle m_vPrecomputedOBBAngles5;
    Vector m_vPrecomputedOBBExtent5;
    char pad_1179[0x44];
    bool m_bInitialBoneSetup;
    char pad_1180[0x7];
    char m_VisClusters[0x18];
    char end_pad_1181[0x8];
    float32 m_flInnerAngle;
    float32 m_flOuterAngle;
    bool m_bShowLight;
    char end_pad_1475[0x7];
};
