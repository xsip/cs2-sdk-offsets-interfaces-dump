#pragma once
#include "enums.hpp"
#include "typedefs.hpp"

class server_CCSGameModeRules;
#include "entity2_CNetworkVarChainer.hpp"
#include "entity2_GameTime_t.hpp"
#include "server_CRetakeGameRules.hpp"

class server_CCSGameRules {
    char vTable3330[0x8];
    entity2_CNetworkVarChainer __m_pChainEntity;
    char m_szQuestName[128];
    int32_t m_nQuestPhase;
    int32_t m_nTotalPausedTicks;
    int32_t m_nPauseStartTick;
    bool m_bGamePaused;
    char pad_3331[0x3];
    char pad_3329[0xc0];
    char pad_3328[0xc0];
    char vTable3278[0x8];
    bool m_bFreezePeriod;
    bool m_bWarmupPeriod;
    char pad_3279[0x2];
    entity2_GameTime_t m_fWarmupPeriodEnd;
    entity2_GameTime_t m_fWarmupPeriodStart;
    bool m_bTerroristTimeOutActive;
    bool m_bCTTimeOutActive;
    char pad_3280[0x2];
    float32 m_flTerroristTimeOutRemaining;
    float32 m_flCTTimeOutRemaining;
    int32_t m_nTerroristTimeOuts;
    int32_t m_nCTTimeOuts;
    bool m_bTechnicalTimeOut;
    bool m_bMatchWaitingForResume;
    char pad_3281[0x2];
    int32_t m_iFreezeTime;
    int32_t m_iRoundTime;
    float32 m_fMatchStartTime;
    entity2_GameTime_t m_fRoundStartTime;
    entity2_GameTime_t m_flRestartRoundTime;
    bool m_bGameRestart;
    char pad_3282[0x3];
    float32 m_flGameStartTime;
    float32 m_timeUntilNextPhaseStarts;
    int32_t m_gamePhase;
    int32_t m_totalRoundsPlayed;
    int32_t m_nRoundsPlayedThisPhase;
    int32_t m_nOvertimePlaying;
    int32_t m_iHostagesRemaining;
    bool m_bAnyHostageReached;
    bool m_bMapHasBombTarget;
    bool m_bMapHasRescueZone;
    bool m_bMapHasBuyZone;
    bool m_bIsQueuedMatchmaking;
    char pad_3283[0x3];
    int32_t m_nQueuedMatchmakingMode;
    bool m_bIsValveDS;
    bool m_bLogoMap;
    bool m_bPlayAllStepSoundsOnServer;
    char pad_3284[0x1];
    int32_t m_iSpectatorSlotCount;
    int32_t m_MatchDevice;
    bool m_bHasMatchStarted;
    char pad_3285[0x3];
    int32_t m_nNextMapInMapgroup;
    char m_szTournamentEventName[512];
    char m_szTournamentEventStage[512];
    char m_szMatchStatTxt[512];
    char m_szTournamentPredictionsTxt[512];
    int32_t m_nTournamentPredictionsPct;
    entity2_GameTime_t m_flCMMItemDropRevealStartTime;
    entity2_GameTime_t m_flCMMItemDropRevealEndTime;
    bool m_bIsDroppingItems;
    bool m_bIsQuestEligible;
    bool m_bIsHltvActive;
    char pad_3286[0x1];
    uint16_t m_arrProhibitedItemIndices[100];
    uint32_t m_arrTournamentActiveCasterAccounts[4];
    int32_t m_numBestOfMaps;
    int32_t m_nHalloweenMaskListSeed;
    bool m_bBombDropped;
    bool m_bBombPlanted;
    char pad_3287[0x2];
    int32_t m_iRoundWinStatus;
    int32_t m_eRoundWinReason;
    bool m_bTCantBuy;
    bool m_bCTCantBuy;
    char pad_3288[0x2];
    int32_t m_iMatchStats_RoundResults[30];
    int32_t m_iMatchStats_PlayersAlive_CT[30];
    int32_t m_iMatchStats_PlayersAlive_T[30];
    float32 m_TeamRespawnWaveTimes[32];
    entity2_GameTime_t m_flNextRespawnWave[32];
    Vector m_vMinimapMins;
    Vector m_vMinimapMaxs;
    float32 m_MinimapVerticalSectionHeights[8];
    uint64_t m_ullLocalMatchID;
    int32_t m_nEndMatchMapGroupVoteTypes[10];
    int32_t m_nEndMatchMapGroupVoteOptions[10];
    int32_t m_nEndMatchMapVoteWinner;
    int32_t m_iNumConsecutiveCTLoses;
    int32_t m_iNumConsecutiveTerroristLoses;
    char pad_3289[0x1c];
    bool m_bHasHostageBeenTouched;
    char pad_3290[0x3];
    entity2_GameTime_t m_flIntermissionStartTime;
    entity2_GameTime_t m_flIntermissionEndTime;
    bool m_bLevelInitialized;
    char pad_3291[0x3];
    int32_t m_iTotalRoundsPlayed;
    int32_t m_iUnBalancedRounds;
    bool m_endMatchOnRoundReset;
    bool m_endMatchOnThink;
    char pad_3292[0x2];
    int32_t m_iNumTerrorist;
    int32_t m_iNumCT;
    int32_t m_iNumSpawnableTerrorist;
    int32_t m_iNumSpawnableCT;
    char pad_3293[0x4];
    char m_arrSelectedHostageSpawnIndices[0x18];
    int32_t m_nSpawnPointsRandomSeed;
    bool m_bFirstConnected;
    bool m_bCompleteReset;
    bool m_bPickNewTeamsOnReset;
    bool m_bScrambleTeamsOnRestart;
    bool m_bSwapTeamsOnRestart;
    char pad_3294[0x7];
    char m_nEndMatchTiedVotes[0x18];
    char pad_3295[0x4];
    bool m_bNeedToAskPlayersForContinueVote;
    char pad_3296[0x3];
    uint32_t m_numQueuedMatchmakingAccounts;
    float32 m_fAvgPlayerRank;
    char* m_pQueuedMatchmakingReservationString;
    uint32_t m_numTotalTournamentDrops;
    uint32_t m_numSpectatorsCountMax;
    uint32_t m_numSpectatorsCountMaxTV;
    uint32_t m_numSpectatorsCountMaxLnk;
    char pad_3297[0x8];
    int32_t m_nCTsAliveAtFreezetimeEnd;
    int32_t m_nTerroristsAliveAtFreezetimeEnd;
    bool m_bForceTeamChangeSilent;
    bool m_bLoadingRoundBackupData;
    char pad_3298[0x36];
    int32_t m_nMatchInfoShowType;
    float32 m_flMatchInfoDecidedTime;
    char pad_3299[0x18];
    int32_t mTeamDMLastWinningTeamNumber;
    float32 mTeamDMLastThinkTime;
    float32 m_flTeamDMLastAnnouncementTime;
    int32_t m_iAccountTerrorist;
    int32_t m_iAccountCT;
    int32_t m_iSpawnPointCount_Terrorist;
    int32_t m_iSpawnPointCount_CT;
    int32_t m_iMaxNumTerrorists;
    int32_t m_iMaxNumCTs;
    int32_t m_iLoserBonusMostRecentTeam;
    float32 m_tmNextPeriodicThink;
    bool m_bVoiceWonMatchBragFired;
    char pad_3300[0x3];
    float32 m_fWarmupNextChatNoticeTime;
    char pad_3301[0x4];
    int32_t m_iHostagesRescued;
    int32_t m_iHostagesTouched;
    float32 m_flNextHostageAnnouncement;
    bool m_bNoTerroristsKilled;
    bool m_bNoCTsKilled;
    bool m_bNoEnemiesKilled;
    bool m_bCanDonateWeapons;
    char pad_3302[0x4];
    float32 m_firstKillTime;
    char pad_3303[0x4];
    float32 m_firstBloodTime;
    char pad_3304[0x18];
    bool m_hostageWasInjured;
    bool m_hostageWasKilled;
    char pad_3305[0xe];
    bool m_bVoteCalled;
    bool m_bServerVoteOnReset;
    char pad_3306[0x2];
    float32 m_flVoteCheckThrottle;
    bool m_bBuyTimeEnded;
    char pad_3307[0x3];
    int32_t m_nLastFreezeEndBeep;
    bool m_bTargetBombed;
    bool m_bBombDefused;
    bool m_bMapHasBombZone;
    char pad_3308[0x4d];
    Vector m_vecMainCTSpawnPos;
    char pad_3309[0x4];
    char m_CTSpawnPointsMasterList[0x18];
    char m_TerroristSpawnPointsMasterList[0x18];
    bool m_bRespawningAllRespawnablePlayers;
    char pad_3310[0x3];
    int32_t m_iNextCTSpawnPoint;
    float32 m_flCTSpawnPointUsedTime;
    int32_t m_iNextTerroristSpawnPoint;
    float32 m_flTerroristSpawnPointUsedTime;
    char pad_3311[0x4];
    char m_CTSpawnPoints[0x18];
    char m_TerroristSpawnPoints[0x18];
    bool m_bIsUnreservedGameServer;
    char pad_3312[0x3];
    float32 m_fAutobalanceDisplayTime;
    char pad_3313[0x38];
    bool m_bAllowWeaponSwitch;
    bool m_bRoundTimeWarningTriggered;
    char pad_3314[0x2];
    entity2_GameTime_t m_phaseChangeAnnouncementTime;
    float32 m_fNextUpdateTeamClanNamesTime;
    entity2_GameTime_t m_flLastThinkTime;
    float32 m_fAccumulatedRoundOffDamage;
    int32_t m_nShorthandedBonusLastEvalRound;
    char pad_3315[0x48];
    int32_t m_nMatchAbortedEarlyReason;
    bool m_bHasTriggeredRoundStartMusic;
    bool m_bSwitchingTeamsAtRoundReset;
    char pad_3316[0x1a];
    server_CCSGameModeRules* m_pGameModeRules;
    KeyValues3 m_BtGlobalBlackboard;
    char pad_3317[0x88];
    char m_hPlayerResource[0x4];
    char pad_3318[0x4];
    server_CRetakeGameRules m_RetakeRules;
    char m_arrTeamUniqueKillWeaponsMatch[0x18];
    bool m_bTeamLastKillUsedUniqueWeaponMatch[4];
    char pad_3319[0x24];
    uint8_t m_nMatchEndCount;
    char pad_3320[0x3];
    int32_t m_nTTeamIntroVariant;
    int32_t m_nCTTeamIntroVariant;
    bool m_bTeamIntroPeriod;
    char pad_3321[0x3];
    entity2_GameTime_t m_fTeamIntroPeriodEnd;
    bool m_bPlayedTeamIntroVO;
    char pad_3322[0x3];
    int32_t m_iRoundEndWinnerTeam;
    int32_t m_eRoundEndReason;
    bool m_bRoundEndShowTimerDefend;
    char pad_3323[0x3];
    int32_t m_iRoundEndTimerTime;
    CUtlString m_sRoundEndFunFactToken;
    CPlayerSlot m_iRoundEndFunFactPlayerSlot;
    int32_t m_iRoundEndFunFactData1;
    int32_t m_iRoundEndFunFactData2;
    int32_t m_iRoundEndFunFactData3;
    CUtlString m_sRoundEndMessage;
    int32_t m_iRoundEndPlayerCount;
    bool m_bRoundEndNoMusic;
    char pad_3324[0x3];
    int32_t m_iRoundEndLegacy;
    uint8_t m_nRoundEndCount;
    char pad_3325[0x3];
    int32_t m_iRoundStartRoundNumber;
    uint8_t m_nRoundStartCount;
    char pad_3326[0x400b];
    float64 m_flLastPerfSampleTime;
    char pad_3327[0xc018];
};
