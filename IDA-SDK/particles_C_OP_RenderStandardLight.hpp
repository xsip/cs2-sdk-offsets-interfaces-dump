#pragma once
#include "enums.hpp"
#include "typedefs.hpp"

class particleslib_CParticleCollectionFloatInput;
class particleslib_CParticleCollectionVecInput;
#include "particleslib_CParticleCollectionFloatInput.hpp"
#include "particles_CParticleVisibilityInputs.hpp"
#include "particleslib_CParticleCollectionVecInput.hpp"
#include "particleslib_CParticleCollectionFloatInput.hpp"
#include "particleslib_CParticleCollectionFloatInput.hpp"
#include "particleslib_CParticleCollectionFloatInput.hpp"
#include "particleslib_CParticleCollectionFloatInput.hpp"
#include "particleslib_CParticleCollectionFloatInput.hpp"
#include "particleslib_CParticleCollectionFloatInput.hpp"
#include "particleslib_CParticleCollectionFloatInput.hpp"
#include "particleslib_CParticleCollectionRendererFloatInput.hpp"
#include "particles_ParticleAttributeIndex_t.hpp"

class particles_C_OP_RenderStandardLight {
    char vTable1798[0x8];
    particleslib_CParticleCollectionFloatInput m_flOpStrength;
    particles_ParticleEndcapMode_t m_nOpEndCapState;
    float32 m_flOpStartFadeInTime;
    float32 m_flOpEndFadeInTime;
    float32 m_flOpStartFadeOutTime;
    float32 m_flOpEndFadeOutTime;
    float32 m_flOpFadeOscillatePeriod;
    bool m_bNormalizeToStopTime;
    char pad_1799[0x3];
    float32 m_flOpTimeOffsetMin;
    float32 m_flOpTimeOffsetMax;
    int32_t m_nOpTimeOffsetSeed;
    int32_t m_nOpTimeScaleSeed;
    float32 m_flOpTimeScaleMin;
    float32 m_flOpTimeScaleMax;
    char pad_1800[0x2];
    bool m_bDisableOperator;
    char pad_1801[0x1];
    CUtlString m_Notes;
    char end_pad_1802[0x18];
    particles_CParticleVisibilityInputs VisibilityInputs;
    bool m_bCannotBeRefracted;
    bool m_bSkipRenderingOnMobile;
    char end_pad_1787[0x6];
    particles_ParticleLightTypeChoiceList_t m_nLightType;
    char pad_2258[0x4];
    particleslib_CParticleCollectionVecInput m_vecColorScale;
    particles_ParticleColorBlendType_t m_nColorBlendType;
    char pad_2259[0x4];
    particleslib_CParticleCollectionFloatInput m_flIntensity;
    bool m_bCastShadows;
    char pad_2260[0x7];
    particleslib_CParticleCollectionFloatInput m_flTheta;
    particleslib_CParticleCollectionFloatInput m_flPhi;
    particleslib_CParticleCollectionFloatInput m_flRadiusMultiplier;
    particles_StandardLightingAttenuationStyle_t m_nAttenuationStyle;
    char pad_2261[0x4];
    particleslib_CParticleCollectionFloatInput m_flFalloffLinearity;
    particleslib_CParticleCollectionFloatInput m_flFiftyPercentFalloff;
    particleslib_CParticleCollectionFloatInput m_flZeroPercentFalloff;
    bool m_bRenderDiffuse;
    bool m_bRenderSpecular;
    char pad_2262[0x6];
    CUtlString m_lightCookie;
    int32_t m_nPriority;
    particles_ParticleLightFogLightingMode_t m_nFogLightingMode;
    particleslib_CParticleCollectionRendererFloatInput m_flFogContribution;
    particles_ParticleLightBehaviorChoiceList_t m_nCapsuleLightBehavior;
    float32 m_flCapsuleLength;
    bool m_bReverseOrder;
    bool m_bClosedLoop;
    char pad_2263[0x2];
    particles_ParticleAttributeIndex_t m_nPrevPntSource;
    float32 m_flMaxLength;
    float32 m_flMinLength;
    bool m_bIgnoreDT;
    char pad_2264[0x3];
    float32 m_flConstrainRadiusToLengthRatio;
    float32 m_flLengthScale;
    float32 m_flLengthFadeInTime;
    char end_pad_2265[0x8];
};
