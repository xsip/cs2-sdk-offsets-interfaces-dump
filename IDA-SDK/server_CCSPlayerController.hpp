#pragma once
#include "enums.hpp"
#include "typedefs.hpp"

class entity2_CEntityIdentity;
class entity2_CScriptComponent;
class server_CBodyComponent;
class server_CCollisionProperty;
class server_CPulseGraphInstance_ServerEntity;
class server_CCSPlayerController_InGameMoneyServices;
class server_CCSPlayerController_InventoryServices;
class server_CCSPlayerController_ActionTrackingServices;
class server_CCSPlayerController_DamageServices;
class server_IntervalTimer;
#include "client_CNetworkTransmitComponent.hpp"
#include "entity2_GameTick_t.hpp"
#include "entity2_GameTime_t.hpp"
#include "entity2_GameTick_t.hpp"
#include "entity2_CEntityIOOutput.hpp"
#include "client_CNetworkVelocityVector.hpp"
#include "entity2_CEntityIOOutput.hpp"
#include "entity2_CEntityIOOutput.hpp"
#include "entity2_CEntityIOOutput.hpp"
#include "entity2_CEntityIOOutput.hpp"
#include "entity2_GameTime_t.hpp"
#include "entity2_GameTime_t.hpp"
#include "entity2_GameTime_t.hpp"
#include "server_IntervalTimer.hpp"
#include "entity2_GameTime_t.hpp"
#include "entity2_GameTime_t.hpp"

class server_CCSPlayerController {
    char vTable723[0x8];
    CUtlSymbolLarge m_iszPrivateVScripts;
    entity2_CEntityIdentity* m_pEntity;
    char pad_724[0x18];
    entity2_CScriptComponent* m_CScriptComponent;
    server_CBodyComponent* m_CBodyComponent;
    client_CNetworkTransmitComponent m_NetworkTransmitComponent;
    char pad_2794[0x40];
    char m_aThinkFunctions[0x18];
    int32_t m_iCurrentThinkContext;
    entity2_GameTick_t m_nLastThinkTick;
    bool m_bDisabledContextThinks;
    char pad_2795[0xf];
    char m_isSteadyState[0x8];
    float32 m_lastNetworkChange;
    char pad_2796[0xc];
    char m_ResponseContexts[0x18];
    CUtlSymbolLarge m_iszResponseContext;
    char pad_2797[0x20];
    int32_t m_iHealth;
    int32_t m_iMaxHealth;
    uint8_t m_lifeState;
    char pad_2798[0x3];
    float32 m_flDamageAccumulator;
    bool m_bTakesDamage;
    char pad_2799[0x7];
    client_TakeDamageFlags_t m_nTakeDamageFlags;
    client_EntityPlatformTypes_t m_nPlatformType;
    char pad_2800[0x1];
    client_MoveCollide_t m_MoveCollide;
    client_MoveType_t m_MoveType;
    client_MoveType_t m_nActualMoveType;
    uint8_t m_nWaterTouch;
    uint8_t m_nSlimeTouch;
    bool m_bRestoreInHierarchy;
    CUtlSymbolLarge m_target;
    char m_hDamageFilter[0x4];
    char pad_2801[0x4];
    CUtlSymbolLarge m_iszDamageFilterName;
    float32 m_flMoveDoneTime;
    CUtlStringToken m_nSubclassID;
    char pad_2802[0x8];
    float32 m_flAnimTime;
    float32 m_flSimulationTime;
    entity2_GameTime_t m_flCreateTime;
    bool m_bClientSideRagdoll;
    uint8_t m_ubInterpolationFrame;
    char pad_2803[0x2];
    Vector m_vPrevVPhysicsUpdatePos;
    uint8_t m_iTeamNum;
    char pad_2804[0x3];
    CUtlSymbolLarge m_iGlobalname;
    int32_t m_iSentToClients;
    float32 m_flSpeed;
    CUtlString m_sUniqueHammerID;
    uint32_t m_spawnflags;
    entity2_GameTick_t m_nNextThinkTick;
    int32_t m_nSimulationTick;
    char pad_2805[0x4];
    entity2_CEntityIOOutput m_OnKilled;
    uint32_t m_fFlags;
    Vector m_vecAbsVelocity;
    client_CNetworkVelocityVector m_vecVelocity;
    char pad_2806[0x8];
    Vector m_vecBaseVelocity;
    int32_t m_nPushEnumCount;
    server_CCollisionProperty* m_pCollision;
    char m_hEffectEntity[0x4];
    char m_hOwnerEntity[0x4];
    uint32_t m_fEffects;
    char m_hGroundEntity[0x4];
    int32_t m_nGroundBodyIndex;
    float32 m_flFriction;
    float32 m_flElasticity;
    float32 m_flGravityScale;
    float32 m_flTimeScale;
    float32 m_flWaterLevel;
    bool m_bGravityDisabled;
    bool m_bAnimatedEveryTick;
    char pad_2807[0x2];
    float32 m_flActualGravityScale;
    bool m_bGravityActuallyDisabled;
    bool m_bDisableLowViolence;
    uint8_t m_nWaterType;
    char pad_2808[0x1];
    int32_t m_iEFlags;
    entity2_CEntityIOOutput m_OnUser1;
    entity2_CEntityIOOutput m_OnUser2;
    entity2_CEntityIOOutput m_OnUser3;
    entity2_CEntityIOOutput m_OnUser4;
    int32_t m_iInitialTeamNum;
    entity2_GameTime_t m_flNavIgnoreUntilTime;
    QAngle m_vecAngVelocity;
    bool m_bNetworkQuantizeOriginAndAngles;
    bool m_bLagCompensate;
    char pad_2809[0x2];
    char m_pBlocker[0x4];
    float32 m_flLocalTime;
    float32 m_flVPhysicsUpdateLocalTime;
    client_BloodType m_nBloodType;
    server_CPulseGraphInstance_ServerEntity* m_pPulseGraphInstance;
    char vTable2929[0x8];
    uint64_t m_nInButtonsWhichAreToggles;
    uint32_t m_nTickBase;
    char pad_2930[0x24];
    char m_hPawn[0x4];
    bool m_bKnownTeamMismatch;
    char pad_2931[0x3];
    CSplitScreenSlot m_nSplitScreenSlot;
    char m_hSplitOwner[0x4];
    char m_hSplitScreenPlayers[0x18];
    bool m_bIsHLTV;
    char pad_2932[0x3];
    client_PlayerConnectedState m_iConnected;
    char m_iszPlayerName[128];
    CUtlString m_szNetworkIDString;
    float32 m_fLerpTime;
    bool m_bLagCompensation;
    bool m_bPredict;
    char pad_2933[0x6];
    bool m_bIsLowViolence;
    bool m_bGamePaused;
    char pad_2934[0x13a];
    client_ChatIgnoreType_t m_iIgnoreGlobalChat;
    float32 m_flLastPlayerTalkTime;
    float32 m_flLastEntitySteadyState;
    int32_t m_nAvailableEntitySteadyState;
    bool m_bHasAnySteadyStateEnts;
    char pad_2935[0xf];
    uint64_t m_steamID;
    bool m_bNoClipEnabled;
    char pad_2936[0x3];
    uint32_t m_iDesiredFOV;
    char end_pad_2937[0xb8];
    char vTable3354[0x10];
    server_CCSPlayerController_InGameMoneyServices* m_pInGameMoneyServices;
    server_CCSPlayerController_InventoryServices* m_pInventoryServices;
    server_CCSPlayerController_ActionTrackingServices* m_pActionTrackingServices;
    server_CCSPlayerController_DamageServices* m_pDamageServices;
    uint32_t m_iPing;
    bool m_bHasCommunicationAbuseMute;
    char pad_3355[0x3];
    uint32_t m_uiCommunicationMuteFlags;
    char pad_3356[0x4];
    CUtlSymbolLarge m_szCrosshairCodes;
    uint8_t m_iPendingTeamNum;
    char pad_3357[0x3];
    entity2_GameTime_t m_flForceTeamTime;
    int32_t m_iCompTeammateColor;
    bool m_bEverPlayedOnTeam;
    bool m_bAttemptedToGetColor;
    char pad_3358[0x2];
    int32_t m_iTeammatePreferredColor;
    bool m_bTeamChanged;
    bool m_bInSwitchTeam;
    bool m_bHasSeenJoinGame;
    bool m_bJustBecameSpectator;
    bool m_bSwitchTeamsOnNextRoundReset;
    bool m_bRemoveAllItemsOnNextRoundReset;
    char pad_3359[0x2];
    entity2_GameTime_t m_flLastJoinTeamTime;
    CUtlSymbolLarge m_szClan;
    int32_t m_iCoachingTeam;
    char pad_3360[0x4];
    uint64_t m_nPlayerDominated;
    uint64_t m_nPlayerDominatingMe;
    int32_t m_iCompetitiveRanking;
    int32_t m_iCompetitiveWins;
    int8_t m_iCompetitiveRankType;
    char pad_3361[0x3];
    int32_t m_iCompetitiveRankingPredicted_Win;
    int32_t m_iCompetitiveRankingPredicted_Loss;
    int32_t m_iCompetitiveRankingPredicted_Tie;
    int32_t m_nEndMatchNextMapVote;
    uint16_t m_unActiveQuestId;
    char pad_3362[0x2];
    uint32_t m_rtActiveMissionPeriod;
    client_Reason m_nQuestProgressReason;
    uint32_t m_unPlayerTvControlFlags;
    char pad_3363[0x2c];
    int32_t m_iDraftIndex;
    uint32_t m_msQueuedModeDisconnectionTimestamp;
    uint32_t m_uiAbandonRecordedReason;
    uint32_t m_eNetworkDisconnectionReason;
    bool m_bCannotBeKicked;
    bool m_bEverFullyConnected;
    bool m_bAbandonAllowsSurrender;
    bool m_bAbandonOffersInstantSurrender;
    bool m_bDisconnection1MinWarningPrinted;
    bool m_bScoreReported;
    char pad_3364[0x2];
    int32_t m_nDisconnectionTick;
    char pad_3365[0xc];
    bool m_bControllingBot;
    bool m_bHasControlledBotThisRound;
    bool m_bHasBeenControlledByPlayerThisRound;
    char pad_3366[0x1];
    int32_t m_nBotsControlledThisRound;
    bool m_bCanControlObservedBot;
    char pad_3367[0x3];
    char m_hPlayerPawn[0x4];
    char m_hObserverPawn[0x4];
    int32_t m_DesiredObserverMode;
    CEntityHandle m_hDesiredObserverTarget;
    bool m_bPawnIsAlive;
    char pad_3368[0x3];
    uint32_t m_iPawnHealth;
    int32_t m_iPawnArmor;
    bool m_bPawnHasDefuser;
    bool m_bPawnHasHelmet;
    uint16_t m_nPawnCharacterDefIndex;
    int32_t m_iPawnLifetimeStart;
    int32_t m_iPawnLifetimeEnd;
    int32_t m_iPawnBotDifficulty;
    char m_hOriginalControllerOfCurrentPawn[0x4];
    int32_t m_iScore;
    int32_t m_iRoundScore;
    int32_t m_iRoundsWon;
    uint8_t m_recentKillQueue[8];
    uint8_t m_nFirstKill;
    uint8_t m_nKillCount;
    bool m_bMvpNoMusic;
    char pad_3369[0x1];
    int32_t m_eMvpReason;
    int32_t m_iMusicKitID;
    int32_t m_iMusicKitMVPs;
    int32_t m_iMVPs;
    int32_t m_nUpdateCounter;
    float32 m_flSmoothedPing;
    char pad_3370[0x4];
    server_IntervalTimer m_lastHeldVoteTimer;
    char pad_3371[0x8];
    bool m_bShowHints;
    char pad_3372[0x3];
    int32_t m_iNextTimeCheck;
    bool m_bJustDidTeamKill;
    bool m_bPunishForTeamKill;
    bool m_bGaveTeamDamageWarning;
    bool m_bGaveTeamDamageWarningThisRound;
    char pad_3373[0x4];
    float64 m_dblLastReceivedPacketPlatFloatTime;
    entity2_GameTime_t m_LastTeamDamageWarningTime;
    entity2_GameTime_t m_LastTimePlayerWasDisconnectedForPawnsRemove;
    uint32_t m_nSuspiciousHitCount;
    uint32_t m_nNonSuspiciousHitStreak;
    char pad_3374[0xa1];
    bool m_bFireBulletsSeedSynchronized;
    char end_pad_3375[0x7e];
};
