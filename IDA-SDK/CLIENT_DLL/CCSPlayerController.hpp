#pragma once
#include "enums.hpp"
#include "typedefs.hpp"

class CEntityIdentity;
class CScriptComponent;
class CBodyComponent;
class CGameSceneNode;
class CRenderComponent;
class CCollisionProperty;
class CCSPlayerController_InGameMoneyServices;
class CCSPlayerController_InventoryServices;
class CCSPlayerController_ActionTrackingServices;
class CCSPlayerController_DamageServices;
#include "CNetworkTransmitComponent.hpp"
#include "GameTick_t.hpp"
#include "GameTime_t.hpp"
#include "GameTick_t.hpp"
#include "CNetworkVelocityVector.hpp"
#include "CNetworkVelocityVector.hpp"
#include "GameTime_t.hpp"
#include "CParticleProperty.hpp"
#include "C_CommandContext.hpp"
#include "GameTime_t.hpp"
#include "GameTime_t.hpp"

class CCSPlayerController {
    char _vtable_pad_160[0x8];
    CUtlSymbolLarge m_iszPrivateVScripts;
    CEntityIdentity* m_pEntity;
    char pad_161[0x18];
    CScriptComponent* m_CScriptComponent;
    CBodyComponent* m_CBodyComponent;
    CNetworkTransmitComponent m_NetworkTransmitComponent;
    char pad_142[0x120];
    GameTick_t m_nLastThinkTick;
    char pad_143[0x4];
    CGameSceneNode* m_pGameSceneNode;
    CRenderComponent* m_pRenderComponent;
    CCollisionProperty* m_pCollision;
    int32_t m_iMaxHealth;
    int32_t m_iHealth;
    float32 m_flDamageAccumulator;
    uint8_t m_lifeState;
    bool m_bTakesDamage;
    char pad_144[0x2];
    TakeDamageFlags_t m_nTakeDamageFlags;
    EntityPlatformTypes_t m_nPlatformType;
    uint8_t m_ubInterpolationFrame;
    char pad_145[0x2];
    char m_hSceneObjectController[0x4];
    int32_t m_nNoInterpolationTick;
    int32_t m_nVisibilityNoInterpolationTick;
    float32 m_flProxyRandomValue;
    int32_t m_iEFlags;
    uint8_t m_nWaterType;
    bool m_bInterpolateEvenWithNoModel;
    bool m_bPredictionEligible;
    bool m_bApplyLayerMatchIDToModel;
    CUtlStringToken m_tokLayerMatchID;
    CUtlStringToken m_nSubclassID;
    char pad_146[0xc];
    int32_t m_nSimulationTick;
    int32_t m_iCurrentThinkContext;
    char m_aThinkFunctions[0x18];
    bool m_bDisabledContextThinks;
    char pad_147[0x3];
    float32 m_flAnimTime;
    float32 m_flSimulationTime;
    uint8_t m_nSceneObjectOverrideFlags;
    bool m_bHasSuccessfullyInterpolated;
    bool m_bHasAddedVarsToInterpolation;
    bool m_bRenderEvenWhenNotSuccessfullyInterpolated;
    int32_t m_nInterpolationLatchDirtyFlags[2];
    uint16_t m_ListEntry[11];
    char pad_148[0x2];
    GameTime_t m_flCreateTime;
    float32 m_flSpeed;
    uint16_t m_EntClientFlags;
    bool m_bClientSideRagdoll;
    uint8_t m_iTeamNum;
    uint32_t m_spawnflags;
    GameTick_t m_nNextThinkTick;
    char pad_149[0x4];
    uint32_t m_fFlags;
    Vector m_vecAbsVelocity;
    CNetworkVelocityVector m_vecServerVelocity;
    CNetworkVelocityVector m_vecVelocity;
    char pad_150[0xb8];
    Vector m_vecBaseVelocity;
    char m_hEffectEntity[0x4];
    char m_hOwnerEntity[0x4];
    MoveCollide_t m_MoveCollide;
    MoveType_t m_MoveType;
    MoveType_t m_nActualMoveType;
    char pad_151[0x1];
    float32 m_flWaterLevel;
    uint32_t m_fEffects;
    char m_hGroundEntity[0x4];
    int32_t m_nGroundBodyIndex;
    float32 m_flFriction;
    float32 m_flElasticity;
    float32 m_flGravityScale;
    float32 m_flTimeScale;
    bool m_bAnimatedEveryTick;
    bool m_bGravityDisabled;
    char pad_152[0x2];
    GameTime_t m_flNavIgnoreUntilTime;
    uint16_t m_hThink;
    char pad_153[0xe];
    uint8_t m_fBBoxVisFlags;
    char pad_154[0x3];
    float32 m_flActualGravityScale;
    bool m_bGravityActuallyDisabled;
    bool m_bPredictable;
    bool m_bRenderWithViewModels;
    char pad_155[0x1];
    int32_t m_nFirstPredictableCommand;
    int32_t m_nLastPredictableCommand;
    char m_hOldMoveParent[0x4];
    CParticleProperty m_Particles;
    char pad_156[0x8];
    QAngle m_vecAngVelocity;
    int32_t m_DataChangeEventRef;
    char m_dependencies[0x18];
    int32_t m_nCreationTick;
    char pad_157[0x9];
    bool m_bAnimTimeChanged;
    bool m_bSimulationTimeChanged;
    char pad_158[0x9];
    CUtlString m_sUniqueHammerID;
    BloodType m_nBloodType;
    char end_pad_159[0x4];
    char _vtable_pad_187[0x8];
    C_CommandContext m_CommandContext;
    uint64_t m_nInButtonsWhichAreToggles;
    uint32_t m_nTickBase;
    char m_hPawn[0x4];
    bool m_bKnownTeamMismatch;
    char pad_188[0x3];
    char m_hPredictedPawn[0x4];
    CSplitScreenSlot m_nSplitScreenSlot;
    char m_hSplitOwner[0x4];
    char m_hSplitScreenPlayers[0x18];
    bool m_bIsHLTV;
    char pad_189[0x3];
    PlayerConnectedState m_iConnected;
    char m_iszPlayerName[128];
    char pad_190[0x8];
    uint64_t m_steamID;
    bool m_bIsLocalPlayerController;
    bool m_bNoClipEnabled;
    char pad_191[0x2];
    uint32_t m_iDesiredFOV;
    char end_pad_192[0x68];
    char _vtable_pad_265[0x10];
    CCSPlayerController_InGameMoneyServices* m_pInGameMoneyServices;
    CCSPlayerController_InventoryServices* m_pInventoryServices;
    CCSPlayerController_ActionTrackingServices* m_pActionTrackingServices;
    CCSPlayerController_DamageServices* m_pDamageServices;
    uint32_t m_iPing;
    bool m_bHasCommunicationAbuseMute;
    char pad_266[0x3];
    uint32_t m_uiCommunicationMuteFlags;
    char pad_267[0x4];
    CUtlSymbolLarge m_szCrosshairCodes;
    uint8_t m_iPendingTeamNum;
    char pad_268[0x3];
    GameTime_t m_flForceTeamTime;
    int32_t m_iCompTeammateColor;
    bool m_bEverPlayedOnTeam;
    char pad_269[0x3];
    GameTime_t m_flPreviousForceJoinTeamTime;
    char pad_270[0x4];
    CUtlSymbolLarge m_szClan;
    CUtlString m_sSanitizedPlayerName;
    int32_t m_iCoachingTeam;
    char pad_271[0x4];
    uint64_t m_nPlayerDominated;
    uint64_t m_nPlayerDominatingMe;
    int32_t m_iCompetitiveRanking;
    int32_t m_iCompetitiveWins;
    int8_t m_iCompetitiveRankType;
    char pad_272[0x3];
    int32_t m_iCompetitiveRankingPredicted_Win;
    int32_t m_iCompetitiveRankingPredicted_Loss;
    int32_t m_iCompetitiveRankingPredicted_Tie;
    int32_t m_nEndMatchNextMapVote;
    uint16_t m_unActiveQuestId;
    char pad_273[0x2];
    uint32_t m_rtActiveMissionPeriod;
    Reason m_nQuestProgressReason;
    uint32_t m_unPlayerTvControlFlags;
    char pad_274[0x2c];
    int32_t m_iDraftIndex;
    uint32_t m_msQueuedModeDisconnectionTimestamp;
    uint32_t m_uiAbandonRecordedReason;
    uint32_t m_eNetworkDisconnectionReason;
    bool m_bCannotBeKicked;
    bool m_bEverFullyConnected;
    bool m_bAbandonAllowsSurrender;
    bool m_bAbandonOffersInstantSurrender;
    bool m_bDisconnection1MinWarningPrinted;
    bool m_bScoreReported;
    char pad_275[0x2];
    int32_t m_nDisconnectionTick;
    char pad_276[0xc];
    bool m_bControllingBot;
    bool m_bHasControlledBotThisRound;
    bool m_bHasBeenControlledByPlayerThisRound;
    char pad_277[0x1];
    int32_t m_nBotsControlledThisRound;
    bool m_bCanControlObservedBot;
    char pad_278[0x3];
    char m_hPlayerPawn[0x4];
    char m_hObserverPawn[0x4];
    bool m_bPawnIsAlive;
    char pad_279[0x3];
    uint32_t m_iPawnHealth;
    int32_t m_iPawnArmor;
    bool m_bPawnHasDefuser;
    bool m_bPawnHasHelmet;
    uint16_t m_nPawnCharacterDefIndex;
    int32_t m_iPawnLifetimeStart;
    int32_t m_iPawnLifetimeEnd;
    int32_t m_iPawnBotDifficulty;
    char m_hOriginalControllerOfCurrentPawn[0x4];
    int32_t m_iScore;
    uint8_t m_recentKillQueue[8];
    uint8_t m_nFirstKill;
    uint8_t m_nKillCount;
    bool m_bMvpNoMusic;
    char pad_280[0x1];
    int32_t m_eMvpReason;
    int32_t m_iMusicKitID;
    int32_t m_iMusicKitMVPs;
    int32_t m_iMVPs;
    bool m_bIsPlayerNameDirty;
    bool m_bFireBulletsSeedSynchronized;
    char end_pad_281[0x2];
};
